From d39fdd3af96020089c1897bb52e97b202eca52ea Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Thu, 28 Mar 2024 16:04:31 +0800
Subject: [PATCH 4/5] gbm: backend-ize

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
---
 src/egl/meson.build            |  4 +--
 src/gbm/backends/dri/gbm_dri.c | 36 +++++++++++++------------
 src/gbm/meson.build            | 48 +++++-----------------------------
 3 files changed, 29 insertions(+), 59 deletions(-)

diff --git a/src/egl/meson.build b/src/egl/meson.build
index 88514d7..c30cc72 100644
--- a/src/egl/meson.build
+++ b/src/egl/meson.build
@@ -110,10 +110,10 @@ if with_dri2
     deps_for_egl += [dep_x11_xcb, dep_xcb_dri2, dep_xcb_xrandr, dep_xcb_xfixes]
   endif
   if with_gbm and not with_platform_android
+    dep_gbm = dependency('gbm')
     files_egl += files('drivers/dri2/platform_drm.c')
-    link_for_egl += libgbm
     incs_for_egl += [inc_gbm, include_directories('../gbm/main')]
-    deps_for_egl += dep_libdrm
+    deps_for_egl += [dep_libdrm, dep_gbm]
   endif
   if with_platform_wayland
     deps_for_egl += [dep_wayland_client, dep_wayland_server, dep_wayland_egl_headers]
diff --git a/src/gbm/backends/dri/gbm_dri.c b/src/gbm/backends/dri/gbm_dri.c
index 49a5f9f..42187b8 100644
--- a/src/gbm/backends/dri/gbm_dri.c
+++ b/src/gbm/backends/dri/gbm_dri.c
@@ -59,6 +59,8 @@
 #include "wayland-drm.h"
 #endif
 
+static const struct gbm_core *core;
+
 static __DRIimage *
 dri_lookup_egl_image(__DRIscreen *screen, void *image, void *data)
 {
@@ -354,13 +356,13 @@ dri_bind_extensions(struct gbm_dri_device *dri,
 static const __DRIextension **
 dri_open_driver(struct gbm_dri_device *dri)
 {
-   /* Temporarily work around dri driver libs that need symbols in libglapi
+   /* Temporarily work around dri driver libs that need symbols in libpvrglapi
     * but don't automatically link it in.
     */
    /* XXX: Library name differs on per platforms basis. Update this as
     * osx/cygwin/windows/bsd gets support for GBM..
     */
-   dlopen("libglapi.so.0", RTLD_LAZY | RTLD_GLOBAL);
+   dlopen("libpvrglapi.so.0", RTLD_LAZY | RTLD_GLOBAL);
 
    static const char *search_path_vars[] = {
       /* Read GBM_DRIVERS_PATH first for compatibility, but LIBGL_DRIVERS_PATH
@@ -680,7 +682,7 @@ static const struct gbm_dri_visual gbm_dri_visuals_table[] = {
 static int
 gbm_format_to_dri_format(uint32_t gbm_format)
 {
-   gbm_format = gbm_core.v0.format_canonicalize(gbm_format);
+   gbm_format = core->v0.format_canonicalize(gbm_format);
    for (size_t i = 0; i < ARRAY_SIZE(gbm_dri_visuals_table); i++) {
       if (gbm_dri_visuals_table[i].gbm_format == gbm_format)
          return gbm_dri_visuals_table[i].dri_image_format;
@@ -711,7 +713,7 @@ gbm_dri_is_format_supported(struct gbm_device *gbm,
    if ((usage & GBM_BO_USE_CURSOR) && (usage & GBM_BO_USE_RENDERING))
       return 0;
 
-   format = gbm_core.v0.format_canonicalize(format);
+   format = core->v0.format_canonicalize(format);
    if (gbm_format_to_dri_format(format) == 0)
       return 0;
 
@@ -748,7 +750,7 @@ gbm_dri_get_format_modifier_plane_count(struct gbm_device *gbm,
        !dri->image->queryDmaBufFormatModifierAttribs)
       return -1;
 
-   format = gbm_core.v0.format_canonicalize(format);
+   format = core->v0.format_canonicalize(format);
    if (gbm_format_to_dri_format(format) == 0)
       return -1;
 
@@ -1096,7 +1098,7 @@ gbm_dri_bo_import(struct gbm_device *gbm,
       /* GBM's GBM_FORMAT_* tokens are a strict superset of the DRI FourCC
        * tokens accepted by createImageFromFds, except for not supporting
        * the sARGB format. */
-      fourcc = gbm_core.v0.format_canonicalize(fd_data->format);
+      fourcc = core->v0.format_canonicalize(fd_data->format);
 
       image = dri->image->createImageFromFds(dri->screen,
                                              fd_data->width,
@@ -1129,7 +1131,7 @@ gbm_dri_bo_import(struct gbm_device *gbm,
       /* GBM's GBM_FORMAT_* tokens are a strict superset of the DRI FourCC
        * tokens accepted by createImageFromDmaBufs2, except for not supporting
        * the sARGB format. */
-      fourcc = gbm_core.v0.format_canonicalize(fd_data->format);
+      fourcc = core->v0.format_canonicalize(fd_data->format);
 
       image = dri->image->createImageFromDmaBufs2(dri->screen, fd_data->width,
                                                   fd_data->height, fourcc,
@@ -1260,7 +1262,7 @@ gbm_dri_bo_create(struct gbm_device *gbm,
    int dri_format;
    unsigned dri_use = 0;
 
-   format = gbm_core.v0.format_canonicalize(format);
+   format = core->v0.format_canonicalize(format);
 
    if (usage & GBM_BO_USE_WRITE || dri->image == NULL)
       return create_dumb(gbm, width, height, format, usage);
@@ -1426,7 +1428,7 @@ gbm_dri_surface_create(struct gbm_device *gbm,
    surf->base.gbm = gbm;
    surf->base.v0.width = width;
    surf->base.v0.height = height;
-   surf->base.v0.format = gbm_core.v0.format_canonicalize(format);
+   surf->base.v0.format = core->v0.format_canonicalize(format);
    surf->base.v0.flags = flags;
    if (!modifiers) {
       assert(!count);
@@ -1488,13 +1490,6 @@ dri_device_create(int fd, uint32_t gbm_backend_version)
    int ret;
    bool force_sw;
 
-   /*
-    * Since the DRI backend is built-in to the loader, the loader ABI version is
-    * guaranteed to match this backend's ABI version
-    */
-   assert(gbm_core.v0.core_version == GBM_BACKEND_ABI_VERSION);
-   assert(gbm_core.v0.core_version == gbm_backend_version);
-
    dri = calloc(1, sizeof *dri);
    if (!dri)
       return NULL;
@@ -1555,3 +1550,12 @@ struct gbm_backend gbm_dri_backend = {
    .v0.backend_name = "dri",
    .v0.create_device = dri_device_create,
 };
+
+GBM_EXPORT struct gbm_backend*
+GBM_GET_BACKEND_PROC(const struct gbm_core *gbm_core);
+	
+GBM_EXPORT struct gbm_backend*
+GBM_GET_BACKEND_PROC(const struct gbm_core *gbm_core) {
+    core = gbm_core;
+    return &gbm_dri_backend;
+}
diff --git a/src/gbm/meson.build b/src/gbm/meson.build
index df65361..a1de373 100644
--- a/src/gbm/meson.build
+++ b/src/gbm/meson.build
@@ -21,17 +21,10 @@
 inc_gbm = include_directories('.', 'main', 'backends/dri')
 
 files_gbm = files(
-  'main/backend.c',
-  'main/backend.h',
-  'main/gbm.c',
-  'main/gbm.h',
-  'main/gbmint.h',
+  'main/gbm_backend_abi.h',
 )
 deps_gbm = []
-args_gbm = [
-  '-DDEFAULT_BACKENDS_PATH="@0@"'.format(gbm_backends_path),
-]
-deps_gbm = []
+args_gbm = []
 incs_gbm = [
   include_directories('main'), inc_include, inc_src, inc_loader,
 ]
@@ -45,13 +38,13 @@ if with_platform_wayland
   incs_gbm += inc_wayland_drm
 endif
 
-libgbm_name = 'gbm'
+libgbm_name = 'pvr_gbm'
 
 if with_platform_android and get_option('platform-sdk-version') >= 30
   libgbm_name = 'gbm_mesa'
 endif
 
-libgbm = shared_library(
+pvr_gbm = shared_library(
   libgbm_name,
   files_gbm,
   include_directories : incs_gbm,
@@ -60,36 +53,9 @@ libgbm = shared_library(
   link_with : libloader,
   dependencies : [deps_gbm, dep_dl, dep_thread, idep_mesautil, idep_xmlconfig],
   gnu_symbol_visibility : 'hidden',
-  version : '1.0.0',
   install : true,
+  install_dir : gbm_backends_path,
+  name_prefix : '',
+  name_suffix : 'so',
 )
 
-if with_tests
-  abi_check = executable('gbm_abi_check', 'main/gbm_abi_check.c')
-  test('gbm-abi-check', abi_check, suite : ['gbm'])
-endif
-
-install_headers('main/gbm.h')
-
-pkg.generate(
-  name : 'gbm',
-  filebase : 'gbm',
-  description : 'Mesa gbm library',
-  version : meson.project_version(),
-  libraries : libgbm,
-  libraries_private : gbm_priv_libs,
-  variables : ['gbmbackendspath=' + gbm_backends_path],
-)
-
-if with_symbols_check
-  test(
-    'gbm-symbols-check',
-    symbols_check,
-    args : [
-      '--lib', libgbm,
-      '--symbols-file', files('gbm-symbols.txt'),
-      symbols_check_args,
-    ],
-    suite : ['gbm'],
-  )
-endif
-- 
2.45.2

