From 6d5541e01fb36dc11dfd9f2e9993c207af0249b0 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Sat, 17 May 2025 13:22:25 +0800
Subject: [PATCH 2/2] Revert "vulkan/wsi: make the display FD available"

This reverts commit c10d00d1ef1037509622950619af9febcddf50c1.

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
---
 src/vulkan/wsi/meson.build           |   1 -
 src/vulkan/wsi/wsi_common.c          |  36 ++-----
 src/vulkan/wsi/wsi_common.h          |  14 ---
 src/vulkan/wsi/wsi_common_display.c  |   4 +-
 src/vulkan/wsi/wsi_common_drm.c      |  25 +----
 src/vulkan/wsi/wsi_common_headless.c |   5 +-
 src/vulkan/wsi/wsi_common_private.h  |  11 +--
 src/vulkan/wsi/wsi_common_wayland.c  | 134 ++-------------------------
 src/vulkan/wsi/wsi_common_win32.cpp  |   4 +-
 src/vulkan/wsi/wsi_common_x11.c      |  26 +-----
 10 files changed, 33 insertions(+), 227 deletions(-)

diff --git a/src/vulkan/wsi/meson.build b/src/vulkan/wsi/meson.build
index 6c08449aebf..c8206eac996 100644
--- a/src/vulkan/wsi/meson.build
+++ b/src/vulkan/wsi/meson.build
@@ -31,7 +31,6 @@ endif
 
 if with_platform_wayland
   files_vulkan_wsi += files('wsi_common_wayland.c')
-  files_vulkan_wsi += [wayland_drm_client_protocol_h, wayland_drm_protocol_c]
   files_vulkan_wsi += wp_files['linux-dmabuf-unstable-v1']
   files_vulkan_wsi += wp_files['presentation-time']
   files_vulkan_wsi += wp_files['tearing-control-v1']
diff --git a/src/vulkan/wsi/wsi_common.c b/src/vulkan/wsi/wsi_common.c
index c167e0fb1d6..b3ff5f2c6f2 100644
--- a/src/vulkan/wsi/wsi_common.c
+++ b/src/vulkan/wsi/wsi_common.c
@@ -420,7 +420,6 @@ static VkResult
 configure_image(const struct wsi_swapchain *chain,
                 const VkSwapchainCreateInfoKHR *pCreateInfo,
                 const struct wsi_base_image_params *params,
-                UNUSED int display_fd,
                 struct wsi_image_info *info)
 {
    switch (params->image_type) {
@@ -433,8 +432,7 @@ configure_image(const struct wsi_swapchain *chain,
    case WSI_IMAGE_TYPE_DRM: {
       const struct wsi_drm_image_params *drm_params =
          container_of(params, const struct wsi_drm_image_params, base);
-      return wsi_drm_configure_image(chain, pCreateInfo, drm_params,
-                                     display_fd, info);
+      return wsi_drm_configure_image(chain, pCreateInfo, drm_params, info);
    }
 #endif
 #ifdef _WIN32
@@ -481,8 +479,7 @@ wsi_swapchain_init(const struct wsi_device *wsi,
                    VkDevice _device,
                    const VkSwapchainCreateInfoKHR *pCreateInfo,
                    const struct wsi_base_image_params *image_params,
-                   const VkAllocationCallbacks *pAllocator,
-                   int display_fd)
+                   const VkAllocationCallbacks *pAllocator)
 {
    VkResult result;
 
@@ -540,7 +537,7 @@ wsi_swapchain_init(const struct wsi_device *wsi,
    }
 
    result = configure_image(chain, pCreateInfo, image_params,
-                            display_fd, &chain->image_info);
+                            &chain->image_info);
    if (result != VK_SUCCESS)
       goto fail;
 
@@ -643,7 +640,6 @@ VkResult
 wsi_configure_image(const struct wsi_swapchain *chain,
                     const VkSwapchainCreateInfoKHR *pCreateInfo,
                     VkExternalMemoryHandleTypeFlags handle_types,
-                    int display_fd,
                     struct wsi_image_info *info)
 {
    memset(info, 0, sizeof(*info));
@@ -702,12 +698,6 @@ wsi_configure_image(const struct wsi_swapchain *chain,
    };
    __vk_append_struct(&info->create, &info->wsi);
 
-   info->wsi2 = (struct wsi_image_create_info2) {
-      .sType = VK_STRUCTURE_TYPE_WSI_IMAGE_CREATE_INFO2_MESA,
-      .display_fd = display_fd,
-   };
-   __vk_append_struct(&info->create, &info->wsi2);
-
    if (pCreateInfo->flags & VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR) {
       info->create.flags |= VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT |
                             VK_IMAGE_CREATE_EXTENDED_USAGE_BIT;
@@ -773,7 +763,6 @@ wsi_destroy_image_info(const struct wsi_swapchain *chain,
 VkResult
 wsi_create_image(const struct wsi_swapchain *chain,
                  const struct wsi_image_info *info,
-                 int display_fd,
                  struct wsi_image *image)
 {
    const struct wsi_device *wsi = chain->wsi;
@@ -790,7 +779,7 @@ wsi_create_image(const struct wsi_swapchain *chain,
    if (result != VK_SUCCESS)
       goto fail;
 
-   result = info->create_mem(chain, info, display_fd, image);
+   result = info->create_mem(chain, info, image);
    if (result != VK_SUCCESS)
       goto fail;
 
@@ -1905,8 +1894,7 @@ wsi_create_buffer_blit_context(const struct wsi_swapchain *chain,
                                const struct wsi_image_info *info,
                                struct wsi_image *image,
                                VkExternalMemoryHandleTypeFlags handle_types,
-                               bool implicit_sync,
-                               int display_fd)
+                               bool implicit_sync)
 {
    assert(chain->blit.type == WSI_SWAPCHAIN_BUFFER_BLIT);
 
@@ -1972,13 +1960,6 @@ wsi_create_buffer_blit_context(const struct wsi_swapchain *chain,
          .handleTypes = handle_types,
       };
       __vk_append_struct(&buf_mem_info, &memory_export_info);
-
-      struct wsi_memory_allocate_info2 memory_wsi_info2 = {
-         .sType = VK_STRUCTURE_TYPE_WSI_MEMORY_ALLOCATE_INFO2_MESA,
-         .pNext = &memory_wsi_info,
-         .display_fd = display_fd,
-      };
-      __vk_append_struct(&buf_mem_info, &memory_wsi_info2);
    }
 
    result = wsi->AllocateMemory(chain->device, &buf_mem_info,
@@ -2221,7 +2202,6 @@ wsi_configure_image_blit_image(UNUSED const struct wsi_swapchain *chain,
 static VkResult
 wsi_create_cpu_linear_image_mem(const struct wsi_swapchain *chain,
                                 const struct wsi_image_info *info,
-                                int display_fd,
                                 struct wsi_image *image)
 {
    const struct wsi_device *wsi = chain->wsi;
@@ -2287,14 +2267,12 @@ wsi_create_cpu_linear_image_mem(const struct wsi_swapchain *chain,
 static VkResult
 wsi_create_cpu_buffer_image_mem(const struct wsi_swapchain *chain,
                                 const struct wsi_image_info *info,
-                                int display_fd,
                                 struct wsi_image *image)
 {
    VkResult result;
 
    result = wsi_create_buffer_blit_context(chain, info, image, 0,
-                                           false /* implicit_sync */,
-                                           display_fd);
+                                           false /* implicit_sync */);
    if (result != VK_SUCCESS)
       return result;
 
@@ -2334,7 +2312,7 @@ wsi_configure_cpu_image(const struct wsi_swapchain *chain,
       handle_types = VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT;
 
    VkResult result = wsi_configure_image(chain, pCreateInfo,
-                                         handle_types, -1, info);
+                                         handle_types, info);
    if (result != VK_SUCCESS)
       return result;
 
diff --git a/src/vulkan/wsi/wsi_common.h b/src/vulkan/wsi/wsi_common.h
index 05bbdaadda5..4aeac0f395f 100644
--- a/src/vulkan/wsi/wsi_common.h
+++ b/src/vulkan/wsi/wsi_common.h
@@ -51,8 +51,6 @@ extern const struct vk_device_entrypoint_table wsi_device_entrypoints;
 #define VK_STRUCTURE_TYPE_WSI_MEMORY_ALLOCATE_INFO_MESA (VkStructureType)1000001003
 #define VK_STRUCTURE_TYPE_WSI_SURFACE_SUPPORTED_COUNTERS_MESA (VkStructureType)1000001005
 #define VK_STRUCTURE_TYPE_WSI_MEMORY_SIGNAL_SUBMIT_INFO_MESA (VkStructureType)1000001006
-#define VK_STRUCTURE_TYPE_WSI_IMAGE_CREATE_INFO2_MESA (VkStructureType)1000001007
-#define VK_STRUCTURE_TYPE_WSI_MEMORY_ALLOCATE_INFO2_MESA (VkStructureType)1000001008
 
 #define VK_STRUCTURE_TYPE_WSI_IMAGE_CREATE_INFO_MESA_cast struct wsi_image_create_info
 #define VK_STRUCTURE_TYPE_WSI_MEMORY_ALLOCATE_INFO_MESA_cast struct wsi_memory_allocate_info
@@ -94,18 +92,6 @@ struct wsi_memory_signal_submit_info {
     VkDeviceMemory memory;
 };
 
-struct wsi_image_create_info2 {
-    VkStructureType sType;
-    const void *pNext;
-    int display_fd;
-};
-
-struct wsi_memory_allocate_info2 {
-    VkStructureType sType;
-    const void *pNext;
-    int display_fd;
-};
-
 struct wsi_interface;
 struct vk_instance;
 
diff --git a/src/vulkan/wsi/wsi_common_display.c b/src/vulkan/wsi/wsi_common_display.c
index d2f1c69da85..9ab9189e03c 100644
--- a/src/vulkan/wsi/wsi_common_display.c
+++ b/src/vulkan/wsi/wsi_common_display.c
@@ -1323,7 +1323,7 @@ wsi_display_image_init(struct wsi_swapchain *drv_chain,
       return VK_ERROR_DEVICE_LOST;
 
    VkResult result = wsi_create_image(&chain->base, &chain->base.image_info,
-                                      wsi->fd, &image->base);
+                                      &image->base);
    if (result != VK_SUCCESS)
       return result;
 
@@ -2296,7 +2296,7 @@ wsi_display_surface_create_swapchain(
 
    VkResult result = wsi_swapchain_init(wsi_device, &chain->base, device,
                                         create_info, &image_params.base,
-                                        allocator, wsi->fd);
+                                        allocator);
    if (result != VK_SUCCESS) {
       pthread_cond_destroy(&chain->present_id_cond);
       pthread_mutex_destroy(&chain->present_id_mutex);
diff --git a/src/vulkan/wsi/wsi_common_drm.c b/src/vulkan/wsi/wsi_common_drm.c
index 9fb802cb2ed..b64ec68311e 100644
--- a/src/vulkan/wsi/wsi_common_drm.c
+++ b/src/vulkan/wsi/wsi_common_drm.c
@@ -305,7 +305,6 @@ get_modifier_props(const struct wsi_image_info *info, uint64_t modifier)
 static VkResult
 wsi_create_native_image_mem(const struct wsi_swapchain *chain,
                             const struct wsi_image_info *info,
-                            int display_fd,
                             struct wsi_image *image);
 
 static VkResult
@@ -314,7 +313,6 @@ wsi_configure_native_image(const struct wsi_swapchain *chain,
                            uint32_t num_modifier_lists,
                            const uint32_t *num_modifiers,
                            const uint64_t *const *modifiers,
-                           int display_fd,
                            struct wsi_image_info *info)
 {
    const struct wsi_device *wsi = chain->wsi;
@@ -322,8 +320,7 @@ wsi_configure_native_image(const struct wsi_swapchain *chain,
    VkExternalMemoryHandleTypeFlags handle_type =
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT;
 
-   VkResult result = wsi_configure_image(chain, pCreateInfo, handle_type,
-                                         display_fd, info);
+   VkResult result = wsi_configure_image(chain, pCreateInfo, handle_type, info);
    if (result != VK_SUCCESS)
       return result;
 
@@ -477,7 +474,6 @@ wsi_init_image_dmabuf_fd(const struct wsi_swapchain *chain,
 static VkResult
 wsi_create_native_image_mem(const struct wsi_swapchain *chain,
                             const struct wsi_image_info *info,
-                            int display_fd,
                             struct wsi_image *image)
 {
    const struct wsi_device *wsi = chain->wsi;
@@ -491,14 +487,9 @@ wsi_create_native_image_mem(const struct wsi_swapchain *chain,
       .pNext = NULL,
       .implicit_sync = true,
    };
-   const struct wsi_memory_allocate_info2 memory_wsi_info2 = {
-      .sType = VK_STRUCTURE_TYPE_WSI_MEMORY_ALLOCATE_INFO2_MESA,
-      .pNext = &memory_wsi_info,
-      .display_fd = display_fd,
-   };
    const VkExportMemoryAllocateInfo memory_export_info = {
       .sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
-      .pNext = &memory_wsi_info2,
+      .pNext = &memory_wsi_info,
       .handleTypes = VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
    };
    const VkMemoryDedicatedAllocateInfo memory_dedicated_info = {
@@ -578,13 +569,12 @@ wsi_create_native_image_mem(const struct wsi_swapchain *chain,
 static VkResult
 wsi_create_prime_image_mem(const struct wsi_swapchain *chain,
                            const struct wsi_image_info *info,
-                           int display_fd,
                            struct wsi_image *image)
 {
    VkResult result =
       wsi_create_buffer_blit_context(chain, info, image,
                                      VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
-                                     true, display_fd);
+                                     true);
    if (result != VK_SUCCESS)
       return result;
 
@@ -603,12 +593,10 @@ wsi_configure_prime_image(UNUSED const struct wsi_swapchain *chain,
                           const VkSwapchainCreateInfoKHR *pCreateInfo,
                           bool use_modifier,
                           wsi_memory_type_select_cb select_buffer_memory_type,
-                          int display_fd,
                           struct wsi_image_info *info)
 {
    VkResult result = wsi_configure_image(chain, pCreateInfo,
-                                         0 /* handle_types */, display_fd,
-                                         info);
+                                         0 /* handle_types */, info);
    if (result != VK_SUCCESS)
       return result;
 
@@ -641,7 +629,6 @@ VkResult
 wsi_drm_configure_image(const struct wsi_swapchain *chain,
                         const VkSwapchainCreateInfoKHR *pCreateInfo,
                         const struct wsi_drm_image_params *params,
-                        int display_fd,
                         struct wsi_image_info *info)
 {
    assert(params->base.image_type == WSI_IMAGE_TYPE_DRM);
@@ -652,14 +639,12 @@ wsi_drm_configure_image(const struct wsi_swapchain *chain,
          params->same_gpu ? wsi_select_device_memory_type :
                             prime_select_buffer_memory_type;
       return wsi_configure_prime_image(chain, pCreateInfo, use_modifier,
-                                       select_buffer_memory_type,
-                                       display_fd, info);
+                                       select_buffer_memory_type, info);
    } else {
       return wsi_configure_native_image(chain, pCreateInfo,
                                         params->num_modifier_lists,
                                         params->num_modifiers,
                                         params->modifiers,
-                                        display_fd,
                                         info);
    }
 }
diff --git a/src/vulkan/wsi/wsi_common_headless.c b/src/vulkan/wsi/wsi_common_headless.c
index b33d8eab20e..a1e63336986 100644
--- a/src/vulkan/wsi/wsi_common_headless.c
+++ b/src/vulkan/wsi/wsi_common_headless.c
@@ -416,7 +416,6 @@ get_modifier_props(const struct wsi_image_info *info, uint64_t modifier)
 static VkResult
 wsi_create_null_image_mem(const struct wsi_swapchain *chain,
                           const struct wsi_image_info *info,
-                          int display_fd,
                           struct wsi_image *image)
 {
    const struct wsi_device *wsi = chain->wsi;
@@ -534,7 +533,7 @@ wsi_headless_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
    }
 
    result = wsi_swapchain_init(wsi_device, &chain->base, device,
-                               pCreateInfo, &drm_params.base, pAllocator, -1);
+                               pCreateInfo, &drm_params.base, pAllocator);
    if (result != VK_SUCCESS) {
       pthread_cond_destroy(&chain->present_id_cond);
       pthread_mutex_destroy(&chain->present_id_mutex);
@@ -556,7 +555,7 @@ wsi_headless_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
 
 
    for (uint32_t i = 0; i < chain->base.image_count; i++) {
-      result = wsi_create_image(&chain->base, &chain->base.image_info, -1,
+      result = wsi_create_image(&chain->base, &chain->base.image_info,
                                 &chain->images[i].base);
       if (result != VK_SUCCESS) {
          chain->images[i].base.image = VK_NULL_HANDLE;
diff --git a/src/vulkan/wsi/wsi_common_private.h b/src/vulkan/wsi/wsi_common_private.h
index a2cfafe8d4e..140e3f94b8a 100644
--- a/src/vulkan/wsi/wsi_common_private.h
+++ b/src/vulkan/wsi/wsi_common_private.h
@@ -80,7 +80,6 @@ typedef uint32_t (*wsi_memory_type_select_cb)(const struct wsi_device *wsi,
 struct wsi_image_info {
    VkImageCreateInfo create;
    struct wsi_image_create_info wsi;
-   struct wsi_image_create_info2 wsi2;
    VkExternalMemoryImageCreateInfo ext_mem;
    VkImageFormatListCreateInfo format_list;
    VkImageDrmFormatModifierListCreateInfoEXT drm_mod_list;
@@ -106,7 +105,6 @@ struct wsi_image_info {
 
    VkResult (*create_mem)(const struct wsi_swapchain *chain,
                           const struct wsi_image_info *info,
-                          int display_fd,
                           struct wsi_image *image);
 
    VkResult (*finish_create)(const struct wsi_swapchain *chain,
@@ -216,8 +214,7 @@ wsi_swapchain_init(const struct wsi_device *wsi,
                    VkDevice device,
                    const VkSwapchainCreateInfoKHR *pCreateInfo,
                    const struct wsi_base_image_params *image_params,
-                   const VkAllocationCallbacks *pAllocator,
-                   int display_fd);
+                   const VkAllocationCallbacks *pAllocator);
 
 enum VkPresentModeKHR
 wsi_swapchain_get_present_mode(struct wsi_device *wsi,
@@ -247,7 +244,6 @@ VkResult
 wsi_drm_configure_image(const struct wsi_swapchain *chain,
                         const VkSwapchainCreateInfoKHR *pCreateInfo,
                         const struct wsi_drm_image_params *params,
-                        int display_fd,
                         struct wsi_image_info *info);
 
 VkResult
@@ -271,8 +267,7 @@ wsi_create_buffer_blit_context(const struct wsi_swapchain *chain,
                                const struct wsi_image_info *info,
                                struct wsi_image *image,
                                VkExternalMemoryHandleTypeFlags handle_types,
-                               bool implicit_sync,
-                               int display_fd);
+                               bool implicit_sync);
 
 VkResult
 wsi_finish_create_blit_context(const struct wsi_swapchain *chain,
@@ -293,7 +288,6 @@ VkResult
 wsi_configure_image(const struct wsi_swapchain *chain,
                     const VkSwapchainCreateInfoKHR *pCreateInfo,
                     VkExternalMemoryHandleTypeFlags handle_types,
-                    int display_fd,
                     struct wsi_image_info *info);
 void
 wsi_destroy_image_info(const struct wsi_swapchain *chain,
@@ -301,7 +295,6 @@ wsi_destroy_image_info(const struct wsi_swapchain *chain,
 VkResult
 wsi_create_image(const struct wsi_swapchain *chain,
                  const struct wsi_image_info *info,
-                 int display_fd,
                  struct wsi_image *image);
 void
 wsi_image_init(struct wsi_image *image);
diff --git a/src/vulkan/wsi/wsi_common_wayland.c b/src/vulkan/wsi/wsi_common_wayland.c
index c8cf23df933..f77c60fc295 100644
--- a/src/vulkan/wsi/wsi_common_wayland.c
+++ b/src/vulkan/wsi/wsi_common_wayland.c
@@ -33,8 +33,6 @@
 #include <poll.h>
 #include <sys/mman.h>
 #include <sys/types.h>
-#include <fcntl.h>
-#include <xf86drm.h>
 
 #include "drm-uapi/drm_fourcc.h"
 
@@ -103,7 +101,6 @@ struct wsi_wl_display {
    struct wl_event_queue *queue;
 
    struct wl_shm *wl_shm;
-   struct wl_drm *wl_drm;
    struct zwp_linux_dmabuf_v1 *wl_dmabuf;
    struct zwp_linux_dmabuf_feedback_v1 *wl_dmabuf_feedback;
    struct wp_tearing_control_manager_v1 *tearing_control_manager;
@@ -117,8 +114,6 @@ struct wsi_wl_display {
 
    /* Formats populated by zwp_linux_dmabuf_v1 or wl_shm interfaces */
    struct u_vector formats;
-   int fd;
-   bool authenticated;
 
    bool sw;
 
@@ -585,79 +580,6 @@ wl_shm_format_for_vk_format(VkFormat vk_format, bool alpha)
    }
 }
 
-static int
-open_display_device(const char *name)
-{
-   int fd;
-
-#ifdef O_CLOEXEC
-   fd = open(name, O_RDWR | O_CLOEXEC);
-   if (fd != -1 || errno != EINVAL) {
-      return fd;
-   }
-#endif
-
-   fd = open(name, O_RDWR);
-   if (fd != -1) {
-      long flags = fcntl(fd, F_GETFD);
-
-      if (flags != -1) {
-         if (!fcntl(fd, F_SETFD, flags | FD_CLOEXEC))
-             return fd;
-      }
-      close (fd);
-   }
-
-   return -1;
-}
-
-static void
-drm_handle_device(void *data, struct wl_drm *drm, const char *name)
-{
-   struct wsi_wl_display *display = data;
-   const int fd = open_display_device(name);
-
-   if (fd != -1) {
-      if (drmGetNodeTypeFromFd(fd) != DRM_NODE_RENDER) {
-         drm_magic_t magic;
-
-         if (drmGetMagic(fd, &magic)) {
-            close(fd);
-	    return;
-         }
-	 wl_drm_authenticate(drm, magic);
-      } else {
-         display->authenticated = true;
-      }
-      display->fd = fd;
-   }
-}
-
-static void
-drm_handle_format(void *data, struct wl_drm *drm, uint32_t wl_format)
-{
-}
-
-static void
-drm_handle_authenticated(void *data, struct wl_drm *drm)
-{
-   struct wsi_wl_display *display = data;
-
-   display->authenticated = true;
-}
-
-static void
-drm_handle_capabilities(void *data, struct wl_drm *drm, uint32_t capabilities)
-{
-}
-
-static const struct wl_drm_listener drm_listener = {
-   drm_handle_device,
-   drm_handle_format,
-   drm_handle_authenticated,
-   drm_handle_capabilities,
-};
-
 static void
 dmabuf_handle_format(void *data, struct zwp_linux_dmabuf_v1 *dmabuf,
                      uint32_t format)
@@ -866,15 +788,6 @@ registry_handle_global(void *data, struct wl_registry *registry,
          wl_shm_add_listener(display->wl_shm, &shm_listener, display);
       }
    } else {
-      if (strcmp(interface, "wl_drm") == 0) {
-         assert(display->wl_drm == NULL);
-         assert(version >= 2);
-
-         display->wl_drm =
-            wl_registry_bind(registry, name, &wl_drm_interface, 2);
-         wl_drm_add_listener(display->wl_drm, &drm_listener, display);
-      }
-
       if (strcmp(interface, zwp_linux_dmabuf_v1_interface.name) == 0 && version >= 3) {
          display->wl_dmabuf =
             wl_registry_bind(registry, name, &zwp_linux_dmabuf_v1_interface,
@@ -912,8 +825,6 @@ wsi_wl_display_finish(struct wsi_wl_display *display)
    u_vector_finish(&display->formats);
    if (display->wl_shm)
       wl_shm_destroy(display->wl_shm);
-   if (display->wl_drm)
-      wl_drm_destroy(display->wl_drm);
    if (display->wl_dmabuf)
       zwp_linux_dmabuf_v1_destroy(display->wl_dmabuf);
    if (display->wp_presentation_notwrapped)
@@ -924,9 +835,6 @@ wsi_wl_display_finish(struct wsi_wl_display *display)
       wl_proxy_wrapper_destroy(display->wl_display_wrapper);
    if (display->queue)
       wl_event_queue_destroy(display->queue);
-
-   if (display->fd != -1)
-      close(display->fd);
 }
 
 static VkResult
@@ -944,7 +852,6 @@ wsi_wl_display_init(struct wsi_wayland *wsi_wl,
    display->wsi_wl = wsi_wl;
    display->wl_display = wl_display;
    display->sw = sw;
-   display->fd = -1;
 
    display->queue = wl_display_create_queue(wl_display);
    if (!display->queue) {
@@ -970,13 +877,17 @@ wsi_wl_display_init(struct wsi_wayland *wsi_wl,
 
    wl_registry_add_listener(registry, &registry_listener, display);
 
-   /* Round-trip to get wl_shm, wl_drm and zwp_linux_dmabuf_v1 globals */
+   /* Round-trip to get wl_shm and zwp_linux_dmabuf_v1 globals */
    wl_display_roundtrip_queue(display->wl_display, display->queue);
    if (!display->wl_dmabuf && !display->wl_shm) {
       result = VK_ERROR_SURFACE_LOST_KHR;
       goto fail_registry;
    }
 
+   /* Caller doesn't expect us to query formats/modifiers, so return */
+   if (!get_format_list)
+      goto out;
+
    /* Default assumption */
    display->same_gpu = true;
 
@@ -1007,38 +918,14 @@ wsi_wl_display_init(struct wsi_wayland *wsi_wl,
          }
    }
 
-   if (display->wl_dmabuf && !display->wl_drm) {
-      result = VK_ERROR_SURFACE_LOST_KHR;
-      goto fail_registry;
-   }
-
-   /* Round-trip to get display FD, formats and modifiers */
-   if (display->wl_drm || get_format_list)
-      wl_display_roundtrip_queue(display->wl_display, display->queue);
-
-   if (display->wl_drm && display->fd == -1) {
-      result = VK_ERROR_SURFACE_LOST_KHR;
-      goto fail_registry;
-   }
-
-   if (display->wl_drm) {
-      wl_display_roundtrip_queue(display->wl_display, display->queue);
-
-      if (!display->authenticated) {
-         result = VK_ERROR_SURFACE_LOST_KHR;
-         goto fail_registry;
-      }
-   }
-
-   /* Caller doesn't expect us to query formats/modifiers, so return */
-   if (!get_format_list)
-      goto out;
+   /* Round-trip again to get formats and modifiers */
+   wl_display_roundtrip_queue(display->wl_display, display->queue);
 
    if (wsi_wl->wsi->force_bgra8_unorm_first) {
       /* Find BGRA8_UNORM in the list and swap it to the first position if we
        * can find it.  Some apps get confused if SRGB is first in the list.
        */
-      struct wsi_wl_format *first_fmt = u_vector_tail(&display->formats);
+      struct wsi_wl_format *first_fmt = u_vector_head(&display->formats);
       struct wsi_wl_format *f, tmp_fmt;
       f = find_format(&display->formats, VK_FORMAT_B8G8R8A8_UNORM);
       if (f) {
@@ -2237,7 +2124,7 @@ wsi_wl_image_init(struct wsi_wl_swapchain *chain,
    VkResult result;
 
    result = wsi_create_image(&chain->base, &chain->base.image_info,
-                             display->fd, &image->base);
+                             &image->base);
    if (result != VK_SUCCESS)
       return result;
 
@@ -2488,8 +2375,7 @@ wsi_wl_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
    }
 
    result = wsi_swapchain_init(wsi_device, &chain->base, device,
-                               pCreateInfo, image_params, pAllocator,
-                               chain->wsi_wl_surface->display->fd);
+                               pCreateInfo, image_params, pAllocator);
    if (result != VK_SUCCESS)
       goto fail;
 
diff --git a/src/vulkan/wsi/wsi_common_win32.cpp b/src/vulkan/wsi/wsi_common_win32.cpp
index 8f2503bec7c..ab6dedbc98e 100644
--- a/src/vulkan/wsi/wsi_common_win32.cpp
+++ b/src/vulkan/wsi/wsi_common_win32.cpp
@@ -519,7 +519,7 @@ wsi_win32_image_init(VkDevice device_h,
                      struct wsi_win32_image *image)
 {
    VkResult result = wsi_create_image(&chain->base, &chain->base.image_info,
-                                      -1, &image->base);
+                                      &image->base);
    if (result != VK_SUCCESS)
       return result;
 
@@ -838,7 +838,7 @@ wsi_win32_surface_create_swapchain(
 
    VkResult result = wsi_swapchain_init(wsi_device, &chain->base, device,
                                         create_info, image_params,
-                                        allocator, -1);
+                                        allocator);
    if (result != VK_SUCCESS) {
       vk_free(allocator, chain);
       return result;
diff --git a/src/vulkan/wsi/wsi_common_x11.c b/src/vulkan/wsi/wsi_common_x11.c
index 07a80458a7c..11468424f2b 100644
--- a/src/vulkan/wsi/wsi_common_x11.c
+++ b/src/vulkan/wsi/wsi_common_x11.c
@@ -2156,7 +2156,6 @@ static VkResult
 x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
                const VkSwapchainCreateInfoKHR *pCreateInfo,
                const VkAllocationCallbacks* pAllocator,
-               int display_fd,
                struct x11_image *image)
 {
    xcb_void_cookie_t cookie;
@@ -2166,7 +2165,7 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
    int fence_fd;
 
    result = wsi_create_image(&chain->base, &chain->base.image_info,
-                             display_fd, &image->base);
+                             &image->base);
    if (result != VK_SUCCESS)
       return result;
 
@@ -2757,19 +2756,8 @@ x11_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
       image_params = &drm_image_params.base;
    }
 
-   int display_fd;
-   if (wsi_device->sw) {
-      display_fd = -1;
-   } else {
-      xcb_screen_iterator_t screen_iter =
-         xcb_setup_roots_iterator(xcb_get_setup(conn));
-      xcb_screen_t *screen = screen_iter.data;
-
-      display_fd = wsi_dri3_open(conn, screen->root, None);
-   }
-
    result = wsi_swapchain_init(wsi_device, &chain->base, device, pCreateInfo,
-                               image_params, pAllocator, display_fd);
+                               image_params, pAllocator);
 
    for (int i = 0; i < ARRAY_SIZE(modifiers); i++)
       vk_free(pAllocator, modifiers[i]);
@@ -2871,16 +2859,11 @@ x11_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
    uint32_t image = 0;
    for (; image < chain->base.image_count; image++) {
       result = x11_image_init(device, chain, pCreateInfo, pAllocator,
-                              display_fd, &chain->images[image]);
+                              &chain->images[image]);
       if (result != VK_SUCCESS)
          goto fail_init_images;
    }
 
-   if (display_fd >= 0) {
-      close(display_fd);
-      display_fd = -1;
-   }
-
    /* Initialize queues for images in our swapchain. Possible queues are:
     * - Present queue: for images sent to the X server but not yet presented.
     * - Acquire queue: for images already presented but not yet released by the
@@ -2958,9 +2941,6 @@ fail_register:
 fail_alloc:
    vk_free(pAllocator, chain);
 
-   if (display_fd >= 0)
-     close(display_fd);
-
    return result;
 }
 
-- 
2.49.0

