diff --git a/.gitlab-ci/bare-metal/poe-off b/.gitlab-ci/bare-metal/poe-off
index 3332a7b0f3d..64517204f40 100755
--- a/.gitlab-ci/bare-metal/poe-off
+++ b/.gitlab-ci/bare-metal/poe-off
@@ -10,7 +10,7 @@ if [ -z "$BM_POE_ADDRESS" ]; then
     exit 1
 fi
 
-SNMP_KEY="SNMPv2-SMI::mib-2.105.1.1.1.3.1.$((48 + BM_POE_INTERFACE))"
+SNMP_KEY="SNMPv2-SMI::mib-2.105.1.1.1.3.1.$((${BM_POE_BASE:-0} + BM_POE_INTERFACE))"
 SNMP_OFF="i 2"
 
 flock /var/run/poe.lock -c "snmpset -v2c -r 3 -t 30 -cmesaci $BM_POE_ADDRESS $SNMP_KEY $SNMP_OFF"
diff --git a/.gitlab-ci/bare-metal/poe-on b/.gitlab-ci/bare-metal/poe-on
index de41fc9b819..c5fde69791d 100755
--- a/.gitlab-ci/bare-metal/poe-on
+++ b/.gitlab-ci/bare-metal/poe-on
@@ -10,7 +10,7 @@ if [ -z "$BM_POE_ADDRESS" ]; then
     exit 1
 fi
 
-SNMP_KEY="SNMPv2-SMI::mib-2.105.1.1.1.3.1.$((48 + BM_POE_INTERFACE))"
+SNMP_KEY="SNMPv2-SMI::mib-2.105.1.1.1.3.1.$((${BM_POE_BASE:-0} + BM_POE_INTERFACE))"
 SNMP_ON="i 1"
 SNMP_OFF="i 2"
 
diff --git a/.gitlab-ci/container/gitlab-ci.yml b/.gitlab-ci/container/gitlab-ci.yml
index 6e5e8b67c6a..fa5b6c39d4c 100644
--- a/.gitlab-ci/container/gitlab-ci.yml
+++ b/.gitlab-ci/container/gitlab-ci.yml
@@ -316,6 +316,7 @@ fedora/x86_64_build:
 
 
 .kernel+rootfs:
+  timeout: 2h  # 24.0-only change
   extends:
     - .container+build-rules
     - .debian-container
diff --git a/.gitlab-ci/piglit/piglit-traces.sh b/.gitlab-ci/piglit/piglit-traces.sh
index 13e4f4bbab2..77b36a34daa 100755
--- a/.gitlab-ci/piglit/piglit-traces.sh
+++ b/.gitlab-ci/piglit/piglit-traces.sh
@@ -15,6 +15,10 @@ mkdir -p "$RESULTS"
 
 export PIGLIT_REPLAY_DESCRIPTION_FILE="$INSTALL/$PIGLIT_TRACES_FILE"
 
+# FIXME: guess why /usr/local/bin is not included in all runners PATH.
+# Needed because yq and ci-fairy are installed there.
+PATH="/usr/local/bin:$PATH"
+
 if [ "$PIGLIT_REPLAY_SUBCOMMAND" = "profile" ]; then
     yq -iY 'del(.traces[][] | select(.label[]? == "no-perf"))' \
       "$PIGLIT_REPLAY_DESCRIPTION_FILE"
diff --git a/.gitlab-ci/test/gitlab-ci.yml b/.gitlab-ci/test/gitlab-ci.yml
index 87d379b26bc..629a1766e01 100644
--- a/.gitlab-ci/test/gitlab-ci.yml
+++ b/.gitlab-ci/test/gitlab-ci.yml
@@ -43,7 +43,7 @@ rustfmt:
     - rustfmt --verbose src/**/lib.rs
     - rustfmt --verbose src/**/main.rs
 
-clang-format:
+.clang-format:
   extends:
     - .formatting-check
     - .lint-clang-format-rules
diff --git a/.pick_status.json b/.pick_status.json
index 78f5be7b920..8a2660c6c46 100644
--- a/.pick_status.json
+++ b/.pick_status.json
@@ -1,4 +1,54574 @@
 [
+    {
+        "sha": "6f713a764fb412567caaabd9ae574822e79da383",
+        "description": "rusticl/event: fix deadlock when calling clGetEventProfilingInfo inside callbacks",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14ec84da172b40932e70693237f57da8cff47272",
+        "description": "zink+nvk/ci: add flakes seen in latest nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "679639625785d0f743cdd03802052b71e9576305",
+        "description": "radv: Optimize memcpy in write_image_descriptor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75849bd4288e8758ace159bd5c3624ebca9fcbbc",
+        "description": "radv/ci: document angle regressions from !29436 on stoney",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f32a258503b40e8e19a1498998b0d4f8b8abb488",
+        "description": "v3d: really fix CLE MMU errors on 7.1HW Rpi5",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "11dce2ac8154237b74ee3c4bd2aaec685739f0cc",
+        "notes": null
+    },
+    {
+        "sha": "07d3d557832a223c574aa205db3f4acfb04161ad",
+        "description": "v3dv: really fix CLE MMU errors on 7.1HW Rpi5",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "bb77ac983e4f8a265141855e60ad2a5637c9b74d",
+        "notes": null
+    },
+    {
+        "sha": "dcab408a6c5793fbafa0ae2a7bdc478ee91d29c9",
+        "description": "nir: remove unpack_half_flush_to_zero",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1ea0956b46778d0331e4ef60ebd2be057fd0e9f",
+        "description": "intel: fix HW generated local-id with indirect compute walker",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5e7f4ff97fb871376a828146ab3a276c1d3c4fcf",
+        "notes": null
+    },
+    {
+        "sha": "d4b37eca5f2bc5841a9f7b1e58594045548a87e2",
+        "description": "radv: do not set DX10_CLAMP on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "407cbd8c877038203407e3b3f60b831c40e73a03",
+        "description": "radv: update configuring GS_VGPR_COMP_CNT on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "671329a9345a252e4f444517a51a80ee09fc9174",
+        "description": "radv: configure SPI_SHADER_GS_OUT_CONFIG_PS on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "00361d1eceae642ae454e4f81a4aac381239f5f1",
+        "description": "radv: configure PA_SC_HISZ_CONTROL on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f078f02d1ab8a005df303ec71884365757a4c88",
+        "description": "radv: update configuring SPI_PS_IN_CONTROL on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "640613f5a36b9a1b19c8a1a56936e84c9e7f2538",
+        "description": "radv: update configuring GE_CNTL.PRIM_GRP_SIZE_GFX11 on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0412b8c02b11b0e22be454a9103ebaca65899308",
+        "description": "radv: update configuring SPI_SHADER_PGM_RSRC4_{HS,GS,PS} on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50df855fbaaa6b0dee715553da9dd5839327fb19",
+        "description": "radv: update configuring SPI_SHADER_PGM_LO_ES on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f77fde475ebc02fab80df386f5e949d4b87408a",
+        "description": "radv: update configuring SPI_SHADER_PGM_LO_LS on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8dbd35360682c504e36ed53aecad7698f2228f68",
+        "description": "radv: mark all images coherent with TC L2 on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2786928ce8d6803cabed6914e9f1a44d68e3b1d6",
+        "description": "radv: do not flush L2 metadata on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b795685da242370c270fca0747e2f59e97d58313",
+        "description": "radv: update configuring the attribute ring on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e080ce9004b0594204e63fe16438cfd5b2ae780c",
+        "description": "radv: do not enable MEM_ORDERED on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a551981869b1fb2a80d1eb9b7a32bd96de1c96b",
+        "description": "radv: configure DB_RENDER_CONTROL to zero on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1abbfb893a58a922359d9b04cb6b748b154f0c1",
+        "description": "radv: configure DB_Z_INFO.NUM_SAMPLES on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e0b838c7b4e4401ab1be324584b67656e264c3b",
+        "description": "anv: use os_get_option instead of getenv",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce43d7eb7f97bdde61b184a99940c4b03c2f0929",
+        "description": "lima: drop unrequired opt from standalone compiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "84216abd9468ab1b1431b633f716e9d0eed9c043",
+        "description": "Revert \"anv/grl: Set INTEL_FORCE_PROBE=* when running intel_clc\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "aa152ef43129dbf09f02ecb59f6b81a711967d92",
+        "notes": null
+    },
+    {
+        "sha": "43f795d19f00f62d9b8292f47ae97e976cfde17f",
+        "description": "intel/dev: If building the driver, always allow getting device info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbf5ea6b441ddec74c94acb2e7aa37bad2fd5c7d",
+        "description": "intel/dev: Silence INTEL_FORCE_PROBE warning for intel_clc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbe0f8d36d62bb11158ec50de5275bb26e0a6bbc",
+        "description": "intel/brw: Blockify convergent load_shared on Gfx11-12 as well",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b1b2d9e6d6679559340ad38a7ec9256ce40a146",
+        "description": "ir3: Add some more missing progress accumulation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc68610f465bb1bbfe9380a134b5f42bdb9e8c28",
+        "description": "ir3: assert that no further optimizations can be done if !progress",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "37057ce6917bbd8239743725bbf0eb4c66c917ef",
+        "description": "ir3: flag progress from nir_lower_io_to_scalar",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb1068c668464189516bfd8bb626cda74721e92b",
+        "description": "ci/etnaviv: skip Vulkan tests on GC2000",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d2168ce0a2b3196c8021447a6dd055e14352c7c",
+        "description": "vulkan/android: Fix YcbcrRange for !mapper4",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "930e4fa2833a2a53f6017cf87973aac42cd90f75",
+        "notes": null
+    },
+    {
+        "sha": "53df0147306b21598de0c363ab99febc0f8b4cbf",
+        "description": "tu: Fix imageview + ahb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa939898bb462433a04b994c155ca2b336b3f291",
+        "description": "broadcom: fix issue of \u2018addr\u2019 is used uninitialized",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1e52baf30212ef8fd8f8a61753d2ed1ae9448ab",
+        "description": "radeonsi/vcn: enable roi feature for vcn5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83d01892884af82f2ffefb715e9fedbeab24e201",
+        "description": "radeonsi/vcn: enable av1 encoding in vcn5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d90a1baa5d70be7312086f480a7a8372ce1399a",
+        "description": "radeonsi/vcn: add header files for vcn5 av1 tile",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5860d4348a188811633b838c6448e51e21b07856",
+        "description": "frontends/va: parsing uniform_tile_spacing flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "250c89dd6de186da07176c92bfe10c581e33f312",
+        "description": "radeonsi/vcn: share functions between vcn4/vcn5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0712a5ef9682c6367f224b432b2412af6adfaba4",
+        "description": "radeonsi/vcn: apply cdef mode to vcn5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80d3e84b815cff73097f4602d35fbb23ec9453eb",
+        "description": "radeonsi/vcn: add cdef modes for vcn5 encoding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e20acd605efea859e96f35049ff8a662dc257992",
+        "description": "radeonsi/vcn: correct tile_size_bytes_minus1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57307df76637cda99889081730a99c0c214c2293",
+        "description": "iris: Load 32-bit MMIO PREDICATE register from buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2aaa6ebba186fad610208ea5553ff93760718dba",
+        "description": "build/amd: add amd-use-llvm build option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38dfbae116722836c985179b8e5105ca9faee0ca",
+        "description": "android: Fix zink build failure",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "cfa955ed78bef56ba025a64468e8b841149fab18",
+        "notes": null
+    },
+    {
+        "sha": "21138f418cf468bd1338122fdf462b78e91f5491",
+        "description": "etnaviv/ci: skip VK piglit tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3ec480825e6b0ab790773de96261f56f953f05e0",
+        "description": "panfrost: mark tests as fixed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbb306df155fab8882cd74ad7884931f8a42802c",
+        "description": "panfrost/ci: add missing genxml trigger path",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72b1fa2ba30d708abd02e5f227683c234809d11f",
+        "description": "radv: fix configuring the number of patch control points on GFX6",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "bf936d0291bb323e233516cd592900ec8686379b",
+        "notes": null
+    },
+    {
+        "sha": "07855b0431cab4a96c4273d1757c1d6f5a09aca6",
+        "description": "intel: Compute the optimal preferred SLM size per subslice",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd368f5521129731d2aa91f0f14603d9e05c32cb",
+        "description": "anv: Set maxComputeSharedMemorySize value for Xe2 platforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ddda68bbf56ee0111d683a8bff471349dc43526b",
+        "description": "intel: Set preferred SLM allocation size >= than SLM size for Xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c4478ab4e335bc0fedae95a781ecaeb856621b95",
+        "description": "intel/dev: Add function to get the number of EUs per subslice",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df3ce7add23b11c958ea5dfee2c9e7c0765b1333",
+        "description": "intel/dev: Use topology variables to calculate strides in Xe KMD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0af347791cffe00e18ffd7ba38543ab75f1538b",
+        "description": "intel/common: Implement preferred SLM encode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f1ffbd4f51557a5727e11b9661a0987af7763d38",
+        "description": "intel/common: Implement Xe2 SLM encode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f5f71bae02f463139779b37fdc9639c3c5e70f4d",
+        "description": "intel: Move slm functions from brw_compiler.h to intel_compute_slm.c/h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "357dde47a59ee651e42822b47f59a41d81af544f",
+        "description": "docs/calendar: add 24.2 branchpoint and release candidates schedule",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d91d2c275ef916e79e1e211cb1a86562d0e76f13",
+        "description": "panfrost: change default rounding mode for samplers",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad033506aa44cabfa67618c9fb48c19a523fe952",
+        "description": "radv: Ignore mediump IO flag.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ea2bad74d563a2478be12b4034b980cf9f2fcd8",
+        "description": "nir/lower_io: Add option to implement mediump as 32-bit.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be49b02f0517d38a9445039789eebe1e0f7dcc73",
+        "description": "radv: Properly link TCS->TES IO again.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2cf7f282df720b9bf80e8bfa6ffae0d7b51a09f5",
+        "description": "ac/nir/tess: Adjust TCS->TES output mapping for linked shaders.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "902b14263744f749f8dc86f6f3eeccd312532ae3",
+        "description": "turnip/android: Use DETECT_OS_ANDROID in freedreno_rd_output",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6fee2715ce89430c180f3c821e2b3523526541a8",
+        "description": "turnip/android: Use DETECT_OS_ANDROID in tu_device",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "99753001f35ae5791b64d72efe5278795004899f",
+        "notes": null
+    },
+    {
+        "sha": "c1373239f2d793a993c1c074439701e4513e4a15",
+        "description": "radv: allow STORAGE for depth formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9af8e7a2be57d4e22ba35a44726d6875419533d",
+        "description": "radv: do not enable HTILE for depth/stencil storage images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2fd49201ee540a467bc14af79cbfe3d25537cc3",
+        "description": "radv: update VS input VGPRs on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5636af1702a574171538384711e4dc2f0fcded32",
+        "description": "radv: update SDMA resource type on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4d2578e91bd45fd814c4822eaa86645650a8e5f",
+        "description": "radv: update global graphics shader pointers on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa0f9e356f4ddcebb6bb98c9e1c31953befb7d2b",
+        "description": "radv: update NUM_THREAD_FULL bitfields on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "45b6b0cafb6e3fe259d7fa86e7a30255a1758781",
+        "description": "radv: enable GE_CNTL.DIS_PG_SIZE_ADJUST_FOR_STRIP on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ac7154189108cae0c131c15dd149607607b2c70",
+        "description": "radv: update configuring VGT_SHADER_STAGES_EN on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf936d0291bb323e233516cd592900ec8686379b",
+        "description": "radv: update configuring the number of patch control points on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6ae8c689eafafae6287a865d3cb5d2775b3db67",
+        "description": "radv: emit SQ_NON_EVENT packets after drawing with streamout on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d50725ffe70e3c100cf87b30b3e5848de96091f",
+        "description": "radv: disallow merging multiple draws into one wave on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f25b2d179e88d3e12a0868b138cffd96572e2021",
+        "description": "radv: update emitting stipple line on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "137b49ecd7644ca032a4776c4bb2f6a5c78d327f",
+        "description": "radv: update cache flush emission on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd95512e0a4d18f45236227d08a771060444f497",
+        "description": "radv: do not emulate clear state for shadowed regs on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce6557cc04856787b5e196ec43055c1c35f362a1",
+        "description": "aco: adjust loading local invocation ID for GS on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06598bc7071b0231ade0a3d4de3299c60349472b",
+        "description": "radv: update shader input arguments for GS stage on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10b97836b992a773d675b062006d46ac62c4c336",
+        "description": "radv: update emitting discard rectangles on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f518bf1cb00a6a1e1fe748cbfd97c0f90014f89b",
+        "description": "radv: update binning settings on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18e6a9a6a84782186cbd1ef944cd1329364b4b16",
+        "description": "radv: update configuring tess rings on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19de04748efc5dd21367ba4e6cd6a0e60352bbb5",
+        "description": "radv: update configuring GFX preamble on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a12373f4625d56d38788382ed8c14a973e342b14",
+        "description": "radv: update configuring MSAA state on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "78e272432b0f14e1b7ea09f0c17505bca8bdac10",
+        "description": "radv: update configuring occlusion query state on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61e78fb14347e55fe845f84c019b66d86154a365",
+        "description": "radv: update configuring some CB states on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b28107f46a612c2c15ddd48a45618b383dc05142",
+        "description": "radv: update configuring rasterization states on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c019ff0287d6ed2662639d889cc7e94e3498ac0",
+        "description": "radv: update configuring DB states on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f12c2366256ee47711ef709c96f5b0a0aa6cb31a",
+        "description": "radv: update configuring VGT states on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b4a50a3b7e4953a5ff6282c97676be298844f25",
+        "description": "radv: update configuring NGG states on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f5937dd362d623d8bd1ea02b0135b7417c32e84",
+        "description": "radv: update configuring PS states on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "65df7248ff98209fbec1b5f23b54f0a885aada14",
+        "description": "radv: update configuring viewport/scissor on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f015a4f453ad4deb76e77cc3146602d5a4457695",
+        "description": "radv: update configuring sample locations on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a8ad33caacac6d27713b8dd93b2a293d76a1bfc2",
+        "description": "radv: do not emit non-existent registers on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "087e49aadb40e6d3d779a8563c0f94e9d47ab1c4",
+        "description": "radv: enable GS_FAST_LAUNCH_2 by default on GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6ffde61cc6d8b45067fda9cda76b5a02ffe4452",
+        "description": "radv: update NUM_THREAD_FULL bitfields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "78b4d356f32b683e7a16304101e0447ef107d073",
+        "description": "ac,radv,radeonsi: add ac_gpu_info::has_tc_compatible_htile",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94a6eb20f94e4cc3f44308cd36e6242e8ee3e482",
+        "description": "amd/common: define SDMA v7.0 for GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ff1e59ba74085449b368a873beb8d80643555bd",
+        "description": "radv: only emit streamout enable for legacy streamout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6fe5129d3db36b230a3b7d86bfbbdfee47081856",
+        "description": "panvk: Override the default GetRender[in]AreaGranularityKHR()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c2b4de386668b1870a9283ce5a32e3787c7a993",
+        "description": "panvk: Make sure replay of command buffers containing Dispatch calls works",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0142fdf81c06a5f4963e4be5e82d6876b1f708fe",
+        "description": "panvk: Make sure we run the fragment shader if alpha_to_coverage is enabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98ab2d34366a130fa68f59558b40f1ca12940343",
+        "description": "panvk: Make sure we don't lose clear-only operations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1be9ee375a089f2b0933ff8a22862f81adf9306",
+        "description": "panvk: Fix dynamic rendering with images containing both depth and stencil",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c82ce475d1ecb7a51cc1dc9a8af79690a3c0a85a",
+        "description": "panvk: Skip depth/stencil attachments with non-matching aspect mask",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e17e285b8f75e4da79d210d9c0d534067b4f2dd7",
+        "description": "panvk: Force a preload when the render area is not 32x32 aligned",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ff5e56eb74c7d418bf94a085c7e4eaa83335dea",
+        "description": "panvk: Take VK_RENDERING_{RESUM,SUSPEND}ING_BIT flags into account",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f8b691c2e872535de16ccea6cd2e0f8e2cf2fdd",
+        "description": "panvk: Add a render state to panvk_cmd_graphics_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac47ee1be74fec99583dd5cdd451ca3db55cb91c",
+        "description": "meson: remove --depfile for aco_tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11e85c8ce093afa15a8ce3a9072c6c6990a1898f",
+        "description": "gallium/drivers: do not link against libgalliumvl directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9ea6a3ab79fdb2c019be9386802aafa23acd0b8",
+        "description": "wgl: link against libgalliumvl_stub",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "691a22f01505a2e858ba9fcd7c6a353e80355bce",
+        "description": "rusticl: link against libgalliumvl_stub",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6f281bcb5ee9e1ded5605a11244bd32bc08efb8",
+        "description": "meson: centralize galliumvl_stub handling",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c9c48a3ae16a72d02b928b4346a53c56e43d597",
+        "description": "gallium/vl: remove stubs which are defined in mesa_util",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "95871d48aadf4babf6b0106ff52c46b51a43b0c9",
+        "description": "gallium/vl: stub vl_video_buffer_create_as_resource",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "467fc985cdf1e4436f28d10be984cdca0cf3d2bf",
+        "description": "zink+nvk/ci: add flakes seen in latest nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd49b815ce3c3d29559911a9d49f50353f44dea6",
+        "description": "anv: optimize POSTSYNC_DATA rewrites in timestamp emissions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3984875792fa00a93ac2863681238c4bd8069111",
+        "description": "u_trace: extend tracepoint end_of_pipe bit into flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "265b2b12558c26968cb8d8cb0396b74e5fd0c9c2",
+        "description": "anv: move last compute command pointers to the state structure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d4e56d22a6525484a4e4593173febc93855b116",
+        "description": "anv: fix timestamp copies from secondary buffers",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "521c216efcc0d0292ceedb3451c5a0a1ef956083",
+        "notes": null
+    },
+    {
+        "sha": "1511b25b0fae372f446185ebbd515e52a924c2cc",
+        "description": "anv: fix utrace compute walker timestamp captures",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "521c216efcc0d0292ceedb3451c5a0a1ef956083",
+        "notes": null
+    },
+    {
+        "sha": "5ec1f7fe38223195fe3e117ac66d5244a9f176b4",
+        "description": "v3dv: shader modules are deprecated with VK_KHR_maintenance5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6825fc48f58c62ee51edbbef701718355c68c04d",
+        "description": "mailmap: Add Karmjit Mahil",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1d3fa007cabdcb69f37acdfaa8154402cb6e760",
+        "description": "intel/dev: Add BMG PCI IDs (with FORCE_PROBE set)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1964346481dbc5fad08004b26c434bf599905be5",
+        "description": "intel/dev: Add BMG device info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25e7b74712164a7d0d5b298fbdec78a678a7c79c",
+        "description": "intel/dev: Add BMG stepping mapping",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4a180639ff820494786e8f4bc4b2ea86b366728",
+        "description": "intel/dev: Add LNL stepping mapping",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06ec218fdfe5308ab924cd5aa38bcbdd3adb5531",
+        "description": "intel/dev: Add INTEL_PLATFORM_BMG enum, BMG WA info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2dbed2da0df2cb8eda8548c36756c4f679e227b",
+        "description": "intel/dev/mesa_defs.json: Update LNL WA entries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8ccf70c99bc921e50306cd48c62c9a47a8beb70",
+        "description": "anv: Properly fetch partial results in vkGetQueryPoolResults",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7bdcbe11ac507b0b96d2333aaeab5cf63de9ad10",
+        "description": "turnip: Remove workaround for CTS bug zero-sized inline uniform block",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a54f7f7dc5e23b925881b004f2f1e4f5dc996bb0",
+        "description": "v3d,v3dv: add compatibility revision in GPU name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac7971e7f466a5c44e2c3d2f5930faa4a989dd26",
+        "description": "v3d: use screen name in disk cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7900ecdfc78eb624e5a9da6e95df4ddb5a9caafb",
+        "description": "isl: Enable volumetric STC_CCS,HiZ+CCS on gfx12.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b69a34ab662243ace39e78fe0ff4506035fa0073",
+        "description": "isl: disable CCS for 3D depth/stencil surfaces when WA is applicable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1891b3db738ecfe46177c623458cbb7e4e1d3b0a",
+        "description": "intel/isl: Allow sampling from 3D HIZ_CCS_WT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "309c228bb7f68d845dda139f230fdbad64e95f40",
+        "description": "anv: 3D stencil surfaces have fewer layers for higher miplevels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1829d74ad309a4b3f3c62e7294384d4c13724518",
+        "description": "aco: fix fddx/y with uniform inf/nan input",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09fb55ea923d76d56a29ead6db3f5b9a941e635a",
+        "description": "meson: fix deprecation warning in create-android-cross-file.sh",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b8f1e95cbe2b18e814252472a4e1407d7cb076af",
+        "description": "freedreno/a6xx: fix kernel -> compute handling",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9b2780dcaf486ebf91e9743251d998f97aeccde5",
+        "notes": null
+    },
+    {
+        "sha": "b04d99d093d2de7f0ccdf0071c50aee3acb21686",
+        "description": "aco/optimizer: use p_create_vector to create mask when a copy can't be used",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b56a97374ce9c2b453b69ca001db4b0886d5ceb",
+        "description": "aco/lower_to_hw: optimize split 64bit constant copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5910a461017bae249ae98dc2d0f48c5be056c847",
+        "description": "aco/lower_to_hw: use copy_constant_sgpr for masks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23d88e68fca0dc3d6076255cfee6b88ffb73d2c9",
+        "description": "aco: small constant copy optimizations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54ad07c32a955af8e21e50680a3441bfbd688546",
+        "description": "aco/lower_to_hw: add copy_constant_sgpr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "56354c6cd790e22bc03098b9f1f158392d555343",
+        "description": "aco: don't pass program to emit_bpermute",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98a86f874327233a2509987268f72dc309c10602",
+        "description": "v3dv: lower maxVertexInputBindingStride to match vulkan runtime",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03554f18b31bd954867354a3354728e39635b8ff",
+        "description": "v3dv/device: set DescriptorUpdateAfterBind limits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6ac631c43b0b854901b698e17f30b06bc98560a",
+        "description": "v3dv/device: compute maxDescriptorSet*Limits multiplying per-stage by 4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f3c83a6b74859b391f33d7152b0ef9b627d861f",
+        "description": "v3dv: handle VkPipelineCreateFlags2CreateInfoKHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ff01962fcb5c58dad5c87cf28a2389f4672bc0d",
+        "description": "v3dv: handle VkBufferUsageFlags2CreateInfoKHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b31919f36e7a31cf5c732bc8ebba8e8195860472",
+        "description": "radv: Return a block from radv_replay_shader_arena_block",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "28be0cca4515d3af1a3d71623f312731fe1fec02",
+        "notes": null
+    },
+    {
+        "sha": "0f7bdc2d36fe916b24cc1b62601fed2077039fd8",
+        "description": "mesa/main: fixup indent",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e80201a6858b44ff5f686e8f80b4f3bca7073b8c",
+        "description": "mesa/main: prefer non-suffixed enums",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a37333305bb4dec16613ff8ec4a055b99d9d242c",
+        "description": "mesa/main: do not return _REV format for uncompressed format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9b4507faa7bbe48407ed2e9238dc94d2445de2f",
+        "description": "mesa/main: clean up switch statement",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ddd0432738fe62a4a00d76bc5b33a1dee6223ee",
+        "description": "mesa/main: clean up _mesa_uncompressed_format_to_type_and_comps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d549d4fa824559ae2a13212840c213ba708c329f",
+        "description": "mesa/main: rework GL_IMAGE_PIXEL_TYPE query",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "563b9786ced2a1469c831c4a70393045a642bdf2",
+        "description": "mesa/main: remove unused function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07a826ba938ff40a07d19c31e75892bdfe2c68a1",
+        "description": "radv: fix flushing DB meta cache on GFX11.5",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc29d2c9fcf76f70b33c1ea1795a309b5d4e3636",
+        "description": "zink: add atomic image ops to the ms deleting pass",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "90cf8d14d619967b2da7471d04bb20aa0665a482",
+        "notes": null
+    },
+    {
+        "sha": "8e60f260163b9363b5a72914764e611966b2bc46",
+        "description": "vc4/ci: skip VK piglit tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20f4cd88e14642da210dc0e44bea615fa0780f1a",
+        "description": "tu: Advertise VK_KHR_maintenance6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14d3dd8984cf67b46d14031757104b77cbbd6734",
+        "description": "tu: Add support for version 2 of all descriptor binding commands",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94e2c6d0000ad27a3c0bbbfbe8698c60218f6e93",
+        "description": "tu: Add support for NULL index buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ac6aaf52220036467c28ad6a35e4ce725e53942",
+        "description": "tu: Add support for VkBindMemoryStatusKHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06f74071725a432a5633101a1e02e9db9d139530",
+        "description": "ci: disable debian-build-testing until it can be fixed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "410ca6a3e99c5c1c9c91f0f79bf43a35103cbd98",
+        "description": "Revert \"anv: Disable Ray Tracing on xe2 until our compiler supports Xe2 RT\"",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "65684b0c7f852d8acaced018e0684da981cf6211",
+        "notes": null
+    },
+    {
+        "sha": "f1b502f8c70dd5f923ff39e60444223154b48324",
+        "description": "anv/grl: Build for xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ffe1a9f9e6d123408482dcee08d56c8baeee074",
+        "description": "intel/brw: Fix SSBO/shared load offset register size for Xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4bc4da01f4478d3bbfb7f27fcc896d6220fa4a47",
+        "description": "intel/brw: Allow xe2 in brw_stage_has_packed_dispatch()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "739613ec705cf04ddb0be171d31c16bf459065f3",
+        "description": "intel/brw: Simplify enabling brw_fs_test_dispatch_packing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa152ef43129dbf09f02ecb59f6b81a711967d92",
+        "description": "anv/grl: Set INTEL_FORCE_PROBE=* when running intel_clc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2217cff68aefbe450ac5dc49a23e83fce1561caa",
+        "description": "pci_ids/intel: Add LNL PCI IDs (with FORCE_PROBE set)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "845ca72a14d31130251e2d0ee50cf7c5dc1d707b",
+        "description": "intel/dev: Add LNL device info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4beab24d69e43fcaa92ca635b20e8c12d7b504ba",
+        "description": "docs: Document INTEL_FORCE_PROBE env-var",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "237d9e7c450434596538d65f9cc8ffec57f593cc",
+        "description": "intel/dev: Support INTEL_FORCE_PROBE env-var",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c967b38c7c6fde4188f938c7cef4ebe2180a6815",
+        "description": "intel/dev: Allow setting FORCE_PROBE for intel PCI IDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d098ecfea0fca662ece82f8162ea43991a4636d",
+        "description": "anv: check cmd_buffer is on a transfer queue more properly",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "17b8b2cffdb07eaf06a309fabcd933886f6e7070",
+        "notes": null
+    },
+    {
+        "sha": "e6d9201c6c2f76a3d06381fc622ecfce1c4b54c5",
+        "description": "v3dv/ci: fix typo in `renderer_check`",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "993dd0832fb007e03bfd8bac2e90bb98b8792c0d",
+        "notes": null
+    },
+    {
+        "sha": "dc3bc70899bc5cbc88d9620838817e63010f3a6b",
+        "description": ".mailmap: fix email address for @cpmichael",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76047bfa5e6aedaf801b306ef3cf9528f74b19c1",
+        "description": "pan/jc: Drop unused pool argument passed to pan_jc_add_job()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "443fe41ad2f9ea7b622a125d7fe4f1d54f51fe05",
+        "description": "pan/desc: Add missing format in translate_s_format()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "586e427b78976ffd0ebd134d08e733215cf6cf90",
+        "description": "pan/decode: Be robust to NULL texture payload",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20d25b9f070f99ac965686c2e3340b8f8336ad1b",
+        "description": "panvk: Make sure we dump memory mappings before crashing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47a1daa6da714e1ff29700e4cb97fc45814cceae",
+        "description": "panvk: Kill cmd_get_tiler_context()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f57fac8d3779db18e62d4c2961a39a233c7ade52",
+        "description": "panvk: Use vk_pipeline_shader_stage_to_nir()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f21c163baa2fd861fcf9504dbdc0338cdaca83d4",
+        "description": "panvk: Clean Midgard leftovers in the cmd_close_batch() path",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd8fb7139df7329a287a0d0484790095dbe28acd",
+        "description": "mesa/main: rewrite mipmap generation code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd373849851232ec38f83c39f037c084d4de467b",
+        "description": "util/format: correct a typo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6fc6f95e90d0247b963a23f38a821b5919451619",
+        "description": "intel/genxml: Update STATE_COMPUTE_MODE for Xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f5a5c3571785b2447b51843034ebc8486b7b84bb",
+        "description": "intel/genxml: update MI_SEMAPHORE_WAIT for Xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "569a037fb17a1292505fb402badd22074fe1d0ba",
+        "description": "intel/genxml: Update XY_BLOCK_COPY_BLT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26e78f83bb131e2c7b6b9900575b430fa7240fda",
+        "description": "intel/genxml: update CFE_STATE for LNL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70011342462e61b6593704f2eb5a7015bc76aa1a",
+        "description": "isl: enable compression for CPS buffers on xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9c68883c43e7df3ea897214eee6e78dfbf814ee",
+        "description": "intel/genxml: update 3DSTATE_CPSIZE_CONTROL_BUFFER for xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd0964975015de8e667351b04c1dce36dbe8a8d7",
+        "description": "intel/genxml: add the new state byte stride instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17b6db893be6dd517cdbf1e17aef67f049aed2c1",
+        "description": "intel/genxml: Update 3DSTATE_BTD for xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5709bbe0337ad89113a90c6639d97f797281b47a",
+        "description": "intel/genxml: Add XY_FAST_COLOR_BLT for xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "92fa87f5bd975803ba321875d35a65a0f6b2da8d",
+        "description": "blorp: Update programming for XY_FAST_COLOR_BLT on xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7605456a9b1b5abc742788fba9a1a50e2b8eab6d",
+        "description": "radv: apply the SQ_THREAD_TRACE_WPTR workaround on GFX11 only",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33ae2275bf6ddb412e7a26ca5cc7d79d844b0137",
+        "description": "radv: apply the workaround for no PS inpputs and LDS on GFX11 only",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a93f95c69c8163eb7655ed426d9c164d8e5c085a",
+        "description": "radv/rt: Remove load_rt_dynamic_callable_stack_base_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "432f3eb9ca8beac699750239ad04c70565f116f2",
+        "description": "radv/rt: Track ray_launch_size reads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ba8fccad3b226082601368cee25161d4f1dd320",
+        "description": "radv/rt: Track ray_launch_id reads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fe34a32043f23ba1fe31012bfd54ca846b3e16b",
+        "description": "radv: Remove uses_dynamic_rt_callable_stack",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1038f48dd119df81150b3c1e00460de2ffd12bba",
+        "description": "radv: Replace is_rt_shader with RADV_SHADER_TYPE_RT_PROLOG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "272dcaff012caf9d61f51a9d37a43cd03b1d6b42",
+        "description": "panfrost: fix some omissions in valhall flow control",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de07fd384dc8a5a054c8eee68cf93fe9368763fc",
+        "description": "aco/gfx12: disallow SCC and most constants for BUF SOFFSET",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12b4bdc1344f25b8a06e54cf74d0f9079f2cb309",
+        "description": "aco/gfx12: decrease max_nsa_vgprs for VSAMPLE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1b3237590b15f34a7a66727c4741f89f2cda88c",
+        "description": "aco/gfx12: remove MIMG vector affinity",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8bc03668e154ffc6aaca83d385aad5db8964b627",
+        "description": "radv/gfx12: don't add workgroup id shader args",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef74407577f7a6dc1b13d1e13513e6aa6fbc3beb",
+        "description": "aco/gfx12: use ttmp9/ttmp7 for workgroup id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c8123b67e04ca6b7f6afd8dc1303ea797c7aa028",
+        "description": "aco/gfx12: don't create v_fmac_legacy_f32",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e79a8219d23b82f239d3ce7bda133bbe07cf29af",
+        "description": "aco/gfx12: sign-extend s_getpc_b64",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae18c88409a11bfa0368a465cd88afc898cb28b5",
+        "description": "aco/gfx12: implement workgroup barrier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fae2a85d57a49bfbd4efb05ea1d4e53071c2ffd2",
+        "description": "aco/gfx12: implement subgroup shader clock",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "872dda2bc5bb5de4467be47cd93a227dc5ef0b56",
+        "description": "aco: support GFX12 in insert_NOPs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4835dc0e7f303696a11ef37dde2ea72e89211bbe",
+        "description": "v3dv: Emit stencil draw clear if needed for GFXH-1461",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1e81bb05aeb8bf070652b3c7406dfd1ac61a8c99",
+        "notes": null
+    },
+    {
+        "sha": "9912c734e96096dc0388e7bba9f7d88f476a1b4b",
+        "description": "v3dv: implement vkCmdBindIndexBuffer2KHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e00da334748d2a61c0063c94fa6166533d878057",
+        "description": "v3dv: use pSizes paramater in vkCmdBindVertexBuffers2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70aa470bdbfbafb6a2baa8f601296eb5a544637c",
+        "description": "v3dv: fix incorrect index buffer size",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d2edd2585a89ae9d7e614ec9964bf6eb32036a4",
+        "description": "v3dv: drop unused stride field from v3dv_pipeline_vertex_binding",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "f4d426fae6b9ffdcf957dbf91d7863963bc754be",
+        "notes": null
+    },
+    {
+        "sha": "a9f4931a9175751be07b8cb61aeeefb4c9a90649",
+        "description": "ac,radv,radeonsi: a function that sets mutable CB surface fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6836118cd28bf81021991e2356c6b8d455e7d726",
+        "description": "anv/android: enable emulated astc for applications",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28be0cca4515d3af1a3d71623f312731fe1fec02",
+        "description": "radv: Add locking to radv_replay_shader_arena_block",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c31038ef98621f726f95f8b87c46d47bff8076b6",
+        "description": "llvmpipe: Use a second LLVMContext for compiling sample functions",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7ebf7f49a052c75f49496e31f7b3ccca716d30e5",
+        "notes": null
+    },
+    {
+        "sha": "a93b1960af24ddd18b85cf89fd438bcf64673802",
+        "description": "v3dv: emit a default point size when drawing points",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e0616ecc58a037572b9657af21075f3cb0655fe",
+        "description": "v3dv: only flag 'shader writes point size' if the shader actually writes it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c30833f23375bbcaa83e2e24a234e476aca283de",
+        "description": "broadcom/compiler: check if vertex shader writes point size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c07f1cdfb6dbd46cc607367befbb1245e8c3866",
+        "description": "nouveau: import nvif/ioctl.h file from libdrm_nouveau",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "821f4c8d99a3068758db834a5c219082a9609b3c",
+        "notes": null
+    },
+    {
+        "sha": "9b932aadf468835979b749f072f7ac27429a07df",
+        "description": "radv: Remove radv_cmd_dirty_dynamic_bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d963fd596eaa2462dec55f354ed48f92010b0722",
+        "description": "ci: fix stress counter in run'n'monitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a47c5c9eee93c5fb2d70800d5b4b07c3583b1947",
+        "description": "intel/perf: Add intel_perf_stream_read_samples()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9841aeb6ad3c1a80e90918a273fd38282b77e5ae",
+        "description": "intel/perf: Add a macro with header + sample length",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f128b2ba57dd95f93af1c372b2dcc93c6efd7bf",
+        "description": "intel/perf: Replace drm_i915_perf_record_header by intel_perf_record_header",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da43bf3f2ed906689a0ef1d678548647c3c0a836",
+        "description": "intel/perf: Allocate sseu in heap memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1c2847b812f181173ca3611c40f89d83f1f1628",
+        "description": "intel/perf: Move i915 specific code to load configurations to i915 file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30f97a7242680b34b230eef60e9a9b24e94714a0",
+        "description": "intel/perf: Move i915 specific code from common code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ad56247c36040d6ea1ebc38f35985fb431f3a06",
+        "description": "intel/perf: Move code that will be shared by both KMDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b601e4a18ffe9d0b7663631adaf13ef3e1a44afd",
+        "description": "intel/perf: Replace I915_OA_FORMAT_* usage by platform check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d2c3dc62be5410647fc651c3533c9a32fa46c3b",
+        "description": "anv: Nuke perf_query_pass from anv_execbuf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0442803eee764857f04758e3742d18a917ed50e1",
+        "description": "intel/perf: Fix return of read_oa_samples_until()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42ee8d80d97b79e69c51582af3ae1ace2e49e0ce",
+        "description": "zink/query: begin time elapsed queries even if we arent in a rp",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62c8e58f39d39ab28cc787312424030c4209fdde",
+        "description": "nir: add {load,store}_global_etna intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e7ee6a604314d38ba330a9f9437e4d23fd07703",
+        "description": "etnaviv: handle missing alu conversion opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "348ea02801ce4337139c9c3a7b504067809b81fe",
+        "description": "radeonsi: use the common helper for initializing CB surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07c6fdb878dd2259e47c1d6b74c8618b3242559d",
+        "description": "radv: use the common helper for initializing CB surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f7a36a9fb877e2723921ae2defa523f2ab8c5e2",
+        "description": "amd/common: add a function to initialize cb surface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1935e63545b9f8f7ad30f521ebb4f11135d15da0",
+        "description": "radv: align DCC control settings to RadeonSI for GFX8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "103da56fbadc12528204e6690ebcead258dafdf0",
+        "description": "radeonsi/vcn: Avoid copy when resizing bitstream buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0954afff5d2d46ce176d7d99fb2360b6234a5b1b",
+        "description": "turnip/msm: Do rd dump only when there are commands in submission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9f5152ddd5cee3c160cc52a4c748da1dd42883d",
+        "description": "radv: malloc graphics pipeline stages",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "139bc6b8136c9a7aad57d469267deafc0430f347",
+        "description": "radeonsi: use common build buffer descriptor helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c5173aabfa5bcb6ef2fe73259bfb74e25ea1aea",
+        "description": "ac,radv: add a stride parameter to ac_build_attr_ring_descriptor()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb623b61441de47be0186c534906cf271d95fded",
+        "description": "amd/common: add a helper to set the third word of buffer descriptor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc03f2ea5a414d5153a9d89ed017b79d3970e4e4",
+        "description": "frontends/va: Fix leak when destroying VAEncCodedBufferType",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "be4287c3aa06b7f22ba83696108759f5fcd58323",
+        "notes": null
+    },
+    {
+        "sha": "19a875f7dc10d8ef9337d9b24904a14076a8b40b",
+        "description": "ci/freedreno: document new failure after piglit update",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62b490fa923d2dabe232e5bacd1924fdf254fd48",
+        "description": "nir: Fix out-of-bounds access in ntt_emit_store_output()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d93d989e5d65922c6467cf61874f71665856bf80",
+        "description": "wsi: Guard DRM-dependent function implementations with HAVE_LIBDRM",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "59813ae468dc727623b9e701d06b14f5b959973d",
+        "notes": null
+    },
+    {
+        "sha": "930e4fa2833a2a53f6017cf87973aac42cd90f75",
+        "description": "vulkan/android: Fix suggestedYcbcrModel with !mapper4",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8732a619f13b05e6469f4841d6780fcdac3586ce",
+        "notes": null
+    },
+    {
+        "sha": "67a3c812862364f54bcce224236168af9c551c24",
+        "description": "nak: Encode LDC directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4366d4d1816547717d16f6ebab3012c33481a729",
+        "description": "nak: Don't emit a plop3 for immediate shift sources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8b2d25052796d6a9777b39b2b45e92cdd2bc67c",
+        "description": "nak: Add with -0 for fabs()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8061ed728a9db00b4e54208257e26438c5b08ff7",
+        "description": "nak: Emit !PT for carries on IADD3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1a4fcbb4a5e9ebe3ca89eb21fbf004893314554",
+        "description": "freedreno/ci: Update expectations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "890222fb5b77cae97a80735f40efeb4047ea6e0a",
+        "description": "ci/lava: move wayland-protocols to the main section",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97a081d41a26d724f9a7fe2c8611d7923fd337dd",
+        "description": "ci/lava: do not build Vulkan for armhf images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61c07cc1d93da85daae300fac10442a58cd030a7",
+        "description": "ci/lava: enable Piglit OpenCL tests so we can test rusticl on the HW",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a14e91981ac21e7ebe9ab9e96891d8a8503bcf5d",
+        "description": "ci/piglit: be explicit about what we building",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "312b50da5c30546d36ccdb5d0d2026936eafaaea",
+        "description": "ci: do not build Nine in debian-build-testing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7cf53a0b160aee4094dc7e20d899dfe8dabacc6",
+        "description": "ci: re-enable shader-db for nouveau",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "addeb5ca9a399f2320d460884163ecb4533ec207",
+        "description": "radv/ci: add a bunch of flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a7facc97db5c90fae0052b735180ae858e01305",
+        "description": "radv+zink/ci: document recent flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "946b1027efe354707f58e7766182caf7438ae5f8",
+        "description": "turnip+zink/ci: add more flakes to the expectations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fed03b966210cac87d88b0b6c019287697bff57a",
+        "description": "turnip/ci: bump the a750_vk timeout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b6ea47020d9c010e230313b6a9996e1efd5f25c",
+        "description": "turnip/ci: document a missing flake from the a750_vk job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb5096eb37707cb8266610829f9b2e11badbafff",
+        "description": "nvk+zink/ci: document more flakes in the ga106",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d9092ad49d44b771fe0ffa3d7c1fffed281425f",
+        "description": "nvk+zink/ci/ga106: make the expectations codename-specific",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0d3924c6050d8aeb88ed0eecf46928f0a4657fe",
+        "description": "nvk+zink/ci: rename the ga106 jobs to be more in line with RADV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43f9b3b98658e0b23f60dc570847cd6c66dc4dea",
+        "description": "glsl: make the xfb varying sort stable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5102a922e76284c18e33cf4d6e9fc7952b4b2e02",
+        "description": "glsl: test both inputs when sorting varyings for xfb",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "485d56ed8167b4491622dceef8e68cf1923e98ff",
+        "description": "mr-label-maker: label src/vulkan/wsi/ as wsi",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "003d49c0bcb1e7b6c74fba1de8770c2eafdc193f",
+        "description": "ac,radv,radeonsi: add a function to translate texture data format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1997226da9889091177d04551faa302e57ec50e",
+        "description": "radv: use PIPE_FORMAT in radv_translate_tex_dataformat()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7785a63fc00dc0c1911886fe459beb90823e095e",
+        "description": "amd/common: add ac_gpu_info::has_etc_support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae9331694ba25dd87b7726d03bbd6d02b1ad5b30",
+        "description": "radeonsi: lower NIR resource srcs to descriptors last",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f493d6fb6f8faf8a1eee80b979ffcddcd9fa25b5",
+        "description": "radeonsi: don't lower UBO/SSBOs to descriptors if they are already lowered",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1c65ce680cf7c4a8b51f3b087065a1c4051248b",
+        "description": "radeonsi/gfx12: fix a regression in si_init_depth_surface",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d0810d528c602cdc7e2b8dffdd2ec19800fb36e4",
+        "notes": null
+    },
+    {
+        "sha": "321cb43c112039a02631a8357ab147264ad41bd5",
+        "description": "radeonsi/gfx12: fix depth bounds register values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59d7d06828e46e147f46151af38a70847bcb90eb",
+        "description": "radeonsi/gfx12: fix a regression in si_set_mutable_tex_desc_fields",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "26cd3a1718c7e8f55fa8605f20fb001b2954d6b4",
+        "notes": null
+    },
+    {
+        "sha": "a548ec7ad497057647e363c66351893bc45f4f3f",
+        "description": "radeonsi/gfx12: disable CU1 instead of CU0 for GS due to SQTT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "34be14d957aa6e4252a9d61b5d5ad7cb74a8424d",
+        "description": "radeonsi/gfx12: fix incorrect condition for when to do clear_buffer via compute",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76b0ad33bc6399c803dd74161f1510158d358841",
+        "description": "radeonsi/gfx12: fix the alpha ref value",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3ab0e18db4118b768efeddcd15952f2491a0bdb9",
+        "description": "radeonsi: vectorize loads/store after ABI lowering and optimizations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35c5435eaece10bea5013309fd473d789902eaca",
+        "description": "ac/llvm: fix incorrect parameter type in llvm.amdgcn.s.nop",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad07ea31622716c0f420e3159bd1b8976010df03",
+        "description": "amd: enable 32B minimum DCC block size for gfx1151",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf4eb415405fc93eea1aebf734d5b2876ffbb842",
+        "description": "amd: add more gfx11 APUs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7650127040acbc9b557634305433693fa1c87077",
+        "description": "amd: update addrlib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02745186158c4ddeb5623deb0b500302b84c4350",
+        "description": "nir/opt_varyings: reduce stack usage",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c66967b5cb7aa69c3c2efb12730b7b570483e01b",
+        "notes": null
+    },
+    {
+        "sha": "f7a262cd6d4c6848fe447b72c0832c860108b020",
+        "description": "freedreno/devices: Fix indentation for Adreno A32",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "cd7da3a8073ff4094eabf94c0d775776aa555dca",
+        "notes": null
+    },
+    {
+        "sha": "674d5b54bf7f41f9d77ea20d15ef6e8a1a502607",
+        "description": "tu: Expose VK_EXT_nested_command_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd5f980d511b3da442565ee56b428cac37a2a103",
+        "description": "ac,radv,radeonsi: move ZRANGE_PRECISION to mutable DS fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "332a06903dd856256040c6388c952593b65e5ee1",
+        "description": "ac,radv,radeonsi: a function that sets mutable DS surface fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a08fa6150929dc5d99559925460ef6dcda32e28",
+        "description": "ac,radv,radeonsi: add function to get the number of ZPLANES",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "709452b9d1915f9a7a4314b97d557e78f6b076cb",
+        "description": "radv: do not check image usage for ITERATE256 with TC-compat HTILE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dcfa351af30e2909c0adfdd4305cc5dec1c23a91",
+        "description": "radv: only enable DB_STENCIL_INFO.ITERATE_FLUSH when necessary",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2adf01fa61307ce8fc145c72e55e5e88d634504c",
+        "description": "panvk: enable KHR and EXT BDA",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "deb9756e233dbdf938680d4fdb029666d82b3af5",
+        "description": "panvk: Lower global memory IOs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe59b772b5d18f56de7ececbb5b4b9273e5aa2f6",
+        "description": "bi: Alloc replacement array once in opt_cse",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "01ea55b44ca73c4e9a4d323daf613669b6828708",
+        "description": "midgard: Reformat code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "547308990d57d161f09d69d2a25b21d970f0ee44",
+        "description": "bi: Reformat code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c65d90bc8500bb8ad0b9204798905e4d79fb283",
+        "description": "intel/brw: ensure find_live_channel don't access arch register without sync",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "49ee3ae9e8be4fd2a4a9f658c06e0bf01e08d13c",
+        "notes": null
+    },
+    {
+        "sha": "1add55863f30f18e48193acbbfef4e37e17732e7",
+        "description": "zink+nvk/ci: spec@ext_external_objects@vk-vert-buf-reuse has been fixed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ace5c27898f11026c71fb74ac23585735bb7d642",
+        "description": "zink+nvk/ci: add more flakes seen in nightly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6789d4c0b28e1565c7cd5674a6bebd53838b027d",
+        "description": "zink+nvk/ci: more KHR-GL46.packed_pixels.varied_rectangle.* flakes, so mark the group as flaky",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6843a7951b41cfd14a95e79888b8320de6ed606b",
+        "description": "ci/b2c: make B2C_JOB_WARN_REGEX optional",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "bfd4db0476db3fddbbac343ffddd99e2362bbb3a",
+        "notes": null
+    },
+    {
+        "sha": "865e682ad7ffcc97b931feb05f0541ac8a0f54fd",
+        "description": "broadcom/compiler: apply payload conflict to spill setup before RA",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cb83f25b39173db92d8ccaeac3a9b640f46f7651",
+        "description": "broadcom/compiler: don't assign payload registers to spilling setup temps",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "901c4859970989a85c72bac9d71c5fd43b6deaff",
+        "description": "broadcom/compiler: make add_node return the node index",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33492dd9e8bc1b514d829ad2251ff7cd73221c14",
+        "description": "ci/radv: dEQP-GLES3.functional.polygon_offset.fixed16_render_with_units passes now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c39cf7bcab3bbf79f91a63d207e709bfbbf94998",
+        "description": "docs: correct svga3d redirected URLs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fca045f02f97b5d5e17d16cd5f3bf9c4d5bbe3f0",
+        "description": "ci/freedreno: a3xx will never have Vulkan support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c71f650c2dad691b7c0745a5b1b8a813704a2e5e",
+        "description": "ci/venus: skip a timeout test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "60488962dbec646f3b9dadfec0def3bebc385f60",
+        "description": "venus: allow non-wsi image alias path to passthrough upon bind memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c97f9193ef5d99ec8dae90d92671be8a687c2cbe",
+        "description": "venus: drop internal memory pools",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db62ec3370c2b96be2bd5b1e0e6ea7042e7ddc8c",
+        "description": "ci/nouveau: adjust and add DEVICE_TYPE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18eb91da59ce4057fd35aa82016f618eae36289a",
+        "description": "ci/nouveau: separate HW definition from SW",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6bc660a5429d0cae6ea3135c1262be5edbe94b25",
+        "description": "ci/nouveau: move disabled jobs back from include into main gitlab-ci.yml",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9442571664e5a7d6e06f098ce4ea2246e5504796",
+        "notes": null
+    },
+    {
+        "sha": "d315585d89dd37bd18ab3b9cc40ad3a576637c8b",
+        "description": "ci/r300: update flake list from nightly reports",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "450c9460c641807a66ce1017c0c8a1aec94c243d",
+        "description": "freedreno/loader: Switch over to probe_nctx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ea4a59ab7cf07d660c424760ec74eff8f34a3cc",
+        "description": "loader: Add better support for virtgpu nctx driver loading",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27ebf58ee8cf9117198af72cceafba1e1bf326ae",
+        "description": "virgl: Update headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bba6418fcb67066cdf5bb92fa88ad3cbd69b1811",
+        "description": "freedreno: Namespace DEFINE_CAST()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5f2288095b86b70db8a9ed3bf0d06b960cf1b132",
+        "description": "anv: fix shader identifier handling",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfd4db0476db3fddbbac343ffddd99e2362bbb3a",
+        "description": "radv/ci: move amdgpu-specific kernel message warning to src/amd/ci/",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3099fc8390b6d40ba34ad9c81f8d50763b0d5ae",
+        "description": "spirv: Add MESA_SPIRV_DEBUG=values to dump all values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0effbc625c06b0031b112cde3d8f328746142a1a",
+        "description": "nvk/ci: add missing .test rules to avoid running nvk tests in post-merge pipeline",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "94c82cd938ff5a0f7426aec33bca1bc4f540a634",
+        "notes": null
+    },
+    {
+        "sha": "d0810d528c602cdc7e2b8dffdd2ec19800fb36e4",
+        "description": "radeonsi: use the common helper for initializing DS surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed30b320c8a2c42abd27d55e22f78a60570dc440",
+        "description": "radv: use the common helper for initializing DS surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "636110485f465d839efd8ed921ae5d24c650343b",
+        "description": "amd/common: add a function to initialize ds surface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1da1c891ce4fdf80ee5373e65b83b3d42b8db6a",
+        "description": "radv: separate non-mutable vs mutable fields for ds surface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55be5868c5881baa6c165afe6b67d52f31b71b71",
+        "description": "radv: tidy up radv_initialise_ds_surface()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9a390cb94a77ae7c0f055ce4b593ce165ca5969",
+        "description": "radv: replace db_{z,stencil}_{read,write}_base by db_{depth,stencil}_base",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d298673da9b05d826b960eece2e715a6b187330",
+        "description": "get_color_read_type: make sure format/type combo is legal for gles",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5120d51d82972e360b8b998e6af0befc9aba2f0f",
+        "description": "Uprev Piglit to e180f96239edba441f22f58dfc852cafb902844a",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c23c5c0a073b8592a386f67f0bac82083f32e1b9",
+        "description": "nir/opt_varyings: Don't promote flat inputs when moving post-dominator.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9dad0ced52134f317b063317415c73c558b2458e",
+        "description": "nir/opt_varyings: Print FS VEC4 type when debugging relocate_slot.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72330e607f5398e83af0ad062577d6cacde60f22",
+        "description": "nvk/ci: mark the job as failing in case of hangs, instead of silently rebooting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "93493ea441df36f871c056b0ea635988bbac1b8b",
+        "description": "nvk/ci: adjust the regex for \"dut is broken and needs to be rebooted\"",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afef3820093253ec3c305a9cdeaf50e8403a0550",
+        "description": "panfrost: untangle faces from layers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8455e0521e8a8cbf136d0b21f315dc4efcac9a0c",
+        "description": "panfrost: explicitly loop over surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6497adeb35309f126949e79a7bbcd14ee85902b1",
+        "description": "panfrost: simplify panfrost_texture_num_elements",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7cb2831ef57da11b6ab47c29f8d3914a47bd1b39",
+        "description": "v3dv/ci: Add more dEQP-VK subgroups that are currently skipped",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b448ffdd75cc94cceb5fbaf9be8d24320db00bc",
+        "description": "turnip+zink/ci: add gl & gles CTS jobs on the a750",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3088af9051f97019a0ba4fc1842c85e228b5d8ac",
+        "description": "turnip/ci: add vkcts jobs on the a750",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f9614c1872191f318638425a79049248bd10d4d",
+        "description": "ci/b2c: Reduce the length of the kernel cmdline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "265b0ebd9ac723969b18880de92d25d4ee444e73",
+        "description": "ci/b2c: add aarch64 tests for gl & vk",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2867a07922b5c252fdb09b8c82839df1b518b46c",
+        "description": "radv: fix setting a custom pitch for CB on GFX10_3+",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "3f7ddaf28163a23de218990908725387f03205c1",
+        "notes": null
+    },
+    {
+        "sha": "f168dc6d537c21cae52d2b9a6f1f4bcf22e74bf1",
+        "description": "zink/ci: rename zink-turnip collabora rule to make it unambiguous",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "815a5e9a8e5efe4ab0e2824c29dfc8938e932631",
+        "description": "ci: add debian/arm64_test images for gl & vk",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7fb13a915328997618b6de9b252f536fc1d9e330",
+        "description": "ci/image-tags: rename DEBIAN_X86_64_TEST_*_TAG to drop the x86 mention",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c325632b14fb3318ff998bd973335cc10b584a84",
+        "description": "ci: prepare VK debian test image for multi-arch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "124ff9c2328b17f123ed47d2e06f6ad6f15dfa2f",
+        "description": "ci: prepare GL debian test image for multi-arch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3cd6f86b7e4aa653bf49fcb4d32cabfb74102746",
+        "description": "ci: prepare base debian test image for multi-arch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7cecc1604f3b9a3a7a73e53bae6aedcd0db85ca",
+        "description": "ci: rename debian/arm*_test to debian/baremetal_arm*_test to be clear about which infra uses that",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "968af05a531a9e6fb381438c0ad4f57d2abf9e75",
+        "description": "ci: drop dead variables (see previous commit)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27592453ac2a505bb44601dc8f06f5439f2ec64a",
+        "description": "ci: fix build-kernel.sh -> download-prebuilt-kernel.sh",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2abdc846067de60e771b4ef2b230d9d7bcba80b6",
+        "description": "Revert \"zink: use a slab allocator for zink_kopper_present_info\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "738fbddca8a1d8343e2ae322299de22a9ae108ae",
+        "notes": null
+    },
+    {
+        "sha": "cdf75e8e02cdf68679a18db0a9141d75d162f047",
+        "description": "docs: update calendar for 24.1.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4cc6645ff823be25b58bf891b240ac4e483500c",
+        "description": "docs: add sha256sum for 24.1.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e3d86f7d33fb4017162c61e28ca8615377fce08",
+        "description": "docs: add release notes for 24.1.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7afebc15ce14c40a384c856ec19f84cac826ef0c",
+        "description": "v3dv: V3D_CL_MAX_INSTR_SIZE bytes in last CL instruction not needed",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb77ac983e4f8a265141855e60ad2a5637c9b74d",
+        "description": "v3dv: Increase alignment to 16k on CL BO on RPi5",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2c624e74e3ae9c2b4bdad721b4fca9bd968f515",
+        "description": "v3d: Increase alignment to 16k on CL BO on RPi5",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26c8a5cd72108f078dc7c064d281412adab20710",
+        "description": "v3dv: fix CLE MMU errors avoiding using last bytes of CL BOs.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11dce2ac8154237b74ee3c4bd2aaec685739f0cc",
+        "description": "v3d: fix CLE MMU errors avoiding using last bytes of CL BOs.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c974c334cf2ae2fe27fbd71d01aafb0aa7b52d6",
+        "description": "docs: add sha256sum for 24.0.8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f09cac4a6a7e969bca1f59e68eb1bf8b02b517d",
+        "description": "docs: update calendar for 24.0.8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c9307a972998b825b61cfadce06a2a514ad56dc",
+        "description": "docs: add release notes for 24.0.8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be6fece6e1ef46567808d4895558519e39086a8b",
+        "description": "venus: enable VK_KHR_maintenance5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3359fbc25bf457bbb55002dbba58fb8a5ca77f3f",
+        "description": "venus: sync protocol for VK_KHR_maintenance5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51d6162c80bb27281f014b72b52b12e7ef11db98",
+        "description": "anv: Attempt to compile all pipelines even after errors",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "745b0fc79f5a7efe9523be6430ec458ffd9f835c",
+        "description": "freedreno: Make fd_pps_driver.h usable without including other FD sources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f458b0fc4bf6e9d48377369cb3b3a5934d339cb9",
+        "description": "radv: replace vk_to_non_srgb_format() by vk_format_no_srgb()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bab26a239e94dcb954e53f825c5fda26fb24ec8a",
+        "description": "radv: simplify radv_is_vertex_buffer_format_supported()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7016fb7a64d37bfdfa64988770db1ecf3e0ead7",
+        "description": "radv: remove useless check about FIXED formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33e558f64abf1cf1a06d32cdc964a2d96f594222",
+        "description": "radv: remove unused radv_translate_buffer_dataformat()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3584fc64828ad2ad4d486572ec915aab8321aadd",
+        "description": "anv: use weak_ref mode for global pipeline caches",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3963e4b53aa73ef032709769585bdb1e3b6a8099",
+        "description": "radv: Fix TCS -> TES I/O linking typo of VARYING_SLOT vs. BIT.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0e481a4adcd8006256c27d100a0a0f0c01a94171",
+        "notes": null
+    },
+    {
+        "sha": "4b6f7613c0bd161548f1bd45d42b65b4841a278a",
+        "description": "panvk: Emit the fragment shader RSD dynamically",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4335560bb748a578dcfeaad34f6d75e101db1f67",
+        "description": "panvk: Move fs_rsd fields to an fs sub-struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6e0761d0dcfc88e1802e69a43ff248f7c671cc5",
+        "description": "panvk: Replace the stages array in panvk_draw_info by vs/fs fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0471a30fcc0f8c71260e1b85a91e695ea8911f6c",
+        "description": "panvk: Fix/simplify the shader linking logic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dfbec67cb080ab6695248e37798f5e9e00eef3eb",
+        "description": "panvk: Simplify shader initialization in the pipeline logic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7a9bd1cbe973792b444d166286db3f3142e9716",
+        "description": "panvk: Don't pass the stage to shader_create()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6724ee761909da31d23baf31a4a0f26fe109ca52",
+        "description": "panvk: Add a blend library to deal blend shaders/descriptors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5406a65955a90c4a90de1243cdf5fd33ef3af94c",
+        "description": "pan/blend: Expose pan_blend_create_shader()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "92136c70629f65cb7d9a0cfc48a50201fdca2345",
+        "description": "pan/blend: Move constant inlining out of pan_blend_create_shader()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "214761bdfe9a0ed04f00835c8ce41e3b84ff82c0",
+        "description": "panvk: Fully transition to vk_vertex_binding_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd71c586cb608df8c0036315324649eb9b33c11f",
+        "description": "panvk: Leave holes in the attribute locations used by a shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3683aaeb02ffa50e355110802d4d5b84adf21351",
+        "description": "panvk: Emit VS-accessible image attributes at a fixed offset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "497c43f1612555c931fa11e5f22164c264269653",
+        "description": "panvk: Move VS attribute/buffer state to panvk_cmd_graphics_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c6b922fe1b63774036dfa3996a57cb31b090401",
+        "description": "panvk: Prevent re-emission of image attributes used in vertex shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "936ebd3370f1285265ae0d0b33c47fabce398f26",
+        "description": "panvk: Rename non_vs_attribs into img_attribs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a37a62bed352e1fcc82f3ca4c0f8bdc76bf9ae3",
+        "description": "panvk: Set unused attribute buffers descriptors to zero",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a195486e6f07a70aa9609375663c2d99c8785874",
+        "description": "panvk: Fully transition to vk_multisample_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3e024a59e0f1a8aa957533e1a28115bf4c76e1b",
+        "description": "panvk: Fully transition to vk_depth_stencil_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a58171fb3c5c89772fad6e473383a58de24cc30a",
+        "description": "panvk: Use vk_color_blend_state to fill our blend constant",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbcf505a0823c75e046d662696225131482fdd89",
+        "description": "panvk: Fully transition to vk_input_assembly_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07afc7e3ed21a2be22d4486b3d85033cdc3b3d93",
+        "description": "panvk: Fully transition to vk_rasterization_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4ce783f0e9d352af3098019fa8aac46e9bed297",
+        "description": "panvk: Fully transition to vk_viewport_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b1a8226fac4908cc82488409c37bee2e54258ff",
+        "description": "panvk: Transition the graphics pipeline logic to vk_graphics_pipeline_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "160db68bd783685ce078565a2792e4e4f0c1bf3f",
+        "description": "panvk: Kill the panvk_pipeline_builder object",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e0081d44c9336be6008f41f5af49392f599c5d6",
+        "description": "panvk: Use memory pools to store pipeline shaders/descriptors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd6e32ef9c059ec913f07dfae17ce3f12421bd5c",
+        "description": "panvk: Split compute/graphics pipeline objects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "513e0bd46b55f4e3fa972e527957169db6546357",
+        "description": "panvk: Split the graphics and compute state at the cmd_buffer level",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5196aeacf68ab5f82d9970bdaaa69e30382a2930",
+        "description": "panvk: Get rid of special attribute support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04b20157f8f2210847b6dc7175e522b14b4d8206",
+        "description": "panvk: Kill unused dynamic state bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94e28d350d0d242ed4dc50275c0318b053078b61",
+        "description": "panvk: Move panvk_cmd_state::batch to panvk_cmd_buffer::cur_batch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "330a75b9f3559336a381a2f866cd75b010a2060e",
+        "description": "panvk: Get rid of panvk_descriptor_state::dirty",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3fb990a866bc3cb7eac44804ef94bb8691ed6e2",
+        "description": "panvk: Kill panvk_queue_get_device()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f57af8fe1c6af6f1e609708b3d8062b1a1c992c1",
+        "description": "panvk: clang-format fixups",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90f8be9bda9b3841c41f48414897d89ebbceb43b",
+        "description": "ci: define SNMP base interface on runner",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18c736bcfc55b8fa309ede02332b9c7a2ca22e78",
+        "description": "radeonsi: Use max_se instead of num_se where appropriate",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db564a40b3bd936053e5e14d1f0df6b96e305a08",
+        "description": "radv: Use max_se instead of num_se where appropriate",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1966b6c887ac6f557f6427ee4443f04b6c36c364",
+        "description": "zink+nvk/ci: update expected failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "acd395f1f8aa47496c1a0e0e581f60fa0b0752ba",
+        "description": "zink+nvk/ci: document flakes seen during stress-testing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc1db264edc60cc4f14d1a63966e583e53867a9a",
+        "description": "zink+nvk/ci: skip more tests that times out",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0bd551f6ec4ba7cb30de7df61f7c44ca5269f9b5",
+        "description": "zink+nvk/ci: skip timing out test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "393cd1ffdff5c32f7dd5ca2a4cf67c3b493c606d",
+        "description": "zink+nvk/ci: skip glx piglit tests as they all fail",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a6ffd1420cecb9d060f386120b94d9b5eafc22e",
+        "description": "zink/ci: add zink+nvk glcts+piglit job on a GA106 (RTX 3060)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94c82cd938ff5a0f7426aec33bca1bc4f540a634",
+        "description": "nvk/ci: add nvk job on a GA106 (RTX 3060)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d6957268b24a74519adda1a93d3653df55d4961",
+        "description": "aco: use new common helpers for building buffer descriptors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "074f3cfe73b06ba1e02ebf69fc5b6a13fb313c44",
+        "description": "radv: use new common helpers for building buffer descriptor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d3b01fd95e70118453c459fe728be507e38dd115",
+        "description": "amd/common: add new helpers to build buffer descriptors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3224fd706c57c6b4f8157c467bb7f052a5971240",
+        "description": "amd/common: only pass gfx_level to ac_get_gfx10_format_table()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64fefc11793a60ad9800eb2943d9334e223288ba",
+        "description": "ac,radv,radeonsi: add a common helper for translating swizzle",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2487a875527f636565a7b39036690fbf7c5d46db",
+        "description": "ac,radv,radeonsi: add function to determine if alpha should be on MSB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "179f4ed414b4c84fb0cb5dc0f03be084a9c2b2ff",
+        "description": "radv: adjust determining if alpha should be on MSB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68c4d26691769f83e471c85c0775b8c584061e86",
+        "description": "radv: only set ALPHA_IS_ON_MSB if the image has DCC on GFX6-9",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3e8b2fe053a7686df54c62acdd92382a088fda70",
+        "description": "broadcom/simulator: Add DRM_IOCTL_V3D_GET_COUNTER to simulator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e630812b436877a430dabf17d5985bfb4cd7775b",
+        "description": "broadcom/simulator: Add DRM_V3D_PARAM_MAX_PERF_COUNTERS parameter support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "017dde0d1caa981560c5e6c54491337e4e06d497",
+        "description": "v3d: Use DRM_IOCTL_V3D_GET_COUNTER to get perfcnt information",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c5b2d943ad4a56abaf7141a3d46ee3eda80cb3a2",
+        "description": "v3dv: Use DRM_IOCTL_V3D_GET_COUNTER to get perfcnt information",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "273ba51d7fa6bd5f503d7145b0a809969b25894e",
+        "description": "broadcom/common: Add maximum number of perf counters to v3d_device_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce7bca176f50d3df85893213255956bbe66d9d59",
+        "description": "drm-uapi: Update v3d_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b3e286d333a9be223e6295c21c84d127b5c1323",
+        "description": "venus: add missing sTypes for vk_set_physical_device_properties_struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b99c48b011e4f4d087cb9c7aa2e0f71048de677c",
+        "description": "aco/lower_phis: don't create boolean loop header phis in some situations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ae8a558b2fd5877e44d470cf5526cf5aa36c8c1",
+        "description": "aco: remove nir_to_aco",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1964f03e7461e1c243b0e932516f66aefcc0627",
+        "description": "aco: use scalar phi lowering for lcssa workaround",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbe46524307e5e834d5b3d593763b72120d6a3ee",
+        "description": "aco: create lcssa phis for continue_or_break loops when necessary",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3fc7207f5007c42829b3c8eb9b3e87676d92e982",
+        "description": "aco/lower_phis: create loop header phis for non-boolean loop exit phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "175d2d680aa8f06fa1b4e8e54e95733802b3d1dd",
+        "description": "wsi/wayland: Fix use after free from improperly stored VkAllocationCallbacks",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "57c03fe49c7017f44ef22e4fd706ad87c5c2cec2",
+        "notes": null
+    },
+    {
+        "sha": "0e0c2574d1d3ea8184fc9f5403f693d40d48da3d",
+        "description": "radv: Add shader stats for inputs and outputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "590fff6906eeac7fb07c5eff466a5350b815cc68",
+        "description": "radv: Add TES num_linked_patch_inputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a6d7e79ad71b7a06989925bb55ed1b640a86514",
+        "description": "subprojects: uprev perfetto to v45.0",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d59fe21ce51b0c50fc5c4662a2219b5eab77ce0",
+        "description": "panvk: remove descriptor pool counters",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb09fac65981353a88d972fee06758fa1f822a01",
+        "description": "ac,radv,radeonsi: add a function for getting border color swizzle",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25a206b9ac22eab54bdd17022736bfa6fb1d1869",
+        "description": "tu: Don't advertise AHB handle time on non-android",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "99753001f35ae5791b64d72efe5278795004899f",
+        "notes": null
+    },
+    {
+        "sha": "b71f3f1314c733e8159201f34ffbf4d1b6a72d1b",
+        "description": "docs/features: Add missing AHB for tu",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eef5e4221f03c0844ca117cc9590397a70d37126",
+        "description": "radeonsi: vectorize load/stores and shrink stores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8cb254e0b8eaaca3ed13ea37e3bf8527efe51e63",
+        "description": "radeonsi: call nir_lower_int64 later to fix ACO failure with Tomb Raider",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a115b10556e23232708ef7d8f951ab2ab36d381",
+        "description": "ac/llvm: global stores should have no holes in the writemask",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7952e4fc7acac2f8c5c91a8aeafe4a56ef366c65",
+        "description": "ac: move radv_mem_vectorize_callback to common code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26cd3a1718c7e8f55fa8605f20fb001b2954d6b4",
+        "description": "ac,radv,radeonsi: add a helper to set mutable tex desc fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7523c1ec575beba51fe8f553f9b3574b023683e6",
+        "description": "radv: stop clearing unnecessary bitfields in radv_set_mutable_tex_desc_fields()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d09afbdebc151e7b4cbb64c520125a6ca05b52f3",
+        "description": "radv: set ITERATE_256 for GFX10+ in radv_set_mutable_tex_desc_fields()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb37ea092d0717d8d4b0cbc2bb4f02e0ca029cc0",
+        "description": "radv: tidy up meta_va in radv_set_mutable_tex_desc_fields()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8adb326f592ed10eb0039e067b411c6b278d20f3",
+        "description": "radv: tidy up custom pitch for gfx10.3 in radv_set_mutable_tex_desc_fields()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1fa5ffab04b84bb24a13d4511fc579b75cea446",
+        "description": "radv: tidy up swizzle in radv_set_mutable_tex_desc_fields()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81e927ea05057fe59e2eb61dd350780906f24153",
+        "description": "ac,radv,radeonsi: add a helper to get the tile mode index",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72485fe592636505f9964e07b8147dc178320eaf",
+        "description": "radv: set image view descriptors as buffer for non-graphics GPU",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1d38b0b3749d890b31878b679282212cdbf1ad1",
+        "description": "nir: Add nir_opt_load_store_update_alignments.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b582449f0eca5f71437d798de7805fdccf86f70",
+        "description": "nir/lower_point_size: support lowered i/o",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "471ac97a4af751226bc51076130deae252bb481e",
+        "description": "drm-shim: Stub syncobj reset ioctl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc404d45ff4fa7947cffdc75da0d2b773902a1e4",
+        "description": "aco: remove perfwarn",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea3e5bcc995cc4c1d902ee05aaebb24975375cb8",
+        "description": "aco/optimizer: remove ineffective undef opt",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd699b5d88500b7ff7b4f1a82b17549d11db8fae",
+        "description": "aco/optimizer: remove ineffective vcc opt",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eefe34127f8e8ae2ba91a7837b9dfef999dc3f87",
+        "description": "panfrost: add a barrier when launching xfb jobs in CSF",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69ceb5dab9ada6d8b54c03d27f6db78713208455",
+        "description": "v3d: remove handled cases for devices <= 42",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbcfb34cf78245ce130077b6928f830487dbf613",
+        "description": "v3d: use BITSET for the masks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "924c5ad2ac9077f7bc4bd1e19ca86946fbd97c3f",
+        "description": "egl/android: Fix sRGB visuals",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "273e54391af7e0a89daec778980c3f8a800bcd7b",
+        "notes": null
+    },
+    {
+        "sha": "97962f2a347dcc0c536af629d3d0082c8e49fb99",
+        "description": "radv: mark some formats as unsupported on GFX8/CARRIZO",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e384b28805e477f43246fa073fbd6540c7911dfc",
+        "description": "radeonsi: reject some texture formats but only on GFX8/CARRIZO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "95122a1cf7a8e5748b9d40fdb9c541947c413d96",
+        "description": "ac,radv,radeonsi: introduce a helper to build a FMASK descriptor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1b4b399ce07266a2b04fe5c7c1df9e1c9649642",
+        "description": "zink: disable cpu_storage for PIPE_USAGE_STREAM",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "01bac643f6c088f7537edf18f2d4094881c1ecda",
+        "description": "freedreno/ir3: Fix ldg/stg offset",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "60686d4146cd3856dd2066f6e49560b1dd76bd66",
+        "notes": null
+    },
+    {
+        "sha": "23488790c146b52a543e0210a12e076a3fb8fa89",
+        "description": "zink: remove dgc debug mode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e09310711540f44315871c3ffcb5059f8c3bec76",
+        "description": "lavapipe: lvp_indirect_command_layout -> lvp_indirect_command_layout_nv",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aaa3f37ae5917fdabcf95d106b91c747228bec52",
+        "description": "lavapipe: plumb print_cmds through NV DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42e3d580cc75b1bd86a57ed364d802bcaf00714c",
+        "description": "lavapipe: split out DGC into separate file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3be436830e823a9941587bdb00a381a8dd255d2a",
+        "description": "ac/llvm: Remove global access ops handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2e80e57a3c3a9e35e22edc07e13427cc68779b8",
+        "description": "radeonsi,aco: Run ac_nir_lower_global_access pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46644ba371e817d8f33ad7b46ce2ba7775e6d2cc",
+        "description": "meson: use glslang --depfile argument when possible",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "32e43fe77cc6c76df621ecbb8869755967cf4ff7",
+        "description": "ac,radv,radeonsi: add helper to know if a format is supported by DB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2234adf59a19340b2564e9270a78e434a5de87f",
+        "description": "ac,radv,radeonsi: add helper to know if a format is supported by CB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c62f86587f47719177e088867ac8a82a4a61fb51",
+        "description": "amd/common: move some format related helpers to ac_formats.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "473559001f21218febaaf069441bb3d4afc4ab5c",
+        "description": "radv: add radv_is_colorbuffer_format_blendable()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f39e3a0f3aff238e3e4cd9960f957ce78da1580",
+        "description": "radv: stop checking the return value of ac_get_cb_number_type()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e227f2cc721de0c915df065b772a3d89dec79167",
+        "description": "radv: remove redundant check for VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 on GFX6-10",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58ca4cee9ec156bcd26abb11cbc7d772239c1354",
+        "description": "d3d12: Video Encode - Fix inputs for older OS support query cap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8eb9fc9b45c17b1117e272548d59d68525fe09e",
+        "description": "nir: Mark variable as ASSERTED to fix unused variable warning treated as error",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07080c5fc52966cce7dbca9c1b6b6ad21df92a15",
+        "description": "radv: simplify creating gfx10 texture descriptors for sliced 3d/2d view of 3d",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16952a179bb0d54b131eafc525148fdad9c284d3",
+        "description": "radv: allow 3d views with VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96a9625866b31b3cb11a4ea7c267f8efcfb2aa4a",
+        "description": "ac,radv,radeonsi: add a function to get the color format endian swap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35c6b9c066ce583648b3f833b94055537a949d12",
+        "description": "ac,radv,radeonsi: add a function to translate db format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "934fc47822d0fe2f87a83c81bf648e0e92887ce5",
+        "description": "radv: use PIPE_FORMAT in radv_translate_dbformat()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f0430bb361899ec6f1dde412ce99e76ea844502",
+        "description": "ac,radv,radeonsi: add a function to translate colorswap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40428bd497b96fd0ff5c47273ac369c5c8b4c42b",
+        "description": "radv: use PIPE_FORMAT in radv_translate_colorswap()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "255e76b41935ba2bfaf81d0fd893f72eea271084",
+        "description": "ac,radv,radeonsi: add a function to translate tex numformat",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6030c876d0254251db4d5b18406a01dc4b591a1e",
+        "description": "radv: use PIPE_FORMAT in radv_translate_tex_numformat()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2fef95f901e8561cdc9644d63dd74e43a04d10c2",
+        "description": "radv: stop checking the output value of radv_translate_tex_numformat",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "418fed1805a6fa4a5b12d384b74b726f956f9146",
+        "description": "aco: update VS prolog waitcnt for GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f01cac835f95bcc65b2ca0afeed4f29a6bbb64f0",
+        "description": "aco/stats: support GFX12 in collect_preasm_stats()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e9cabd2fa168690ffde09bed5675c1940b13dc5",
+        "description": "aco/waitcnt: support GFX12 in waitcnt pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cadce0f3b731d2a93f4e3bc3ff3b44f7d90f0fef",
+        "description": "aco: add GFX12 wait counters",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c5e13af73cd2d3b58934cef82ae22cb00736ff08",
+        "description": "ci: lima farm maintenance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a31996ce5a6b7eb3b324b71eb9e9c45173953c50",
+        "description": "anv: switch to vk_device::mem_cache field for default cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2282e3a571f18b48b8b717ec32da1d0ed93f1b5",
+        "description": "v3dv/meta_clear: use v3dv_renderpass used as parameter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07f3c37b9a3e794122970bf8a589835c85c4b83b",
+        "description": "v3dv/meta_clear: take into account multiview for the custom clear pipeline caches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f26303dbb16d667e0073f8aef62cb97330f251d",
+        "description": "v3dv: add debug option to disable custom pipeline caches for meta operations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "795057d44ef98ae9f41234690b25f8c66e542847",
+        "description": "glsl: move geom input array sizing to nir linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08659a0baaae74dfec90f6a871005357cacfca3c",
+        "description": "winsys/i915: depends on intel_wa.h",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ffe54ca2935284f0248be3f04606e0fc8ff7990d",
+        "description": "nir/linking: fix nir_assign_io_var_locations for scalarized dual blend",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e28061c5021b7902b39d8e93ae0e2d12682b1fbe",
+        "description": "nir/lower_aaline: fix for scalarized outputs",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b4bd3807045a5656848ced72ae5fbfa539b89d26",
+        "description": "nir/algebraic: eliminate pack+unpack and unpack+pack pairs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "681acde6d3925ec05275bea60e8b38999bc0662e",
+        "description": "nvk/meta: Save and restore set_dynamic_buffer_start",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e0d907f56fd84c119af22d6b4d14c52d99fd7b0c",
+        "notes": null
+    },
+    {
+        "sha": "3e9b08f417e7e74057eb478b1686f5d985bbda17",
+        "description": "nvk: Refactor nvk_meta_begin() to use a desc helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f0292f6b09aa6c5101f983672b34e9ca1421cee",
+        "description": "nvk: Add an NVK_MAX_SAMPLES #define",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce0efbd1758bf3141b66abd55b04cc33a256091d",
+        "description": "nvk: Move and better document set_dynamic_buffer_start",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99f806b7338110f99818cd65b44a95d29909c184",
+        "description": "nvk: Advertise 32 descriptor sets",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54ce220f1084d0d399ef5036ba27cad66cf7635c",
+        "description": "nvk: Store an nvk_buffer_address for each set in the root table.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e417df49960a9bde0c8dbc8530b4619c125113c",
+        "description": "nvk: Add static asserts for nvk_buffer_address layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6fcfcd26259d35d2c7d56444daca66e3aee792fc",
+        "description": "nvk: Store descriptor set addresses in descriptor state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f55c51a343c5848e6b97d098875ee65966d210fe",
+        "description": "ci/etnaviv: add flakes from nightly runs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "788d945c9a7a99f948d83339bf6bbf7774918248",
+        "description": "ci/alpine: re-enable Mold linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ae4a2ae34954b8dd7213a9663a2f98907c49cd6",
+        "description": "u_gralloc/fallback: Extract modifier from QCOM native_handle",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1373b0966cbd329e25fa9732330afdb6881482a7",
+        "notes": null
+    },
+    {
+        "sha": "2934e1fad52806b4904a22c037c564eba6e21c85",
+        "description": "Revert \"egl/wayland: Remove EGL_WL_create_wayland_buffer_from_image\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a3418105b9169b8f72745c9901db37cd545ac583",
+        "notes": null
+    },
+    {
+        "sha": "7fe169dd4ab2f9e0f9fbe1dd3bd5193d170480a8",
+        "description": "ac,radv,radeonsi: introduce a helper to build a sampler descriptor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd05b23a954990e39f6c03348668e4042deac3d9",
+        "description": "radeonsi: refactor si_translate_border_color()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6b29a47887c3fb05ba3b652d1d647dd41c7a0f2",
+        "description": "egl/dri2: fix error returns on dri2_initialize_x11_dri3 fail",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "62f65f4bfdae169de7842f2577dca5f8160616f4",
+        "notes": null
+    },
+    {
+        "sha": "caca5e0de6079e888d68c09b436c01c0ec006207",
+        "description": "radv: add more helpers to emit viewports",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73e1ff6b545c565c69a4b4b388cb5c25ecc07437",
+        "description": "radv: use float instead of double for viewport zscale/ztranslate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50ef8600bc665a06121587caf0792df225ba1331",
+        "description": "radv: pass radv_physical_device to radv_emit_default_sample_locations()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e7c44ea1162362ac0f3098956160610ecfc50c9",
+        "description": "radv: simplify radv_emit_default_sample_locations()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0697452f57e057f10e662ca8510707d04a40e023",
+        "description": "ac,radv,radeonsi: add a helper to translate buffer dataformat",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d9bdb6410c81a4632ab0ddae90cb8b031d073be",
+        "description": "ac,radv,radeonsi: add a helper to translate buffer numformat",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "34090151034693a231e67855c550638c209a4cc2",
+        "description": "radv: reject unsupported buffer formats earlier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "622e1b6385eaf4f9e109752719682e85c0e2a3c9",
+        "description": "radv: only enable VK_MESA_image_alignment_control on GFX9-11.5",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "6c3457033a8ecc76f7c07c87221bca69c8e7ce07",
+        "notes": null
+    },
+    {
+        "sha": "f0200a54d953ef411c09f9e3e84f6a297942b384",
+        "description": "radv: add a helper to configure ring buffer descriptors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db58d0f40b8792427d1f416ec96726fb22837115",
+        "description": "venus: forward nice priority when creating ring",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d2d49c63f559f37c6d5a5ab20904c5396a254ef",
+        "description": "sync protocol for VkRingPriorityInfoMESA",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b02584bed62592ad17a53d233c5da8e404123b8",
+        "description": "ci/panfrost: Revert \"ci/panfrost: disable G52 until machines gets fixed\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "891730ac0b678c1fece36d92b921192249d90d2f",
+        "notes": null
+    },
+    {
+        "sha": "782f2b3dea2c7e7d6c7b9f2c76594f9ef1de5c30",
+        "description": "ci/intel: add new jsl flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49760b6af627d1b2ec506a5dd0ad56deb3679a7b",
+        "description": "ci: Revert \"ci: update failures list with angle for jsl, tgl\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "197f99dc703b66575cda74bea8fc4a2aca91973a",
+        "notes": null
+    },
+    {
+        "sha": "ec8eeb39aef3c17d0c25170d65f751fa231cd3b7",
+        "description": "ci: bump ANGLE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a8cb81f61df3815ffd50453e2689fafa1029165",
+        "description": "nir/tex_instr_result_size: handle subpass_ms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72326e15f37dae710215f98651832d53d9deaa1b",
+        "description": "anv: Use current_frame from vk device to delimit u_trace frames",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c73b3f590b88a6406744401611121aa81a9fc912",
+        "description": "tu: Use current_frame from vk device to delimit u_trace frames",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4510350d5549a9d5029e01dce0e67b68a1ec1f2a",
+        "description": "util/u_trace: Pass explicit frame_nr argument to delimit frames",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eed28932c0f096ab67471d7c2d387c081adae37f",
+        "description": "vulkan/wsi: Make current_frame usable in all cases",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5637f44b8af8b3daa086a49922a5b0431c1e0e1",
+        "description": "asahi: unify naming for COUNTS structs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a173c2e38cb064b668cf27903d8a3aa7ac2ceb0f",
+        "description": "asahi: split CDM Launch words",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5fbd8bb694fc5be413274c0292189747f87a71ff",
+        "description": "asahi: split frag shader words",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7dcd5f1f02893d29c7da8513f2ae0bfd75e42596",
+        "description": "asahi: don't allocate for USC words",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06d59d3f5c62718a525edf71faeb2c6989b69420",
+        "description": "asahi: rename meta -> bg/eot",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd3dabe8e0702d18b7ed7a1437bb708909b7cc8e",
+        "description": "asahi: clean up bg/eot counts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed2d15d42f13fc8c574ebd7051b1e90f8327eac5",
+        "description": "asahi: track imports for decode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff553d1ac8a865f89a0131b9ba4bc41bd0abadfa",
+        "description": "asahi/decode: QoL improvements",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "564e569072d874a61097f1a622184975855207c8",
+        "description": "nir/lower_cl_images: set binding also for samplers",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "31ed24cec7c63fc3906e7629edf235e333c94ffe",
+        "notes": null
+    },
+    {
+        "sha": "97c99aa9b355f9b2278d91441781aed46c0ef8c1",
+        "description": "tu: Add more info to renderpass tracepoint",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57a3f0f9499c253a4a4e515ecda7e4c0f8163bf5",
+        "description": "util/u_trace: Allow mixing of ArgStruct and Arg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5f4a6b5b00b392a2c98f8565fb967871bdd24a29",
+        "description": "radeonsi/vcn: Ensure at least one reference for H264 P/B frames",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ef3a34f1a2d404ee28b2edd9007aeb203419e24",
+        "description": "radeonsi/vcn: Allow duplicate buffers in DPB",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47b6ca47d0be9e218a7ca3f47f90de2ed6c174f7",
+        "description": "radeonsi/vcn: Ensure DPB has as many buffers as references",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9837dab4bdbb7fd438b443378570b8224f50be38",
+        "description": "frontends/va: Store slice types for H264 decode",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8a1d9f787908612d234c5e7ffeaab825c5b7d7a",
+        "description": "r600: fix vertex state update clover regression",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "659b7eb2799bccfff817961518d0ff2ab9e65bca",
+        "notes": null
+    },
+    {
+        "sha": "f398f6ab0866ff48329cee562df20228ba36b7db",
+        "description": "r600/sfn: Set bit size for newly created store intrinsic",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1632948a7640e0acb569be7c61e0840451daca2e",
+        "notes": null
+    },
+    {
+        "sha": "e1b40373ce6b4f33293a2e7b27ca00b6ce39d9b4",
+        "description": "zink: ci updates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee2fb2f2f379a37ca73bf0542e66650b4cc33686",
+        "description": "zink: split slot map between regular varyings and patch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66eb26c00ff891edf5d85168cf5f556db09ccbd0",
+        "description": "zink: move 'reserved' into io assign struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ca0c8cbaeb396191c7c27753f64d9be30e1e738",
+        "description": "zink: unify io assignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6af91a968393399277b950f4a320eeb90140fb1",
+        "description": "zink: track masks of io locations used during linking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f2e56350a94480e11dc86e3bbb071046645747a",
+        "description": "zink: pass a struct through io assignment functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42f2719a88f960655157c980f52af1cb9a76221b",
+        "description": "zink: outdent assign_consumer_var_io()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "737de5573ffef4c143d548fa14e2176615c5e8c4",
+        "description": "zink: outdent assign_producer_var_io()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "613c7c158663d5921b3c13d8bef8b763a2eb1119",
+        "description": "zink: minor tweaks to shader io assignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18f9f17be522394575ba5ea88335a561ee5c4789",
+        "description": "zink: make unassigned io variables unreachable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "390ac5ba14c52ce0ad238dbbcd3d1a5fa75a5676",
+        "description": "mailmap: add entry to unify Roman Stratiienko's contributions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75931d6e6882d18e13d18b120cebb47ededf15df",
+        "description": "Uprev Piglit to 8a6ce9c6fc5c8039665655bca4904d5601c6dba0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f25cef8aa103a828e7afb4f3c23426d47e99b04",
+        "description": "radeonsi: add testmemperf mem bandwidth test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd9f6f9e85d38b54064d7218272859557acedc64",
+        "description": "radeonsi: allocate sqtt and spm buffers in GTT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afd2cbeb28efe2fda48f6c30e9cf5fee931becb2",
+        "description": "radeonsi/sqtt: use si_shader_binary_upload_at to reupload shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38c64001678866b0401ff55fd34d7caefd3f7674",
+        "description": "radeonsi: add new si_shader_binary_upload_at method",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5794a86f1918919435a85be07c58010fb8578a6d",
+        "description": "radeonsi/sqtt: support sqtt buffer auto-resizing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "316fff7d41765354287250edf48cac82baa4450a",
+        "description": "radeonsi/sqtt: cleanup si_sqtt_add_code_object a bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e32dddf7abcfdc529f02c4010f4869a5acde0105",
+        "description": "radeonsi/sqtt: use ac_sqtt_get_shader_mask for spm counters",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99a65117750bf029b5fce9a67ac491022de9ecfb",
+        "description": "gitlab: Reference hang debugging documenttion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "586bca76dd031c1abef718831aa9a77b00a5d0c6",
+        "description": "nvk: remove NVK_MME_COPY_QUERIES",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12fa8d749a4062bfddff0b69852475461952f7c9",
+        "description": "nak: Migrate sph.rs to use SPH headers defintion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fda488aecb537e342d13ff7f36136baa00c18af",
+        "description": "nak: Set SPH version to 4 on SM75+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "170b09790a817e66757074da64be078e4a83eec1",
+        "description": "nouveau: nvidia_header: Add AMPERE_B class generation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "784407f932713d5d8b3f2d0c7269ba6efe76d544",
+        "description": "nvk: generate Rust bindings from SPH header files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7d4e4ba2bed7971caaf50318340a2370bcb6129",
+        "description": "nvk: import SPH headers files from open-gpu-doc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a83c15654c7897be9d06b015f048878c2643d11d",
+        "description": "drm-shim: intercept access as well",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53629b0a2d4831efbc7cc5a5dc4503482f748e2e",
+        "description": "rusticl: make use of new `output_inline_wrapper` meson.rust.bindgen feature",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3e3eab12d83fd7b7fccfec981700f187f5d3867e",
+        "description": "rusticl: bump meson req to 1.4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86a11248a5db75ee90d62a4b8b38b017c82fd47e",
+        "description": "rusticl: bump bindgen req to 0.65",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c46cd101e1c84a50c4fb21b4600cc8f32fef41e8",
+        "description": "rusticl: move mesa_version_string out of the inline wrapper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2dfb3350f086fd6bc33259018990ecf58e07fc3",
+        "description": "rusticl: merge rusticl_nir and rusticl_mesa_bindings_inline_wrapper targets",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2740d92e3de9195dcdacc0c71345b746c4227e7d",
+        "description": "vulkan: drop redundant core props query and copy helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "374a14ce4cc0cbc7721410160bc28a079fb6bc9b",
+        "description": "venus: define VN_SET_VK_PROPS(_EXT) to simplify vk props init",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c152a6e5ddd45077e0891d74795fa370124ad01",
+        "description": "venus: Use common physical device properties",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f04bc27fe1fd3a645696732e07defb16e0be43d6",
+        "description": "vulkan: add a property struct setter function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb9a394e3c37f7dbe550b1226af74d634d42e1a6",
+        "description": "venus: move props sanitization to a separate helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dceb1b0c4db05a30aab430548be34c789d942564",
+        "description": "venus: move custom props fill from GPDP2 to props init",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0197924d63439b9355609615e7e64ac5cd4de910",
+        "description": "venus: directly use vk drm and pci props in renderer info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1e2293f8c6a24f3cede70aa0a6af895106952a5",
+        "description": "vulkan: cast to avoid -Wswitch for Android struct beyond VkStructureType",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1afbf0ba4a8eec886eb552754445279f16fb3564",
+        "notes": null
+    },
+    {
+        "sha": "c522848d5afd598ac16d4dd9fdaf498111ee0d0c",
+        "description": "radeonsi: Update buffer for other planes in si_alloc_resource",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec90da3c7651894256283f68d5fcee3e47cf8e59",
+        "description": "nvk: Go wide for query copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce0da9ee975ef7d17356bb28f1e0f81e7a2bbad3",
+        "description": "nvk: Fix misc. whitespace and style issues",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0bba26f04ba89edc2573612d276552e26d907c2",
+        "description": "v3dv/android: Migrate ANB and AHB to use common helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3facbc0cd3734dda3afc1f46dca9455a583df0be",
+        "description": "docs: update calendar for 24.1.0-rc4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eebc4ec264ebbd90c5284000c6527433999bfc93",
+        "description": "intel/brw/xe2+: Round up spill/unspill data size to nearest reg_size multiple.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50daf161f45bef680d23c4909631db3607c748a6",
+        "description": "intel/brw/xe2+: Lower 64-bit integer uadd_sat.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "15a10786e317710970102e0f22cf785a0876920e",
+        "description": "nir: Add option to lower 64-bit uadd_sat.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4bb5b25e530e4e3b915a36b0a627ef5280751050",
+        "description": "intel/xe2+: Enable native 64-bit integer arithmetic.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8be9f00d84ccae838984d5a48cfb0c22cc65c5b5",
+        "description": "intel/brw/xe2+: Lower 64-bit SHUFFLE and CLUSTER_BROADCAST.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6261f4d36197e16f3bc5dbab4a8cc580a20ade9b",
+        "description": "intel/brw/xe2+: Fix 64-bit subgroup scan intrinsics not to rely on SEL instructions.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bf93ee4ecaaf045b284be81178c66a7baa73029",
+        "description": "intel/brw/xe2+: Don't use SEL peephole on 64-bit moves.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b18e68fc252db7df33fdf2d08d77c5ba3b17f209",
+        "description": "blorp: Allocate fixed amount of space for blend state.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b73638ae5ed251cebda5f033517293aa01051d44",
+        "description": "iris: Allocate fixed amount of space for blend state.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f798cc9115805fd5660875889ed51a540506823",
+        "description": "intel/brw/xe2+: Fix indirect extended descriptor setup for scratch space.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d92ec44e52cf29a4f5de44e4623eeff3036fcb9",
+        "description": "intel/brw: Don't emit Z coordinate interpolation if CPS isn't in use.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "475fb687265abfdf2d2380c6eb5c5c4f6d468d77",
+        "description": "intel/brw: We no longer have atomic fmin/fmax ops for fp64 in xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d8d3666c6a1f85712527cead25691e58234c4b5",
+        "description": "intel/brw: Advertise fp64 atomic add's when we have 64 bit float support and a LSC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c129d93658a378aa69c7b4f392dc3019d1e2f4b",
+        "description": "intel/brw/xe2+: Keep PS sample mask in the f1.0 register whether or not kill is used.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7668de019b379783fabf28d3034dd7d3ef9b49b9",
+        "description": "intel/eu/xe2+: Fix src1 length bits of SEND instruction with UGM target.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb6638da80c033725a16613f9343f126c401ca01",
+        "description": "README: update links to our own docs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f1662e9bc96705fd1ae596db6eba8d0b873eec61",
+        "description": "rusticl/mesa/context: flush context before destruction",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "50e981a0504bf0a94b7cd93105ff250707e6850d",
+        "notes": null
+    },
+    {
+        "sha": "ec06911b3d84345a7eb672f86524a9bbcad6a5ce",
+        "description": "Revert \"iris: slow clear higher miplevels on single sampled 8bpp resources that have TILE64\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8670fd6ac4611ca29468830a8d59d99bbe872651",
+        "notes": null
+    },
+    {
+        "sha": "9e66d89be9a300f0ace8e3ff16d740c008b36e2c",
+        "description": "zink/ci: rename .zink-lvp-venus-rules to .zink-venus-lvp-rules to match the rest of the names",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3cbb3c0b668c4aed9d5a49160b5f37c27a565090",
+        "description": "ci/env: move dead-code-with-comment to the end of the list to make it clearer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f17b2fa767eb368e1706091dca3073243b0a03c",
+        "description": "ci/b2c: remove dead rules: that's always overwritten",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "93c0a607bce38e978102df7c34424620bb25f2ac",
+        "description": "ci/vkd3d: fail job when failing to get driver version",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3127b52ef709c4157686af24bfdbf659b01bbbcb",
+        "description": "ci/vkd3d: fix version sanity check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "300afd3c86ea7dfc742b73963558500821668b3e",
+        "description": "ci/vkd3d: un-hardcode architecture",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "978f96710590bb85f2cf2b1e8e9c2529897727df",
+        "description": "ci/init-stage2: set VK_DRIVER_FILES for both xorg and wayland",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0089a1ffd44550f9fc01b16002ebd729f618972",
+        "description": "ci/piglit-traces: drop re-definition of VK_DRIVER_FILES",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc49894e34f139b72479e23fd6d5ee0350a30fda",
+        "description": "ci: drop dead VK_CPU option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b4a94b09692d20583ec61b8e3815db3d6714f904",
+        "description": "ci/b2c: allow setting timeouts in seconds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a07db7cd8e1c6b4e4b48c536822ec0ad63dc93e",
+        "description": "ci/b2c: rename B2C_TIMEOUT_* to B2C_TIMEOUT_CONSOLE_ACTIVITY_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09021a1c019f19ee98f75e58f4da40387015449f",
+        "description": "ci/b2c: rename B2C_TIMEOUT_FIRST_* to B2C_TIMEOUT_FIRST_CONSOLE_ACTIVITY_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66ad09f569a1850189cd980b2b2cf013aebf05d9",
+        "description": "ci: inherit the debian container building infra for test container images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5157363772a3ac0657eedae380af441b25b5e3da",
+        "description": "ci: factor out all the deps to build the debian containers into .debian-container",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad9e78ba8218a04d4b5cc2eb64cac19faabc3dd9",
+        "description": "ci: rename debian version variable job to include the word \"version\"",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b545e78f12b02069fa363a4a7ef749a996ea3c4b",
+        "description": "v3dv: support 2712D0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1fc846dce396e2e0d1be23568e22ae2510df71bd",
+        "description": "v3d: support 2712D0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b807c3e948398da96293c6252c57505e11c74c9",
+        "description": "broadcom/cle: fix up shader record for V3D 7.1.10 / 2712D0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0daf5e243f3fcb72b034da7ee8a85e86906562fa",
+        "description": "anv: shader printf example",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b766968616a8d033855a0760335f35cc8b3b9f4",
+        "description": "intel/clc: enable printfs support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64010716c847d165098b4831091eb133138d9e2c",
+        "description": "anv: add debug shader printf support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a36278475504ef119fc5191f7e0c4476e0c288d",
+        "description": "intel/nir: add printf lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a8ff3b550ec29ec5a6c5c61a2053c2bd0627166",
+        "description": "intel/compiler: store u_printf_info in prog_data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ecbec25e8462ecd3c9610f64f48d47dd4ac7ef43",
+        "description": "intel/nir: add reloc delta to load_reloc_const_intel intrinsic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dde91d18c279fe225afa3015e4196b57594ddf5c",
+        "description": "intel/nir: remove unused prototypes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c16e58eabd94573d94b8c75d35fb0306d4831eae",
+        "description": "nir: add a low level printf emission helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c518a176f50053fb7723dea24781059e7541bf6d",
+        "description": "nir: add ptr_bit_size parameter to nir_lower_printf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2be28ee58a416bbd1144228ba0348ce37c049de2",
+        "description": "nir: add a base offset for printf indexing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d336f069e8a354e8fb0b7c69968d0e5d86af460",
+        "description": "nir/divergence: add missing load_printf_buffer_address",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3716bd704f8259545d34c73c2d065be7008f147f",
+        "description": "anv: fix push constant subgroup_id location",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "7c76125db25db9bdf5521baf7c848ccd4bd37b5f",
+        "notes": null
+    },
+    {
+        "sha": "cd7da3a8073ff4094eabf94c0d775776aa555dca",
+        "description": "freedreno/devices: Add support for Adreno A32 (G3x Gen 2)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa9244c8f6bfa3fb33cf233104b00fc44fc9459f",
+        "description": "intel/brw: update Xe2 max SIMD message sizes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c8852719d05424b9c3e79be49515fd0915191b22",
+        "description": "radv: rename radeon perfctr uconfig helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2957cedad7d15832970c890446461eecb219c3d6",
+        "description": "radv: remove redundant radeon_set_perfctr_reg() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b023780ada5ac2ed6739a278ea3160fe7f554d9",
+        "description": "radv: introduce radeon_set_reg_seq()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f0d4212847c9ca22b25c87bed7dc0286f9cd590f",
+        "description": "radv: stop using radv_physical_device for radeon helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e78e4a344dc769b6f7d0e6a1447455d48a325cb",
+        "description": "rusticl/device: properly handle devices with no support for images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "017ae1f02d91c14187db92b4f0fd5f84b62d7600",
+        "description": "rusticl/device/caps: move enough for has_images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e02b4e0d449c2e3053a6802909fb73b19412133a",
+        "description": "rusticl/device: add DeviceCaps and move timestamp stuff into it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3e5f8e6db862935e559cc6968efdefb161f4cf4",
+        "description": "anv/sparse: assert a format can't be standard and non-standard",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4384c8782ede3d5a0b3e6fcf3b7f7edad383ad6d",
+        "description": "anv+zink/ci: add failures related to multi-sampled sparse binding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5294faee203b22185140e4f3ec665435b602bfcd",
+        "description": "anv: check for VK_RENDERING_SUSPENDING_BIT once at CmdEndRendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ef3d652b2515de002b7e161b320a80e2a2bbe9c",
+        "description": "anv/sparse: enable MSAA for Sparse when applicable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e5979b5a205a7d2a81131971db978832ca25f66",
+        "description": "anv/sparse: flush the tile cache when resolving sparse images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8abfdfe576be130667eed08da3e3d71a06be579a",
+        "description": "anv/sparse: exclude Xe2's Tile64's non-standard block shapes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e69c7cd1496a10fe31b53666f9ab64614dfa9e15",
+        "description": "anv/sparse: fix block_size_B when the image is multi-sampled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d748f5b2c7541ffbc45e55e36d16a7154e4bb14",
+        "description": "anv/sparse: reject all sample flags that non-sparse doesn't support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "620f1d1a7a0a7848f9beaf8013aa4fc692cce39e",
+        "description": "anv/sparse: properly reject sample counts we don't support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af725a2ccc8649f2dc2666f9eae6f98916b41f91",
+        "description": "anv/sparse: we can't do multi-sampled depth/stencil sparse images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d38801ebd97e823d3d97790581056ea672a2527",
+        "description": "anv/sparse: add the MSAA block shape tables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66b6671d3c104e5725f550d26b5872534760946c",
+        "description": "isl: add ISL_TILING_64_XE2 to isl_tiling_to_name()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c69650a95e26193652b93bb229c82b77cfac6b3c",
+        "notes": null
+    },
+    {
+        "sha": "90b0925588d42a367bdc34dea8856691b33a44ae",
+        "description": "radeonsi: constify struct pipe_vertex_buffer *",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "283f8af9763f1cc7dd54073c0768c972847e0549",
+        "description": "radeonsi/ci: remove some gfx11 flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f237f497eb2b157de9879748b7e735b79a09819d",
+        "description": "radeonsi/ci: update failures for all generations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87fd149bd8668a5f813c3aac3e361d7742568a90",
+        "description": "radeonsi/ci: fix caselists for vk-gl-cts/main",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b91220a825d74d79606e23d4fd8b89312bf6079f",
+        "description": "radeonsi: remove slow code from si_msaa_resolve_blit_via_CB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b771d1355747d9379761dbc709394d792c628b39",
+        "description": "radeonsi: replace the clear_12bytes_buffer shader with the DMA compute shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "995e7d927c2613e56a05bff98acc2bf0e02b7782",
+        "description": "radeonsi: use set_work_size for all internal compute dispatches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83d8b3bc1a05ce482bf4b1e82af009205aaba557",
+        "description": "radeonsi: simplify the complex clear/copy_buffer shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "92497d1c8fe8ca4e09f99826326d010436ec1ccd",
+        "description": "radeonsi: minor simplifications of clear/copy_buffer shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81c90cded01d8d68433cffa6a432ddda694816b0",
+        "description": "radeonsi: get NIR options from si_screen instead of calling get_compiler_options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "56f2cc22779c204598d2216f753d405d50260e75",
+        "description": "radeonsi/gfx11: use a lighter workaround for Navi31 dEQP failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "602dd4c6012347bf82bfc61bfffa6c73baf12544",
+        "description": "radeonsi: set flags directly instead of having needs_db_flush",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ebe75fab1f963fbe8c37f4b9892028f3bc76b36",
+        "description": "radeonsi: remove GDS tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e546fb6833dd178bb9f7889c82ae38e14dd868d",
+        "description": "radeonsi: validate the buffer range in si_set_shader_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d3dbb2bef3fef0d873c08fcca8dbf1c11ac8a5e",
+        "description": "radeonsi: fix the size of the query result SSBO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96cf96f611f26b80f815c4ef5ebcc24cbd00c937",
+        "description": "radeonsi: serialize shader disassembly string to fix asm dumps for ACO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "573b2b813a8bc30a98ad09cde13853160611f2f6",
+        "description": "ac/llvm: improve/simplify/fix load_ssbo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "197f99dc703b66575cda74bea8fc4a2aca91973a",
+        "description": "ci: update failures list with angle for jsl, tgl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7dcea9dd7b47e31f795ac4e6f3df94a71cdc50c0",
+        "description": "docs/features: add VK_EXT_legacy_dithering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ac5e70faecab51523151611640861f0e4092022",
+        "description": "anv: VK_EXT_legacy_dithering support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7ce48557a4dc6a43a7db721aaad0f23ef0810af",
+        "description": "vulkan/runtime: add a subpass bit for legacy dithering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "826d467e4042e17e34414cb53e36a7177ad7548c",
+        "description": "tu: Change commas to semicolons in VK_EXT_map_memory_placed features",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "220dae5870c03d712a1ad1323a7ae5be1c368d39",
+        "notes": null
+    },
+    {
+        "sha": "03d8620c4cd34de0181fac75a7345ab44a0eb87d",
+        "description": "tu: Add missing VK_EXT_legacy_vertex_attributes feature",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "660a47ecbf693601c25660b5fac87121ff0fe8bc",
+        "notes": null
+    },
+    {
+        "sha": "59babe9fa0b8e45e49bb0e7d5a9bdccdad6840af",
+        "description": "radv: make radv_pipeline_has_ngg static",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be391fdb33657ed060a4d0b18770473889c09daa",
+        "description": "radv: check gs_copy_shader directly for executable props",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9f24fb5f1cd34ee64b7d1f3bdbb03bf9b90e2c6",
+        "description": "intel/brw: fix subgroup size of geometry stages for lnl+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a28a289374b2348a528e56898a56e62a45fa01e6",
+        "description": "ci/freedreno: update expectations from the nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96ad012878416147653eaeeed4e92ed22d980dc8",
+        "description": "freedreno/ci: Implement nightly piglit job for Adreno 630 and 618",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e5a56752399b1e302ba5a414a8dee971ebe94b0",
+        "description": "freedreno/ci: Drop duplicated include and add missing stages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "926865580ea48650e683924250e216566b53571c",
+        "description": "freedreno/ci: Increase a630/a618 piglit fraction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da212113f807c9d1addb6e50241a4a2c8b03dcab",
+        "description": "freedreno/ci: Skip some slow tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e1be72dd4b994f60fe7c45c188f31c028e3ade0",
+        "description": "freedreno/ci: Skip built-in-functions VS/GS tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6cb8c5dad0ac4d6d160ee763520c71fb4d711bfe",
+        "description": "freedreno/ci: Add a common skips file to a618_piglit.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b92c6e16ab76a23f8dc939ac947c0cb6a07b7f0e",
+        "description": "freedreno/ci: Skip max-texture-size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "242a591d4c077603bc40d5cd00fda16335ba04e1",
+        "description": "freedreno/ci: Skip unsupported legacy gl stuff",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e7970b06726e5a391333a3b4d465a28ca187457",
+        "description": "freedreno/ci: Refactor out common a6xx skips list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d260752b83b22d7f7623641fc921ff483db1ed1",
+        "description": "freedreno/ci: Remove some obsolete skips",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a42db02808d3bae716d95afefadd233f658bb550",
+        "description": "freedreno/ci: Remove some skips",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4abe5b7927193678a86297a735338a46260011d7",
+        "description": "aco/gfx12: disable s_cmpk optimization",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c4f5617086289886ce3e0546cd98493cff49876",
+        "description": "aco: don't change prefetch mode on GFX11.5+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e58e3283207bfd6359281b2719ef032d8fb8622",
+        "description": "aco/tests: add GFX12 assembler tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1e5bc0dd051dc2392f3ba9415d678b4a59eb734",
+        "description": "aco: support GFX12 in assembler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74aa6437d6edc74bb8872ca6a156f66a9f0c771f",
+        "description": "aco: add GFX11.5+ opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97698e564acc9ee560fade47bd566fe9cdeae3dc",
+        "description": "aco: add SFPU/ValuPseudoScalarTrans instr class",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9a25151fa90c0b100cda695b1d142c3ee8d4dbb",
+        "description": "aco/tests: support GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43bb9890708c0bc51159338395984e93fbf6af35",
+        "description": "turnip: virtio: fix racy gem close for re-imported dma-buf",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f17c5297d7a01eb37815f96bbf3a87667a2f3261",
+        "notes": null
+    },
+    {
+        "sha": "6ca192f586fe1470a97b6f34bce7761a760ce15d",
+        "description": "turnip: virtio: fix iova leak upon found already imported dmabuf",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f17c5297d7a01eb37815f96bbf3a87667a2f3261",
+        "notes": null
+    },
+    {
+        "sha": "585a87ae53a181ab2a0e73fca0e4d84f75523823",
+        "description": "turnip: virtio: fix error path in virtio_bo_init",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f17c5297d7a01eb37815f96bbf3a87667a2f3261",
+        "notes": null
+    },
+    {
+        "sha": "b33bb4077d7500232a5cadd956b5c8810bb5c9ba",
+        "description": "frontends/va: Only increment slice offset after first slice parameters",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6746d4df6eac83d048e88c2d54aa19e7c1a0a696",
+        "notes": null
+    },
+    {
+        "sha": "1240fbba212ed412712f8ed4b83a57eb00dc41fa",
+        "description": "ci: bump VVL to v1.3.285",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4a66eadf9685858da40c079dea7c06602ae9999",
+        "description": "zink: set all spirv caps for the vvl vtn pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48c752d3e060fc62dcc5ed228c2464efc6591029",
+        "description": "event: break long dependency chains on drop",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f1f98e8468a92d4f5e7f97fa3e674ec338f9394",
+        "description": "Revert \"rusticl/event: use Weak refs for dependencies\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a45f1990860db3a8da6d7251bb627a314dfb8423",
+        "notes": null
+    },
+    {
+        "sha": "3bdfe0e2a3d394dfda5c1445ff07f8b5bdb374f8",
+        "description": "intel/isl: Update quote for XeHP's CCS halign rule",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c31d59f078b70185db4fcbfc24293a025955aff5",
+        "description": "intel/isl: Reduce halign for disabled CCS on XeHP",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f41ffe23049678f99e4227d43dd23c4f4900432",
+        "description": "intel/isl: Add and use _isl_surf_info_supports_ccs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c8224c693c59f7a5da821e3bcb8c6ea9580a2f0",
+        "description": "radv: simplify radv_emit_ps_inputs() slightly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c63ac0521a2cf61edc1949a858e4d0ff29067347",
+        "description": "radv: track all graphics shaders context registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db597d274b650fed5fb7f4560e31d0b6ce9763c9",
+        "description": "radv: add more radeon_opt_set_xxx variants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5af67ea2c89398b27c215ce247e3bcb203903e6",
+        "description": "radv: add graphics shaders context registers that need to be tracked",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9532b0f1b2d25c437bde67bf706386e1bd0c0fa3",
+        "description": "radv: emit graphics pipelines directly from the cmdbuf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fca40bcce37e500f4a9e0fcf42c3188bbc7b885a",
+        "description": "radv: make radv_conv_gl_prim_to_gs_out() a non-static function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d516721cd0cb16d0b601c42c01de0fdcc4ae887b",
+        "description": "tu: Support VkExternalFormatANDROID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "29f5a78d1655777605fc542a997932d60a863e92",
+        "description": "tu: Skip YUV conversion for RGB formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99753001f35ae5791b64d72efe5278795004899f",
+        "description": "turnip: Support AHardwareBuffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b024a15f2660886f868c33470ba83677edd24c4",
+        "description": "turnip: Split tu_image_init to use layout setting logic separately",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ecd9ece9c1389128c756a7fc773b547a67f66697",
+        "description": "turnip: Convert tu_device_memory to use vk_device_memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1373b0966cbd329e25fa9732330afdb6881482a7",
+        "description": "turnip/android: Migrate to common ANB code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e047d75a5731e59a82a54cb95e5c4dd98580448e",
+        "description": "turnip: Change tu_image to use common initialization helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "270ee656678d4cf48e34847ab41b5ec3d4d7c825",
+        "description": "vulkan: Add helper to resolve Android external format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12092d1ac726a80dc2d95bbc781340bbcb776bdc",
+        "description": "vulkan: Don't request Ycbcr conversion for rgb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9bbeb77c76314cf3c3206a7e1bbd54e00aae1c5",
+        "description": "vulkan/android: Add helper to probe AHB support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be0a893a2e0126e1ed1cae60820333e8686d3593",
+        "description": "rusticl/spirv: enable more caps",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ba11b12a82a1e7de5d29ae89abe24f3c52ffc38c",
+        "notes": null
+    },
+    {
+        "sha": "590ea76104899edd6883fe50d9590f919b9e97d5",
+        "description": "aco/spill: Insert p_start_linear_vgpr right after p_logical_end",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "84c1870b655d4987da722f03b315d41da57d13ec",
+        "description": "aco/tests: Insert p_logical_start/end in reduce_temp tests",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02efe52aab6b544b57c29c9f4345de1a4a64bcb7",
+        "description": "panvk: Only clear UBOs descriptors when set isn't present",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9c553bda9c182763d7f3cf8c9d5b583fbb4923e8",
+        "notes": null
+    },
+    {
+        "sha": "1f0f76dbdccf7226a46b64d0c4db6f569f0ba303",
+        "description": "radv/ci: Document recent flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9db41dfec5f3e4ecfcd8297f670cdd855eb0f920",
+        "description": "radv/ci: Add back pipeline library flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cb81ec7a61fb41dd51bc3e1a22efffb4c1492086",
+        "description": "aco: don't count certain pseudo towards VMEM_STORE_CLAUSE_MAX_GRAB_DIST",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "34844deb3ed50c3cdda1cc00239e291f5e4773ef",
+        "description": "ci: fix section_end in debian-build-testing",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d428cc1116fd5cec4b397bfaca87e59570f178da",
+        "notes": null
+    },
+    {
+        "sha": "d0c364a24b139ef22f49c4fff40f3197a60d23c2",
+        "description": "ci: drop unused piglit-test and integrate it into piglit-traces-test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a40345aaebeec561b1a2ab70762b0bffa11591fa",
+        "description": "ci: reuse dead .vkd3d-proton-test to make vkd3d less radv-specific",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68c09a00c8cee182a12e57a2ba76375c4d27e62e",
+        "description": "mr-label-maker: mark *-vkd3d.txt files as CI results expectations files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9af82fc98f9e80e78beeb412dd549c4b83718019",
+        "description": "amd/ci: track changes to VKD3D_PROTON_RESULTS files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7dd2b9e11ae860607a533b0fbf71c51496063089",
+        "description": "ci: hardcode `-vkd3d` namespace for VKD3D_PROTON_RESULTS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c50f3d62b9a316e50d200c5f666232708123e277",
+        "description": "ci: drop default VKD3D_PROTON_RESULTS file name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5502ecd7716045e76f13f007a4aa5f5653c80ecd",
+        "description": "util: shift the mask in BITSET_TEST_RANGE_INSIDE_WORD to be relative to b",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "fb994f44d91a4b94738ea4ebb83aab1a257ef123",
+        "notes": null
+    },
+    {
+        "sha": "6c3457033a8ecc76f7c07c87221bca69c8e7ce07",
+        "description": "radv: Implement VK_MESA_image_alignment_control",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14457b358f9cbbc600810c6d937f411d00af1311",
+        "description": "ac/surface: Add surface flags to prefer 4K and 64K alignment.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47044cb0196be667acbbbe3d2e7dba3875a765b4",
+        "description": "vulkan: Update XML and headers to 1.3.285.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea7880478e878debc5ea1f901930fa7a2c938427",
+        "description": "anv/anroid: Query gralloc for tiling mode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2097bec163d9783d8a52f8dfe21a5545b86dd611",
+        "description": "radv: fix the late scissor workaround for GFX9 since a recent refactoring",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "92337aff030d5895ddde07f03a918dd416172a9b",
+        "notes": null
+    },
+    {
+        "sha": "01608de8752a76df2b7b75c55b53978bca6f2266",
+        "description": "iris: ForceZeroRTAIndexEnable if last geom stage does not write layer id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c22112a7d237a357fc9f373aaa413c8da8ccaab",
+        "description": "util/format: add missing null check in util_format_is_srgb()",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "ff6cf60cb80c3bc31d9a4307c32185f65054bc58",
+        "notes": null
+    },
+    {
+        "sha": "2f02af39b34c013b4829cfde626ab13b69c173b8",
+        "description": "radv/video/encode: fix quality params on v2 hw.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54d499818ca9a004ba735635d328a1ed0ff010b6",
+        "notes": null
+    },
+    {
+        "sha": "d2cf17022da57f8363632307cc427878d1d4580d",
+        "description": "libagx: don't use get_group_id()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d22f936019f84191072a5686826f53b93d755419",
+        "notes": null
+    },
+    {
+        "sha": "21f0b14844c457f11ec524b9c1e614431e6a5413",
+        "description": "libagx: add query copy kernel",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13d875da32d4ec33cbe1c3a95ffd243c4940db34",
+        "description": "libagx: use sub_group_scan_inclusive_add",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76bb81dd5920433447f02d8cb8e019aa8fc5acca",
+        "description": "asahi: don't reserve extra UVS space for layer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48d16b3972c1aa056b889f8df56b6ac772652726",
+        "description": "asahi: extend epilog key for force early frag handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee9dab83e7351b8979c2f538450bf86e40fc6327",
+        "description": "asahi: don't ralloc in agx_fast_link",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1d68da5e28102f76cd795cc86288d86354b70eb",
+        "description": "asahi: plumb tri fan flatshading through common",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cad60ab4b185472e8c6edacd0e67ed4565a444c9",
+        "description": "asahi: extend varying linking for tri fan weirdness",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d763ab2de01fc5de297a52cc41d917e1cbd0e15f",
+        "description": "asahi: don't allocate for ppp updates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3eacd8a8b2dcabe5558231a63e547cab1208c3e4",
+        "description": "asahi: don't allocate varyings ourselves",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96521fbce3589470772414cc05d240e18ef52ccd",
+        "description": "asahi: use ppp_merge",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59d2b7283c9ce5c465f13f14683446b005f9e436",
+        "description": "asahi: add agx_ppp_push_merged helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "22292afd3cbdff5ae604aba5e6657dfd10593697",
+        "description": "asahi: pack tilebuffer usc word ahead-of-time",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "289cc5f5dd6441a7db5e3fc055c2ceabf57debc9",
+        "description": "asahi: drop bogus assertion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64e2502e5470fe1bd1ff7ccb118fc9365fda97f1",
+        "description": "asahi: eliminate num_workgroups for VS->GS + VS->TCS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c829f46fde81460927a56e5962331cb70d5ca649",
+        "description": "asahi: update comment for maint5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c16df593a5cd54e6e51bb3656d004bbf9382dc6f",
+        "description": "asahi: update comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2094e8142af914035e8ecf198f3f6bf81e9d76b",
+        "description": "asahi: rm always true param",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52211088a2cd4a8eb33c94f047f1be2cf1787aa7",
+        "description": "asahi: rm more dead lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "45e5b7ad5021710d1cf4f880425a360cbb18fa9f",
+        "description": "asahi: mv initialization of grid z for indirect GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a344de276d6eb90fc0e2be494fb4d4afda67eb9",
+        "description": "asahi: rm redundant input_vertices",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5c7bca88d6e07a8294fce20d4232cb69374dfbc",
+        "description": "asahi: rm num_vertices uses",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a9841ddeffcaec4bcce4d529738149e243e5111",
+        "description": "asahi: rm unused lower",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d90887a7f1ccc183d487e3df860418084ba06603",
+        "description": "asahi: rm dated comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fd2e3c71b1271778854273870c88dd1938f2a19",
+        "description": "asahi: rm another num_vertices use",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5af1828440fac8215952903bd9e8bbc8b50ec7b8",
+        "description": "asahi: mv vertex_id_for_topology_class into GS lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a76e8447acbe24843329a3e16926c37ef49e50d7",
+        "description": "asahi: don't use load_num_vertices in geometry shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b7b201ab61cc78881f12c98428ade9f21a34167",
+        "description": "asahi: move some GS lowering into lower_gs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a27a803961c6fe67e23c5c50dc05bfc71b49f0a7",
+        "description": "asahi: add agx_index_size_to_B helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f18f578b634ed5f27535babd680f8363f1f0785d",
+        "description": "asahi: rm dead code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6b863df300b4008f7d878e7936e45fc95b81165",
+        "description": "asahi: set src_type for store_output",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1632948a7640e0acb569be7c61e0840451daca2e",
+        "notes": null
+    },
+    {
+        "sha": "5b3af5b7e6daa491ae7979ffbbafd9db01dc8b01",
+        "description": "asahi: rearrange VS uniforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d518609e33c7ebd1b8eddbf1555ccf2f198318d",
+        "description": "asahi: eliminate troublesome empty uniforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e845e38f960663c5d9ebdee6f81e7e8d1d50d11",
+        "description": "asahi: free libagx if we don't use a ralloc memctx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b47d9c6002edb7d7ac5d4f5f767e0ff20bcf9ce",
+        "description": "asahi: move primitive MSAA field",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cccf0609a6364ffdb68ffa61c2f50dc0730caffc",
+        "description": "asahi: simplify image atomic lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9069ac986bb131554fd43a922deabf65c0476a5f",
+        "description": "asahi: fix cull unknown bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e04779ad4b244d3789f6682011aa67174fec0347",
+        "description": "asahi: lower texture instructions with epilogs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4991baa8974b0321608373884ba43125e31c232",
+        "description": "asahi: fix sample ID with multiblock epilogs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf653997d74c2a5c579a397081fb3854b38c3f8a",
+        "description": "asahi: fix store_output component/offset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "696f4654d4176c7c8a41ebe21f7f5f82d3b39540",
+        "description": "asahi: fix rgb565 blending",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "292cd87054cf3659632b166ea7a4454a32516ee2",
+        "description": "asahi: clarify format code in image lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18239f3e883d6c9f50c580091094598d1060b767",
+        "description": "asahi: handle agx_ppp_fragment_face_2 with no info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afdc6891c17f5ece89b6976dd67865428be2f795",
+        "description": "asahi: mv AGX_MAX_OCCLUSION_QUERIES define",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "883b5407c8d336509a05e4dbc46c91b4e1221651",
+        "description": "asahi: rework VBO lower for divisor=0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "602d9b98d86f3c2d55027615d0143d3df044fb54",
+        "description": "asahi: fix txf/image_load robustness with arrays",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3dd148bfc0ef9e5c282b6efdcc4caf9f733fa125",
+        "description": "asahi: fix 1D array atomics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d832f8433a43a54a4591732d7239de25ff95089",
+        "description": "asahi: add missing rgba4 format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12ebea098ce801f79a4ea76a6fbdaf7528d71ddb",
+        "description": "asahi: drop rgb10a2_sint rendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5f40b0e9fd5d2a02734c7feebd175fd50ce3e3b1",
+        "description": "asahi: rm deadcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3cb8c1de819105cb21bab8ab02f1fc9a14ff4863",
+        "description": "asahi: get debug in common",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "15333424a5803dad227da777c273bf50105c0c0f",
+        "description": "asahi: plumb shader stage into info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee79b717530d424d0689abcc2bb3760dd9f8a254",
+        "description": "asahi: pack UVS key properly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1df126025910cd9ac2b5560fa1e34c7000dd365e",
+        "description": "asahi: fix prolog emit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6373de5195e68ef5f50ab329c3979694d57423d6",
+        "description": "asahi: move agx_link_varyings_vs_fs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fadb9904637ff455f143a0e2bf268fb92658f11d",
+        "description": "asahi: cleanup fs epilog link info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71692a5d0b11072d7aa0e615c5d426b77825058a",
+        "description": "asahi: resize key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a38f7c91518a25dd50f352f7d9ac748cd5db8460",
+        "description": "asahi: rm unused #include",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad5f46ff8c43ef639f65bf20ff9d859dc3dac722",
+        "description": "asahi: implement PIPE_CAP_QUERY_MEMORY_INFO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74963d5364855f4aa7179e6a1a049ca1b7376fc9",
+        "description": "asahi: unwrap pointless null check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8494288451a7836ae3946ab5073d2acc61f96a62",
+        "description": "asahi: assert bo size > 0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e05f549ea0f99b9213d1c5f5c078566854b6b58",
+        "description": "asahi: agx_translate_sample_count",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "feabbddc2a28e67af1bcf5652ac4fcf2009d9f8f",
+        "description": "asahi: calculate validity when unpacking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac726ae5a937af3bd36f154fade91bf7ad393431",
+        "description": "asahi: mark eMRT loads as in-bounds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac114030a70972c022478904b2c79800c0b37552",
+        "description": "ail: constify everything",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "efa9f242a8d4452fbe3c33fd3c9870e050d02e44",
+        "description": "agx: fix UB in cursor comparison",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bcffc8430697438e704d87994a1f605d2750cb9f",
+        "description": "agx: optimize elect()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc26e11c2a792aba82739a65931702cda545291f",
+        "description": "agx: lower more quad ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7aa17a122febdc76d8ed57a8d29ea0009227dce8",
+        "description": "agx: implement quad_ballot",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a656b29f3f3f61165ab1cecf8d978503ec3d67c",
+        "description": "agx: handle quad reduce",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1be0e8e3480668a75fa99cfb859bd792f5038dc7",
+        "description": "agx: stash early_fragment_test info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1c8aab388cdc1c70c07de9d0a6174da14d47ecea",
+        "description": "agx: speed-up dce",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b03e7bab378d76b67870d6b163d30e249e09f70",
+        "description": "agx: fix bogus unit test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aad82f4265f26c5c5af7ca9734563b8f3ad9aaaa",
+        "description": "agx: optimize txf with lod 0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c898e56b2d20d69d63cf0e74f1b038a2478571d",
+        "description": "agx: reserve scratch registers for mem<-->mem swaps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7ff0041c122c4ee3a214c126df2545b00220b36",
+        "description": "agx: document another sample_mask restriction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "840394c169fc3c1eec3dc517b31ee7eb29d67f3d",
+        "description": "agx: expose agx_link_libagx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a3ac737476188063a3c1dcdf6bced0501230bfc",
+        "description": "agx: report uses_txf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54ec9512ef67475688d967fadee68b21351dbc6b",
+        "description": "agx: flesh out subgroup lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "659db5049c7ed6952c89ea1b270d45f2a7f76659",
+        "description": "agx: lower 8-bit subgroups",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "00cfe84fd9485537700a68aa5eee98dcaf599767",
+        "description": "agx: forbid uniforms on ballots",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2c49b261cf133e5da53a6ec46fe5bce09b75bf4",
+        "description": "agx: add missing b2b16 implementation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3cb0cbfda81b06ba89572a6de8ef508696ba3b9",
+        "description": "agx: handle quad swaps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4a5ac35541b06393b61fc41d07a9715903271a7",
+        "description": "agx: handle quad_broadcast",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b33c549b97858129a520483d1eaa254c704d254",
+        "description": "agx: handle non-immediate shuffles in divergent CF",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "589c69a6460a70a2c69b6cd75e26b76b17a7e024",
+        "description": "agx: lower shuffle",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbcd9a83e48dd412cf18572ab6229c009018a81e",
+        "description": "agx: model more subgroup ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e718a536ac0411e7708f4d1b630c7a4903a6d1f0",
+        "description": "agx: delete unreachable blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3efa723b630dc153252ac7841f60924078684e04",
+        "description": "agx: lower nir_intrinsic_load_num_subgroups",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "765bf9a25be2a69bdd94bac6d95afb022973110e",
+        "description": "agx: switch to demote internally",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35d6f4a3945b221d39a8d25aac21b8fb818f35a9",
+        "description": "agx: fix spilling inside sample loop",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdd200a20290f03f90058a7a925066c8894dd255",
+        "description": "agx: handle subgroup barriers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d183b76fd490e8e61a7cb1373a45ab91cf3104a8",
+        "description": "agx: fix frag sidefx with sample shading",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6269a1474d50ed2cfc6b673f444b3c5b06826eb2",
+        "description": "agx: fix load_helper_invocation with sample shading",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94f0209fb26032f888e3d21dabcd7d657e0b48dd",
+        "description": "agx: fix phi translation corruption",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f21dbfe5aebb9ecc30a8a576df43cfa06956f8cd",
+        "description": "agx: allow 8-bit bcsel",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a948244058c97be3391d201fb92bff42f2e5f821",
+        "description": "agx: handle cross-workgroup memory barriers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c22ce3cab9897133476675bbc8990616b5f1ef45",
+        "description": "agx: fix some ms texture packing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec47f325f88adb5b90793e084a1a4e0f08a46379",
+        "description": "agx: fix query LOD of array",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8df39ac49b9b8badf02e1e31fdc4b8fd513ed55d",
+        "description": "agx: enable more lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69d7063ec0ca0c011861172f5a38eeb4872164ba",
+        "description": "agx: optimize and/or with booleans",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c43413f729f2d671be4d265aff02372d1ab3b24b",
+        "description": "compiler: add ACCESS_IN_BOUNDS_AGX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb5f82d221b42d63109f5a173f21c33b1f835bb6",
+        "description": "nir,agx: fix load_active_subgroup_index",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7fb60c4c81380071e4870ac2e32aa5e3935a2d82",
+        "description": "nir,agx: add depth=never workaround",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d824bd123ca79aa3ed89977ceaac844ee94430f",
+        "description": "nir: add quad_ballot_agx intrinsic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2912f531a7937cef03e279b8ff82f5a85fd53d15",
+        "description": "nir: add texops for AGX border colour emulation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b9ed851ec9f9aa2d5ce3d1a3a601b4cc756185f",
+        "description": "nir: add is_first_fan_agx sysval",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8bc694223ed9a0bd354139a3b174f13004442591",
+        "description": "zink: Set workarounds.can_do_invalid_linear_modifier for NVK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e6f77defec0d61f9f5851bdbda5bf4cc97cd1cea",
+        "description": "nvk/wsi: Advertise modifier support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28342a581f926777f9923835525fd2f267edfd53",
+        "description": "vulkan/wsi: Bind memory planes, not YCbCr planes.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f5433e4d6ce247b86daed741c07aa99f2bd02c0d",
+        "notes": null
+    },
+    {
+        "sha": "cd428e01d7876da243933ee49f10f866777820f5",
+        "description": "nvk: Advertise VK_EXT_image_drm_format_modifier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8e200c0d954892c9ecf152c4c465a915700d743",
+        "description": "nvk: Advertise VK_EXT_queue_family_foreign",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bca2f13dd8ee3904fac67bbe273226a0864caa59",
+        "description": "nvk: enable rendering to DRM_FORMAT_MOD_LINEAR images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "224d9a514a83a3236ad42c1b74458cde69dc6647",
+        "description": "nvk: Implement DRM format modifier queries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ad79bfef427b0b40acca403587b2e249389f533",
+        "description": "nvk: Set tile mode and PTE kind on dedicated dma-buf BOs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f1fdffa1b2e5c1b9b813191a2881030cc7278906",
+        "description": "nvk: Support image creation with modifiers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3bb531d24599d8daa10c1cee631ea8ed3e9fa432",
+        "description": "nouveau/winsys: Add back nouveau_ws_bo_new_tiled()",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ce1cccea98d6257f2015b32b92d826e4ebc0a7f9",
+        "notes": null
+    },
+    {
+        "sha": "03c4a46fe5511d09b5b99a0a370e8f308a892549",
+        "description": "drm-uapi: Sync nouveau_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8cce121da44adb8141b98b9a8352f1deda7fddcc",
+        "description": "nvk: Allow VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6063f96c61dc80990ed3ad67eb0acb5a3796676a",
+        "description": "nil: Support creating images with DRM modifiers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1bd4127f36cf509d1a418402a641e361ec48b0f",
+        "description": "nil: Add some helpers for DRM format modifiers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7773f96f9e86a087855345a030c9cd585efe702",
+        "description": "nil: Default to NV_MMU_PTE_KIND_GENERIC_MEMORY on Turing+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "603389f7a3508a94bb44718bbb9b21c468c65bf7",
+        "description": "nvk: Set color/Z compression based on nil_image::compressed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "873a044cb3d6c99e6fc749fa7c5d2afc5e904f4b",
+        "description": "nil: Add a nil_image::compressed bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73c87dbc0c447ed8f1b3e4f1fbd19608e3a4baaa",
+        "description": "nil: Use the right PTE kind for Z32 pre-Turing",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "426553d61d164a04ecf540d933f72e16dcbf9e33",
+        "notes": null
+    },
+    {
+        "sha": "71d1fa129a2e854bafbc4fc1064733e65e8f82f7",
+        "description": "nvk: Allow GART for dma-bufs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6cd58de4eb79dcced41ca77faae1449368f9ac5e",
+        "description": "nouveau/winsys: Make BO_LOCAL and BO_GART separate flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19b143b7bc3865fed8c8b09156b85d8c41c32d6b",
+        "description": "nouveau/winsys: Take a reference to BOs found in the cache",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "c370260a8f15e9be2f43a7d237f438592a09cccd",
+        "notes": null
+    },
+    {
+        "sha": "d63f015d0baf688cfed007fe6dd6eea70ea7657a",
+        "description": "nvk: Improve the GetMemoryFdKHR error",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "756cbb41a2c259495afad77cb728657f0ddb590c",
+        "description": "nvk: Use the upload queue for NVK_DEBUG=zero_memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "22e44d54fd1396411ff58807180c4b8ac051bdc8",
+        "description": "nvk/upload_queue: Add a _fill method",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3132a49eb005bd5ad782caddf8f7cf71f2c79957",
+        "description": "nvk/upload_queue: Add some useful asserts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b098209b9d3b3a9379003d7e53152859967c30e",
+        "description": "nvk/upload_queue: Only upload one line of data",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "2074e28a0d6aa65d2a979ba6bae9012797dd3352",
+        "notes": null
+    },
+    {
+        "sha": "ac78076cd2ca895d64e13220d3ed204b8509ac92",
+        "description": "zink: hook up VK_EXT_legacy_vertex_attributes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97e3c6a12a2c981bf70e64fbd4ab4e7bbf8601eb",
+        "description": "intel/brw: Use range analysis to optimize fsign",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5786573132cb35395a8405cd886167c65b9ec84",
+        "description": "intel/brw: Implement more strictly correct fsign lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "864268ff0d15693fae42d3e6ae478994bbd6cecb",
+        "description": "intel/brw: Algebraic optimizations for CSEL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "033405cd4bd9ee93755eccdca82d56d6f06ee1af",
+        "description": "intel/brw: Combine constants and constant propagation for CSEL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "504b742b834067ac25dca018b279e7429d61242d",
+        "description": "intel/brw: Update CSEL source type validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f151c03af3d159c8725f5f6dc7050b6a418de51",
+        "description": "intel/brw: Handle fsign optimization in a NIR algebraic pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd343fb9acd49706320ea3bf1bbc0c842b9c6970",
+        "description": "intel/brw: Add support for fcsel opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d51ad9f4e03c2b36c37ad2c72573915795b6cd15",
+        "description": "intel/brw: Use fs_inst::resize_sources in brw_fs_opt_algebraic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11c6b6c1022991978d941fb3b82cae57b99ec454",
+        "description": "intel/elk: Remove dsign optimization",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ded8690336efbc781aadaa98e1db3dee54219c4f",
+        "description": "intel/brw: Remove dsign optimization",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa9fb239b7d1075b7193f081f483aa4daf59de68",
+        "description": "docs/features: Add EXT_conservative_rasterization for NVK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db2f2ee0786f4facacc6d389f4b2e87741562d5b",
+        "description": "nvk, nak: Wire up conservative rasterization underestimate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "715f2f14258053c8ead7337dbbe0c33a2ac8e79c",
+        "description": "nvk: implement VK_EXT_conservative_rasterization",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4dd97b1d729048f3ccf3a2ed4ddbfa53c057e4a3",
+        "description": "vk/graphics_state: Add last bits for extraPrimitiveOverestimationSize",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a875598d9e0f2e5d0f5a9b7cf0e2cbfebf2cab94",
+        "description": "nvk: update 3d classes for conservative raster",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11448823b900173c8a320a23cb52fcb4ec00984d",
+        "description": "ci: bump VVL to snapshot-2024wk19",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "891730ac0b678c1fece36d92b921192249d90d2f",
+        "description": "ci/panfrost: disable G52 until machines gets fixed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04f945d6c34b0c00721e2e8e591893090ee3ff0a",
+        "description": "docs: Update VK_EXT_legacy_vertex_attributes entries",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8c1cc405d37143eb819e1272e8e2befdf26fcce8",
+        "notes": null
+    },
+    {
+        "sha": "3d5ad071bf68122aa82eb55fc6f08301d8b65416",
+        "description": "freedreno/ci: re-enable a306_piglit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fed2c9df016682e14f5a1bf7fc991c9701ef26dc",
+        "description": "freedreno/ci: switch a306 to weston",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6652d55da0c50f77e56ca783a1ecad8532b8c2f",
+        "description": "freedreno/ci: do not depend on single job rules for another jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8cf60b4da74090fef2a3a8270984cec3f9cd410e",
+        "description": "freedreno/ci: Switch a306_* to deqp-runner",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9a0373a65963dc0507538b77de68808c6652f94",
+        "description": "freedreno/ci: move the disabled jobs from include to the main file",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9442571664e5a7d6e06f098ce4ea2246e5504796",
+        "notes": null
+    },
+    {
+        "sha": "e0f44f817d16e4625054e605e87715c7b3c09076",
+        "description": "freedreno/ci: move platform to the deqp toml file for a530",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "312150f5241804a21b1871626fbe875678bcf023",
+        "description": "freedreno/ci: Switch a618_piglit to deqp-runner",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "758b639d1b83a48e18a11fc1f839e1d52ab47e76",
+        "description": "venus: drop the workaround for excessive dma-buf import oom on turnip",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fdc21a95aa6cbb0a47a37155b76c19a92b99f5a0",
+        "notes": null
+    },
+    {
+        "sha": "a1392394ba1de0fad8cbcf10bdece3d623c9d7a6",
+        "description": "turnip: msm: fix racy gem close for re-imported dma-buf",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "63904240f21b192a5fb1e79046a2c351fbd98ace",
+        "notes": null
+    },
+    {
+        "sha": "3909803849ef492e66dd4590fbf3bf51256efb22",
+        "description": "turnip: msm: clean up iova on error path",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e23c4fbd9b6b95537ab00d19a034eaffe5fe86b0",
+        "notes": null
+    },
+    {
+        "sha": "80b8bbf0c5c223014b70eff1c10db28e1d7368d7",
+        "description": "aco/gfx11: use v_swap_b16",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5803a40e2fe445fcb275375c91cb89d2702ba564",
+        "description": "radeonsi/ci: document new crash (assert)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38cbc3c605ff17c813e70521f4a6c8d3a5d1e397",
+        "description": "radv: advertise VK_EXT_legacy_vertex_attributes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ddd675168eb96ff46ba06cf67e9a0735d68f6a4",
+        "description": "aco/util: improve small_vec assertion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "869253b66c386286c374c57e3badf18ff9b92cdb",
+        "description": "aco: support VS prologs with unaligned access",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ec2fa392f6004ca2e01656a475c6f454be607fc",
+        "description": "aco: copy VS prolog constants after loads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46b8ba8154652ce73fba6c38dee057b4e50f6378",
+        "description": "aco: form hard clauses in VS prologs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d48c8905f1ec6cc6c22a023900fa2883e90df87e",
+        "description": "radv: keep track of unaligned dynamic vertex access",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62b4e9a7790cbad25da8b9986095dbd34c03d0c4",
+        "description": "radv: simplify radv_emit_hw_gs() slightly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdefab362c045213562825811baac7d37a2dcdb6",
+        "description": "radv: simplify radv_emit_hw_vs() slightly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5572a83b00b9e78c136c3bdee15b0c3d9f7d2747",
+        "description": "radv: simplify radv_emit_hw_ngg() slightly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd3ae170a732cce283806a2a8b4ce9f4fa6268db",
+        "description": "radv: do not emit VGT_GS_OUT_PRIM_TYPE to ctx_cs on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f228e7ed2d3fcae392b188d949cb878cb27fb4e3",
+        "description": "radv: remove gfx10_emit_ge_pc_alloc()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df39994d51b4c28201f1b9ca12e572692d8d169c",
+        "description": "clover: fix memory leak related to optimize",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "2d4fe5f229791fde52846b3f583c12508b5109d6",
+        "notes": null
+    },
+    {
+        "sha": "28eb1b1eaf0086464505f7396d635c23b4a95f89",
+        "description": "vc4: use IO semantics for location",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aefe237e47f5e10403c90ed7a4d7925c9a1c1733",
+        "description": ".gitignore: add .cache folder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7eb6123e98e0eaa65b24e41a8f1efe44b4a95513",
+        "description": "tu/a750: Disable HW binning when there is GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ed874b5ef568ea4018577e4194b26e2c7dae4ee",
+        "description": "Revert \"ci: disable Collabora's farm due to maintance\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e154f90aa9e71cc98375866c3ab24c4e08e66cb7",
+        "notes": null
+    },
+    {
+        "sha": "8b85c584292dc61bb71a10d54d390823fbfa8e68",
+        "description": "radeonsi: remove the _unused parameter in all radeon_xxx macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5272a813f276646c02b84122349a682709c34b1e",
+        "description": "vc4: use tlb_color_brcm intrinsic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87cd11ecd2cbc853cdcbcfe0c1fb14c989c049a3",
+        "description": "nir,v3d: rename tlb_color_v3d intrinsic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3ab023edeecab129cbbd3943478ae54254330267",
+        "description": "Revert \"ci: fail pipeline for users who got access to restricted traces\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "754ad73b8be95eb68577644c0faf3a71332404e1",
+        "notes": null
+    },
+    {
+        "sha": "985ee5441ac81a8452a72adf94bd7d9db559b77a",
+        "description": "ci: Allow to override the virglrenderer render server",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02ab51a61eed8fed5940cf88df71f536ce14f0e2",
+        "description": "glxext: don't try zink if not enabled in mesa",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "7d9ea77b4598e23d4415b529924f1cbdca6e33bd",
+        "notes": null
+    },
+    {
+        "sha": "3163b65ba73c4c6343e1d3ee69db07721a3713bf",
+        "description": "drisw: fix build without dri3",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1887368df4166ae854245c0306d43661ef120e42",
+        "notes": null
+    },
+    {
+        "sha": "e154f90aa9e71cc98375866c3ab24c4e08e66cb7",
+        "description": "ci: disable Collabora's farm due to maintance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "63e17ccc0a2ed5e762aedfa71d9133672e77aa24",
+        "description": "zink: rework sparse semaphore waits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f339f1e7ad344ed33d44a7f6bde58fdc96d5b338",
+        "description": "zink: stop leaking sparse semaphores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "723ac0cb59a06a5f3ef7fce393c162448ae490cc",
+        "description": "zink: add a batch array for tracked semaphores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "604573cf0a81c499667bb107b42c25e21bfa98db",
+        "description": "zink: clean up semaphore arrays on batch state destroy",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c8a7e3ca58fb9c8c47e31c397bfeac3a58c3e23",
+        "description": "zink: refcount miptails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a728bed23568c69eccf84884c56bdded70e5501",
+        "description": "zink: always commit full miptails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "920e2a52197c112ab68d8b53ee2e4c44c4e77b23",
+        "description": "zink: use u_minify for sparse calcs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1232bcc4700e02d70435c53a31a171126a28872f",
+        "description": "etnaviv: migrate from piglit include to generic deqp and toml spec",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "406dda70e7c9baa59c975eb64025e7c3b210c3bc",
+        "description": "radv: Zero initialize capture replay group handles",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df82221bb32c73f111d60e02655339846136e2de",
+        "description": "radv: Remove arenas from capture_replay_arena_vas",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e050abc961d2d063f9d7cf419f43aaf17ba0b039",
+        "description": "radv: Fix radv_shader_arena_block list corruption",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e21ea25de916b88cc6075b267874fc3085e598a7",
+        "description": "radv: Remove radv_queue::device again",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0fb19b8331f53b03d51f026acefa07bf97cbfe5b",
+        "notes": null
+    },
+    {
+        "sha": "79cb8842753e6dc7c10d6c5af1f1cf7ece5ecc75",
+        "description": "radv: Use zerovram for Enshrouded.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e28195bf4b0e928ae16fe09f6a076bef4c719c60",
+        "description": "radeonsi/vcn: enable decoding in vcn5.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9441cdb8e6f91d95979f7d6a0477ba066355654",
+        "description": "radeonsi/vcn: add hevc support for vcn5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04d6b46d2ddf5562a011493dfbdb4a9e2e56d44a",
+        "description": "radeonsi/vcn: add vcn5.0 for h264 enc only",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52f0d5b96d51840718868640a43aafb7e88d3637",
+        "description": "radeonsi/vcn: add vcn5 encoding interface change",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f703dfd1bb8c22b6791dd95c7de270e176452b4b",
+        "description": "radeonsi: add gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c8ad0f07155d79ac28748f6d47483634b46d8953",
+        "description": "ac/surface/tests: add gfx12 tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d22564d29cc6d1d1d7d9370eeeb71f21e2d1fbbc",
+        "description": "ac/surface: add gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "686e5a03f52f0e805a59d3affd098cca98a603fe",
+        "description": "ac/llvm: add a workaround for nir_intrinsic_load_constant for LLVM on gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "546465e1ba750a80febd78a06422b0e65e4af2a2",
+        "description": "ac/llvm: implement nir_intrinsic_ordered_xfb_counter_add_gfx12_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d94ec9ec435970e3b55c0314866233ce9d4c5c0",
+        "description": "ac/llvm: handle nir_atomic_op_ordered_add_gfx12_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a7302f6011d35a6ea6a3ef088f4a8ef616c4bcb",
+        "description": "ac/nir: add gfx12 streamout NIR code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "542c7ee75f2b5dbeae0952444f65d881867009a1",
+        "description": "ac/nir: add ac_nir_sleep and handle the intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af9f04ad59fb39da4e0cd35320c30912fdb7ebf7",
+        "description": "ac/llvm: update inline assembly for buffer_load_format_xyzw with TFE for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d33e66ad6a2568f88ebed3fa68b6653605d1260",
+        "description": "ac/llvm: add CS SGPR changes for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0356209543fd716e6f676444f75eeac2ab292340",
+        "description": "ac/llvm: add new cache flags for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6c46509ccb10b3836fe273f740b521b3bdfe7d6",
+        "description": "ac/llvm: use new s_wait instructions and split the existing ones for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12bca6123a80a771f812b499b6543b02ee1e3441",
+        "description": "ac/nir,llvm: add GS VGPR changes for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e1abe5d8cec2270b55b86b872f8b259f1be442c",
+        "description": "ac/nir: update ac_nir_lower_resinfo for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2adc66e586a3f9f90bdee52dd3976d4480b39a20",
+        "description": "amd: add initial common code for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58a5de5c346b78211500a26d338b4c0dc64fe760",
+        "description": "amd: add gfx12 register definitions into the register header generator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "724b6d667c6d805ea60808c4cea4a7bcdada1ad2",
+        "description": "amd: add gfx12 register definitions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff47395757001f8bb299948ce4822958b72dc6f0",
+        "description": "amd: import gfx12 addrlib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d8addb0733cd17fb1f0b7f21b8e64d115106195",
+        "description": "drm-uapi: update amdgpu_drm.h and drm_fourcc.h for gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74ea0d006ef7a3faf037c8ce1c2c669f4bfd06a3",
+        "description": "mailmap: add Freya Gentz entry",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a02ca1b2eb9dc100a5c7a6089e515485e50fecc",
+        "description": "egl/x11: Allow all RGB visuals to match 32-bit RGBA EGLConfigs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9bdab38424543061ea9e76bc420e07b8ddd8be03",
+        "description": "egl: Implement EGL_MESA_x11_native_visual_id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3736c9997c6efb3ef6b63923bbddada3d003e632",
+        "description": "egl/x11: Move RGBA visuals in the second config selection group",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d90415625c12f534aae7767ca801b310dc3f376",
+        "description": "egl: Implement EGL_EXT_config_select_group",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b6b327d1b9bc6f6e2053d30911c9d7888e4848d",
+        "description": "treewide: Cleanup unused structs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f42a34625bdd0f246afd47a5fa126788a40321e",
+        "description": "ci/deqp: correct EGL_EXT_config_select_group detection",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "671c646a0ded70299aaf93ea189587a2cdc96981",
+        "description": "Revert \"ci: mark microsoft farm as offline\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "45edd99b6bee4c15a71a9faf7d8fde7d2333b34c",
+        "notes": null
+    },
+    {
+        "sha": "4842bbb200cab04c5548074b609dcbf2e44bf0a9",
+        "description": "nouveau/headers: Add a bool for whether or not to dump offsets",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99b0117243e233f7dcdbaa346220389b5fdb36c9",
+        "description": "nvk: Don't rely on push_dirty for which push sets exist",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53737b9d5b9e5c8a4949dc4ee42d9b7cbe790a33",
+        "description": "nvk: Get rid of sets_dirty",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c834644c4e4b39d65003b455e3be5e129767200d",
+        "description": "nvk/meta: Restore set_sizes[0]",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "af3e7ba1057e122c9ccd6d0f09b233ca8278af28",
+        "notes": null
+    },
+    {
+        "sha": "a160c2a14e71bb36d420929b0cb408f6346d845d",
+        "description": "nvk: Re-emit sample locations when rasterization samples changes",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "41d094c2cc1da09444830dca866d2be7f03ae5b4",
+        "notes": null
+    },
+    {
+        "sha": "bc15c95c7afe56cc0408aa2ba02a5a21f766547b",
+        "description": "frontends/dri: always init opencl_func_mutex in InitScreen hooks",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1225e81c9d0d2b6ada9e6af51be710d2ae2d4dc",
+        "description": "frontends/dri: only release pipe when screen init fails",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b8dbd64267cc8dc2543a1e235d751b61947f1ed7",
+        "description": "intel/brw: Fix commas when dumping instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9fe20fdf1a9d5670cb14279dbc1f014219872c5",
+        "description": "intel/brw: Use `vNN` instead of `vgrfNN` when printing instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a081106b0fb8dd0c4fdde1f8666489b50f350e5",
+        "description": "intel/brw: Hide register pressure information in dumps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "866b1245e9e99bce7932fb6828de28c8fcf8ad0d",
+        "description": "intel/brw: Don't print IP as part of the dump",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd47f90d37b9d29283f92713b479d9886f1f03f9",
+        "description": "brw: drop dependency on libintel_common",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "36c043e2ebc3c5fbabaef54d64e867b7dd915b5c",
+        "description": "intel: move debug identifier out of libintel_dev",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4882f49e6baa6e4cbe6277a2a5702b17d52176d0",
+        "description": "zink: don't submit main cmdbuf if has_work is not set",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0a24b8f9a342a59ba155692b437b3998eb15172f",
+        "description": "zink: stop flagging has_work on batch tracking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74f572b28fce085f780f3c25673b97f4553de668",
+        "description": "zink: flag has_work in a few more places",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f687f2a46529206737385bce46b4b0507b2b42c",
+        "description": "zink: rely on zink_get_cmdbuf() to set has_work flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9ec12d4392b7de6c026881d8e01b5d2658a6136",
+        "description": "zink: check all has_work flags for flushes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06abe4399d242a84abefb06c1de24dacc228904b",
+        "description": "zink: reset all the has_work flags in the same place",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4c516bece592e7a664fd7238259ce9b66ac42ad",
+        "description": "zink: zink_batch_state::has_barriers -> has_reordered_work",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac07fefdda145025a0a3b89d812b1f969ab09381",
+        "description": "zink: delete zink_batch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40f595b30c14ac2c042660018f96a9d548ad9e17",
+        "description": "zink: remove all zink_batch usage from zink_context.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91969dfa5a743c76b3514f9f1f48a780d2367406",
+        "description": "zink: remove all zink_batch usage from zink_render_pass.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05ba13ed18a6f7e421302654c4719371c7c85c8f",
+        "description": "zink: remove all zink_batch usage from zink_draw.cpp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdb4860c107c03d58c2513225e0c19abc4d9f11a",
+        "description": "zink: remove all zink_batch usage from zink_resource.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d8d90d5776d5b1ccbe4abca6e31e01794a48a60",
+        "description": "zink: remove all uses of zink_batch from zink_batch.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4adfb03f5b122c22b4e07f6f16bda68586b88f1e",
+        "description": "zink: remove zink_batch usage from zink_clear.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "efa8ce29a4a9e59e838c2307f602bcdcf9ada28e",
+        "description": "zink: delete all zink_batch uses from zink_query.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e27018dc79181af1d84aea396e4efb56309dea53",
+        "description": "zink: rename zink_batch::state -> zink_batch::bs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "107bf9ec7c9887cc6e13d5601560543d78f9a077",
+        "description": "zink: move swapchain from zink_batch to zink_context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2837cf9dde54d2c7791675e57a46de23e5adf2e9",
+        "description": "zink: move work_count from zink_batch to zink_context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8eacafaccc669f16fce509c3b4c5df7dd15e7872",
+        "description": "zink: move last_work_was_compute from zink_batch to zink_context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb6828a9a1619664f7d59f942f9aec697e904d4e",
+        "description": "zink: rename last_was_compute -> last_work_was_compute",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d157b89bee9574b57b6ec674821dbaec3e4bd6da",
+        "description": "zink: move has_work from zink_batch to zink_batch_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c8026f01bc5a944ca21e3438b6f869ecd90e2f8f",
+        "description": "zink: move ref_lock from zink_batch to zink_batch_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8876a0533d1cdee08fd1f19295d1113030ada96",
+        "description": "zink: move in_rp to zink_context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c85fc875d961a28c5c18e080e258a65128490e4e",
+        "description": "zink: delete unused zink_batch struct member",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae8fbe220ae67ffdce662c26bc4a634d475c0389",
+        "description": "freedreno/replay: use inttypes format string for 64bit",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "654ef356357e8df618e82c9ed19619fbe4d4524d",
+        "description": "zink: avoid designated initializers as they are not supported in C++ < 20",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7bdaf6e95f79d3c159ae6418ac403c0aba550ed4",
+        "notes": null
+    },
+    {
+        "sha": "320c0b44f480f517a9ea7a5af3ec78ed32c3a96a",
+        "description": "radv/ci: add navi21 flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "32f2b5d245fcaadc540cbac9f4780cc199b1ae0d",
+        "description": "llvmpipe: wrap the push/pull in the ifdef as well",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c7634c25e4fe78cf993de65dd184d7155564eca2",
+        "notes": null
+    },
+    {
+        "sha": "860b262f4487977fcab0d7efe89187dcaf202ee6",
+        "description": "microsoft/clc: fix incorrect changes that got through while the Windows CI was down",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e80d52223e13f02ab9a3c56452f39e4fff326c1e",
+        "notes": null
+    },
+    {
+        "sha": "18c53157318d6c8e572062f6bb768dfb621a55fd",
+        "description": "meson: Update proc_macro2 meson.build patch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1c01e256d0df30bee884a49a9d4bfc5b1551ae8",
+        "description": "brw: add more condition for reducing sampler simdness",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0aa70bd557509fd49ac608d4fa768560fc535d8",
+        "description": "dzn: use common stype debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90866bc58cced7de930d348b67f1b807b6ff734d",
+        "description": "anv,hasvk: use common stype debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c7c80e047a1e66514e2ccf02720416fea2127a9",
+        "description": "pvr: use common stype debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "edac80d8a7d25f9928308037b46a91dca8a9bc15",
+        "description": "broadcom: use common stype debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd6dfd6c2de3f94560c79ff525e3f8be03ec25a6",
+        "description": "nvk: use common stype debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d34c0f7053475be1e4f39c5c4546fc350332166",
+        "description": "vulkan: add vk_debug_ignored_stype helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d5f15abb064f0c81a03d80e2dec11294d089786",
+        "description": "docs: add header-stub for vk_enum_to_str",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3ccf7208a26758c5cfb6820d173c37cad49a4ff5",
+        "description": "nir/lower_robust_access: also handle image derefs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb187c9c893fb507d04d594e96532770d522e76a",
+        "description": "nir/lower_subgroups: relax ballot_type_to_uint",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9a0c8dc6d9d780c5e261a4e47cf6a6290801d35",
+        "description": "nir/lower_subgroups: add generic scan/reduce lower",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b070c36ec38388724ebf95f449b9eb1f0944fc7",
+        "description": "nir/lower_subgroups: add filter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3990463c484939caa358cb91882e6c957fee5109",
+        "description": "v3d/vc4/ci: set full renderer version check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0e6a72b002b083f046bb3c26033f163ee79eaf1",
+        "description": "rpi5/ci: use deqp-runner suite for vk job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "993dd0832fb007e03bfd8bac2e90bb98b8792c0d",
+        "description": "rpi4/ci: use deqp-runner suite for vk job as well",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3825e24085a27d98b1ea050dd4d87f13f4c0b7b1",
+        "description": "loader: silence implicit-load zink error by the loader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dc7e80ce85578c3596f860da5a46f2e140c6d806",
+        "description": "ci/shader-db: drop extra nesting section",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d428cc1116fd5cec4b397bfaca87e59570f178da",
+        "description": "ci/debian-build-testing: drop extra nesting section",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75532d8687bbb6668d023ace8dc283652255cfac",
+        "description": "aco: add wait_imm::unpack and wait_imm::max",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c894c9ab1b1aa7951f17630e891c7d7729b83617",
+        "description": "aco/stats: refactor for indexable wait_imm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3e461d6435d9e00f95833024f508f261b8d7028",
+        "description": "aco/waitcnt: refactor for indexable wait_imm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff2e3ef5ebd0de75235d2548ff99c0b015d2e077",
+        "description": "aco/waitcnt: add target_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20b4e30e2591df30a9d14776b99ed74b7035f6d0",
+        "description": "aco: make wait_imm indexable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b1b09ad429f180dd0b7758487b7e0557c8b094b",
+        "description": "aco/waitcnt: fix DS/VMEM ordered writes when mixed",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16eae62f0d9fe6c49baad8d6edf112ea57678829",
+        "description": "aco/stats: don't use VS counter pre-GFX10",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16a9f6e2a4aa6baf448bb1a078c89d276c49d391",
+        "description": "aco/stats: fix s_waitcnt parsing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd004defd4920243b5b1ad2ca4f8a79e67e5900f",
+        "description": "u_blitter: stop leaking saved blitter states on no-op blits",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c44e76676b7ff246b9d3455dcb1cd2f3a750535b",
+        "description": "glsl: use hash table when serializing resource data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6e038fd0f36766e4790805db7c631b211ceb8f4",
+        "description": "spirv: Use fp16 fp_fast_math settings when lowering fp16 asin and acos",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "750bd9757eb9d2f4245bc633919495363ecfa232",
+        "notes": null
+    },
+    {
+        "sha": "67a356742fd3ff0f03abac07161da6e5c2e1daca",
+        "description": "zink: add a batch ref for committed sparse resources",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee9809c889cf5fbb1c60593ebb253878316d6092",
+        "description": "pan/mdg: quirk to disable auto32",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7246f25677116fe8667ab9fd527ceb5917f3aaaf",
+        "description": "radeonsi/vcn: enable yuv440 jpeg decode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "906f207f9ce94c95191dbaac050547248ad1e7cd",
+        "description": "frontends/va,gallium/vl: add support for yuv440 format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afd15f481be2be5614fc755257c63c1fdabc0c88",
+        "description": "util/format: add planar3 y8_u8_v8_440 pipe format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "221371e9039bcf6fbd54fe31c9938da596c7783f",
+        "description": "mesa: replace shader_info::source_sha1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c0b0e660a5c83bc46ac024c22af5ddce87acdc5",
+        "description": "mesa: Add functions to print blake3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69fc7ee6220072b013bd0fae4338db1474c4e1f5",
+        "description": "intel/disasm: Fix cache load/store disassembly for URB messages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "925fff229fdc963a02348c59ef30ebc3f814d59f",
+        "description": "zink: use bitcasts instead of pack/unpack double opcodes",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "146ac5169d2583ee2f800b8d59291648edf799d1",
+        "description": "rusticl/icd: remove CLObject",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7f77f91929c9cdaddde78a59e532657d024d7731",
+        "notes": null
+    },
+    {
+        "sha": "9d2711fcb88b20914210e4d986b7b725d6216843",
+        "description": "nir/dead_cf: stop reindexing blocks for each non-block cf node",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e86a2b0db167d47729b573c0e6551441a7ef014a",
+        "description": "Revert \"ci: disable g52\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "f02310934cb3a0866449810653cacbffadf14028",
+        "notes": null
+    },
+    {
+        "sha": "43fbbc0732dc7e10cf6c1ca6cfe44215d6065f2a",
+        "description": "radv: track and bind more VRS states from the graphics pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c17b056151bc2db3f2338ae48d415ecda41b791",
+        "description": "radv: do not emit non-context registers to radv_pipeline::ctx_cs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24814be08a41c136099854e945ece56169c195c8",
+        "description": "radv: stop recomputing the last VGT API stage when emitting graphics shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6753f981b6a7a137f0b657f11c9f09b7691639c4",
+        "description": "radv: remove unused parameter to radv_pipeline_emit_pm4()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "920025533ec891e77658fa5682ec60433d66168b",
+        "description": "broadcom/compiler: do not run lowering I/O for FS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1545dc94b4f871caf75bf64cf45c571ba2ee5e1f",
+        "description": "broadcom/compiler: simplify v3d_vir_emit_tex",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c24a149d2dd8f85b83dcc29490dba8225d6800f4",
+        "description": "broadcom/compiler: don't read excess channels on image loads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd094f7dbb5823a4dce923eefff4291900730058",
+        "description": "broadcom/compiler: fix num_textures for precompiled shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "989cfb60359968677991abb0c7317b58a5e70dc7",
+        "description": "v3d: fix array_len when precompiling outputs for shader-db",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae7f20d8d4195fb0ae2b72e49b29b0203d3d3b96",
+        "description": "broadcom/compiler: assert on array overflow",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6a22dd05c96144084c1d7884f2d8316b513966f",
+        "description": "radv: precompute NGG register values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "751e5d8bd7a7ddd1809099ecd359544821d11311",
+        "description": "radv: move common registers between VS/GS and NGG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69b0ee7b6cb21765110b2b9a3cdf110d0fd8d724",
+        "description": "spirv: Get rid of the old caps struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e80d52223e13f02ab9a3c56452f39e4fff326c1e",
+        "description": "microsoft: Use spirv_capabilities for spirv_to_dxil",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3672702be2f600a73a1494b92c8673767b14b5dd",
+        "description": "ir3: Use spirv_capabilities in ir3_cmdline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91b62e986867ba12dad20789e51f978f1883f38c",
+        "description": "anv: Use spirv_capabilities for the float64 shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25dfaf5ff4f9e7d074753eccb40a38ad8d17a553",
+        "description": "zink: Use the new spirv_capabilities struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6dca6809b2ac989d51c7bbcba7096c18da7ad6d5",
+        "description": "asahi/clc: Use the new spirv_capabilities struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d5b4a4ffdc2afa68afc6fe962003d13ae16099c",
+        "description": "intel/kernel: Use the new capabilities struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac500495ac4af71e811a54dfc964988bf4fdf63f",
+        "description": "radv: Use vk_physical_device_get_spirv_capabilities()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce2946ae0f0fbc9369f727dcf3e5e421f7d70b49",
+        "description": "vulkan: Set SPIR-V caps from supported features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1759c0eba774615c57097e5579ad4ff1abc1f6c8",
+        "description": "vulkan: add helper to fill out spirv caps automatically",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba11b12a82a1e7de5d29ae89abe24f3c52ffc38c",
+        "description": "rusticl: Use the new spirv_capabilities struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30f209c017f94c94951465f7e9613c1cbf24f928",
+        "description": "clover: Use the new spirv_capabilities struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "22171d16f8b993547da59b5279fcf17319d97423",
+        "description": "mesa: Use the new spirv_capabilities struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4203d7339cb6b561bbf3c6f42f56e47ff748db4a",
+        "description": "mesa: Flip the script on SPIR-V extension enabling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5f3233a06198c3f63447c9d833daf17b2ced4c1",
+        "description": "spirv: Use spirv_capabilities in tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d7a465ad47fa53d09b62d9c874d2e96d944f5cb",
+        "description": "spirv: Add support for specifying caps through the new struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7f8555b96269a6ae2ba945fb2a11bf0a7b09f6f",
+        "description": "spirv: Check capabilities using the supported_capabilities table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5836e2430c19891392485f2b916e8a187acb519f",
+        "description": "spirv: Add a table of all implemented capabilities",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1eaa0390412d4dbd0c971c668499eedcb650698",
+        "description": "spirv: Drop the SubgroupUniformControlFlow check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ae61a152dc974dd280422b5eac2c7626c0823c2",
+        "description": "spirv: Use supported_capabilities for various checks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "29aa6cefccf92978d768a4aedfa399ac4aebd981",
+        "description": "spirv: Add supported_capabilities to vtn_builder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b3561b14d70eb09c0459967c66e585a9150a2b1",
+        "description": "spirv: Move the printf enable out of capabilities",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eed3b56402c10fca81a48adbcc2a7c0c906c7e8d",
+        "description": "spirv: Move the old AMD extensions out of capabilities",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18df453add520a1f11865de8a02f95afb238e0f9",
+        "description": "mesa: Stop pretending to support SPV_AMD_gcn_shader in OpenGL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d574dcf19f3f1ada6c5ee8fc4d6c09d4272e749",
+        "description": "spirv: Record capabilities rather than ad-hoc bools",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c07cf9c395f2497fac920b00f306828ab9bd775d",
+        "description": "spirv: Generate a spirv_capabilities struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74b17b8d25da47cddde4a396448254e5ccea9736",
+        "description": "spirv: Better handle duplicated enums in the JSON parser",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "182877342f210480df3ac3632fa3a8bf49f567ea",
+        "description": "spirv: Update the JSON and headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a09c5d55ed7481a9ec61cec956538b8759212c98",
+        "description": "spirv: Auto-generate spirv_info.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7634c25e4fe78cf993de65dd184d7155564eca2",
+        "description": "llvmpipe: Fix build error with clang-18",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "568807cf889060fe7c3bd5b9f11ced4d84966790",
+        "description": "egl/x11: disable dri3 with LIBGL_KOPPER_DRI2=1 as expected",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28a0f98123f6174249e63acff624e08701c978a6",
+        "description": "intel/tools: add README file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bab52763f45860fba90116e553df5cd8a510282f",
+        "description": "intel/hang_replay: fix batch address",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9f1151de270c5270a9e0280924b70b39d4692e1",
+        "description": "intel/hang_replay: use hw image param",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d698700715313e30d7980477d29583f428bbb6b",
+        "description": "intel/hang_replay: use newer API of i915 execbuffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a45f1990860db3a8da6d7251bb627a314dfb8423",
+        "description": "rusticl/event: use Weak refs for dependencies",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "665cad6408217c35a26f12ae0751441f213aecc6",
+        "description": "anv: fix ycbcr plane indexing with indirect descriptors",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce5863bee414a09c3a6f5a2f6a8f96815a169fd5",
+        "description": "ci/traces: majanes has no longer access to the restricted traces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "754ad73b8be95eb68577644c0faf3a71332404e1",
+        "description": "ci: fail pipeline for users who got access to restricted traces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "92cac2fe5df2f0fbe8197332b459282439cb2274",
+        "description": "docs: update calendar for 24.1.0-rc3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "423ba5d1c7e2d2958c37ba5b6be6dafe4161b333",
+        "description": "meson: disallow Venus debug + LTO build via GCC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be7c137229ceceffcac6d427ed5c7017a013f9b3",
+        "description": "aco/gfx11+: optimize v_fma_mix throughput",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f02310934cb3a0866449810653cacbffadf14028",
+        "description": "ci: disable g52",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76725c2fac7b3d04a2b5d04d9b5618161a228d29",
+        "description": "docs: add sha256sum for 24.0.7",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2218002addc7e60e66ba87e7a8c7fd49a81121a",
+        "description": "docs: update calendar for 24.0.7",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd725681e4225a04ca51cfaa895aa2396498baa5",
+        "description": "docs: add release notes for 24.0.7",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c225f89d346e5c94b8b30334b1609d1b3b845e84",
+        "description": "anv: skip gfx push constants alloc optimization on gfx9/11",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "62d96a65464317326cdc2686aa34eb30f8c21952",
+        "notes": null
+    },
+    {
+        "sha": "065b3b04d2411f91cd34c7fec90e17157fd1d81e",
+        "description": "freedreno/ir3: Skip DAG validation on release builds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3e5c156647aa9d72a3d37e0a3227b440ad8adef",
+        "description": "tu: Fix a6xx lineWidthGranularity",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "48da361eb7b355f6ce79983d661dd0422e278967",
+        "notes": null
+    },
+    {
+        "sha": "5c7f5362c025657b73eb440615a6af708d17904f",
+        "description": "tu: Add missing error path cleanup",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f72e22230e6385f17c93dc68c1f95d751deb484",
+        "description": "broadcom/compiler: remove unused parameters in vpm read",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b8e79d2769b4a4aed7e2103cf0405acc5bdadb86",
+        "description": "mr-label-maker: fix yaml syntax",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "117305800282d0f495cb16d79556db9550da1b40",
+        "description": "radv: add a new mechanism for tracking registers per cmdbuf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39a9f6868564f89bd0b0c6346ba12efb12b68bcd",
+        "description": "v3dv: enable VK_EXT_extended_dynamic_state2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a2d7e3830006305ffb80055b65565612931a91d",
+        "description": "v3dv: SetRasterizerDiscardEnable is dynamic now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b59e1d8e40cb085bfdf804f3bea75f1eadbd777",
+        "description": "v3dv: DepthBiasEnable is dynamic now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ab0c55a53bc320bfb6719b41e09f49140c4136d",
+        "description": "v3dv: PrimitiveRestartEnable is now dynamic.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ebbb8242404eaaedccbaa0a42e686dbde59fb302",
+        "description": "v3dv: fixes StencilTestEnable handling",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "60e9237e81c918d3a126427568d09b8b7dd093ca",
+        "notes": null
+    },
+    {
+        "sha": "ef5697a884b668b0caab422fe3aa81613319622f",
+        "description": "v3dv/cmd_buffer: missing updates due PrimitiveTopology being dynamic now",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "2526f74adeda00cca0a62adf4980c7bdad711529",
+        "notes": null
+    },
+    {
+        "sha": "6bcc300e00cd3c03d57de233e9eaece61c6842b2",
+        "description": "rusticl: add RUSTICL_MAX_WORK_GROUPS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91552bb4ecc0f58518fae27239ae4f0e3d5d54d9",
+        "description": "rusticl: lower huge grids",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "204c287327fd2353f68d38d464f485e24c8cce30",
+        "description": "rusticl/kernel: properly handle grid and offsets being usize",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8da8c6c2d8bf9b9b04ee030df68d7d44146fc877",
+        "description": "rusticl: use stream uploader for cb0 if prefered",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5ff33f99058b5338fa83689da3d3c34d7079f4f7",
+        "notes": null
+    },
+    {
+        "sha": "56f7b0297e0906426a876cb423b2d26be3e67ddf",
+        "description": "v3dv: Use errno when logging an error to stderr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2b9c5a9e3e4f9b532067af8022eaef8d6fc6c00",
+        "description": "zink: move blocking gfx program init functions to thread",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66dc759d0f883fd4f5fb32a6fa7f3cf1fe90cc16",
+        "description": "zink: precompile_job() -> gfx_program_precompile_job()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54db502053ded629c371c34f6a71b682c2a2da7b",
+        "description": "zink: split gfx program creation into 2-stage functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da04a316f70d8b041a88cb79ed611d93e88d81e8",
+        "description": "zink: reorder fencing in zink_create_gfx_program()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d849da0fdf63b0d5cbebc792166462beb83bb06",
+        "description": "zink: reorder some code in zink_create_gfx_program()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "921fbac6a3883b18cca8fff18bf44bf85d36e923",
+        "description": "zink: move gfx shader init to thread",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "450447257b08134a0857a67bfbb6845bf6f18e3d",
+        "description": "zink: split generated tcs creation into 2-stage functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68eaba7e87edcf966d2b058258b7252f2c9db6b2",
+        "description": "zink: reorder precompile_separate_shader_job() in file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ca51c5a9da26572b81109b2f41d37704383e87a5",
+        "description": "zink: split shader create into 2-stage functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b540129410c3023e1dc1be9dd01ea5ce1dfdd90",
+        "description": "zink: use zink_shader type directly in zink_create_gfx_shader_state()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6b91a3ed98c63588f3df2db5a35bc63092a9238",
+        "description": "zink: more effectively synchronize separate shader program precompiles",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27fe924cf00e56732a32aa48b9a9d10194cde121",
+        "description": "zink: always block the precompile threads when pruning shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac1d003d372b3c0f5b557fff345828b645e2b687",
+        "description": "zink: break out shadow sampler scanning",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de6139027ca09c1dcd41606ff0693d83b1506407",
+        "description": "zink: rename zink_shader variable in create functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3849f367cc061f3f7fac4a4d6709c440f10e17c3",
+        "description": "zink: simplify flagging legacy shadow samplers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "95e4a2b37e39da305ee28b665ef8484739595d70",
+        "description": "zink: simplify confusing return in rewrite_tex_dest",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21a61d75b72be73afb5d357806ca87b8fc06bea1",
+        "description": "zink: use info.fs.uses_sample_qualifier instead of manual scan",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7bdaf6e95f79d3c159ae6418ac403c0aba550ed4",
+        "description": "zink: use zink_shader_key_optimal unions for pipeline state asserts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "843287661435a9d11f3b3051ed58bec283a1704c",
+        "description": "zink: delete GS conditional in update_so_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d77a1762bd3da3216b7935ac856ba3f56c61f64d",
+        "description": "zink: clamp buffer_indices_hashlist resets to used region",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72b3c2e4baa124d84a798873a36f497cf3a9243f",
+        "description": "ci: identify and label S3 buckets",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc6bd04dd7bad9ec694e1f9623d63a061ed72757",
+        "description": "ci: kernel stored in a different s3 bucket",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73188a4590a8d407e5dbc181d3d61a82f92a80e0",
+        "description": "intel/perf: Add function to open perf stream",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d27dcb815eed30148d69d40b7b43e2543a6e3e4b",
+        "description": "intel/perf: Add and use a function to return platform OA format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b98538d54c998b32fd5af273965003a5fd249766",
+        "description": "crocus: Free intel_perf_config and intel_perf_context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb97d813c25acd5bbbfa8c95b2c9988ce8aa10dd",
+        "description": "iris: Free intel_perf_config and intel_perf_context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "137021fbe00d50918c8fee5f4ceaf51e28fc3bb5",
+        "description": "hasvk: Free intel_perf_config when destroying physical device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a941ce746a7aca7284085489c63f1e74c657ee4f",
+        "description": "anv: Free intel_perf_config when destroying physical device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b179e7bea3df4683df31334dbd8d043f32f829d",
+        "description": "intel/ds: Nuke ralloc_ctx and ralloc_cfg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c3ebff569d22326f60878c233e949013f2525d5",
+        "description": "intel/ds: Free perf config and context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2cecf3e8a8744692e2d2a2ec6b599ad3bdcd7f93",
+        "description": "intel/perf: Add intel_perf_free_context()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ebe8d2f9ea5c1cc1099eda232aa14e43b9bb2655",
+        "description": "intel/perf: Add intel_perf_free()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9a53c914db7778f0c6984410129137e6b79f94b",
+        "description": "intel/perf: Store pointer intel_device_info to in intel_perf_config",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da45594c5e92000b60219c0b835f91c2eb116568",
+        "description": "amd/vpelib: Bypass de/regam on HLG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "88b43f717479198df71731afb545a82dd53cb9b6",
+        "description": "amd/vpelib: Fix blndgam bypass flag assignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "921f0afe42850333e9a3bb60525eddd1760d69c1",
+        "description": "amd/vpelib: Fix Color Adjustment Failing Test Cases",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5027ba64a1549632fce0c10601ced99634c7b3ed",
+        "description": "amd/vpelib: Remove checks for pitch alignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0df1054d060204d6f38082e7c8532571933aba41",
+        "description": "amd/vpelib: adding blend gamma bypass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e6df4d458eb66d680b2c2c2d85d5b7c078201f4",
+        "description": "amd/vpelib: Remove support for non-linear FP16",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "acad1328a17c6efab8e92269c3ad02a8e98f0814",
+        "description": "amd/vpelib: Remove gamma cached table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a41fb59d3acdc235d17372487dc9212da01e1be",
+        "description": "amd/vpelib: Remove linear_0_125 TF",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39b08da80a6a147cd37fe75d3e1e7446ee2f6737",
+        "description": "amd/vpelib: Resolve mismatch with shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "383c3a417f81c515073ba0d111158eff03fcba20",
+        "description": "lavapipe: VK_EXT_legacy_vertex_attributes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d93211bde058934cad98d2c06524cb80bc9132f9",
+        "description": "ci: disable lavapipe-vk-asan job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6342903f56e761c948cf44babd12a512c6e20d68",
+        "description": "lavapipe/ci: move a few skips out from under the \"llvm jit\" comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a5604094051da7c35d43cb1685098b969723227",
+        "description": "llvmpipe: add KHR-Single-GL45.arrays_of_arrays_gl.AtomicUsage skip",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "660a47ecbf693601c25660b5fac87121ff0fe8bc",
+        "description": "tu: support VK_EXT_legacy_vertex_attributes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2890a0615ef2d36b5d71bc076f98be6932f4d743",
+        "description": "tu/a7xx: Don't set FLUSH_PER_OVERLAP_AND_OVERWRITE for feedback loops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26417211aef39b29878d7db9ac7c2c7222cf2022",
+        "description": "virtio/ci: separate hiden jobs to -inc.yml files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "928dd386fa234ab60c18de47758796d2bc629bb0",
+        "description": "nvk: Add sha1_h as a dependency",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2efa1ae0d538b446cd61c837564ecdc724953f0c",
+        "description": "dri: rename 'implicit' param from earlier series",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9666756f603f0285d8a93ef93db1c7ec702b671f",
+        "description": "tu: Handle non-overlapping WaW hazard with buffer copy/fill/update",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4cefb5ece8208be8c8aacc9be75045f40cb2e820",
+        "description": "docs/android: Fix example meson cross file again",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "57abef5af1f316bc1e9c6baefe986950e65b516b",
+        "notes": null
+    },
+    {
+        "sha": "59192b851f36fbd4f4066df573ebdba05c1b92b2",
+        "description": "freedreno: Update HLSQ_*_CMD registers for a7xx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13fdde0c7d265f0e577a8e9fb3b53e044b8f941d",
+        "description": "freedreno/crashdec: Initial a7xx support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81f42d82edef8b3617cc504bfc1bbfc381e52f3b",
+        "description": "panfrost: report correct MAX_VARYINGS",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c74d1473054ca3cc609bae6e31028063bd531bf",
+        "description": "pan/kmod: Make default allocator thread-safe",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d95ec56f8c6884e0ae975b683fe7249fab9e740d",
+        "notes": null
+    },
+    {
+        "sha": "068d111884a588f4972e27477b1cb2cf4f52d0e3",
+        "description": "pan/kmod: Fix a syncobj leak in the panthor backend",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "97f6a62f7ef82b909f62ca78788d4f24416fbd31",
+        "notes": null
+    },
+    {
+        "sha": "2cc317763ccc2f33bbff0920bb0833d09300f60c",
+        "description": "panfrost: Add the BO containing fragment program descriptor to the batch",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "087b63cb07717e83ea606648f2551fc9586b9165",
+        "notes": null
+    },
+    {
+        "sha": "31b039d8b735d91e899123a69b87cba2608499d2",
+        "description": "radv: advertise VK_KHR_dynamic_rendering_local_read",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c533a79878f1e0561e62a2f4788f6a1bcfeadec5",
+        "description": "radv: implement VK_KHR_dynamic_rendering_local_read",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53a142ad23bc7617396e498cae3a6196a42413c3",
+        "description": "aco: add support for remapping color attachments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39379e30dbf69111d798e54b3afd73c9ed55066b",
+        "description": "mr-label-maker: specialize CI labels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a30e6b9afce87ca41f286caa4e3ec190c2d524b1",
+        "description": "ci: backport fix for gl_PointSize bug in CTS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbe2630f19e86638229f65fb1ee1992f71889c2a",
+        "description": "iris: change stream uploader default size to 2MB",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0b6693a3a14029c31db2ee8576baa78fc914b9e5",
+        "notes": null
+    },
+    {
+        "sha": "2d575034f23038163d502e744b957b184334a74b",
+        "description": "hasvk: switch to use runtime physical device properties infrastructure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55967a411d40f534b03afa237c2848fd65a53bab",
+        "description": "anv: Move completely over to common runtime GetPhysicalDeviceProperties2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0fcc0a2fd8708511cd6593e743770535f1e89ac",
+        "description": "docs: update anv features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c1cc405d37143eb819e1272e8e2befdf26fcce8",
+        "description": "anv: VK_EXT_legacy_vertex_attributes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d20245f43bcc34afbfc62b4be1c59529ae438cb",
+        "description": "glsl: wrap nir_opt_loop in NIR_PASS()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2e5ff058583fda6d917cfcf1fb1579831dca826",
+        "description": "nouveau/headers: Clean up the meson a bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6036033f0d523f42a38baa4731cfae56fefb8a3",
+        "description": "nouveau/headers: Make nvk_cl**** turn to nv_push_cl****",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a0afd127602023ee74c0d901303f3366b62ae06",
+        "description": "nvk: Advertise VK_EXT_pipeline_robustness",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cda0d6331bacf81a1a94787fb55981e5e6ca8688",
+        "description": "nouveau/class_parser.py: Fix the docs for --out-rs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e32828f5fc4d8fac717fab113ab5c837ea2e2bc6",
+        "description": "intel/compiler: Fix destination type for CMP/CMPN",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c5acc6db7ac56d27c22b0143bcac29e31354ac6",
+        "description": "etnaviv: Zero init all srcs passed to etna_emit_alu(..)",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5aede1a157b7aa99052282a6960646da81b0a399",
+        "notes": null
+    },
+    {
+        "sha": "1cc48123986e38cb5608b159e080408b737954be",
+        "description": "ci/lima: expect fail of window_8888_colorspace_srgb on wayland",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "066fc39f45181c30b9b3ee93c17f52763a8e4356",
+        "description": "egl/wayland: Fix sRGB format look up for config",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "6a084e2b081882ff027e426e8faddbe1f5497614",
+        "notes": null
+    },
+    {
+        "sha": "c26fc237bbdb9663040a4a6c722c746d9cc556db",
+        "description": "lavapipe/ci: skip two more timing out ray query tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d17e9994e40b4ac25613afb7e2df39d1dc713cc3",
+        "description": "freedreno: add a7xx perfcounter support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5fb8ab62d277e7e8ec009bc3be9c6220029a2439",
+        "description": "fdperf: simplify counter value output",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc6cee935eda5b157bd49d4506b9c56b88523f62",
+        "description": "fdperf: improve reads of counter values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a45487708b41f608135ad1e4a2ec068749de95d",
+        "description": "fdperf: prettify logic around the reserved CP counter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "547f20773c043ddc966e8749666eadeb80428e56",
+        "description": "fdperf: select_counter() should work with a countable value",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "704cceab30412a3e4c0de2334c03cba2e992084b",
+        "description": "fdperf: use snprintf instead of asprintf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17fcb86a26ba4a0cde282c276d6608a0050965c5",
+        "description": "vulkan: Update XML and headers to 1.3.284",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9162034bce014d7e00758c12c5fcd243607c834",
+        "description": "radv: precompute DB_SHADER_CONTROL for fragment shaders later",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c658ed5136119d78842f818b33bed5dd1cd3d8ac",
+        "description": "radv: precompute vertex shader register values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b53d36f0d4b44d661126615809c2a1656d9c239",
+        "description": "radv: precompute legacy GS register values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa9b0ee86cff1e5128e021136dbfe6742ca80135",
+        "description": "radv: precompute mesh shader register values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f7ef10bea7de974e9ccf367bb8bddd7bce0ea2d",
+        "description": "radv: precompute fragment shader register values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5bc4d85bbd19264be9c2d8e9529c497576e724b",
+        "description": "radv: precompute existing legacy GS register values later",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "88dfe04b08d5a1279dbde042b2e79ca2e7a530a6",
+        "description": "Revert \"radeonsi/vcn: AV1 skip the redundant bs resize\"",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6746d4df6eac83d048e88c2d54aa19e7c1a0a696",
+        "description": "frontends/va: Fix AV1 slice_data_offset with multiple slice data buffers",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "569c2fcf952a3ec13ddf77c0058e769bf68f3aaf",
+        "description": "nir: fix nir_shader_get_function_for_name for functions without names.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "2aa9eb497d0f670136b5c2a50b962f4ce0faa917",
+        "notes": null
+    },
+    {
+        "sha": "13bd41386086b9d44684aea4813697333500db40",
+        "description": "zink: clean up accidental debug print",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "19e8df39b62a26ae55273de7b4866c24d1657dda",
+        "notes": null
+    },
+    {
+        "sha": "f8489211480a4789533b6c117dbcd9f6cb6cf71e",
+        "description": "clover: fix pipe_box update regression",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "651191801a8751c9ac1bc09327a50c19a9927392",
+        "notes": null
+    },
+    {
+        "sha": "e7b942393af8f7170ad2d7e9403ace139c142f22",
+        "description": "aco/tests: simplify small constant copy test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "44cc0d31b8220c91d036c523108232f5ad5f55ce",
+        "description": "aco/gfx10: use v_add_u16 with literal for constant copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7823065f64a4231b269f3d664e3bbb73539c3455",
+        "description": "aco/gfx11+: use v_cvt_pk_u8_f32 for 8bit constant copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23368f8c0c278b77283563a57ab79d3a24567083",
+        "description": "vc4: set src type on storing sample mask",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1632948a7640e0acb569be7c61e0840451daca2e",
+        "notes": null
+    },
+    {
+        "sha": "9e0978cd76f8063ba54a6e7c86e3729046ecf60c",
+        "description": "vc4/v3d/ci: update expected list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d163498dbe1a1777702ef6300df497793abc16ee",
+        "description": "nouveau: fix potential double-free in nouveau_drm_screen_create",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "821f4c8d99a3068758db834a5c219082a9609b3c",
+        "notes": null
+    },
+    {
+        "sha": "3e2df678743c4dcfc35c29c84894842e81538eea",
+        "description": "vulkan/properties: Document RENAMED_PROPERTIES in the property generator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5d59a50a998389cb29a5e9ad4a67af37d3160d3",
+        "description": "v3dv: Use common runtime vk_properties",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18c9b64e656132db7bfe384d891bf8f60a154683",
+        "description": "v3dv: constify arguments of vendor/device id getters",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1afbf0ba4a8eec886eb552754445279f16fb3564",
+        "description": "vulkan/properties: support Android in the property generator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "610a7c84c3766337778b273bc2a6dbf47900de39",
+        "description": "anv: move empty_vs_input to physical device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "725397759a3133a610180743952b3c763aabfd3a",
+        "description": "anv: move device initialization as the last step of vkCreateDevice",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "63c4d24f7d2e496df3c5d08ece47d913a783d3b1",
+        "description": "anv: avoid requirement to put flush_data as first field",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae6d20815ad1029c50bf8a3bdde13d34414142aa",
+        "description": "anv: fix leak of custom border colors",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "4dad2a4a6fd76d8bc889d655c812a6f0ba757ed7",
+        "notes": null
+    },
+    {
+        "sha": "e260b16b1110174169f6234b8f59cb42fc42f69f",
+        "description": "anv: fixup alloc failure handling in reserved_array_pool",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "806281f61fe1be3c52e6a1aa77bb22e98161b3cd",
+        "notes": null
+    },
+    {
+        "sha": "92337aff030d5895ddde07f03a918dd416172a9b",
+        "description": "radv: split cmdbuf dirty flags into dirty/dirty_dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db7bfe85ae499257ec214a543f6d8ef9c7a3738a",
+        "description": "clc: Always use spir for 32 bit",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "22fa315ee0622b73956cebf8375497f3ccb8d456",
+        "notes": null
+    },
+    {
+        "sha": "8732a619f13b05e6469f4841d6780fcdac3586ce",
+        "description": "vulkan/android: Add common vkGetAndroidHardwareBufferPropertiesANDROID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8f7e7582acc5eb7fa4ccc025720a22af727d417",
+        "description": "vulkan/android: Add common helpers for the AHB extension",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0996d1a30a5e054f6eed533aa324d4b9430c77f",
+        "description": "vulkan/android: Add common helpers for the ANB extension",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b0f0b0ab963c25a0ec231a5d7db176210c50da7",
+        "description": "vulkan/android: Add android buffer classification to vk_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c406d53858543da81b5bec5826c30d0698d95fb6",
+        "description": "vulkan/android: Add common vkGetSwapchainGrallocUsage{2}ANDROID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd9a426e3ee8da7e49867b9791446db3ad602e05",
+        "description": "vulkan/android: Add basic u_gralloc support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd3871e7a41eb516ab85a4b13203daa22257d8bf",
+        "description": "docs/features: Add VK_EXT_map_memory_placed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "220dae5870c03d712a1ad1323a7ae5be1c368d39",
+        "description": "tu: Implement VK_EXT_map_memory_placed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d2de5b5b0716edd4216af5a4fa23018cadcc9db",
+        "description": "tu: Handle VkDeviceMemory BO unmapping in VkUnmapMemory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "854640ea261cf4479dafa81e0f4e056a837d6bc1",
+        "description": "vdrm: Add fixed VA parameter for mapping memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "603982ea802b3846e91a943b413a7baf430e875d",
+        "description": "nir/opt_16bit_tex_image: optimize packed conversions too",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eeed928111c24fcf035369a3cfc4f57a0f6a37a2",
+        "description": "nir/opt_16bit_tex_image: pass options to opt_16bit_dest",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e63afdc6815e4461c75faa217062d2de595c86da",
+        "description": "radv: always run nir_opt_16bit_tex_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a35522c8a48bd19d37223c24d271e08ed5b1a34",
+        "description": "radv, radeonsi: don't use D16 for f2f16_rtz",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4287358f59b65deaf953934c8d88362de7c864d6",
+        "description": "ac/nir: explicitly use pack_half_2x16_rtz",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b8cf06fc76b7baf78dab80bd8023377f8fb410e",
+        "description": "nir/algebraic: Optimize some extract_* expressions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fa17962d6b26fe29996a5767fbdd44dc2dbd082",
+        "description": "intel/elk: Fix optimize_extract_to_float for i2f of unsigned extract",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e6022281f273287499e9012f9a7c3dd87a733e5b",
+        "notes": null
+    },
+    {
+        "sha": "fc2360167c48bd51f2cb536efadba4a5b846142d",
+        "description": "intel/brw: Avoid optimize_extract_to_float when it will just be undone later",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf5d82654ab9d3a67dacab4571d814066e0593c4",
+        "description": "intel/brw: Fix optimize_extract_to_float for i2f of unsigned extract",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "29ce110be6d0d4e4df51be635810f528f7dd7f40",
+        "notes": null
+    },
+    {
+        "sha": "82dab8691e5d95d00139e27108d15c361e493a36",
+        "description": "ci: uprev mold to 2.31.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7de8a010876b6e1fdf7fc8cf15f3f0e10ba5c569",
+        "description": "mesa/st: don't use base shader serialization when uniforms are not packed",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5eb0136a3c561e25d3f274e33a86812cfb2af589",
+        "notes": null
+    },
+    {
+        "sha": "087e9a96d13155e26987befae78b6ccbb7ae242b",
+        "description": "venus: make cross-device optional",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "811ed6286590bed340a73d3115a283a027d9091b",
+        "description": "zink/kopper: Wait for last QueuePresentKHR to finish before acquiring for readback",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8ade5588e39d736bdeab9bdd8ffa7cbfb6a5191e",
+        "notes": null
+    },
+    {
+        "sha": "fd392745c2f231e6b675eda0dd35e894834465e7",
+        "description": "Uprev Piglit to 7aa7bc1b01d57b4b091c4fc82a94a6ff47f38ebf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b4b04473986c9b0e77c925a116be39f6ff3982f",
+        "description": "nir/opt_loop: add loop peeling optimization",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a2226be47751272c3ce4b7bbf39e2e2470a1f29",
+        "description": "nir/opt_if: don't split ALU of phi into otherwise empty blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e74f5b16e37b399dcf469eff230363b4bbe055f4",
+        "description": "nir/loop_analyze: adjust negative (or huge) iteration count check for bit size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52efb6cc83453224774c04a01bd9f22db0d4084b",
+        "description": "panfrost: skip gles-3.0-transform-feedback-uniform-buffer-object on Mali G52 and G57",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce51e48cb6636d6eb02899d6c9894b436b80a44e",
+        "description": "radv: move nir_opt_dead_cf() before nir_opt_loop()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4453971fbb36c440608d00f277424bb8fb9ee6db",
+        "description": "radv: mark nir_opt_loop() as not idempotent",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e38cc06f8f96cd863c9dd25bcf3cf21b4c6b6fe",
+        "description": "radv/ci: document a recent regression on GFX6-8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd171d21dd1ba54c2028e01e9334ffb2735714d0",
+        "description": "vc4/ci: add fails seen overnight",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "03474500b55223458e2523b79b39c17e4682eca8",
+        "notes": null
+    },
+    {
+        "sha": "0c96b03fcf90ad3167e156068a5662feed7b7e19",
+        "description": "r300: better packing for immediates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11ad056ee94e78566ddab024d3e9482a543d51cb",
+        "description": "r300: compact scalar uniforms into empty slots",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d3483bfe4edaac596ebd2022ee65d188863d729",
+        "description": "r300: switch to a new constant remap table format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71761e211736c92fea4317cc1ed8a05a5492a0e5",
+        "description": "r300: move dead constants pass earlier for vertex shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a0ee1ac2b7a459ef26082bc386cbe71f77798bcf",
+        "description": "r300: replace constant size field with usemask",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d71d1897904f1319f37fcde885a4db688ae1f687",
+        "description": "radv: add a new dirty state for emitting the color output state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66d4188ec53f3e428b9f58c977fe98b928616acc",
+        "description": "radv: store cb_shader_mask for fragment shaders and epilogs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ce1bfc040276f5b7f1bcf290efa804b7ad83fda",
+        "description": "radv: rename col_format_non_compacted to spi_shader_col_format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "199f52180473f481cb6350eacfdb07c60a738f50",
+        "description": "radv: compact SPI_SHADER_COL_FORMAT as late as possible",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1483d022b28218bd53aea1c4917739cf0398b3e",
+        "description": "radv: clear unwritten color attachments for monolithic PS earlier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b41fbd4b8c249f11146cfc747180afec4b60f4a",
+        "description": "radv: precompute compute/task shader register values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0549649bcfbc32cc4a2d2d72baeb6541f7f6584b",
+        "description": "vulkan: optimize vk_dynamic_graphics_state_any_dirty",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "602c62a2736d7c9f8a8b9964d772ba65b2a58f47",
+        "description": "vulkan/video: correctly set sub-layer ordering in H.265 VPS/SPS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b613566faf6974846508a7616a0916f03aafc690",
+        "description": "vulkan/video: generate profile_tier_level structure correctly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d983b34255087e0c913ed04f3792dfbc5476016",
+        "description": "intel/nir: Set src_type on TCS quads workaround store_output",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1632948a7640e0acb569be7c61e0840451daca2e",
+        "notes": null
+    },
+    {
+        "sha": "42ed28a726eb4c9e273a46a91e8951c0a1eb534f",
+        "description": "nvk: advertise EXT_depth_range_unrestricted",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d37a5c7b6901ce42c7c1486830a68fae4162e7c",
+        "description": "nvk: Only clip Z with the guardband",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14d749f13d67a220146c2a3cc0ce3c3bcca8c670",
+        "description": "nak: Don't saturate depth writes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6dc61775f65a0e45dbf5eb39536c619dfc8d3bd",
+        "description": "wsi/wayland: Add tracepoint in wsi_wl_swapchain_wait_for_present",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c4b432f83e0776f1536c4d1278b6e6fa2ff7a43b",
+        "description": "wsi/wayland: Add a perfetto track for image presentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9596149cfcf13816e047c5d49122febb01f1397",
+        "description": "perfetto: Add some functions for timestamped events",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57c03fe49c7017f44ef22e4fd706ad87c5c2cec2",
+        "description": "wsi/wayland: Add latency information to perfetto profiling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "60eb27591f5d1618e02a28e1b599139dfb05707f",
+        "description": "perfetto: Add simple support for counters",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "34273bc4eddd0c195220f305e2628d411394f028",
+        "description": "wsi/wayland: Add timing debugging",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23b4fb2b4ceb009012315004b5119c133ad6610e",
+        "description": "wsi/wayland: Add flow id to presentation feedback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ba7b3f40c1ea7226b26b128a7fb82b16e481fcb",
+        "description": "wsi/wayland: Add perfetto flows to image acquisition and presentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16b8dbedfa8b0d701b7f7b9900190fa6375c2bd3",
+        "description": "perfetto: Add flows",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b460cf9b5cd524f661cd32c460bcf00068f6ee7",
+        "description": "egl/wayland: Use loader_wayland_dispatch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90effcceab797ffdd439427c32427d9328900a99",
+        "description": "wsi/wayland: refactor wayland dispatch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1062b3e813706bdbc56532dd1b0c1f45778472f6",
+        "description": "vulkan/wsi/wayland: refactor wsi_wl_swapchain_wait_for_present",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0554d11f1e88ae139532e65c34c2340b2b666948",
+        "description": "etnaviv/nn: Pipe through input/accumulation buffer depth from hwdb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e82d70d472cc28978ebc6a667fbe8d2c5274b5c4",
+        "description": "freedreno/a7xx: Add A7XX_HLSQ_DP_STR location from kgsl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "37f9a7a9c20feaaf432e135ac1b1553c4c21553d",
+        "description": "freedreno/a7xx: Add AQE-related registers from kgsl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bed4ad26ad050ac6ea38167411277b4f110eb48f",
+        "description": "tu: Disable depth and stencil tests when attachment state requires it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03474500b55223458e2523b79b39c17e4682eca8",
+        "description": "vc4/ci: update results",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39c4de7e42a85a6871c552c2d55ddb7d3a1988ee",
+        "description": "anv: Fix descriptor sampler offsets assignment",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "7c76125db25db9bdf5521baf7c848ccd4bd37b5f",
+        "notes": null
+    },
+    {
+        "sha": "be518657b9c3df0f8a71cb43d65ccdf0475af8ec",
+        "description": "intel/perf: Change oa_format to uint64_t",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9cb4ff9b0e8ccca3e46f45608e0f5b49abf037b8",
+        "description": "intel/perf: Fix the error check of i915_add_config()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a56dc30ba660bc30d0413b44afeed9a99f980652",
+        "description": "intel/perf: Remove i915_drm.h include from gen_perf.py",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14b890c7971999621e483a2c249d8619dfd0d35c",
+        "description": "intel/perf: Nuke platform_supported",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad4c24b797f009ffda896e4dcce3351659792371",
+        "description": "zink: Add missing currentExtent special value handling",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0217a7c00722932a58f0bd659230443e4236cb65",
+        "notes": null
+    },
+    {
+        "sha": "b69189a279c6fe23277e2b40e878c2a72c17d118",
+        "description": "zink: Always call deinit_multi_pool_overflow when destroying zink_descriptor_pool_multi",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4084f7f09acc28ec16b98bc1feb15b71a6e87d3",
+        "description": "aco/lower_to_hw: remove gfx6/7 subdword paths",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ecbda83f898d983abcd461d6ea79fee04f04bbd",
+        "description": "aco/ra: remove gfx6/7 subdword paths",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d914ff3aa58b862ecdbc2d968811a19b721364bc",
+        "description": "aco: add tests for lower_subdword",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47566d0df3f1c9f850ff42db3d1fde9b6472c254",
+        "description": "aco: add a subdword lowering pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b35de971cac42ff2f88aeaa54e0193e3aecdfaf",
+        "description": "aco/lower_to_hw: don't use regClass to identify subdword reductions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c4d0b287fa007f33cb11df2011ab23098fe9bc8",
+        "description": "radv: emit compute pipelines directly from the cmdbuf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72a73a6f8a3f86d5ccfe6bb2b30184b35c525e81",
+        "description": "ac/nir/legacy: Use new pre-rasterization output info helper.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ac0727f877095ca901c4c0c74658c0b4c573a7c",
+        "description": "ac/nir/ngg: Use new pre-rasterization output info helper.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1819d60ea505b6a5e7781d60234804dcde7f72c",
+        "description": "ac/nir: Add helper for pre-rasterization output info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "039e739eeac7ff9574a7d43948d4b30dafb24a4d",
+        "description": "ac/nir: Move some helpers to new file.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd66b77af04aba8abad9b0d892289e2ba853b5af",
+        "description": "aco: Add missing nir_builder include.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e50234de8624a8c42d050806de9f404ce189f452",
+        "description": "anv: allocate space for generated indirect draw id's using the temporary allocation helper",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "82d772fa9b3a5eb7809921ca448b6e796a3d92b3",
+        "notes": null
+    },
+    {
+        "sha": "482d9fcbf304e41a0a4ab461894277e5cfd2c9b2",
+        "description": "nouveau: Fix crash when destination or source screen fences are null",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5aede1a157b7aa99052282a6960646da81b0a399",
+        "description": "etnaviv: isa: Do src swizzle with isaspec",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "894f7f438745f4f76ea21391a89752ce601f7e2d",
+        "description": "nir_opt_algebraic: Add a couple optimizations for lowered unpack(pack())",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a24ed1146de94d3bf0d06aacc28ca78a24f606b6",
+        "description": "anv: consolidate DestroyPipeline for graphics and graphics_lib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6223388c738e37a6d509ba54e2d179ee5773a4d6",
+        "description": "anv: fix casting to graphics_pipeline_base",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d802aca523a729852f1e9dba3fdab2afac41270e",
+        "description": "nir/lower_image: support FMASK loads with a 16-bit sample index",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a01712874d9effb97ed6d8c7dd80966fed0c44ce",
+        "description": "nir/lower_tex: support FMASK loads with a 16-bit sample index",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f1ae6c7b11306c55186dc110d4a979dd4e78c09",
+        "description": "nir: add shader_info::use_aco_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fcb627945b96e8550b683b16c5c1a02b43967357",
+        "description": "nir: add more build helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1632948a7640e0acb569be7c61e0840451daca2e",
+        "description": "nir: validate src_type of store_output intrinsics, require bit_size >= 16",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0217a7c00722932a58f0bd659230443e4236cb65",
+        "description": "zink: handle swapchain currentExtent special value",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2827ec97f8e74ef0d5991a03f442fdcaccebe984",
+        "description": "lavapipe/ci: skip ray tracing tests that sometimes time out",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3369ec9adeb2d74c5e57adbc279a824d40761c2b",
+        "description": "lavapipe/ci: generalize flakes list to all formats for these flaky tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71dded5f25215047e52c4f09fa775a0c7e34f04d",
+        "description": "lavapipe/ci: add flakes seen lately",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "165e21a5f842e926023c0a6950ab73fb5e33b239",
+        "description": "lavapipe/ci: trigger jobs on draw & gallivm changes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7586d4fd5cc3711348d0f50a8d3571598ed35646",
+        "description": "llvmpipe/ci: trigger jobs on draw & gallivm changes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0dae5a3225a5cc1c83e3a6c7ba2642577289bfe",
+        "description": "docs: update calendar for 24.1.0-rc2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8654809dda7c53d5ab4a9e0b555f69608580f911",
+        "description": "lavapipe/ci: only run jobs when their corresponding files are changed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2b682898169af793e98aa783aedfbba3eec897b",
+        "description": "lavapipe/ci: avoid running all lavapipe jobs when llvmpipe ci is changed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4feeacf59c2623a75ca840be8a4475de07d6984",
+        "description": "lavapipe/ci: fix indentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b38f52482bb4a71e99c066b6eca4dda4949cc8ac",
+        "description": "llvmpipe/ci: only run jobs when their corresponding files are changed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9fafdad06edf0d6edaa85345918494c35f15e98",
+        "description": "llvmpipe/ci: fix indentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47f6e24ad5dfcb59dd1511800aee8c56b4f8fee4",
+        "description": "meson: move tsan-blacklist.txt to build-support with the other build support files",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0d46e0e88bdeb8bfff3b30c65002cc34d3b7ba4e",
+        "notes": null
+    },
+    {
+        "sha": "84139470a5606b64f3c31b02a1fe22445dd4d604",
+        "description": "intel/brw: Use VEC for emit_unzip()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b54b4fad5650f2204d36974d6daaab1d01fd1c5",
+        "description": "intel/brw: Use VEC for NIR vec*() sources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4563747d9229359982ba40b5645f813e5980a78",
+        "description": "intel/brw: Use VEC for output stores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f0c29c9b716fd3fd072fc94cc1108c92a44d1c78",
+        "description": "intel/brw: Use VEC for FS outputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbe7a13f2b438cf2b5d385de4f96a73808138814",
+        "description": "intel/brw: Use VEC for TCS/TES/GS input/output loads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a94e1bd0ac42a5ff7d5c5a75f1f091c7fc4cfc72",
+        "description": "intel/brw: Use VEC for gl_FragCoord",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0a24496fdbe9487b7bb8576a1e76542b2bbcf89",
+        "description": "intel/brw: Use VEC for load_const",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c867bf2c7a52737c519eaf0734e76dc30353bcd",
+        "description": "intel/brw: Add a new VEC() helper.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c194df565a4331a76871d3c7dc603687b8003f38",
+        "description": "intel/brw: Don't include unnecessary undefined values in texture results",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e42914529a4e4906f98edb898217ad3c4d982b4b",
+        "description": "intel/brw: Support CSE on more ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed3e4c16dce6d14cc6540d221708c9e734cf251a",
+        "description": "intel/brw: Do not create empty basic blocks when removing instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "391da3610c09cbb72609377c9778b19adade9a93",
+        "description": "intel/brw: Print W/UW immediates correctly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72ed71877c31eb40b3c6850c076f7bb03f450d2e",
+        "description": "glapi: fix param type in TexGenxOES",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54258c1ee187e3eb092c096ba5ed58ce8302f859",
+        "description": "lavapipe/ci: skip another test that goes over the timeout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b739f7db86b721cc12ff9ce11cbfa72ac3d0863",
+        "description": "lavapipe/ci: add the rest of the failures introduced by the 1.3.8.2 uprev",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7d4b7a59c205aa14c1de6984c144d8c976df11b",
+        "description": "lavapipe/ci: drop fixed test from failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a963c67298e9433b8832e08edd827b7818600bc5",
+        "description": "meson: use bool.to_int() instead of manually converting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9d78f110cb42947852f4977bb602a3e653078e4",
+        "description": "nir: add sleep intrinsics for AMD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b06a71b3cd65957b8f8706ae69dc64a014e8e89e",
+        "description": "nir: add streamout intrinsics for AMD GFX12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a791c130378288fc40a76c549f93deda81e7a6b",
+        "description": "nir: add nir_atomic_op_ordered_add_gfx12_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4cfcbdde8fdc350d778ca1020038b1ff33c444b",
+        "description": "nir: add ACCESS_CP_GE_COHERENT_AMD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7187373ec2259d2ade1f3a5741f58de6a57c132e",
+        "description": "meson: always set USE_LIBGLVND",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21b527632ec23038cde9cbc83ce40bebc15931e5",
+        "description": "egl+glx: fix two #ifdef that should be #if like the rest",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11b060f41acf8fb297b64757f49b7cf0a8f8401c",
+        "description": "meson: simplify `-gsplit-dwarf` compiler argument check",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "44b080af07f0ba516f0d5519bba86eb7c1ea7da2",
+        "notes": null
+    },
+    {
+        "sha": "dd3ee08b0507859b173feb072104220cd43d45c9",
+        "description": "docs/panfrost: link to conformant products",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe4ebace7902e2686a9ab888725c9fa64e17ee3c",
+        "description": "ir3: Don't manually scalarize SSBO loads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd15dec66e05cbdc9a07394f32d3848f71457146",
+        "description": "ir3: Don't scalarize all SSBO instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86281ef15fca378ef48bcb072a762168e537820d",
+        "description": "radv: add shaders BO to the cmdbuf BO list at bind time",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42554e81b97d9769dd54c775f1667ce1ebbfdb68",
+        "description": "radv: add RT prolog BO to the cmdbuf BO list at bind time",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42dc4b463b57a26e6c97d490a162bd4b3a82a0e2",
+        "description": "radv: add GS copy shader BO to the cmdbuf BO list at bind time",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2664e058de34cb2b2ed3cfe6b31c722db20912f5",
+        "description": "radv: use the bound GS copy shader when emitting shader objects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be98fe27244ec65c117a408378d49b05f229c74e",
+        "description": "radv: pre-compute VGT_TF_PARAM.DISTRIBUTION_MODE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d7679c0370890a019e367eaa6a5b8ecaa1d3e5f0",
+        "description": "radv: remove useless DB_Z_INFO.NUM_SAMPLES when emitting the MSAA state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4dd682e227ff6925288aeefa23b692398ec300ae",
+        "description": "radv: inline radv_get_pa_su_sc_mode_cntl() in radv_emit_culling()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e651a2c856407c263db644aea94e608aa7d8cd51",
+        "description": "radv: simplify radv_emit_primitive_restart_enable()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1e5b13359751f4bbe0402b7bc99a9dd6490949d",
+        "description": "mr-label-maker: Add teflon marker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8416ba9c25467b027411527bd04ee199601d587c",
+        "description": "amd/ci: 17 piglit failures are fixed for raven",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98e976dcdb086f729946f2163ae05272728d68ad",
+        "description": "radeonsi: check for FMASK correctly in gfx10_get_bin_sizes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a3c5cf17b0a074a51a7852127a2600932513b24",
+        "description": "radeonsi: enable DCC for MSAA on gfx10-10.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb7d7476517072ca6432a9ee624b1d400f20e686",
+        "description": "radeonsi: add workarounds for DCC MSAA for gfx9-10",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1929bb0d8d88a63f2cdaedef41c7bc44c4b8e008",
+        "description": "radeonsi: validate IO semantics in scan_io_usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cfe197e61cc5bc15552482fde462b0fb290d34fb",
+        "description": "radeonsi: fix KHR-GL46.texture_lod_bias.texture_lod_bias_all on gfx10-11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f09751548831c6e296d379cd45c7a2ae1564014",
+        "description": "radeonsi: don't invalidate L2 for internal compute without DCC stores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c87ce78d1013a52a78a05470ca33fd8597d3f289",
+        "description": "ac/surface: enable thick tiling for 3D textures for better perf on gfx6-8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33f642aa09a82a3a7ba9b6b583d615bfa28f78c4",
+        "description": "ac/surface: disable DCC for 3D textures on gfx9 to improve performance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e05aec3fcd86613abcb7b0618f1b5f49b8ce0f4e",
+        "description": "ac/gpu_info: set tcc_rb_non_coherent only if number of TCCs != number of RBs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "027c01bd8f6d1551e856c4d0771147d1212aac28",
+        "description": "v3d,v3dv: stop hard-coding max attrib divisor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8f96dd0b01df9c7e9e48b68eb846d93bd5036a9",
+        "description": "v3dv: fix VK_KHR_vertex_attribute_divisor",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d38ff02c033a2cd0d7d926f395a0728bc7f2abf6",
+        "notes": null
+    },
+    {
+        "sha": "fe8fdc58db9cc364e7215b70f229cac3001a4676",
+        "description": "gallium/auxiliary/vl: fix typo which negatively impacts the src_stride initialization",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "76725452239e9e7740c0edd6a5f3663ab897c343",
+        "notes": null
+    },
+    {
+        "sha": "3daee9b677ba5cbb50bbd01278e817e3c8bb117b",
+        "description": "svga: update timespan in copyright message",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "901269955dd133aa20c86b0e75c8b5f2c8c9c689",
+        "description": "svga: convert license block to SPDX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad39355e837829a9d3ed36c3e60cce55a131d0b6",
+        "description": "kopper: don't set drawable buffer age",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "2a8c6cf7ac4cb88149ca8e99ba163fcecc055032",
+        "notes": null
+    },
+    {
+        "sha": "19e8df39b62a26ae55273de7b4866c24d1657dda",
+        "description": "zink: slightly better swapinterval failure handling",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a50c17802ab1f60d2fc707f05552f73f4b2d284a",
+        "description": "kopper: fix bufferage/swapinterval handling for non-window swapchains",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7352f948bee551f205476eeff2aec7cb657daf50",
+        "description": "meson: Fix invalid kwarg name",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "44b080af07f0ba516f0d5519bba86eb7c1ea7da2",
+        "notes": null
+    },
+    {
+        "sha": "8248cc0bf45d0d7558cc3d77a63dcd078a96aa66",
+        "description": "docs/panfrost: move details to separate articles",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da2cc2071477a2f2384dab22e5a6c15f21bb7d77",
+        "description": "docs/panfrost: compact gpu-table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2cb8e9a85672614a8f604f4c82617565510612bd",
+        "description": "etnaviv: isa: Add name for full writemask",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cb69595037c198e43ea381c4cf248c44df5af870",
+        "description": "etnaviv: isa: Rework modeling of left shift for store/load",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8c38ec64838a304b1b839ac5ec2435a7f88c700",
+        "description": "etnaviv: isa: Add more flags to etna_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a0dad2e705f51db1e2c20b5310f84be95ec29a46",
+        "description": "etnaviv: isa: Switch to enum isa_thread",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87e5ad3930ee0e727b938b7c392cbcd723d8a1fe",
+        "description": "etnaviv: isa: Print dst_full for ALU",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c70dcd6f7a7950e7008ee2631ed966944fe0bcd",
+        "description": "etnaviv: isa: Add clang-format special comments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc72126cb4e425893918e2d17f0cc2a253096651",
+        "description": "radeonsi/vcn: Only enable VBAQ with rate control mode",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b144f501906dcb4a54e0aa8d699768c8d9d13bbb",
+        "description": "radeonsi/vcn: Fix 10bit HEVC VPS general_profile_compatibility_flags",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc0df497f0d4579301dc853587aef7ca8aa679ea",
+        "description": "radeonsi/vcn: Allocate session buffer in VRAM",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b518681938c9eeb9133972a66a91fc4ff6cf2a1",
+        "description": "radv: remove bogus VkShaderCreateInfoEXT::flags being 0 assert for compute",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "37d7c2172b2a9dbf9b0469fdff40b33b92cc99a5",
+        "notes": null
+    },
+    {
+        "sha": "8c2a749f67204fd3bdcad1af87b8dd25cd934ff7",
+        "description": "etnaviv: isa: Drop capturing of python output",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85deb9f706c8cbccd928eaf84f3f550662bf83bd",
+        "description": "radv: simplify DB_Z_INFO.NUM_SAMPLES with null ds target on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "45edd99b6bee4c15a71a9faf7d8fde7d2333b34c",
+        "description": "ci: mark microsoft farm as offline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "674e89953f0ba10ce6a537a1b2d181179576061b",
+        "description": "intel/brw: Use new builder helpers that allocate a VGRF destination",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c2c49f7bcdf0686b1f7689624b813784aedf4bd",
+        "description": "intel/brw: Add builder helpers that allocate temporary destinations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "319ba85e10121717759d125cc86a753e7f6896cf",
+        "description": "intel/brw: Add builder helpers for math functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf8ed9925f2901a95c6add875118ed2c37e9e1d1",
+        "description": "intel/brw: Make a helper for finding the largest of two types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f5473e6edd5dd155fac0726b8b1c7afd6d213d08",
+        "description": "intel/brw: Don't use inst return value when it isn't needed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dfe5e5667155421dd25a5ac6cb70d0fe24e0d874",
+        "description": "radv/ci: add more flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42b992cfab54b92817a35fbdb564b3a667b32443",
+        "description": "turnip: rename tu_queue_submit struct to follow ODR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea863c0c1ccbc26ad6f9e1e6fbc834ebcd85bc3c",
+        "description": "nir/print: Do not access invalid indices of load_uniform",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a83fd26d0effc8e65ff601c2ad3314058b98f107",
+        "notes": null
+    },
+    {
+        "sha": "cc9141f0449b84204172f5729ea3dbc1724239c0",
+        "description": "rust/program: remove Program::kernels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8ed73b5f618d1bd1fdbd661e1f15f1b599e2d47",
+        "description": "rusticl/program: Arc the stored KernelInfo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "672de78d667922f285305e7adf38a6a4ac872a76",
+        "description": "core/kernel: skip validating unique kernel signatures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ab4b2d7a063c525dc98c80f272643bc47f41f96",
+        "description": "spirv: preserve signed zero in modf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2053c5363973435dddbc50aef3a632b7dd01979",
+        "description": "etnaviv: Allow collecing both GPU and NPU specs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a4653587cc434e8dbaa2b06cd18c8132ab611f78",
+        "description": "etnaviv: Add a separate NPU pipe",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "108d2103ea86f699ffa764f759021bd3745cc1e1",
+        "description": "etnaviv: Pass npu to etna_screen_create in a separate parameter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06683288e0b891aba3b1ae602e820cde17638197",
+        "description": "etnaviv: drm: Stop after model query failure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba59882212afdc3ddafc070c53092ae3f0aea618",
+        "description": "etnaviv: drm: Suppress get-param error message for non-existent core",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ec84adbed1e7cc0b78af754294c4a2b254bc317",
+        "description": "venus: fix to destroy all pipeline handles on early error paths",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3be21f1778ff3e3de4d6506bb20a0ffd11f5003",
+        "description": "wsi/wayland: Dispatch event queue in wsi_wl_swapchain_queue_present",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5f7a5a27ef1b630bd1aea0cc0b1256fadee9de8e",
+        "notes": null
+    },
+    {
+        "sha": "2a417e3fc1911f5edc912621fe532c1c3ec64d0b",
+        "description": "intel: Build float64 shader only for Vulkan",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "b52e25d3a8eee702ff5d21e4cdb9a4dc0736282a",
+        "notes": null
+    },
+    {
+        "sha": "bdbcba52693cc62b0ec5d1afea6609a28df2a7ca",
+        "description": "v3dv/ci: add rpi5 failure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b4874aa5cf56a7041eb609b6d9829719f8a49bcb",
+        "description": "ir3: Use scalar ALU instructions when possible",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "32308fe9f1c6c9ef6716be4d9812ad41794f48b4",
+        "description": "ir3/nir: Fix imadsh_mix16 definition",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17cb1c78bde01eedbfe0f5e874b1208d8d08d570",
+        "description": "ir3: Directly use shared registers when possible",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3bec9e684d02642fdebdebd6f5c509f7eecea2b4",
+        "description": "ir3: Rewrite shared reg handling when translating from NIR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4828942d0c3353ced285c9aebed1109bd696db77",
+        "description": "ir3: Get sources before emitting scan_clusters.macro",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce6c4f03201b5046b5bed74934b52a7a874288d2",
+        "description": "ir3: Add scalar ALU-specific passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c4234501fb6281ff0a4c235b0ba7cb0fda4325c",
+        "description": "ir3: Support scalar ALU in the builder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "823e034db28392362868a441cfc4833275676d89",
+        "description": "ir3: Make type_flags() return a bitmask enum",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac132b3f62dc8cc016476a9e1e442d329c7bec4d",
+        "description": "ir3: Create reduce identity directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "497fcd26b51e7be7ddcd30a6450e1fa273af6206",
+        "description": "ir3: Add builder support for shared immediates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "736570b74d25b67acc5e681aa080c4f61320d36d",
+        "description": "ir3: Add support for ldc.u",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94c1ff415bdd109bfc52b8990c5aac9dd2b421b0",
+        "description": "ir3: Distinguish lowered shared->normal moves",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a64dd98e5502806dc78212ad309445593c87e5cc",
+        "description": "ir3/cf: Don't fold shared conversions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f62203edf3ec0ab6729bd69cf814b0e4480b0e8",
+        "description": "ir3/cp: Support swapping mad srcs for shared regs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef75ea18cd352e4bee17c46069babe5ca3390641",
+        "description": "ir3: Don't emit single-source collects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ffef73bf5c7801ab6c4e1448931fdb26f947f43",
+        "description": "ir3: Immediate source for stc is invalid",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "37748bbe78064ed73bc08498f4b0f35f7e05b866",
+        "description": "ir3: Validate scalar ALU sources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06cf178edeb66fa99c6f8aa1854cc64eb24daf72",
+        "description": "ir3: Implement source restrictions for shared ALU",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "876c5396a7893d2a55a2d6635085d70c03c216d4",
+        "description": "ir3: Add support for \"scalar ALU\"",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8ac16b4b98732153ea838e6cc4c1546551823af",
+        "description": "ir3: Use correct category for OPC_PUSH_CONSTS_LOAD_MACRO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "507b51e7ae669b811fb1d246951728747a15e080",
+        "description": "ir3/legalize: any/all/getone are non-prefetch helper users",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ac1b13f1a7083b2ac4f81f939a7c974e7167c49",
+        "description": "ir3/legalize: Remove bad (eq) micro-optimization",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a56de0774b1bf867de0a03a251ef138a6b17416a",
+        "description": "ir3/legalize: Take (ss) into account in WaR hazards",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae2db62aab2f39ae72d935aa4c75562dbf59124e",
+        "description": "ir3: Moves with shared destination are always legal",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ee0f6d1fbf62438c69b1fe17ecf029e888414a0",
+        "description": "ir3: Allow propagation of normal->shared copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b309418380e6ed25135f31437d30c76a4ddec432",
+        "description": "ir3: Validate that shared registers are in-bound",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "468f070a911607db10acc50e505c0f1a1bd956f2",
+        "description": "ir3: Reset num when creating parallel copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c00e06bc62718aa97d9bfb24cfe4e680cbad05c8",
+        "description": "ir3: Use INVALID_REG in array store",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2cf2dfd78db607b2966239afba3a96145a59142",
+        "description": "ir3/ra: Use ra_reg_get_num() for validating num",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81015b262082e3228233e1d142b431b9cfaee883",
+        "description": "ir3/lower_copies: Fix \"inaccessible\" half reg lowering with shared regs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fec5b9397f43ec350b40a1c3a6c013213559bb4a",
+        "description": "ir3/lower_copies: Handle HW bug with shared half-floats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "100096394f3db44bd41863e30dfec8e74962832b",
+        "description": "ir3: Don't use swz with shared registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec036fe51e18754cc3fbb8903a5be9b001259c36",
+        "description": "ir3: Fix shared parallel copy validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ca91b58457ba671b3a7338c7f7a5a00d8ebaed27",
+        "description": "ir3/lower_pcopy: Fix immed/const flags for copy from shared",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90dabe5a1831af92a7fce2b9f5a0253b68b3ab3f",
+        "description": "ir3: Fix lowering shared parallel copies with immed src",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4937172534a71382cfc437b74ae80376ef65985c",
+        "description": "ir3/ra: Prepare for shared phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7cae84078cdd4fd4aa4b9841a669638ad7ceb16",
+        "description": "ir3/ra: Fix printing shared reg file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "478cd71308072b2879ac8e0662a9cde2eacb3caa",
+        "description": "ir3/ra: Prepare for shared half-regs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8632862d0856225f56932c6d15341f6bd5953b6",
+        "description": "ir3: Rewrite regmask implementation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90067425a63d8ea9bace891e1b6261cd081de037",
+        "description": "ir3/legalize: Use define for register size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "750e6843c02dfdced6d44e5a1ba206a415a40665",
+        "description": "ir3: Rewrite postsched dependency handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dbeeec25704f9c8a43527b04e8088627f2fbc4bb",
+        "description": "ir3/ra: Don't demote movmsk instructions to non-shared",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fa22b0901af548d5e1433ad4cdbda314182137c5",
+        "notes": null
+    },
+    {
+        "sha": "79c89a36703e9d9f1b35f271f8bc9d1597e10c5b",
+        "description": "ir3: Validate tied sources better",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c71667dda5cf360f8759a18f54eb74d3c3c8dd7",
+        "description": "ir3: Add scan_clusters.macro to is_subgroup_cond_mov_macro()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "60413e11c2bc3d50acabe99a3fd82da6885769ae",
+        "notes": null
+    },
+    {
+        "sha": "031b61244930b6c94ea1dd36d093840be0316c2a",
+        "description": "ir3: Add scan_clusters_macro to ir3_valid_flags()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "60413e11c2bc3d50acabe99a3fd82da6885769ae",
+        "notes": null
+    },
+    {
+        "sha": "063ef2254b7029e9d88b9e4a486bfff0ceeb6fd1",
+        "description": "v3dv: enable VK_EXT_extended_dynamic_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "499d5cb18dbcb507ebbb53f927662ae10bdc5864",
+        "description": "v3dv/ci: update expected list due VK_EXT_extended_dynamic_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "60e9237e81c918d3a126427568d09b8b7dd093ca",
+        "description": "v3dv: StencilOp and StencilTestEnable are now dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2526f74adeda00cca0a62adf4980c7bdad711529",
+        "description": "v3dv: PrimitiveTopology is now dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbfb99cbc395cd9c002a592cf46a7282221e9499",
+        "description": "v3dv: ez_state/incompatible_ez_test could be recomputed at cmd_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6e473cd5859268bdc18429f00630edca5a13196",
+        "description": "v3dv: move depth CFG bits setting to cmd buffer emission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fa023f11107669540f0418feed7f9dc4984ff32",
+        "description": "v3dv: DepthBoundsTestEnable is dynamic now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "29c8aca881b44df21bbc89b0cd9419f88fb4a187",
+        "description": "v3dv: CullMode and FrontFace are dynamic now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3061e628117d22fce3ba35c6243e8ada562c935",
+        "description": "v3dv: provide implementation for CmdSetViewportWithCount",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4d426fae6b9ffdcf957dbf91d7863963bc754be",
+        "description": "v3dv: provide implementation for vkCmdBindVertexBuffers2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f2236065b70930243a741806223616234d14980c",
+        "description": "v3dv: port dynamic state tracking to use Mesa Vulkan",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "858154b84ecc7f2ff79f866275bb210106d9dd3d",
+        "description": "ir3: Don't set saturation on `flat.b`",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b3df7b8a98c4171e402a7c4e7170b9d937aae09",
+        "description": "panvk: avoid dereferencing a null-pointer",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d970fe2e9d6a8e9997a0ce212146d62013b3b455",
+        "notes": null
+    },
+    {
+        "sha": "8456588b1f97ceeec13e23db528d2346e278328e",
+        "description": "panvk: drop needless null-checks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5df20cac22f8d27befd24b7e788faa323329c547",
+        "description": "panvk: do not leak bindings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fd171b02d1819628e0235d78435ed21078b8ca4",
+        "description": "panvk: drop needless null-check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9058d5ff6252a1bf340453551613c4717cb87f6c",
+        "description": "panfrost: correct first-tracking for signature",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "4da88060d0a3662a579a26748d7e3458c1b4800d",
+        "notes": null
+    },
+    {
+        "sha": "f852f86a3112a1f3cbcb96549aa9c55cab5c294d",
+        "description": "panfrost: check return-code of drmSyncobjWait",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70dcdb31303d8e5e3a4fc3bd3f8abf8c74ef02d9",
+        "description": "panfrost: assert that drmSyncobjWait returns 0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f59e5ee5fbae221bb873151d2e5f322d5b9635d4",
+        "description": "panfrost: check return-value from u_trim_pipe_prim",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8deaf37047c2295c0454e0668e0008edb21dd40e",
+        "description": "panfrost: do not deref potentially null pointer",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "f94889d0797f6dc66b7875e68ae7d44c0f018131",
+        "notes": null
+    },
+    {
+        "sha": "186f7fa915b1d748f73a13f12c089af4e47b5c29",
+        "description": "panfrost: do not write outside num_wg_sysval",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "500616706148d2e340bbdfecad45204b515ae9b5",
+        "notes": null
+    },
+    {
+        "sha": "39f919707afe5185733206f6f22a09b8f19a4937",
+        "description": "panfrost: remove nonsensical assert",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71fd7836f693c8acf59a2577fa13c4b795f1589b",
+        "description": "spirv: deduplicate default debug log level",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "378bed6fa6986f5f24a957ae397ecdb6cb08729d",
+        "description": "v3dv/ci: skip all the WSI tests, they are way too flaky to be worth it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1dadf950c3654da8ac2a90b445ee7b8657bc8686",
+        "description": "rpi3/ci: drop duplicate comment without any corresponding actual skip line",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42183a9f2b8524d739c0448fbf4e0e0dc57dd227",
+        "description": "v3dv/ci: dEQP-VK.dynamic_state.*.double_static_bind are fixed now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e14f5252fac3282cd95b950fd01d40fca04e8985",
+        "description": "v3dv/cmd_buffer: always bind pipeline static state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f07f5a79b4b09eee58594fffd6ebe61bdf32c5d",
+        "description": "radv/video: Report maxBitrate in encode capabilities",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54d499818ca9a004ba735635d328a1ed0ff010b6",
+        "notes": null
+    },
+    {
+        "sha": "c210bb79521b1900db3b38643396b200fa09a043",
+        "description": "radv/video: Check encode profiles and bit depth in capabilities query",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "967e4e09dee81b93cfb30195ab5e1878aca9dbd0",
+        "notes": null
+    },
+    {
+        "sha": "2d0282f5762c4980aa2f926f5d1b966d31118693",
+        "description": "radv/video: Set correct bit depth and format for 10bit input",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "967e4e09dee81b93cfb30195ab5e1878aca9dbd0",
+        "notes": null
+    },
+    {
+        "sha": "ae866966e63f49a12d1b4f77fa1ff0113ac099b4",
+        "description": "aco/tests: add tests for divergent merge phi with undef",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f61e0c27ee0f439440fafece182d90f5459c291",
+        "description": "aco/tests: add tests for hidden breaks/continues",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b3e14ba83be399719f9b296ac746599016041e1",
+        "description": "aco/optimizer: remove p_linear_phi handling from optimizer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d0c6647f0ce8db6d252d63ae5fee512be82c4de",
+        "description": "aco: use SGPR phi lowering for all scalar phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ec6899bff4ebee10822c763032b24f141ad7b1d",
+        "description": "aco: use SGPR phi lowering for all loop header phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c0119329999fdc71325d1191280667fc35b3618",
+        "description": "aco: use SGPR phi lowering for uniform phis in divergent merge blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ab5e7fe5d2b696203d879b0da72c442c45c3917",
+        "description": "aco/lower_phis: implement SGPR phi lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f2d32e1c1388599256aa2a4169ca55c9394e67a1",
+        "description": "aco/lower_phis: generalize init_state() so that it works with any scalar phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55130069b8bbb7abf4de31f4925be9fdfc11101f",
+        "description": "aco/vn: copy-propagate trivial phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e3446422f816d974a7cd5dfa27e8db3829e1cf0",
+        "description": "aco: introduce aco_opcode::p_boolean_phi",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b832fe2abb8933e2a0fa4aaab41ce050b53fb36",
+        "description": "aco/lower_phis: simplify check for uniform predecessors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6c9b1d03fd80935131dd93968312eec11a2f38e",
+        "description": "radv: Handle all dependencies of CmdWaitEvents2",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c0b73e0aac322d2c6c4e26fa344f67554b88017",
+        "description": "radv/rt: rework the helper that hashes a ray tracing pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58fb6db649fd0560e89c54603861ae2abe36fd42",
+        "description": "radv/rt: pass radv_ray_tracing_state_key to radv_rt_pipeline_compile()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7be635719c0a7bdf1d4cd1c7a53e67ac8e0a2a3c",
+        "description": "radv/rt: add radv_ray_tracing_state_key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec78cbce4c18ba868ac2cc7761e896d210c3b3df",
+        "description": "radv/video: don't truncate frame_num and POC to 32",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee7e0168a18ad9642d216a5d0bd2c9154e7fed11",
+        "description": "venus: reclaim signal semaphore feedback resources for wasteful clients",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d63432012d9189d5f1d8eb8025acfae2463fd449",
+        "notes": null
+    },
+    {
+        "sha": "fdc21a95aa6cbb0a47a37155b76c19a92b99f5a0",
+        "description": "venus: workaround excessive dma-buf import failure on turnip",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "824a8542d724d29f714053cca8116f846d627a52",
+        "description": "venus: silence a stack array false alarm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3e16d25d1a2f217aa0e6e9b8e7eec9f974e38e0b",
+        "description": "venus: avoid client allocators for ring internals",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9926aedc96fe13cf9ff343cd7c4d92aa771e323a",
+        "description": "anv: enable EDS3 AlphaToCoverageEnable & RasterizationSamples",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ada806baa35bff35d4f47cbd2dae84cb390dfa34",
+        "description": "anv: remove fs_msaa_flags from the graphics pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ddf31d2f407bcb101aeb163bd72b0c4432aea9c4",
+        "description": "anv: move 3DSTATE_MULTISAMPLE to partial emission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "815d2e3e8b182d62eb1b1eef3af6fd4397cf6f8f",
+        "description": "anv: move 3DSTATE_PS to partial packing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a336a98e9f43f0b8c9f4036cc10c326ef0b2cac",
+        "description": "anv: move more PS_EXTRA programming to runtime",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "355549e7b096a0ef1ee5fb37ebdb84f516f40a39",
+        "description": "anv: move 3DSTATE_WM::BarycentricInterpolationMode programming to runtime",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11b348a1c58fdc9b9669f72f74dde1b401533e4e",
+        "description": "anv: add dirty tracking of fs_msaa_flags in runtime",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25b57a6a7501ed66dc55c93ecb8e9b9a18628381",
+        "description": "anv: track sample shading enable & min sample shading",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b80dd22d573ac9276efb19c0f5ea8dae39ab3ab1",
+        "description": "intel/brw: add min_sample_shading value in wm_prog_data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdfa25dc776f1bb334f827ee17aa20e50c78d28f",
+        "description": "intel/fs: decouple alphaToCoverage from per sample dispatch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bbe2d9833518442a656a393a2219f7c756d09cb",
+        "description": "intel/brw: fixup wm_prog_data_barycentric_modes()",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48bf95ba96c6277cf930b2aa79c2cea60dc391b5",
+        "description": "anv: factor out wm_prog_data get in runtime flush",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e302825fef6787eca08ac1ea0d5cc6305f679c3f",
+        "description": "anv: fixup indentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f0c2d2ed735f6098676ace1730c2388eb67ac38",
+        "description": "anv: simplify multisampling check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd1a3921d135a99ae8098aa8eb7be90cc2c9eaab",
+        "description": "zink: fully wait on all program fences during ctx destroy",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f18a1d3a311c00dd3e11356f6a604e1fea593004",
+        "description": "zink: prune zink_shader::programs under lock",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "866dc85d67396cf6549f7ca97ed19c1614319e49",
+        "description": "panfrost: Skip new failure from VKCTS 1.3.8.x",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc15041255fe83a9898fbe92ff0875e56340560f",
+        "description": "panvk: Ensure we lower load_base_workgroup_id to 0",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d22f936019f84191072a5686826f53b93d755419",
+        "notes": null
+    },
+    {
+        "sha": "33db56e784bcb91620c7582f151b91d3e9dbf1d0",
+        "description": "isaspec: Improve 'meta' handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1747fed633f30ef9d119c29eadba2bb435150fb4",
+        "description": "isaspec: Add method to get the displayname of BitSetEnumValue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ebf07eccd1f7476033e0151b9eb19a51d871c51",
+        "description": "anv: check requirements for VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "497672ac7471253d0789b0cfe741fae50a4236a0",
+        "description": "ci: pass MESA_VK_ABORT_ON_DEVICE_LOSS through to the DUT",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9bbbe90f060914448910d17a38d815ac24db6030",
+        "notes": null
+    },
+    {
+        "sha": "ae68fa51a48c1a7f561b3020681bdce1c1c84cad",
+        "description": "radeonsi: respect pipe_picture_desc::flush_flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08d3b93ce7777bb4cfa9202ac5d5af43f98e3342",
+        "description": "radeonsi: prep for pipe_picture_desc::flush_flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ed38749961c613c949622f71996f74085c532f2",
+        "description": "frontends/va: set PIPE_FLUSH_ASYNC when possible",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a90075e772af5671234296f8d8c8869e77b4c2b1",
+        "description": "frontends/va: track whether there are imported/exported surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "893797eb32123ede1d2a0c098b39824bda1ec4b1",
+        "description": "gallium: add pipe_picture_desc::flush_flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2c0c83be19949a9e45fe4d7e79aa82da9128b34",
+        "description": "d3d12: Fix static analysis issues due to bad parenthesis closing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7809c5f222c4ada94964f3e2c97dfbe36151e516",
+        "description": "ac/nir/tess: Implement packed 16-bit HS->TES I/O using helper macros.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e92e0bab936a145eacf25afe3f1ea57b0abdca7f",
+        "description": "ac/nir/tess: Implement packed 16-bit LS->HS I/O using helper macros.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "67c2016dd58a9521e76427ca742fbf855248a71c",
+        "description": "ac/nir/esgs: Implement packed 16-bit ES->GS I/O using helper macros.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7bfbff74400a8805a306af7b994844f5ff9e2819",
+        "description": "ac/nir: Add helper macros for emitting IO code.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "feb2ba9e9b30db149d53ea164b472c87757f8b94",
+        "description": "ac/nir/tess: Slightly refactor emitting LS outputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55757ce03bec5cf9dd359b49b2def62ba1a315c3",
+        "description": "ac/nir/esgs: Slightly refactor emitting IO loads and stores.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86cce0e677ea2da6c03d3bf637a758a76d9ca7ea",
+        "description": "panfrost: clamp buffer-size to max-size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19aa0b9473bd092564ca00353bc4b3213cab7467",
+        "description": "panfrost: add PAN_MAX_TEXEL_BUFFER_ELEMENTS define",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1277f58d8a4a57c7522e07359cbe7aa2b8f9b661",
+        "description": "etnaviv/nn: Make parallel jobs disabled by default",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d6473ce28ee0f36890e24b3832cd53d3ed5e98e7",
+        "notes": null
+    },
+    {
+        "sha": "b40675947996faea8c4455dc44492d003bc9f49f",
+        "description": "anv: formatting fix when printing pipe controls",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "abc4111d19761d51599330a1b13be718d0255600",
+        "notes": null
+    },
+    {
+        "sha": "7101aecc53f49402b725a8081f7005c15839cb43",
+        "description": "ci: Use id_tokens for JWT auth",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2639c9105267cc8228c5bf2f08f8203207014b37",
+        "description": "ci: Add S3 id_token for all jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87fa1fdcb245b41190e54d97a377b3c0fc71ed50",
+        "description": "radeonsi/vcn: set accurate size for dec header and index_codec",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c180c47f74b716448a0fb8b505b533b556e458a",
+        "description": "zink: reconstruct features pnext after determining extension support",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1c9b2a4553ab75e14caa53ebe0abc4ddbd14dae",
+        "description": "aco/ra: assert that the register file is empty after register allocation completed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be1e68b4ee97ed714417c8917182a5326f5b379f",
+        "description": "aco/ra: fix kill flags after renaming fixed Operands",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "548763709b3d0d6fcfeb41933f09cb6e8278cf74",
+        "description": "lavapipe/ci: add flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "908d62be1da5d0df5909fb93c4dfe1fb88c13909",
+        "description": "freedreno/ci: add flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b0362637bf504b8299399d299cf99755fff768b",
+        "description": "anv: reuse embedded samplers across shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "78558de8a67f595fcbf6ef2cfeb566a56ac61a8a",
+        "description": "panvk: Kill panvk_sysval_vec4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d4b376a9b2bb23bbd3855db56f7a06b2284dedb",
+        "description": "panvk: Lower sysvals to push uniforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c553bda9c182763d7f3cf8c9d5b583fbb4923e8",
+        "description": "panvk: Prepare dynamic buffer descriptors at bind time",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a603c66659d9e0e314bb6578592af02811daaa53",
+        "description": "panvk: Move the dynamic SSBO descriptors to their own UBO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cfe22541498a9519b848f85e79a4e118b38a19e4",
+        "description": "panvk: Put dynamic uniform buffers at the end of the UBO array",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66721357488c752f5ff315eb5a58779b97a95522",
+        "description": "panvk: Prepare things so we can push sysvals to our push uniform buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0bafa94f9a94e3e42f7498050646485a8d3eb116",
+        "description": "lavapipe/ci: add WSI testing to all the deqp-vk jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5497c3e75a9e835ad9b2df135076771485758639",
+        "description": "panvk/ci: add WSI testing to all the deqp-vk jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "84632dce93f44e8d88cda47648cfd4cc0958918f",
+        "description": "v3d: Move spec@!opengl 1.1@getteximage-formats, Fail in broadcom-rpi4-fails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d20295363962a2f121d10fb141e7f0b1c8bcc121",
+        "description": "v3d: Move spec@arb_texture_view@rendering-formats, Crash in broadcom-rpi4-fails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4660ee1deaace6457bf5fbf3fc8810e4a2453cb5",
+        "description": "glthread: check for invalid primitive modes in DrawElementsBaseVertex",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f153f945fc6ee4239e15c536bdff67ca7eeba664",
+        "description": "pan/bi: clean up tex coord lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3139f8f62384901b02d1fdc516ff3989f8a1f339",
+        "description": "pan/bi: fix 1D array tex coord lowering",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fbaf8703a1b778bfe68994730cf340e4a012356",
+        "description": "anv: enable VK_KHR_shader_float_controls2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "22fa29ac2f3d669f942f9e3b0f54d6f04fc06005",
+        "description": "vtn: support float controls2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f97fa6df01bc3d707d4e39885e4d6b577537ad5",
+        "description": "nir/algebraic: move float control conditions to be per instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c4cd3e74e6e005be3bf29f5364342411363d547",
+        "description": "nir/algebraic: support float controls conditions per instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08df0c7dde33722f34f5036f43b3fe3b64b0aac6",
+        "description": "nir: check inf/nan/sz preserve per-instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "750bd9757eb9d2f4245bc633919495363ecfa232",
+        "description": "spirv: gather some float controls bits per instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "666647acaedb1b4112f19192b992b05547975dfa",
+        "description": "nir: track some float controls bits per instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "829ea357146683f74d93b66de86fcf2c88b1ff57",
+        "description": "compiler: reorder FLOAT_CONTROLS enums",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df6cfb4dd0460430a49a4e9f6b7b5654c0819d88",
+        "description": "intel/brw: Rename brw_reg_type_to_hw_type to brw_type_encode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9205f6ff513b7d644b3a845b768a5a93fc6b7c0a",
+        "description": "intel/brw: Combine a1/a16 3src type decoding functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28034aac34dba480d94991fa3c19916daa163785",
+        "description": "intel/brw: Combine a1/a16 3src type encoding functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "545bb8fb6f738b44e6430a333eba46401e247320",
+        "description": "intel/brw: Replace type_sz and brw_reg_type_to_size with brw_type_size_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c22f44ff07983cf28b238bebc50654f84b5cabb7",
+        "description": "intel/brw: Replace brw_reg_type_from_bit_size by brw_type_with_size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "007d8912393344c270dadf0d2cc7076f694789ab",
+        "description": "intel/brw: Use newer brw_type_is_* shorter names",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f523bfcf90128a4759a76d0c6cebe017f4767440",
+        "description": "intel/brw: Reindent after shortening BRW_REGISTER_TYPE_* to BRW_TYPE_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "873fcdff38ffbc7af81fd4aacb19577a88b2f81f",
+        "description": "intel/brw: Stop using long BRW_REGISTER_TYPE enum names",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d8f2c442120c98532dac8e5055c06efe0942c5f",
+        "description": "intel/brw: Rework BRW_REGISTER_TYPE's representation semantics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c45e235df5dba1387c6e31f993272c1c553378a9",
+        "description": "intel/brw: Drop NF type support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1c6f863fc7d42ce17d771a7ac83d0e707ca82619",
+        "description": "intel/brw: Delete gfx10 table for align1 3src type encoding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40422927dcb1249cdb1444557aca671387140428",
+        "description": "nak: Pass has_mod to all form of src2 requiring it",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "bad23ddb4849908a648d503a615a5a9b15e9768a",
+        "notes": null
+    },
+    {
+        "sha": "46598758e7a2ce0b81610db612cb2beeb5c49a8d",
+        "description": "radv: Trace indirect dispatch sizes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b2f67aa2b01204d92ba9178667dbf8aba8d3288",
+        "description": "radv: Use a struct for the trace_bo layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "575565af5819367ada69c8bbed367ab7215d3b7c",
+        "description": "ac/debug,radv: Read UMR wave dumps into memory before parsing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a43987780a17e763ab47844ba6989552d1c8198",
+        "description": "docs: Add an alternative way to debug GPU hangs with RADV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb719640b5514c2148293d6e288a44e2cfda7436",
+        "description": "docs: Add documentation about debugging GPU hangs on RADV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6143d3f48fe23d26af49a582c475a542c195c63",
+        "description": "aco/tests: validate before and after post-ra tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47d824a64416b2cf662237cd8d32594cd6d806a5",
+        "description": "aco/lower_to_hw: fix 16bit p_insert on gfx8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb80ac7a70975e7f5d6fe587836775b2ef8b8c32",
+        "description": "aco/lower_to_hw: fix v_cvt_pk_u16_u32 instruction format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "619470732f89e95729f927fce8400a4b07008e23",
+        "description": "aco/tests/post_ra: fix various validation errors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f85e6c82a64ad3adf0eecb75d4d0e78b6d0caf13",
+        "description": "aco/tests: don't use undef for descriptors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68dfe17abcca6299951734df3f9758c401286b57",
+        "description": "anv: disable dual source blending state if not used in shader",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e6fb3ba03798fc2550bdb5ec6651690a34ac3509",
+        "description": "isl: Set MOCS to uncached for Gfx12.0 blitter sources/destinations",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "194afe841635e43d55c4f71f4122c6048f585450",
+        "notes": null
+    },
+    {
+        "sha": "0666a715c7210558017ce717f6b0b947c679a68e",
+        "description": "ci: fix container rules on release branches and tags",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "2487e18d4e25c56a70630ccf5faf5d2081fbee2f",
+        "notes": null
+    },
+    {
+        "sha": "e8d94536d21a6f2087b21eecc9f15dcac0a362e8",
+        "description": "radv: fix image format properties with fragment shading rate usage",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce1bbd241eb1ff69254000232a42a840893206dc",
+        "description": "venus: extend image cache to vkGetDeviceImageMemoryRequirements",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4f8f2ecbba978233a139c90b7142d7a466b8272",
+        "description": "venus: refactor out image requirements helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b06e2108eb0e1badb4c0f2d37e45f98f179a0624",
+        "description": "docs: update calendar for 24.1.0-rc1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d95248ee0b6cc79e85bbaffdd34f6b858fbb3f01",
+        "description": "docs: add sha256sum for 24.0.6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4f23331bda0d0b1170460a2825d86f3b06cdb62",
+        "description": "docs: add an extra 24.0.x release",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6ff1f0ca52c511599d7e3e56761d593ef611955",
+        "description": "docs: update calendar for 24.0.6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ee4523a75a24abf35ff9decc4991d96e4a1bc20",
+        "description": "docs: add release notes for 24.0.6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e1a98800324082d1018ba5582d5db5c5a0e7757",
+        "description": "nir: document base_global_invocation_id and base_workgroup_id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d22f936019f84191072a5686826f53b93d755419",
+        "description": "nir: remove workgroup_id_zero_base",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3217838fef80a1085c2ca090c0ff1d9e4c76c637",
+        "description": "nir: remove global_invocation_id_zero_base",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2c96b8e7f3fc3a6ee7b3df610bce9ce625b943d",
+        "description": "mesa/st: lower base invoc and workgroup id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e040a08e5e988703008c412bd31d7c9bbf0c7b20",
+        "description": "lavapipe: lower base_workgroup_id to zero",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a62fb368d62fe9a8ddfbcece3193ffa4990f2463",
+        "description": "v3d: call nir_lower_compute_system_values to get rid of base intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51f54cdec440226678a7f7a006106eec63aa5b5f",
+        "description": "intel/compiler: lower workgoup id to index only for mesh shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3625a44dcc61d261b4167363bb7a8a4b152d59ce",
+        "description": "nir/divergence_analysis: handle load_base_global_invocation_id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25d697ef259e0a5c8c02910eb45ad69a22f62dc6",
+        "description": "nir: add SYSTEM_VALUE_BASE_WORKGROUP_ID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07685ea89b0e7269e4029e889fffd18734ea7136",
+        "description": "docs: reset new_features.txt",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fff01e9d0cee30c7adf901a61810660f957ab69",
+        "description": "VERSION: bump to 20.2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3fc214a980b6c0ba0d4aa4d7278f6a434c553ef",
+        "description": "radeonsi: implement user_data_amd for 5, 6, and 7 components correctly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "882ee264a6c89831863e99aa144315b5bb6dc0ee",
+        "description": "radeonsi: use ip_type in debug code instead of hardcoding GFX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7000c02e42789ce149df4b14537c98c344edddc",
+        "description": "radeonsi: always run nir_opt_16bit_tex_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18bcdbb6344642ec925464e0daccbb42ac78e57b",
+        "description": "radeonsi: only expose 8 EQAA samples due to shader limitations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "256cc77f8471ec07c290ad8a9db794db2cfdf981",
+        "description": "radeonsi: don't add whether NIR is used into the shader key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5c8f0781c604099c3bf40d3ab5220bf50bd1a92",
+        "description": "radeonsi: make clear_render_target clear DCC directly instead of via pipe->clear()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eccaba9dfa573b145feb1cf6b500f369b764bade",
+        "description": "radeonsi: enable fast FB clears for conditional rendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a47fbecd7b6f6f2be77f01f589fe17fe78c579e",
+        "description": "radeonsi: don't flush CB and DB if there have been no draw calls",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f0160443a28fb1624d7084ddf1196c62bfa4acc9",
+        "description": "radeonsi: don't flush CB in si_launch_grid_internal_images if not needed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "708f57e681f264b5f8982d95575942362cbc53a9",
+        "description": "radeonsi: don't use si_get_flush_flags() for flushing images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38f74d62771a401bd179a0fc3636b876128e6136",
+        "description": "radeonsi: disable VRS flat shading for selected 8xMSAA and thick tiling cases",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86131c25a14556ea0af342f718035b838ca64305",
+        "description": "radeonsi/gfx11: implement DCC clear to \"single\" for fast non-0/1 clears",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10ec4689836151e3d6dbc44a4cdf81a91f9e8b6e",
+        "description": "radeonsi: don't call resource_copy_region in pipe->blit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26a5955821fb20c954003055951df64851573e32",
+        "description": "radeonsi: change allow_flat_shading to make it a single condition",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "494cad56c4d602afb97627386edf31c1f34d5b9b",
+        "description": "radeonsi: remove si_use_compute_copy_for_float_formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18b7b2c8066c2ff7ddaf559624d758daa2ce9f75",
+        "description": "radeonsi: use simpler UINT fallback formats for draw-based resource_copy_region",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8235d3aa1950090969082f47bdd62bd620272696",
+        "description": "radeonsi: preserve NaNs in draw-based resource_copy_region",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a03df53d3be74540e658365c6f52d36e1b484501",
+        "description": "radeonsi: move blitter clear_render_target impl into si_gfx_clear_render_target",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "82e63db91ffd27a12dd1727a89f64c14c05ddf70",
+        "description": "radeonsi: move blitter resource_copy_region implementation to si_gfx_copy_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e94813204a5cc3be9759a517966cb071a99d8c11",
+        "description": "radeonsi: allow input NIR to use descriptors in image opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30fab15f39c50ce64f4d9cadf1555b1ceca86495",
+        "description": "radeonsi: don't expose samples_identical and don't lower FMASK if it's disabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dab4295cd520caf069bfbd299fb51e29ee6fd7ce",
+        "description": "radeonsi: fix initialization of occlusion query buffers for disabled RBs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aad2302cf5d74fcb2c82219380ded1a887989caa",
+        "description": "radeonsi: move TCS epilog key bits to the key->ge.opt section",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d29d215df708641601d82fa935e0e43a7c9d8d66",
+        "description": "radeonsi: check has_stable_pstate in the winsys",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a094339d64cfcc775dcc87b1051b2d65179c0a97",
+        "description": "radeonsi: add the radeonsi_optimize_io option into the shader cache key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3630c11c3b7b0d813011d01f303911dff9932afa",
+        "description": "radeonsi: use the same nir_lower_subgroups_options as RADV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "adde1dbae5d1bb9f804dbbb9ba57351b33f113d2",
+        "description": "radeonsi/gfx11: enable DCC fast clears for 8-bit and 16-bit formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d478693dc6ca818e8c84d829ff7f597becd501e1",
+        "description": "radeonsi/gfx11: don't prefetch constants in binaries into the instruction cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71ae7b85ed9c2fad92e057f1793d5610825b3171",
+        "description": "radeonsi/ci: update gfx11 failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "665df08af47dbb5425e3f89258af62631e47c8ee",
+        "description": "ac/surface: constify and reindent NIR meta address-from-coord function params",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cce1aa476648a8347254c7d84f7b3f09aab07d58",
+        "description": "ac/llvm: always trim components of texture instructions, trim DMASK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83a601d420355f2f6d9ccfcc921c9767068cd24f",
+        "description": "ac/llvm: fix assertions for texture instructions with 16-bit LOD bias",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "708b0a7c23a16273e674035088b7088758abaf20",
+        "description": "intel/dev: Read GFX IP version during runtime",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d3fee0b407067b230b66598d064624b93367680",
+        "description": "intel: Sync xe_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a78e98f18e5b7e20aaa885e62da9df140e2a6fa0",
+        "description": "etnaviv/nn: Keep track of the sign bit when decrementing to zero",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9bac40b79613e2b68a8f1f85df645fbf9963bb6f",
+        "description": "etnaviv/nn: Don't shortcut ZRL bits calculation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d46e68c89a99588dd7cf2bd15386301ddaf11e89",
+        "description": "etnaviv/nn: Enable image cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6045ca5026e30c13a455db40032f4ed35ede45e",
+        "description": "etnaviv/nn: Move unused field to its right place in the struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c75b512673d95e032028fa2de7d2339df9f84b32",
+        "description": "etnaviv/nn: Fix calculation of remaining out channels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "baebd6f43ddada8968f640cabdcbd289a3561b3a",
+        "description": "etnaviv/nn: Ensure tile_y is > 0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e70ea63a179531b041b60d7f2fc0158658a7efb8",
+        "description": "teflon: Enable convolutions with number of output channels not divisible by 8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1438237279327fa503d8fa065318c51c79b5ad9",
+        "description": "intel/tools: Parse INSTDONE registers in Xe KMD error dump",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c221ba6f75cb1a8a89e114c1ada18c9ca154a14f",
+        "description": "intel/decoder: Add intel_print_group_custom_spacing()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94deb24e2bb6a5bcf990113af2fa1bf975f7a926",
+        "description": "intel/tools/aubinator_error_decode: Move definition of option_color to header",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e5628749c02f38bf3c5eb2174a63727d9c327d7",
+        "description": "anv: use u_foreach_bit to iterate over the the view mask like we do for transition_clear_color",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5efecc9782cca3df1e413883ff10d16fde5fa135",
+        "description": "anv: Enable HiZ on multi-LOD depth buffers.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "599e8bf9212a1ef2f85a62ce48339aea0d365072",
+        "description": "ci/valve: remove the traces runner",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a58922582774cd42fac417999bc7e09f07eb16c7",
+        "description": "ci/b2c: allow setting the DTB to be used",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d442fc0146d51bdf469e000ccc1181bbb3b22ab",
+        "description": "ci/b2c: rename .deqp-test-valve into .b2c-deqp-test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b084dbd44f3bd348af0fbd58844e24357e68190f",
+        "description": "ci/b2c: rename .b2c-test-{vk,gl} to .b2c-x86_64-test-{vk,gl}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2444ad6c1120db13b59ddfde0d5b81d369ce80d",
+        "description": "etnaviv/nn: Extend post-multiplier for v8 architecture",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2290843dfc6fa51e605249cde9607515b9c26e3",
+        "description": "etnaviv: Add nn_core_version field to etna_specs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db2d5a010335bd28ccae254c91220b27c720bb9e",
+        "description": "etnaviv: hwdb: Add VIP_V7 and NN_XYDP0 feature bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "588c762936161a22f3a0de17a8dac046a0cae086",
+        "description": "zink: preserve/merge variable names when generating new variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cb597cb85e1101a661552db707a1a696cc3cfe7f",
+        "description": "nir/print: print io instr->name if available",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "948126368a1a5770451a5030778a148aa17c2156",
+        "description": "nir/clone: preserve intrinsic name field across clones",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5303785bb9c8544554c86ab36d58bc0553bbb8b2",
+        "description": "nir/lower_io_to_scalar: preserve variable names when splitting io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3541ed8502cf1e00f96a50e386c8e443bbf79572",
+        "description": "nir: store variable names to io instrs during io lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dbe29274721f40c0976d52947fe2df506020b3be",
+        "description": "etnaviv: Avoid duplicate query of ETNA_GPU_FEATURES_0 parameter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f123a7951236c539ceaa20a0f84fd260183e90b",
+        "description": "etnaviv: common: Add PIPE_3D feature bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff155f46a334d1625363cc1de8026e060f35c637",
+        "description": "freedreno/a7xx: Register updates from kgsl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59d3a8ea07d16c041ba30832aab4f5bdc165f33a",
+        "description": "ci: uprev CTS to 1.3.8.2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd5c9870ea1d7e73d05f125b229f34e5749c8345",
+        "description": "rusticl/program: handle -cl-no-subgroup-ifp",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ca861e8f754125f8880229bdcc6e278cd15003b0",
+        "description": "ci: Add zink-venus-lvp job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9dacca3f7f73a266443c25dc7cace3f29597c8e",
+        "description": "ci: Allow to pass LIBGL_ALWAYS_SOFTWARE to the guest environment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "708a635902720194d6d686955f927b612736ad5b",
+        "description": "broadcom/ci: document external causes for some CTS 1.3.8 failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1de805e9860f4a0d23140cac6ba713707b60f707",
+        "description": "nouveau: Fixes error: unused import: `crate::nvh_classes_cl906f::*`",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4fc3f1154595636897de8de8701a0432552174fe",
+        "description": "venus: fix VkDeviceGroupSubmitInfo::deviceMask for feedback cmds",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "80f532a63664c0c37cef5e261be38ebb5dbf5be2",
+        "notes": null
+    },
+    {
+        "sha": "46e4354940cce54e3b7ed2080bf67b03ee57e240",
+        "description": "intel/compiler: Disassemble mlen/rlen/ex_mlen in units of registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff89e83178ac6fde49b6f0f1c5d0bacf285cbf19",
+        "description": "intel/brw: Lower VGRFs to FIXED_GRFs earlier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b3d4c757dd00bfaf57a1aeef318d8625edcd54d",
+        "description": "intel/brw: Support FIXED_GRF when generating code for CLUSTER_BROADCAST",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b926cd3dd9bd20745b4e0492c32c7ac202d71390",
+        "description": "radv: don't use python 3.9 feature in radv_annotate_layer_gen.py",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27a3880adae1e7650ba2338bb57545124c1587dd",
+        "description": "aco: don't use python 3.7+ feature in aco_opcodes.py",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe4f6dd18ffa924846c5aa4d992201a9a8d4adc4",
+        "description": "isl: Update shader channel select for missing components",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d8686ccd55b9df3396be1feb967bc9026f38b15",
+        "description": "isl: Update isl_swizzle_supports_rendering comment",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a868970a20944b77988b3bed28cb9af2d02620a",
+        "description": "zink: disable command reordering for compute-only contexts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ffb082f8111a91a29a5e6394831ecc099afaeeba",
+        "description": "zink: make NOREORDER mode context-based",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef0c9231a75e78fcf49436d2cfa20dbfb9968e85",
+        "description": "mesa/st: don't use serialized_nir for cached shaders",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5eb0136a3c561e25d3f274e33a86812cfb2af589",
+        "notes": null
+    },
+    {
+        "sha": "dc85832c35d1c347d1d57aefcdb780b9050fda0f",
+        "description": "ac/gpu_info: Fix broken UVD firmware query",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c34cfc1a3b9ccdd0f81f7852891394df252e73c8",
+        "notes": null
+    },
+    {
+        "sha": "f0ddba819fb108c34082eab074894640e4d64561",
+        "description": "freedreno/drm-shim: remove duplicate entry for a630",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ffae320a8435eb981fdf112934e54bac578da2c",
+        "description": "freedreno/drm-shim: add a730, a740, and a750",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39088571f08ae0b8dee1cf51bf590df5c23962bf",
+        "description": "ir3: add support for predication",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbc78e92ff4b436d8ce69f7880f37af589c08da6",
+        "description": "ir3: add support for precolored sources in predicate RA",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2288ef916cfad6d65a55f66cde057f83da2b2692",
+        "description": "ir3: model predt/predf without sources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d56f1abd7245fdfee621c66719cd1e001e5e9c5a",
+        "description": "ir3: remove unnecessary tessellation epilogue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "44b080af07f0ba516f0d5519bba86eb7c1ea7da2",
+        "description": "meson: implement split-debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d5af353185763c70ac165abc84de3956b65fb5b",
+        "description": "nir/lower_clip: update inputs/ouputs read/written bitmask",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e79234f9d5dce5b7b1c5d46ae4a8267e4eeeb2a",
+        "description": "ac: allow to use 64K of LDS for tessellation on GFX9+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb323ae46b497a7d41fe510092dd6cfa0cfd04cc",
+        "description": "radv: rework the number of tess patches computation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "758e6d9005b030ea49783f32b3d71dca5b95e157",
+        "description": "ac,radeonsi: add helpers to compute the number of tess patches/lds size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b8d194bfb7bf2d732f95aaa49345205cee9438d",
+        "description": "radv: advertise VK_EXT_nested_command_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7de95e7742797538b12a69a7b1c946779f01e6f5",
+        "description": "radv: track if nested command buffers uses indirect draws",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d18a2f4fbb5331dc342c30baf6541a9c03184b2",
+        "description": "radv/amdgpu: do not use IB2 for nested command buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1763d1aab18b491ac584474a957ab455e4772306",
+        "description": "iris: Avoid allocation of not needed iris_bucket_cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c473a156dcc94f7f83c51ae416647c8d0fed577a",
+        "description": "iris: Avoid creation of slabs and cache buckets of lmem heaps in integrated gpus",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a51c64ac5c2ec09611c5f0802b370b5fbc72046d",
+        "description": "iris: Add comments to BO_ALLOC flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a1779edc7fb82c891e584074b95d1a4801c1782",
+        "description": "ir3: Don't pack FS inlocs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "56607fafc2c94602c42eaa0505cb9a3b4231c6cc",
+        "description": "ir3: Don't use non-contiguous component masks for FS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0c4b9144a3a973724c9ddac01094b47d5cf8356",
+        "description": "radv: Fix differing aspect masks for multiplane image copies.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "37e9e8b06cab385c1e74333bcf6b289ded884b6d",
+        "description": "aco: split vop3p results",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "88e03feb279563f5aaedc26dcc80e7aea91ec7cc",
+        "description": "aco: schedule LDS instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ee4fa33bcc4bb201a23fe0bed991c2a1597bfb1",
+        "description": "aco: schedule LDSDIR instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0bc8a9be67407382da25cef7e11c2a56ae1f72c1",
+        "description": "aco: make store clauses more aggressively",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bce498bbfca032fa7a38f1022f60c04467fe6d2",
+        "description": "aco: include LDSDIR in latency/etc stats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c73c9bb16f1a35aa4ee908c9a8255b05e7e7c63",
+        "description": "v3d/simulator: size counter_values array correctly on V3D 7.x",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c0d62ba701063deb0911ddb1e522cbcbdf6aa40",
+        "description": "etnaviv/nn: Implement zero run length encoding of weights",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e78d9aaca59a54724081b77b2a0c704f4a1ee88",
+        "description": "panfrost: use util_debug_message for perf_debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef4c6e93452a93847244006603f03ff5c23d4142",
+        "description": "panfrost: perf_debug_ctx -> perf_debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7655257c82bc131aa6dbdd51ac9e13bb7bdec236",
+        "description": "panfrost: use perf_debug_ctx instead of perf_debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4f945cd4ae4f8ded2303fc14c0b1240f2e2a79c",
+        "description": "vulkan: pass cmdbuf level to vk_command_buffer_ops::create()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1fb9e67f7e3241cc175b644df682ad1bd607ac1b",
+        "description": "etnaviv: drm: Drop NPU-related params",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62aab1437e2d7ee17daeffb30f0a9b0432262921",
+        "description": "intel/fs/gfx20+: Handle subdword integer regioning restrictions in copy propagation.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "217d412360762803bc9941ba5171ca0be2c5332b",
+        "description": "intel/fs/gfx20+: Implement sub-dword integer regioning restrictions.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4cc975c6e912e7911687dada7806538dc4746f60",
+        "description": "glx: silence more implicit-load zink errors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3ea55fef28b6a8c9d337ccb0c715312363b2ebc",
+        "description": "zink: don't print error messages when failing an implicit driver load",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b53a402edc3592290fcd2ba4b37e85645e88c63c",
+        "description": "pipe-loader: plumb a flag for implicit driver load through screen creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "744307289cd597c9fb29913f3d4afa3e0a2b7aaf",
+        "description": "frontends/dri: plumb an 'implicit' param through screen init",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4742d9bc1a62f44ab22741417035b481a6fb0cd8",
+        "description": "gbm: plumb an 'implicit' param through device creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14c44aacffbb03e62ab0da10e758eca3377109ad",
+        "description": "dri: plumb a 'implicit' param through createNewScreen interfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "014bbae4bf3f0bd87ab044232dfc5757982ab6e2",
+        "description": "glx: pass implicit load param through allocation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91c757bda1e6b1398515bbc5c1f5c24f74cc15f5",
+        "description": "glx: add an 'implicit' param to createScreen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b9ee76369bdd5a954a3fe035e298ebd8ae7b751",
+        "description": "glx: fix some indentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e8202cc2437d280e7bfdebd876a613882531311",
+        "description": "loader: delete unused param from pipe_loader_vk_probe_dri()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b81ee6418bddd41a184ff7b2ee8d689706ebaac",
+        "description": "ci/lava: Fix how exception entry in structured log",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e96e25f323eb2c10c4de0bbd8d6ef13241f39dca",
+        "description": "ci/lava: Don't run jobs if the remaining execution time is too short",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3e33171471000958fd711265df33b4b2d2648d8e",
+        "description": "ci/lava: Introduce unretriable exception handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5363874676ae045f34def14a94836447f025cf63",
+        "description": "ci/lava: A few formatting cleanups",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13093ceb3caccd19c6b625ac034a3a8c84b696dd",
+        "description": "intel/brw: Move validate out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "671d216f392139643edc0e471dff6eea31470555",
+        "description": "intel/brw: Remove two duplicated validate calls in optimizer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a6fe5440938d8666698ae2b6f5ee5e9eb2b4e8e",
+        "description": "intel/brw: Refactor FS validation macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1848081240cccef4e7bfbae336df7adc4b2b2e8",
+        "description": "nvk: Don't advertise residencyAlignedMipSize on MaxwellB+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be940a7dc682e3954e44f002b933e0627c256d0f",
+        "description": "nvk: Use implicit pipeline cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59bba821efed5d64ca01ed0fdd00f1f8435390df",
+        "description": "nvk: Hash ycbcr conversions in the descriptor set layout hash",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f46e279ba1c74924d81ea7dcf77d94e159820d3",
+        "description": "vulkan: Add implicit pipeline caching support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dae6b6a23d0455d804dea133ea600277adff3c2b",
+        "description": "panfrost: fix an incorrect stencil clear optimization",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a2463ec271ff4fe4513ce07b3881625add32ccdc",
+        "notes": null
+    },
+    {
+        "sha": "e89123ec73c48289ddecaae3448fa27403119447",
+        "description": "zink: prune some piglit cts fails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf2df78575b060befca0f0c35a55108c25f8920a",
+        "description": "broadcom/common: Now \"util/box.h\" is under src, so remove the FIXME",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef111f5f07df8f2076946c18887f098ecf228a3d",
+        "description": "etnaviv: Don't init the blitter in compute-only contexts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "095e3af2b0b1048cbdac6ade6a93fbe2de63aa8f",
+        "description": "radv: add RADV_DEBUG=psocachestats to report per-pipeline cache hits/misses",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f4ee45914187ce54fb16c02e4cec5a13d29b53d",
+        "description": "radv: rework pipeline cache search helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbe52934b63a7f4666b3fbca5d87e7a400a3e817",
+        "description": "radv: use radv_pipeline::sha1 for graphics/compute pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e24da3ad477b2ba4f9f0bfc1f60fb0e3d3927e0",
+        "description": "radv/rt: move radv_ray_tracing_pipeline::sha1 to radv_pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "862d53f00a6197a18537bf502430a8ff47c7afed",
+        "description": "radv/rt: remove unnecessary param to radv_ray_tracing_pipeline_cache_insert()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6bbf8a08a404937caea4f181aa163a2b4173d22d",
+        "description": "panfrost: Use pipe resource helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0db4b458b58ba6f0c81078405183537c4d85e8e",
+        "description": "radv: cache RT stage info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "122455b6867c20b004c9b613d3133cf643294722",
+        "description": "radv: Properly initialize imageCreateFlags in GetPhysicalDeviceVideoFormatPropertiesKHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba32ea6da33904005d3a5ab2a41dfc6d990022be",
+        "description": "llvmpipe/ci: update expectations after piglit uprev",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ec45e8294cd39735d2383ebe9d201a6dce88e6d6",
+        "notes": null
+    },
+    {
+        "sha": "dc387e000cf5097917700ff6307f7ac9cf30314b",
+        "description": "radeonsi/ci: update vangogh expectations after piglit uprev",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ec45e8294cd39735d2383ebe9d201a6dce88e6d6",
+        "notes": null
+    },
+    {
+        "sha": "6b22fff65811d0d5433ed1f1e82b9dec75baee8b",
+        "description": "nvk: Don't use a descriptor cbuf if it's too large",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f1c909edd5c9159609ab27e7b6a7374796cceab3",
+        "notes": null
+    },
+    {
+        "sha": "f6301a772774ebd73df26053d783527e8d1a9918",
+        "description": "nak: Count GLOBAL_SIZE_OFFSET in bytes, not words",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "16f2249a8042e48ca6dbad3687108d767a626df2",
+        "notes": null
+    },
+    {
+        "sha": "34ffa4cd1072d09104fcdbc12e5b2beada1ae45f",
+        "description": "nir/lower_blend: Fix nir_blend_logicop() for 8/16-bit integer formats",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f3de2bd6c2dd4c6b4bdbd63e7e5d47f326d2f494",
+        "notes": null
+    },
+    {
+        "sha": "e5f133ccc426a197c48a4e88f5377f943f078180",
+        "description": "util: import pipe_box and its helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "959891e33f61ab8d0590e736198bf48e48d2105c",
+        "description": "util: add new format helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2bb102f020b3a5834d219ab474c6bcdd02f88d09",
+        "description": "r600/sfn: Don't put b2f64 conversion into ALU group",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "79ca456b4837b3bc21cf9ef3c03c505c4b4909f6",
+        "notes": null
+    },
+    {
+        "sha": "07995b98a865be87f22fd89d027362bf20d275a0",
+        "description": "r600/sfn: when emitting fp64 op2 groups pre-load values",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "79ca456b4837b3bc21cf9ef3c03c505c4b4909f6",
+        "notes": null
+    },
+    {
+        "sha": "36c81b5e88e68e61e93bc287e243fd29abbff97a",
+        "description": "r600/sfn: call nir_lower_doubles explicitely",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5218cff34b34cec4819a382c500934fd9d991a60",
+        "notes": null
+    },
+    {
+        "sha": "bf44ce61bb4f19a8d921a119a949468a08e2c0b3",
+        "description": "r600/sfn: Use dependecies to order barriers and LDS/RAT instructions",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "fe881bf0976cf5799afba52911cdf6df45e8641f",
+        "notes": null
+    },
+    {
+        "sha": "a61b658d5fa5007113ce2c9dae030a6d00ebfc54",
+        "description": "r600/sfn: Add array element parent also to array",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ddb167e81a18c09bd3a4c519e8728e2842d827f1",
+        "notes": null
+    },
+    {
+        "sha": "04f232ed99bb68ef7c5169173253d4cdfa840bce",
+        "description": "util/disk_cache: try getenv(HOME) before getpwuid->pw_dir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2b1555a57273a29981dcad80849576e5ce488ba",
+        "description": "ac/parse_ib: Always print the value of the whole register",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4c6664d4bb1a25906cf1c72de9c0a7676bc0ff2",
+        "description": "radv/debug: Dump descriptor binding information",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e27deed2ab44f5ed2281e343e3b0c5ff79ccea8a",
+        "description": "radv/debug: Try to find unbound shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23c167f8266c8add49339b80c32ae19412e49b9f",
+        "description": "radv: Canonicalize addresses in radv_find_shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48b79a18c52e9c50b7b509c3d3ebcd27fd6b6dc8",
+        "description": "radv/debug: Canonicalize shader addr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9778e1b9a04c61c15f83de3ea34ced1cfbdca970",
+        "description": "ac/debug: Handle the output of recent umr versions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "65f5f1559f401808e6b25a4765d51dc59397d87f",
+        "description": "ac/nir/ngg: Fix packing 16-bit MS outputs.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9f36fba9beafa3d1487b595f5c2b3f659cd94591",
+        "notes": null
+    },
+    {
+        "sha": "c6c9da03365334868bdc8a9f50c2d038072795bb",
+        "description": "ac/nir/lower_legacy_gs: Implement packed 16-bit GS outputs in non-dedicated slots.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "abfce648806d95742d149741479af4a91256bb1a",
+        "description": "ac/nir/lower_legacy_vs: Implement packed 16-bit VS/TES outputs in non-dedicated slots.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a1132351367cb47b70c2fec8a92bd9e2309467f",
+        "description": "ac/nir/ngg: Implement packed 16-bit GS outputs in non-dedicated slots.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f85f9060b36ac5bc641303403b9f307dbb4bd41",
+        "description": "ac/nir/ngg: Implement packed 16-bit VS/TES outputs in non-dedicated slots.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d097a60d5762df2d557362deea84e275794d1e35",
+        "description": "nvk: Advertise VK_KHR_shader_subgroup_rotate.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "714acf7d21212d614ee8a0cb3cd331907fd447c7",
+        "description": "nak: Enable lowering rotate to shuffle.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42b85780c6494cc453841ca7e7851f580d3d7419",
+        "description": "nil: Advertise S8_UINT on MaxwellB+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58b5f6b678577dcc73cc96c059fa82c2e7ea32e7",
+        "description": "nil: Be more speicific about Maxwell in the format table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4821c49ca7630ca118a4efe92b1cf5032365841e",
+        "description": "nil: add s8 pte kind",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "208f8ed429e122f17c60dcdcee5d99164df803ea",
+        "description": "nil: Use the enums from the hwref headers for PTE kinds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51ffb45b5c756f1d8e0c605c86e822249d69f631",
+        "description": "nouveau/headers: Add the MMU headers to the Rust crate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3bd8a2568d5fa65d42f1f3d47ec3c05e63a374a9",
+        "description": "nouveau: Import the hwref headers from Nvidia OGK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16f2249a8042e48ca6dbad3687108d767a626df2",
+        "description": "nvk: Use the NAK helpers to fill QMDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ace83603d620bb7ae574f022932b0856066f430",
+        "description": "nvk: QMDs are 64 dwords",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9c0e3c1ab7f157aaab4210e3f31843fb00368d5",
+        "description": "nak: Add helpers for filling QMDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64f02ac16d4232c28a12a225fea9db76cd6b4530",
+        "description": "nouveau/headers: Generate Rust for QMDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20c1a69125fb20fa644555f730fb692f15ea36f7",
+        "description": "nouveau/headers: Move the classes into a submodule for Rust",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e87f3ccdeeac379fd2881d16c16289a859d67e7",
+        "description": "nvk: Restrict shaderFloat16 to Ampere+ for now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4850aebcafc2c882b11411ceeeac3b9ab9d83371",
+        "description": "tu: Replace TU_FROM_HANDLE with VK_FROM_HANDLE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5adbae6f61f499034df988843942a29250a5dff",
+        "description": "nir: intel/brw: Remove cmat_signed_mask from dpas_intel intrinsic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ce558d928da66456fccb5579b9b58b18bbd05d4",
+        "description": "intel/brw: Fix handling of cmat_signed_mask",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6b14da33ad3aa8a30ed5e479eace8bc6470095a7",
+        "notes": null
+    },
+    {
+        "sha": "ce05a7c3a2e467d94f32b5614b56b47cf56d8359",
+        "description": "zink: ci updates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6fe0cfdc09d1c8aecc334f1d9f018c8ad5ea46ca",
+        "description": "zink: vectorize io loads/stores when possible",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c673919c348b0611595b32fcc8a3d376868c830",
+        "description": "zink: run nir_lower_io_to_scalar (mostly) unconditionally and earlier",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b2fe347b12872d45f91721a879c901b68482ceb",
+        "description": "zink: copy shader name when copying shader info",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "390479e948d2db6d740bebfe90d9c25c1aa5c409",
+        "description": "zink/ci: update CI lists since piglit uprev",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18d8c3ca339d346b9d531f49c343353ac7a61c89",
+        "description": "anv: Add missing ANV_BO_ALLOC_INTERNAL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfa189b6e85da70c43d43cce146353a9cac2b594",
+        "description": "docs/android: Improve instructions for replacing driver",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57abef5af1f316bc1e9c6baefe986950e65b516b",
+        "description": "docs/android: Fix example meson cross file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61b2bd861f97affbfdbe7e92eccb3dd4f7e65609",
+        "description": "ir3: Rewrite nop insertion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9df3323564d5db9fba6885b97d206dbb5d90f7e2",
+        "description": "ir3/legalize: Fix intra-block state propagation with loops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec45e8294cd39735d2383ebe9d201a6dce88e6d6",
+        "description": "Uprev Piglit to f7ece74a107a2f99b2f494d978c84f8d51faa703",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c00441bfaa328cc6ba6e3f6c37debc195df680d",
+        "description": "panvk: Advertise VK_KHR_driver_properties",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7f9b3d170f5213d4f20df8ef92827dd97899432",
+        "description": "panvk: Move to vk_properties",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9f170f61326c8240fa1b8bfcf68fa06d18a2604",
+        "description": "panvk: Fix driver UUID not being filled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a0f80774ce644b67307ac4a8cc6a9a7553c59db1",
+        "description": "panvk: Return os_page_size for minMemoryMapAlignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c040283e7a7506d9fcb5dee1306e7a3d0c3cd282",
+        "description": "panvk: Dissociate UBO and push_constant emission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0721de3bb947f2764159651aa687345a9fd0acba",
+        "description": "panvk: Stop lowering push constant loads to UBO loads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46e764c5e18961d5b25ef6b187378dc3016eba0a",
+        "description": "panvk: Pass the push constant array to draw/dispatch calls",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04d7b9c396ffa615ff39fcd6b46cf31e3851454d",
+        "description": "panvk: Stop declaring one push constant array per graphics stage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fac41af93c40663021229508df4a0087cfdad6cd",
+        "description": "rpi4/ci: add new flakes from last night's run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d24561da948a4cd6cafba1f497631a05fc666f5",
+        "description": "rpi4/ci: sort flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3432abd611357d2d653efefb88b4a6cc559b890c",
+        "description": "rpi5/ci: add flakes from last night's run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e34850ea23a4190ccdb5f8da3a1f4b98a5b9ad6b",
+        "description": "rpi5/ci: sort flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9bfb07586c7e25e9ff3ac9ad67d5b6260a1c4e68",
+        "description": "radv/video: Implement per picture type min/max QP",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "694cc4728db78e72c24332ff94ca408257742341",
+        "description": "radv/video: Avoid resetting rate control every frame",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1000260ed8e8b9ebe800c734a88fc86fc0943042",
+        "description": "radv/video: Set maxSublayerCount to 4 for H265",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b65341fd3a28d9b7ac297ee6ec99f19fe8b8ba38",
+        "description": "docs/ci: explain how gitlab considers \"changes\" when pushing on a fork branch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea1f09a5f21839f4f3b93610b58507c4bd9b9b81",
+        "description": "v3dv/ci: update expected list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b3c6b48493f7d88c2aa90d332144df82d98caad4",
+        "description": "ac/nir/tess: Use LDS IO mapping when loading tess levels from LDS.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c61eb5480674e922a512c036455b00f30c12037c",
+        "notes": null
+    },
+    {
+        "sha": "0fdb388698d08455694dfe51d718a45609a429d1",
+        "description": "ac/nir/tess: Split I/O mapping to two functions.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c61eb5480674e922a512c036455b00f30c12037c",
+        "notes": null
+    },
+    {
+        "sha": "2d9e38dbe511f3b06a5b573978ba04bf4257bf88",
+        "description": "radv: Calculate VRAM tess patch size independently of LDS size.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0e481a4adcd8006256c27d100a0a0f0c01a94171",
+        "notes": null
+    },
+    {
+        "sha": "8190a65c780e2fe2d28afc534305705ab876ea04",
+        "description": "radv: Rename LDS related variables in get_tcs_num_patches.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0e481a4adcd8006256c27d100a0a0f0c01a94171",
+        "notes": null
+    },
+    {
+        "sha": "54b08d6bbfc93d183dfe3ac4d06fba741a007de9",
+        "description": "radv: return per plane requirements for disjoint images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e18cc3b39b118644ef1f7cccdca72e5e6f1a0519",
+        "description": "radv: fix waiting for occlusion queries on GFX6-8",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d44651bfc3c8f6cb6aba8914f5bd21e440d69a4c",
+        "notes": null
+    },
+    {
+        "sha": "fe1aa98ab9db261e384cdcce34da313ab552d4c1",
+        "description": "nak: Allow SHF to use immediate encoding for shift",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f008f6a33bea9aaafdd03a4cbd34c7fe6acc54d5",
+        "description": "util/futex: replace double-cast check with a simple sign check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "042b8a65d33d94e24ef037d0b1550ad70b6b4517",
+        "description": "brw/lower_a2c: fix for scalarized fs outputs",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e5ed7ebd5d0dd844f5f767681ed7eaf11684a43",
+        "description": "intel/brw: Avoid getting a stride of 0 for nir_intrinsic_exclusive_scan",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90e12ed8435a552ab9f984c47d36105272046fb8",
+        "description": "intel/brw/xe2+: Only apply Wa 22016140776 to math instructions",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0e817ba548c56014c3707633c87b0ff50cf6d3ad",
+        "notes": null
+    },
+    {
+        "sha": "112063a060ef2603e66f5ee375346b2d24508c2b",
+        "description": "llvmpipe: Only use udmabuf if header is found",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "053b5f3e0cdc3f4e4297dad2ea40090960533c40",
+        "description": "llvmpipe: Only return null resource handle when dt is not mapped",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "639fe038ce965f36cc9e7b3d41cf866d940c10c3",
+        "description": "nvk: Enable EXT_nested_command_buffer.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d56c89b558c2457f9e44565b525c99853838b5f",
+        "description": "nvk: Improve the unsupported handle type error",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9542449397e22805d5e8535667ea315b47109230",
+        "description": "nvk: remove useless MME scratch 26 usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "164c0951a0825527244e999a261b8a4425ed1ebe",
+        "description": "anv, hasvk: check requirements for USAGE_INPUT_ATTACHMENT properly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3e97d30d91fc228aebf1da5b74f4a6009e8ae92",
+        "description": "anv: const-correct anv_{image,buffer}_is_sparse()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1cca5e8b32dbabba762d4cf5413e876f9a70e129",
+        "description": "anv/sparse: fail the right way in anv_GetDeviceImageSparseMemoryRequirements()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10ee2a510a05d0688d4d78a5e019ed2b275efb61",
+        "description": "anv/xe: rename and refactor xe_exec_fill_sync()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1c9b13119e743e7384b42671f51c945cc6d01fd1",
+        "description": "anv/xe: de-duplicate xe_exec_fill_sync()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5346442e74ab93a3250b1f34421d0fd4c73a5a2d",
+        "description": "anv/xe: assert we're using drm_syncobjs only once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "045182092e6faeab0adc0a556d1110b9d082f192",
+        "description": "anv/xe: slightly improve error handling for the vm_bind ioctl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f17d7655fe818dfe0d6172b70eb37eb93461acec",
+        "description": "anv/xe: add a 'flags' parameter to the vm_bind() kmd_backend function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "15b6f321afd83298683cb305826e1184d6a85e9f",
+        "description": "anv/xe: extract anv_vm_bind_to_drm_xe_vm_bind()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "461794554ae042d6f38a54562339b71ec3191171",
+        "description": "intel/tools/error2hangdump: Add Xe KMD support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0db081f096c9e119d2380c311315f380116af815",
+        "description": "intel/tools/error2hangdump: Move i915 parser to a function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52d2d4ae2c59b6ae5abbbb0b9053eb1500b56c6e",
+        "description": "intel/tools/error2hangdump: Move code that will be shared with Xe parser to error2hangdump_lib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7651d833751e4972834c01021f86c183e68fd79",
+        "description": "intel/tools: Move more Xe KMD error decode functions to error_decode_xe_lib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b58301766740d79453061ad16fea700deda9421",
+        "description": "intel/tools: Move ascii85_decode_char() to error_decode_lib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33bc079050c613e7a486c0792d2aaf30c03c146a",
+        "description": "intel/tools: Move Xe KMD error decode functions to a separated file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80b8deaabbdffcfe1ee9035447099cb91e16d2a5",
+        "description": "intel/tools/error2hangdump: Replace drm_i915_gem_engine_class by intel_engine_class",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c3fd352b17fb3e2be17ecb4c41bcaa56ea611c9",
+        "description": "intel/tools/error2hangdump: Print out_filename when failed to open it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3279abd494f3180f492e99992628536923892b4b",
+        "description": "radv: Rename per_vertex_shaded_mask to explicit_strict_shaded_mask.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3dd758f72c5ff7d2e48c2b7adbb0e0411b90cf4c",
+        "description": "radv: Allow using high 16 bits of PS input slots.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12c0c20ed1c94b023d70ceb700f9a4416a4a1533",
+        "description": "radv: Remove superfluous bool arg from slot_to_ps_input.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a4cf36998f1ec3d814c02427ff48b7bbe6eb5ed6",
+        "description": "radv: Refactor emitting PS input types.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c471aed748b3af2749f6c9c9a2a9dec1797e173c",
+        "description": "radv: Only consider interpolated inputs as 16-bit float.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afb08ee244bafb54795cd864d3d0fb210d39bee1",
+        "description": "radv: Run DCE before deleting I/O variables.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "dbfb96f08f82ab847163128868166f2a93e85f9e",
+        "notes": null
+    },
+    {
+        "sha": "0c1cf20e833b579a12b7c729c3693be348b88a8a",
+        "description": "panvk/ci: Re-enable copy_and_blit tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21775a459fe9129ab4e48cb52e590f4ed7b7fb47",
+        "description": "panvk: Add support for KHR_push_descriptor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "160dd5bf2b4b552ab0066c08131fc11a56c64436",
+        "description": "zink: add VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR for shaderdb",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd6468a5aeba0669fb8bf10f2be8a2913aaf24eb",
+        "description": "zink: destroy shaderdb pipelines",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7b51295bf1dafe320d32a08335255ffe330e968",
+        "description": "zink: add ZINK_DEBUG=nopc to completely disable precompilation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a83fd26d0effc8e65ff601c2ad3314058b98f107",
+        "description": "nir/print: stop trying to match i/o vars using base/driver_location",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52cc12b8d2ae79fe6f34ae98854b8f7674c4e62a",
+        "description": "panvk/ci: Enable dEQP-VK.pipeline.monolithic.*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a8a00510865ef2665718ff0b999068834a34eaf4",
+        "description": "panvk/ci: Make sure we catch GPU faults",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d49ca71554b3c9a093393716c0abbf3bb166a194",
+        "description": "panvk: Abort on fault when PANVK_DEBUG=sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a8dae1bf8688e3a70f716df3f05223914235936",
+        "description": "panvk: Make sure we use the proper format for views of depth+stencil images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d8bfe405d0f58c644fb1242d2b0361ac4d784df",
+        "description": "panvk: Skip tiler jobs when the vertex shader doesn't write the position",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5c2d152a5857303eec02101ba46a5a63dac7c10",
+        "description": "panfrost: implement a driver-specific max-miplevel",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b1db3de7b744672ce3ee7eef43e49f326212470",
+        "description": "panvk: Fill maxCustomBorderColorSamplers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10a631f767ab4a4cba52ce1a58a9e14c9db0288b",
+        "description": "panvk: Re-order things in panvk_physical_device_init()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a261e6c4eaeb3e13b5bd4a8af032d20a1349281d",
+        "description": "panvk: Swizzle the border color on v7 when the format is BGR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e07edd4f6c0690f5c9cc05d9efb6e1520c9a19c",
+        "description": "panvk: Don't advertize vertex_buffer cap on sRGB formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "294406bba204379e5f01a1724b30335e0bb24060",
+        "description": "panvk: Make sure we have a decode context created when we need one",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0eec8b0ff6b5cd571c52ca1691686cfc17665407",
+        "description": "panvk: Fix depth/stencil image views",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b40dad1d59c0c423696b65c446ade39fc20afa58",
+        "description": "panvk: Make sure we pick a valid wrap_mode_r value for unnormalizedCoordinates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9fe15e47fcdbe332b7ad467364f13fe3e78183d",
+        "description": "panvk: Fix has_non_vs_attribute() test in panvk_draw_prepare_vs_attribs()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58a5ae3f722db1388fdb09829499bd0fd0ad9ad7",
+        "description": "panvk: Fix img2buf copies with image X offset not aligned on 16 pixels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b0639325708d2236d90b0d7d3dff6d33e981912",
+        "description": "panvk: Don't assume pViewportState != NULL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f1d8a65d7ff017203065b2cf50f9fd6cdba3026e",
+        "description": "pan/bi: Extend bi_emit_texc() to support wider direct tex/sampler idx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "feffe7fd2a4a710bec6f7818e8355cb9b7efe0ef",
+        "description": "panvk: We don't support resolve operations yet",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b6c2cf0f0694835cc3b5d4c4193ac59a1cc0bda",
+        "description": "panvk: Make sure the sample_pattern is set in the tiler descriptor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47a98bbe349e5827848be665a6b9c27d8953987d",
+        "description": "panvk: Fill pan_tls_info::wls::instances",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c3476bae8b3aaece9e3eb9b9726f664992a2500",
+        "description": "panvk: Fix input attachment support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "502a1ca30007252c6aae5850aba9e90796379678",
+        "description": "pan/bi: Allow subpass sampler dims",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51ab0a4c25886729b607e57ec625ad27cf5dff82",
+        "description": "panvk: Don't assume VkGraphicsPipelineCreateInfo::pColorBlendState != NULL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "303f04d3463b15c3c157646ab14ccc7b6b5284de",
+        "description": "pan/bi: Support fragment store_output() with a non-zero offset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df4e3e4777b4b2b8b446ae4758bf539a61ee6558",
+        "description": "panvk: Fix the colorAttachmentCount check in begin_rendering_init_fbinfo()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "595d362d4bc739837eae560e07ad585cd7e2cb8a",
+        "notes": null
+    },
+    {
+        "sha": "cb9ad5e44b76835642b94ac1188d45686a89c94e",
+        "description": "panvk: Fix attach-less rendering",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "595d362d4bc739837eae560e07ad585cd7e2cb8a",
+        "notes": null
+    },
+    {
+        "sha": "b3e6ef964fe36ed32cafdde02fee8c92e6ecfbf3",
+        "description": "util: simplify loop logic in util_format_get_first_non_void_channel()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71b93f63dddeb71e9489450aaed8969e38021c21",
+        "description": "radv: initialize a couple of variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05c4c17f912ce69862f84345d17cef98d8fc1336",
+        "description": "wsi/x11: drop unused param in x11_present_to_x11_sw()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b53127e9fa6599b88cbd4137e18925245746785",
+        "description": "docs/rusticl: add an intro explaining what Rusticl is",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae5231a0deb7ea3d672a5200c2b554211f6fe3a2",
+        "description": "vk/overlay-layer: simplify print and make it more readable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e615602665a5efc98b1c798901cffe2cf2b37d2",
+        "description": "vk/overlay-layer: fix None checks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc5fa08d896b424245550d7246946a20841b2df1",
+        "description": "vk/overlay-layer: drop unused imports",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "acf1c7dc7377f33ff416f3c52b0be2b73a4867ad",
+        "description": "lavapipe: add 1 new failure and 1 new timeout since CTS uprev to 1.3.8.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aeab27cc24ce079c95d07accdb2e0ed1387bb147",
+        "description": "egl: drop dead dri2_dpy param in dri2_wl_visual_idx_from_config()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7350b65669f659c387cb8928c27b98708e6b2c17",
+        "description": "etnaviv: avoid re-defining prog_python",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b67f9b4d0d53415d1f00e7bb2700132b8572ab38",
+        "description": "radV/ci: reduce the parallelism of navi21 to 3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ee39b1870b3cddd35a6c67c3886e11b570a35d8",
+        "description": "radv/ci: update lists for TAHITI and Zink/Polaris10",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e85b2641a1818059a370e3adc9c3c6505664f3aa",
+        "description": "radv/ci: add one more flake since CTS 1.3.8.0 for RENOIR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1070c9b0e779f72dfd8e48e5d3319b24543aa26e",
+        "description": "broadcom/compiler: enable perquad with uses_wide_subgroup_intrinsics",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "97f5721bfc4bbbce5c3a39cf48eeb6ad1fb9cf97",
+        "notes": null
+    },
+    {
+        "sha": "fbd6da9bcdde769057a247ec7170304fae82bef7",
+        "description": "ci: handle missing dri libraries during listing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e297fb1bd59d08a5df8f524ab47c7bd84b39a551",
+        "description": "nil: cbindgen is required",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40f39482e15cb5aa14abef6661a4d785bb6cd4b1",
+        "description": "ci: uprev CTS to vulkan-cts-1.3.8.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "974b3ab9642cb8054b27261fe4a62e0f0c1adb84",
+        "description": "zink: disable buffer reordering correctly on shader image binds",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "737bae42676dc3587d0879879746056e7fcdce9c",
+        "description": "venus: fix swapchain image memory bind",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "36f639375b31f5af08fa079e7eede8c8122420ee",
+        "notes": null
+    },
+    {
+        "sha": "dd02ea37696c95cac0f54d0021a2c6938f966981",
+        "description": "egl: use os_get_option for MESA_LOADER_DRIVER_OVERRIDE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f13b201ade86cf6baa341fd37f9ac4bfb96a763",
+        "description": "egl/android: fix zink loading",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff37271ea73500d832538f52152095f63167fa9f",
+        "description": "egl: fix defines for zink's dri3 check",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3a5ade9eef11f18b9ccb2400ec1d2d2d301f941",
+        "description": "intel/isl: Disable miptails to align LODs for CCS WA",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c6686fda28e27565ff16c3f646899b8d9d05c428",
+        "notes": null
+    },
+    {
+        "sha": "e2260b8152a916eb1672414cd422b63c3b8aee53",
+        "description": "vulkan/wsi/wayland: Remove unused get_min_image_count_for_mode_group",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f5e9a21c5d10c3f3c5521ee5ad5757dade0de05",
+        "description": "panfrost: remove panfrost_create_shader_state() related dead code",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "40372bd720fe16186e9abc832bb452a3143d0e00",
+        "notes": null
+    },
+    {
+        "sha": "642d32045fd8a77ff9968837a74f53008330da8c",
+        "description": "vulkan/wsi/wayland: Fix use after free",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74615bb704f87bbd6880e27f646b89fcaa512bba",
+        "description": "radv: clear color attachments without exports before compaction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68a91242dc551949817bc1de2d412840c9c7c78f",
+        "description": "anv: Remove protected memory types from default_buffer_mem_types",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c6a91f16952cfe9f685cc6a0a185161364fdcdcf",
+        "notes": null
+    },
+    {
+        "sha": "fc691d9f37105e8da7aff45036a5ad1397d945cf",
+        "description": "lavapipe: disable stencil test if no stencil attachment",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5363f7cce5c967bd84210b0a316cd502e197609f",
+        "description": "freedreno,tu: Disable UBWC for storage images on a750",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a80a23dc49c0c98811b44327623a5f95298d07b4",
+        "notes": null
+    },
+    {
+        "sha": "c234c502aa987c6d8578da754fb97958915036c8",
+        "description": "freedreno: Make has_ibo_ubwc a7xx specific",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a80a23dc49c0c98811b44327623a5f95298d07b4",
+        "notes": null
+    },
+    {
+        "sha": "5c842d95aac3a439b8ad505868ca1c8a477f82fb",
+        "description": "ci: delete mistaken duplicate llvmpipe-{fails,skips}.txt",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54050d88441b9c2a39564ddf80ee0545a462e103",
+        "notes": null
+    },
+    {
+        "sha": "26d9e9bdb556d538446b8872b8be4675b816fa35",
+        "description": "radv/rt: add radv_rt_pipeline_compile()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07f3b9aaeda142d67b62cb797810553c90a4d54f",
+        "description": "radv/rt: insert shaders to cache right after they are compiled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6dc5b6ee60939bdff99ec6a62c0319ae2ec16a67",
+        "description": "radv/rt: rework handle_from_stages to pass hashes directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6979b1ea3de71dc041652eaf86671cd2f957ee8e",
+        "description": "radv/rt: initialize shader group capture/replay in a separate function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3738331afe1adb5d0c750185f1fde894be2d96ae",
+        "description": "radv/rt: remove unnecessary pipeline parameter to radv_generate_rt_shaders_key()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "29338d85a0cc5fb313d708191e3f74ea48b72f33",
+        "description": "radv/rt: remove unnecessary pipeline parameter to radv_rt_fill_group_info()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "763b4e992c7f8963ab7b5f34021852ac5167fb27",
+        "description": "radv: Enable KHR_video_queue if encode is enabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "363a90d0c45cfc25fba6f8e59e6c53fb610846e8",
+        "description": "vulkan/video: hevc: b-frames can be reference or not",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "72f52329cd7166bf46d1544e7d93705d3ff9a7dd",
+        "notes": null
+    },
+    {
+        "sha": "eb4dbe59b3a54f0f8b886248ffb1eaf60de1523c",
+        "description": "ci: re-enable Igalia farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ae2147dd6f942846993ff8a7317a84717bf157d",
+        "description": "nir: print i/o variables in location order",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cdcb2ab53873fb454f6e0882cddbc46d93dd6119",
+        "description": "mesa: fix typo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b048435372b97420d3fff3525dbf2e3842e14ac",
+        "description": "vulkan/runtime: fix typo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69eac6dd152c8c526aea35d2c1a93077a6f6c1d7",
+        "description": "ci/a618: Add zink-tu-a618-full",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "659f5d3271c97a0d7ae6c80770b52a8c21f3ae4c",
+        "description": "ci/a618: Rebalance a618-limozeen jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "453e9a24fd2ef13685a7f5131c1b72a278079ce9",
+        "description": "ci: Add deqp fix for pipeline_statistics_3 tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7688d5a062106507ddf48ed679e13762ff444cff",
+        "description": "freedreno: Update a618 xfails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f56fc168243d14d3b75cacd15a7505e211cd05dc",
+        "description": "ci: disable Igalia farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eaf8c56a114f97554a3bedc3b6e0f79b25e5949c",
+        "description": "radeonsi: Adds return on failure to get plane info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53e130e3330a5c9ab8236ee7ab5c4bf80ea8f69b",
+        "description": "nir/lower_doubles: preserve NaN when asked to do so",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6c52113a0302220047e3b66f2c5711e50bef9af",
+        "description": "nir/lower_doubles: preserve sign of zero if we are asked to",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5218cff34b34cec4819a382c500934fd9d991a60",
+        "description": "nir/algebraic: avoid double lowering of some fp64 operations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73bf648f047347911dd018d8ac395fd336d99203",
+        "description": "ci: kill piano trace globally",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8eb2743b1fb24fa944a70ceea2b188877368aba6",
+        "description": "aco/tests: remove LLVM 11 code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13faa231c20da8b93b3ee40a93deefd4d9f4274c",
+        "description": "aco/tests: don't assume constructor order",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71fdc67682630043c0045f49092ef68b959efa0f",
+        "description": "radv: Store range rather than bo_size in VkBuffer/VkImage.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c939111f3fc545bf301d67c46fedc4c73a2c2c2b",
+        "description": "panfrost: mark separate_stencil as valid when surface is valid",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f36fba9beafa3d1487b595f5c2b3f659cd94591",
+        "description": "ac/nir/ngg: Enable packing 16-bit mesh shader outputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07cedd648657bfc93b5b2c2c593f1d7afe0c43f3",
+        "description": "ac/nir/ngg: Split 16-bit MS output stores by components.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0c04d244c430c97d02e19adfd9f49fcb88a1c8d",
+        "description": "ac/nir/ngg: Refactor MS output store into two functions.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10a71984d6a918ade47bd24002defd9e16071c11",
+        "description": "ac/nir/ngg: Refactor update_ms_output_info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "238c7f0ea2361c4f3aac883acdf9498b9b8f3753",
+        "description": "ac/nir/ngg: Use just one IO semantics variable in MS output store.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0018901f918a9b5cb4852e563515993c5c8201d",
+        "description": "ac/nir/ngg: Slightly refactor mesh shader cull flag stores.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8e24d3426d93096f52d7f7128ce088083a7ca308",
+        "description": "ac/nir/ngg: Refactor MS primitive indices for scalarized IO.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76c90f929fee1e5a372f7ab363b66bd8790da1d3",
+        "description": "ac/nir/ngg: Remove support for loading mesh shader outputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc32ca929cb493da14da6f7b2fe1282cdde75c2e",
+        "description": "broadcom/ci: update expected results",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ffd85d85cc7e53c872075a6df1606b99944387a",
+        "description": "etnaviv: flip the switch on MSAA support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62903b2d75eafdf0b8cfaf88d8a31c020dc658ae",
+        "description": "tu: Expose VK_EXT_surface/swapchain_maintenance1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4408aff896a87fca231e3856f4ac154a1bfc35ac",
+        "description": "tu: Fix missing implementation of creating images from swapchains",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e4c7dee3bc41764b843c24728255050c863e9bb",
+        "description": "tu: Replace TU_HAS_SURFACE with TU_USE_WSI_PLATFORM",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06d277c1bd3da80fb13be975a3743d9261aff826",
+        "description": "tu: Move tu_BindImageMemory2() to tu_image.cc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "295fa01db80f4c65240d3ea90fb0053c23c25191",
+        "description": "etnaviv: Fix disabling of features",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d600b45ccc975e898ead4496db0dcbd1e5e9b8b7",
+        "notes": null
+    },
+    {
+        "sha": "518d365d062bfff9a80a643a199bcc7b546c02a9",
+        "description": "etnaviv: Switch to etna_core_disable_feature(..)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97f5721bfc4bbbce5c3a39cf48eeb6ad1fb9cf97",
+        "description": "broadcom/compiler: needs_quad_helper_invocation enable PER_QUAD TMU access",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2b9e216893914228eb5d34e08bee70f46c3a9fb",
+        "description": "radv: simplify the check for exporting multiview in the last VGT stage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9c51a93e5c4cf4f8cb3df57dc0d15db5d793e86",
+        "description": "radv: remove unused parameter in radv_skip_graphics_pipeline_compile()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d18645b1fe30f43bbe1e156f83bd8cae855674a",
+        "description": "radv: simplify checking for PS epilogs in radv_pipeline_init_blend_state()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "575111e15ab36aa13db4cfc9040c207588a72e64",
+        "description": "radv: return early when PS is NULL in radv_pipeline_init_blend_state()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e78c2d08bd825cb45e5fb6fc2181918e7691266",
+        "description": "radv: simplify importing pipeline layout with GPL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70b613926dcbf846e5e2cf528a637da3fc2ce874",
+        "description": "anv: enable capture/replay with descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4dad2a4a6fd76d8bc889d655c812a6f0ba757ed7",
+        "description": "anv: enable shader border color capture/replay",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "806281f61fe1be3c52e6a1aa77bb22e98161b3cd",
+        "description": "anv: add a new reserved pool for capture/release",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "67d772b112e169e705a32337e9ffb3ddc94da8e2",
+        "description": "anv: add capture/replay support for buffer with descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43b57ee8a5612758f9078848ee2e725f2a239d95",
+        "description": "anv: add capture/replay support for image with descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4fadc2edb71f6083b040da58e0345e9d0aae84b5",
+        "description": "anv: remove useless dynamic state allocation for samplers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "772c8ccada5590d522eba7c8993b7ccd146efbef",
+        "description": "anv: disable capture replay with descriptor buffer",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fe037dec6e14cfbfdc6a1c30e0a6009b067ee319",
+        "notes": null
+    },
+    {
+        "sha": "c94cd1235f436098d3b0a27ad5d13b9d3ac830c3",
+        "description": "anv: implement VK_EXT_image_compression_control",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db6ee2e1bbbbf509bc125909499813077a7e5761",
+        "description": "vulkan: track compression control flags on vk_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e5c44a6095105e7f0779538af8f92a9d95e785e",
+        "description": "drirc: rename hasvk only option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73c31e9483dbdde9c16ce3f0754d1b7b21298ede",
+        "description": "anv: move all format props checks to anv_get_image_format_properties()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d83aaf4e05c20f05685a5170bc2da59966ba2d1d",
+        "description": "anv: reuse vk_common_GetImageSubresourceLayout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62d96a65464317326cdc2686aa34eb30f8c21952",
+        "description": "anv: add dirty tracking for push constant data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "899263ecfc8251ffff375d70b4c5d44f192112b0",
+        "description": "wsi/x11: support explicit sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e637c6323915766121b2ed789838528c848296fc",
+        "description": "intel/brw: Make an fs_builder::SYNC helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5b8cec7a2d31d77fd328689832397e36d0f8808",
+        "description": "intel/brw: Replace FS_OPCODE_LINTERP with BRW_OPCODE_PLN",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12b0e03bd244eed12912f0e102c907fc8a63df89",
+        "description": "intel/brw: Use SHADER_OPCODE_SEND for coherent framebuffer reads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46a7ee772ea695ba93e73c13ad9b1db61ab84f3c",
+        "description": "intel/brw: Drop default size of 1 from bld.vgrf() calls",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "217d56e9b1da1b2ad271024b6be0969ddd247744",
+        "description": "intel/brw: Delete fs_visitor::vgrf helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f29a56a4ac5860e0ed59aebaf28a0e7c7452a4f8",
+        "description": "intel/brw: Delete if_depth_in_loop",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd6a430c941606ac202e681e2ae2e5accba37800",
+        "description": "intel/brw: Drop gfx7 scratch message setup code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a791805d10d4b5cb43037593abfac2cbb2273d9e",
+        "description": "anv/sparse: rework anv_free_sparse_bindings() error handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "95dc34cd97a9cf909267a1c0fd625c8b5dc0a5ba",
+        "description": "anv/sparse: replace device->using_sparse with device->num_sparse_resources",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6368c1445f44e3c05b399d9e279d36a79a1a6bcc",
+        "notes": null
+    },
+    {
+        "sha": "0c1dbfe899faf2d988e70c15e8ea4259518cae79",
+        "description": "anv/sparse: remove unused dump_vk_sparse_memory_bind()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba3b1c2d12055d4a83499b23a2c469c76cce41b8",
+        "description": "anv/sparse: adjust sparse_bind_image_memory debug messages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f73385f8ff3515980bea9e118f0ef0ba85fd3ae3",
+        "description": "anv/sparse: remove unnecessary popcount assertions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f5638cf2e5fc8e01bef3d6f6a33edd9b9968ab8",
+        "description": "anv/sparse: remove useless isl_surf_get_tile_info() call",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "831da93d76c50b6313a3890d61855508b3bcf334",
+        "description": "venus: clean up legacy descriptor update template bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5223cf2b11f3e4d80b1a439c341265be3bcb00e0",
+        "description": "venus: use STACK_ARRAY to simplify set template update and push",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e01ffe733d6a52c4cf19ea190aaf2eadb2ad50f",
+        "description": "venus: simplify need and ignore rules for desc image info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "378db530ae3b2e3fdfa4b6f125e1bff4c82787b6",
+        "description": "venus: optimize set update template data population",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "498f1d7eb1b972df8a9a5eb2bf4d52df20fcefa0",
+        "description": "venus: simplify push descriptor update with template",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c6b9e2fbefeafbaa491d70790546fb0111a467f",
+        "description": "venus: fix to drop an extra ;",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "32283b9703ba80ad0bec9d53b5b5822ca9a0a6d8",
+        "notes": null
+    },
+    {
+        "sha": "be8442473800bb62acd948e2be0facc4df5d0106",
+        "description": "venus: avoid the redundant template entry",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "706691a7152d88c110068ea7bb4c3725ff6916c7",
+        "description": "nouveau: require cbindgen >= 0.25",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2543f5a594f969722de4d3e4632aedebb5acbb73",
+        "description": "radv: use ac_nir_opt_pack_half",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b346cc63928ab7068f711680f448c471188941c",
+        "description": "ac/nir: add ac_nir_opt_pack_half",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c15498afbe38b615c61e1c4f6e3a489c586fd73f",
+        "description": "nir/use_dominance: set the root as post-dominator of unmovable instructions",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ba54099dce61f9ec49fa75fbc82c3eede86f3deb",
+        "notes": null
+    },
+    {
+        "sha": "edf07649f46bae56c2b6b58693a384875a29c6ca",
+        "description": "vulkan: reduce struct vk_object_base by 8 bytes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13aea0fb3040edab0745194de6b5544d48d6192c",
+        "description": "freedreno/common: Fix register stomper ranges for A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98ce4a98ae734ac613cb078121520c48a5a94e10",
+        "description": "nir/remove_unused_io_vars: check all components to determine variable liveness",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d33bab3b48420529c9e245e40a31faf975ee6df",
+        "description": "meson: Add missing newline at eof",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad4d13f184db930da7ac782e9afa270bb0939ae0",
+        "description": "anv: reduce struct anv_image_memory_range from 32 to 24 bytes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f608fc206e8f6ad0d4fdf7992ac211d9f64144e",
+        "description": "radv: use canonicalized VA for VM fault reports",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b06e237363d0137861e71729556d5fb5e65b5887",
+        "description": "nvk: Remove duplicate DRM_NODE_RENDER check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d2f83ce98637b936246fc8849eebd1a05167c6b",
+        "description": "etnaviv: hwdb: Drop stdint.h dependency",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "394652e5a02bdc32631c4780b3a76a594c2319b3",
+        "notes": null
+    },
+    {
+        "sha": "13dffdec60e756d99dccaa6dac0db65e07bcfae4",
+        "description": "panvk: wire up version-overriding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83c40aa3f4b80f0ad4f9532c40366f82e7f14bb6",
+        "description": "ci/etnaviv: update expectation after piglit uprev",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3d123b7a67aff618720e0bc550b2d27b1e56fc5",
+        "description": "panfrost: fix a GPU/CPU synchronization problem",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87bfad9efae485e6cc714c1a47d856f17d088beb",
+        "description": "etnaviv: rs: treat depth-only clear to X8Z24 surfaces as full clear",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "df63f188e83a3c041d93ee272d593bfd2679be82",
+        "notes": null
+    },
+    {
+        "sha": "fc0d65e54f3798e9c8f4193712599a1aebafaf1a",
+        "description": "etnaviv: ci: update expectation with fixed depth/stencil clears",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f69794b5033046d0b1954f1ef693cd2ea312f4c1",
+        "description": "etnaviv: split TS and non-TS RS clear commands",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "df63f188e83a3c041d93ee272d593bfd2679be82",
+        "notes": null
+    },
+    {
+        "sha": "06ce243a73dbec3a1ae80dace839d7ef65aca509",
+        "description": "etnaviv: trigger TS derivation after slow clear",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "df63f188e83a3c041d93ee272d593bfd2679be82",
+        "notes": null
+    },
+    {
+        "sha": "f2f486a7eb9efaabe8410543cef7469fadb28082",
+        "description": "svga/ci: disable vmware farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "502f0091de2145126b0699a4c29147bcc2842d64",
+        "description": "radv/rt: stop computing unused hash for the traversal shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a5016d54d4061010d8dcc080642b255388a6624",
+        "description": "radv/rt: use radv_pipeline_hash_shader_stage()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12059eedfe8488f677ede92695bb9d2435bedfd0",
+        "description": "etnaviv: Drop not needed check if seamless cube map is supported",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "429f953d8f3210ed20232e496840c03ac00ae37e",
+        "description": "Revert \"gallivm/ssbo: mask offset with exec_mask instead of building the 'if'\"",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fc8a83c96dfa25f0f1fe841c98ed48d668cfde03",
+        "notes": null
+    },
+    {
+        "sha": "4586451b2dde802ebe00d1410b30a8772b8afde0",
+        "description": "radv: add missing SQTT markers when an indirect indexed draw is used with DGC",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e59a16bbb8fb770bc11bbacfa2254d6a958c7cb8",
+        "notes": null
+    },
+    {
+        "sha": "4a19047d329a49ed34fe05346ae1d298d2907e3e",
+        "description": "radv/video: Select temporal layer when encoding each frame",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54d499818ca9a004ba735635d328a1ed0ff010b6",
+        "notes": null
+    },
+    {
+        "sha": "3393e56373181025817a3727fd7c67babe6fcc63",
+        "description": "radv/video: Set VBV buffer size and level",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54d499818ca9a004ba735635d328a1ed0ff010b6",
+        "notes": null
+    },
+    {
+        "sha": "8875a79513b0fe743768c8cd275343383f36c7b8",
+        "description": "radv/video: Set correct bitstream buffer size",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54d499818ca9a004ba735635d328a1ed0ff010b6",
+        "notes": null
+    },
+    {
+        "sha": "5df45c0f99c08bf54798e6ab4800b2724cfaf3f6",
+        "description": "radv/video: Fix setting slice QP",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54d499818ca9a004ba735635d328a1ed0ff010b6",
+        "notes": null
+    },
+    {
+        "sha": "2b1031ec10cab1aa22a9827e20e2748d2ef7508f",
+        "description": "nir/opt_varyings: Add workaround for RADV mesh shader multiview.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91dd9c35bee7293d39efc7003976f0bd4a8c25eb",
+        "description": "nir/opt_varyings: Fix relocate_slot so it doesn't mix up 32-bit and 16-bit I/O.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e43c2d08ff036c9ae0bb31b0071813bd00d8572",
+        "description": "nir/opt_varyings: Debug print during relocate_slot.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf2227d0d05b7ca66423cec42358b49a52836b4a",
+        "description": "nir/opt_varyings: Only propagate constant MS outputs, not other uniforms.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5dd1461ca48178ffaf5b7c20dd395f0a533a5fb2",
+        "description": "nir/opt_varyings: Add early return when producer stage is task.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a083a25a808101aa2044f60959e3fb79b4888403",
+        "description": "nir/opt_varyings: Fix explicit and per-vertex FS inputs.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "772149b15ae59056364a880a7715aeb68631d3db",
+        "notes": null
+    },
+    {
+        "sha": "586acb47c8e00b56abcfee3a985d2fbf61efbf21",
+        "description": "nir/opt_varyings: Support per-primitive I/O.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21ff2907c77eb16835268ea24540d43b9ea62fc5",
+        "description": "nir/opt_varyings: Allow optimizing primitive ID for MS -> FS.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8792098772f0bd39bc2cbf151354820b3b8829a3",
+        "description": "nir/lower_io_to_scalar: Support per-primitive outputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38bd5780291b9608bcb0d6d0e0e4d1b115dc99fa",
+        "description": "nir/lower_io_to_scalar: Support explicit (and per-vertex) FS inputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "433fe2022c9898ce0eb3731d1c8906b38a1cbffe",
+        "description": "nir/gather_info: Clear per-primitive I/O masks at the beginning.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "b0852488193f6b3d4c841410adc7b997b6a8d495",
+        "notes": null
+    },
+    {
+        "sha": "28c0f6f369d5a2d03f84d540d2c065d83bfc595b",
+        "description": "nir/recompute_io_bases: Fix per-primitive inputs.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8a24610477f3b23a0dc0fb423bbc67ee92a0353f",
+        "notes": null
+    },
+    {
+        "sha": "723b3d354e61453c425ea22998d4caaa156a8eb0",
+        "description": "nir/print: Print per-primitive and explicit strict IO info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "566174785c25707619bec1893839d8aaee026bd5",
+        "description": "lavapipe: Explicitely support ycbcr formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f5fb4e0951b6fdfba9de40d8144250156f7cb77",
+        "description": "lavapipe: Handle multiple planes in GetDescriptorEXT",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a13a07d166ff8886d22991a230b0dec228d69dd5",
+        "notes": null
+    },
+    {
+        "sha": "c48d6097cdfa32a2fda8bc3ac8dbffca8fbefb5a",
+        "description": "lavapipe: Do nort use NIR_PASS during lowering",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d99e95e033eccfece156e8715a1e33daca10160e",
+        "notes": null
+    },
+    {
+        "sha": "4335d006a7cf4cbadb910609f416275ae9730312",
+        "description": "lavapipe: Implement ray_tracing_maintenance1 queries",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1f729d9e2d33ee4cd9c8c07fef2d77dcfbe63dff",
+        "notes": null
+    },
+    {
+        "sha": "a26f96ed3de63c113f0c30a243ec410b9f5be235",
+        "description": "lavapipe: Handle accel struct queries in handle_copy_query_pool_results",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "897ccbd180ae2e0e6a60173e0511bc25a4f5a118",
+        "notes": null
+    },
+    {
+        "sha": "6cc780173a8b1f427b434d59c4a32c5f553e661c",
+        "description": "r300/ci: failures list update",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe35a8b00e7b82688e4eaf2f3fe62a80af342638",
+        "description": "nir: change \"user_data_amd\" sysval from 4 to 8 components",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1f750eed9eecf867a2f592cef76106531021a2a",
+        "description": "nir: add nir_intrinsic_optimization_barrier_sgpr_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6426f6de6a29745cacad2661c27af70206267eb9",
+        "description": "nir: allow FP16 in nir_format_linear_to_srgb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "281e08714e3e5a3708308c32675b5543f7280957",
+        "description": "nir: add more build helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b681677f7d3bfe612a6f597f86f21703cf8fb44a",
+        "description": "nak: Rewrite union_find and use it in repair_ssa",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b5f4c54d0de5776b0030d1a6372753dc679af206",
+        "description": "nak: Remove old union_find implementation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7101ed7f885853c2976b53ea33bde12c1ee68486",
+        "description": "ci: temporarily disable Android test builds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9c80ee59e856616d5e007e3ef621f2c515c70bd",
+        "description": "etnaviv: drm: Remove fallback value for ETNA_GPU_NUM_CONSTANTS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57a662fc4cfeeb8a7e1fedaad19d3295fb862b4b",
+        "description": "etnaviv: Copy values from etna_core_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e60e045b89a4889af517ea92d8bf2ac2e47149e8",
+        "description": "etnaviv: drm: Fill limits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "def32f8668e9f8cbea1076c9c79d496d70bb50d6",
+        "description": "etnaviv: hwdb: Fill limits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b68e868d314a68761a8ab37ece04d3262cc0a445",
+        "description": "etnaviv: common: Add some limit values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef19966e380f410773766f4f2b33df0cd356954c",
+        "description": "etnaviv: common: Add enum etna_core_type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aaccc25a4dd9ccfc134e51a7e81168334d63a909",
+        "description": "etnaviv: drm: Make use of hwdb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2192e620bb0c68b75ff45165d0b117c7ecb77268",
+        "description": "etnaviv: hwdb: Add etna_query_feature_db(..)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "394652e5a02bdc32631c4780b3a76a594c2319b3",
+        "description": "etnaviv: hwdb: Generate hwdb.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a07d1864db3a07248b76e936931a71ea84ccc1e3",
+        "description": "ci: Install python3-pycparser in build container",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9e490c2f488f6712dc980cb240cd44851bf8b21",
+        "description": "etnaviv: hwdb: Import gc_feature_database from ST",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c5dc646ed24d22623b96757bb97e6576cdc2de4",
+        "description": "etnaviv: hwdb: Import gc_feature_database from Amlogic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "775eff30464ad9d55d8ad63fe0afb6564d2f9991",
+        "description": "etnaviv: hwdb: Import gc_feature_database from NXP",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1c6748cf4cd3ee2b6ac9d37bd5850538459ebef",
+        "description": "etnaviv: drm: Query some id values in etna_gpu_new(..)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d600b45ccc975e898ead4496db0dcbd1e5e9b8b7",
+        "description": "etnaviv: Switch to etna_core APIs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "358e1f10c5263d4bacd7fea28540cf6b36d76772",
+        "description": "etnaviv: drm: Initialize etna_core_info based on kernel features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8639367f55614e97224575394a176661668276e6",
+        "description": "etnaviv: common: Add feature bitset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df198d21f903d309493850541c7fea830c42ffb9",
+        "description": "etnaviv: Introduce etna_feature enum",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9eede9ba0b8cb711fac42e9045bc525d28cfa6df",
+        "description": "etnaviv: Move hw header to common place",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4c90d4316491925ecbf5c71332431106e1a2b83",
+        "description": "etnaviv: Switch to etna_core_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d3f8e3ee421aaa4caa2567489132316ef8311b4f",
+        "description": "etnaviv: drm: Add etna_gpu_get_core_info(..)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad4b6cce300ef088798d41ea75a6b92a252da607",
+        "description": "etnaviv: drm: Make use of etna_core_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b150bcba873d204a8ef726b35b5d23979187c8d",
+        "description": "etnaviv: Introduce common etna_core_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1984712a8ef82bc7ff5386c1760b8f1fb8a14af0",
+        "description": "glsl: inline _mesa_copy_linked_program_data()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4655381e3b557894d93c2d178f48a963c14453e1",
+        "description": "glsl: remove UsesEndPrimitive field",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1139a703c1ab77fd8c0bf511d4680bf8940d53a0",
+        "description": "glsl: remove ActiveStreamMask field",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e13e9be458143004e380610fc5bb16c2dd983a5",
+        "description": "glsl: remove FragDepthLayout field",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9dc6ea2fada91c03c4b19a1dcdf5e31b28ff23d6",
+        "description": "r300: remove nir_to_rc_options wrapper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1c98ffd9e5c72e7e2e3622e04273fcccf392afb",
+        "description": "r300: move lower_fabb option out of the options struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2de9142f9ff375aff19a17b972972d911977ddff",
+        "description": "r300: remove the ntr lower_cmp option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4735265187b020c2c59b7eaee1db270ef4d82370",
+        "description": "r300: get rid of the unused ubo_vec4_max ntr option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26bb068935fa23a8cccf46fd0899ad722156f37b",
+        "description": "r300: inline unoptimized_ra ntr option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7de43c4fb8fbd310bab1d6e302ae8db4debb2cf9",
+        "description": "ac: add helper ac_get_ip_type_string to remove duplication",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8597870dcb2fd3eb39d530c754bba11a95f8c17f",
+        "description": "ac/llvm: simplify the optimization barrier and apply it to the whole vector",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7e30cdbbbe9f1a4509b6c910b67ee66a44699a3",
+        "description": "ac/llvm: remove unused fields of ac_shader_abi",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "105e22f6fd47b81e3aa9d0d4b21a924e80a15eca",
+        "description": "ac/llvm: remove handling of input and output loads/stores that are lowered",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce7ca0d80bf9e68f02133b1ffb48043b92e001b4",
+        "description": "ac/llvm: allow image loads to return less than 4 components, trim DMASK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c91b56c27163df473e57cea7d6095045c875b47f",
+        "description": "ac/llvm: add support for 16-bit coordinates (A16) for image (non-sampler) opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9ea9e96a7b8c2cf8dafa4d0799c9d08278eceaa",
+        "description": "ac/llvm: simplify extracting an element in get_image_coords",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f49cfa9a1c5b39b3d457538ce203b65bf4c684c8",
+        "description": "ac/nir: allow 16-bit results for resinfo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03d241b2564bae4833c3d0e03db474c2fe216e44",
+        "description": "ac/surface: add radeon_surf::thick_tiling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "abc327a39a4be775853df9e281a2d6d8df32461a",
+        "description": "venus: use more relaxed profile for TLS ring seqno wait",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f246bca04580cac916e95bc3c0c609e423ee770",
+        "description": "zink: ci updates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e0effe59bfa83b9ce411430e036435b5fd8421f",
+        "description": "zink: enable opt_varyings with ZINK_DEBUG=ioopt",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "942f3d3a3f35cdae4130fe2ddea3d6beb58cba9a",
+        "description": "zink: add a pass to fix vertex input locations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8c12c82ef5bb07c113c6479b93c4ee850d2885c",
+        "description": "zink: set nir_io_glsl_lower_derefs in compiler options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "163bb2b9c1d0fb6090512111e4ac46b647d7cdfe",
+        "description": "zink: rework rework_io_vars",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c329ee200f04b20936492040d7f8c2a5be23cbcd",
+        "description": "zink: set lower_to_scalar",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d756fd0bc10278e2833cd76b6526251b94113ef",
+        "description": "zink: set indirect io compiler flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e511ffea4b9e298217813a2148f86910a4cdcd8b",
+        "description": "ci/intel: sona device_type is back online",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "44db558ceadc2450149f8cecb5e31372744c3611",
+        "notes": null
+    },
+    {
+        "sha": "2e5d49b3ddbd2119aee527102792d78a2a130799",
+        "description": "gallium: delete PIPE_CAP_NIR_COMPACT_ARRAYS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "44aee09cfbcea0a8a6dafe1f942f2f61ba6dfa68",
+        "description": "nine: stop checking PIPE_CAP_NIR_COMPACT_ARRAYS and use compact_arrays",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d9c5cc6ede674853f8395939835ed95bce54fe8",
+        "description": "st/program: stop using PIPE_CAP_NIR_COMPACT_ARRAYS and use compact_arrays",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cba1b03e86774f743ed35fec52ccf31ac3151295",
+        "description": "mesa: delete LowerCombinedClipCullDistance from consts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9977f8de63c8cfd21bc77f2d6c45713218d30ab",
+        "description": "glsl: move an assert from st_context over to avoid using PIPE_CAP_NIR_COMPACT_ARRAYS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f5e62df89cb8769bb7e1d08f29584f92375252a",
+        "description": "ttn: stop using PIPE_CAP_NIR_COMPACT_ARRAYS and check compact_arrays",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20d0613c1309ac32df0a533317729dd5fef51dbc",
+        "description": "glsl: stop using PIPE_CAP_NIR_COMPACT_ARRAYS and check compact_arrays",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2abc7f9a67eadee8207801a3bcf82c55c98f30a",
+        "description": "freedreno: set compact_arrays in compiler options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39b66f9c842d3d6b861bea20ae0bd36470c74cd9",
+        "description": "intel: set compact_arrays in compiler options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d694c1b0949ea3dd7b7595974b717e3c9a4ae03f",
+        "description": "v3d: set compact_arrays in compiler options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7967be922da2b93578524484030d6d388af7ebf8",
+        "description": "agx: set compact_arrays in compiler options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "223aedfa5dba263101a91314186be80861dbd3cf",
+        "description": "egl/dri2: don't bind dri2 for zink",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "12a47b84b7386e1aac6c4b0d36ad198705432378",
+        "notes": null
+    },
+    {
+        "sha": "26836438cb11bcfbd09b6ff8eacfee2238821bef",
+        "description": "r300: optimize swizzle for inline constants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e34bb4738aa3b69da7abd5e91d8933ead2d0acdd",
+        "description": "r300: move presubtract pass later",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a35a158b093876898c1328fde25e4c6b4d0e9229",
+        "description": "r300: check for the extra restrictions on presubtract swizzles",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ede4e4aae36b664dbfa511e7d8960ab53816ffcd",
+        "description": "lavapipe: clamp 32bit query results to low 32 bits rather than MIN",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "129bebd519928296aa98b42b9d46292973821ec1",
+        "description": "llvmpipe: clamp 32bit query results to low 32 bits rather than MIN",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "606742654906d6d9bc1afa4a9da624cada1a4488",
+        "description": "svga/ci: add two new piglit flakes to svga",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "56dba5489ae1fb6f11c187dbac41d48ad4feddb9",
+        "description": "ir3: Do not set clip/cull mask if no one writes clip/cull",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35831dded5f8e463583d6cda2a4b6db378fca8a5",
+        "description": "anv: increase maxResourceDescriptorBufferRange on DG2+",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fe037dec6e14cfbfdc6a1c30e0a6009b067ee319",
+        "notes": null
+    },
+    {
+        "sha": "c82b8a81531d66ef934b5ac048051f3febb3aaaf",
+        "description": "radv: stop ignoring shader stages that don't need to be imported with GPL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b6993cb71a86e15af7523e1e436f2722e509dc1",
+        "description": "r300: fix r300_draw_elements() behavior",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "330d0607ed60fd3edca192e54b4246310f06652f",
+        "notes": null
+    },
+    {
+        "sha": "9e056fc962875a0765768b31f2c7a987d4ba52b0",
+        "description": "glsl: remove now unused do_dead_functions()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "875ca9ec11417d1bcd56b0568ce8164082322cc8",
+        "description": "glsl: move validate_{stage}_shader_executable() to the nir linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "316165afec5da7e1bd71d330a1f8bc6dce88a72b",
+        "description": "glsl: use info from shader when linking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38398cc6bb14ab2a32205aff848cc069c88da4e0",
+        "description": "glsl: use shader info to store gs verts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0dcbd8a8a4355f8f149f6cc5ff704908ec6464e6",
+        "description": "glsl: move cross_validate_uniforms() to the nir linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d8ee7534e5a0c861b26904087a9db2c04a66a87",
+        "description": "glsl: make validate_intrastage_arrays() usable across files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe2e60a4d30a742704b180aec4cf0f3ecfbe7d2f",
+        "description": "glsl: add some data members to nir_variable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "344bcd1703d855f26c6857b872be1b6b8ad162c0",
+        "description": "glsl: move mode_string() to helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d00b759f3932e071d62420938cf0f3797befd67",
+        "description": "radeonsi/uvd_enc: update to use correct padding size",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0aa632b519b0ad774520e6f83869f2a7bb9fabed",
+        "description": "anv: Use appropriate argument format for indirect draw",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6d4f43f0d6f58edb5bf236ddf1ce6f798afa851b",
+        "notes": null
+    },
+    {
+        "sha": "7e82c59fa4b51a606c1f1e00601bbaf5719f0369",
+        "description": "Uprev Piglit to dd6f7eaf82e8dd442da28b346c236141cbcce0b1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f419a8be904d9aac52186252920b30b82fdad406",
+        "description": "frontends/va: Only export one handle for contiguous planes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f4c9ff68a37cb6f6cac956df58ea0022b08cf6f",
+        "description": "gallium/pipe: Add contiguous planes per-surface attribute",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "934188c3ca7e2e18891cd2d24f0140e657f5b514",
+        "description": "zink: block LA formats with srgb",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2507a69161de17224120b033b5390b6cda06a63",
+        "description": "nir/lower_clip: handle scalarized io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49714125d5958290cab2e6f3bc5bff215d2bffc5",
+        "description": "nir/lower_clip: surgerize for lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7760642d2e828639406eddd54d5c1ead2bcbca1d",
+        "description": "v3d: set use_clipdist_array=true for lower_clip?",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2a467dd4bdc904cd46a3fe0b92aa9fcf1d5a341",
+        "description": "aco: remove occupancy check in dealloc_vgprs()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9775318aa94a101a088a7cfdda91a8af098aced1",
+        "description": "aco: don't include the clause in VMEM_CLAUSE_MAX_GRAB_DIST",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d55b6155c22c09781d6b64d11b9a221c91fa85b",
+        "description": "freedreno,computerator: support initialization of buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b3e65c77c431d337f754caae9e6d9590dc9a1d27",
+        "description": "v3d: configure polygon mode when enabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6cc119522e010c5666b5a3822f69f9ff32853ea3",
+        "description": "tsan-blacklist: surpress two race conditions in TC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ccff97f7baf82fefd41dd6dde4e6aea7ddc9d60c",
+        "description": "tsan-blacklist: Ignore race in get_max_abs_timeout_ns",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e7112f4dfb7a9cbbfe20da0e0ed931807c38bea",
+        "description": "llvmpipe: Don't emit certain debug code when TSAN is enabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c36c4f0a4184d2e3f60b009b979efcf34268088",
+        "description": "tsan-blacklist: ignore race when reading lp_fence signalled status",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7dc19d941e4c8bf45ad2ab21b5aa8a00c31f252d",
+        "description": "util/u_queue: read fence->signalled locked with TSAN",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa347029da5b7964f649964700e0390f84020d98",
+        "description": "futex: disable futexes when compiling with tsan",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d46e0e88bdeb8bfff3b30c65002cc34d3b7ba4e",
+        "description": "meson: Add blacklist when compiling with tsan",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "446672f9b10c579c6da48a1b6efaf261c3a8549f",
+        "description": "ci: Implement support for replaying ANGLE restricted traces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "094a0a2ccbdd97e98009b453731d88c43d244b31",
+        "description": "intel/dev: 0x7d45 is mtl-u not mtl-h",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "48ff68820e83565154d8cfb86587c0134f0deb98",
+        "notes": null
+    },
+    {
+        "sha": "5238b773b479a84113b04c8cb497db391a46a4d0",
+        "description": "intel/dev: Change ATS-M 0x56c2 string from 170G to 170V",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ce900dcbb133e2e9b8b2478fce8aa1c146d741bb",
+        "notes": null
+    },
+    {
+        "sha": "5e6e3c7f897e6b584138a83a921e9c236f43b596",
+        "description": "nir: rename to nir_opt_16bit_tex_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16682b60546adb3ea3347c0a75c4a85ac169363e",
+        "description": "radv/video: don't advertise timestamp bits for decode/encode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee64a385b646a43f6533db94a916aad81487d453",
+        "description": "radv/video: handle encode control parameters better.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05cd42417ffabbe3364fb58ddf2a2d4427cd6579",
+        "description": "radv/video: enable video encoding behind perftest flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "967e4e09dee81b93cfb30195ab5e1878aca9dbd0",
+        "description": "radv/video: add h265 encode support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54d499818ca9a004ba735635d328a1ed0ff010b6",
+        "description": "radv/video: add initial support for encoding with h264.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "800c03ffbd4241ca25959af441025cda2666e998",
+        "description": "radv/video: add parameter patching calls.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d74661dfd6f6f99c76d00f7f8608995978f88e2",
+        "description": "radv: add encoder queue support pieces and encoder queries.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6c27bea26234ca5998ce9095f921f6a9a179ec3",
+        "description": "radv: add direct cs emit for a dword.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ce215c5a32938728f9c58df9ab7b3306f00ec97",
+        "description": "radv/video: export unified queue header/tail functions.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e16851ab11d6b3c1f1644345b4c39f4e0e3379f",
+        "description": "vulkan/video: copy the profile over for h264 encode.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24b6a047eee5b57863a4dcceef72bb344794d8c5",
+        "description": "docs: add sha256sum for 24.0.5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ead2f6d7f1f7c9e468028c50bf26ed4778878d85",
+        "description": "docs: update calendar for 24.0.5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "030473f5b2f3ee2243a9561552ed6a51fe0c08e1",
+        "description": "docs: add release notes for 24.0.5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cfb8f3c1a50a85074325d3a3bdcc85ca0b2cfb46",
+        "description": "radv: Clean up gathering linked I/O info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e481a4adcd8006256c27d100a0a0f0c01a94171",
+        "description": "radv: Always use fixed I/O locations for TCS outputs in VRAM.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "892ebf204078fa16fc87646ba7bca9ad97cf2d78",
+        "description": "radv: Add radv_gather_unlinked_io_mask to shader info header.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8ddf1a064c1d3e4dba508593cecd3c3049920a1",
+        "description": "radv: Remove dead code for creating per-patch IO mask.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66f4dd292c718d9164f9d274fa225c4ab1d0a9a0",
+        "description": "radv: Keep track of TCS outputs that need LDS.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b44f97a7bab6bc7255b7cd36d8e273ffa1b334f9",
+        "description": "nir: don't try to optimize exclusive min/max scan to inclusive",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df63f188e83a3c041d93ee272d593bfd2679be82",
+        "description": "etnaviv: fix separate depth/stencil clears",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1401fda8a0ee29dc3ff878c438510b00031265c",
+        "description": "wsi/wayland: don't use explicit sync with sw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "44db558ceadc2450149f8cecb5e31372744c3611",
+        "description": "ci: disable sona devices, all devices are offline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0867f48117dc2c18b1ae689235cb1f60b237600",
+        "description": "freedreno/afuc: Add initial support for a750",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04af4cbfea7a226793c5ac145b41d6a3bd497ba5",
+        "description": "freedreno/afuc: Add a7xx new-style branch instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c0ba24c70a482daf1d02445d8f62c0bbef9cac0",
+        "description": "freedreno/afuc: Switch to using the GPU ID in the firmware",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9840607f4b7617fd0fd229f579348dc90bd7aa96",
+        "description": "radv: rework and add a helper for hashing a compute pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05cd85afc67105e455de05a7c610c718da1201ae",
+        "description": "radv: add a helper for hashing pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6cb3b3b9393b5550d5ae0b88fac56a487bdc854",
+        "description": "radv/rt: remove dead code about intersection shaders in radv_pipeline_get_shader_key()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7cc604ed1b5c7f9c06811458ddf0ac0f33412304",
+        "description": "anv: Fix typo in DestinationAlphaBlendFactor value",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f4662cc4ed0c5b87479eb71e53a1320ab1b414b",
+        "description": "radv: move alu",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9a8ab0e0148ce485eaa0aa6d9b4944b90c808b3",
+        "description": "radv: sink alu",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8479c3bddb8c1dc43c33ea1437afc05e5aab3353",
+        "description": "radeonsi/vpe: add support for p010",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d330676c2264741cce82e495f74100cab61410a4",
+        "description": "etnaviv: Remove offline shader compiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fce9a31ba0fef1c72c4f6a5a3974af28e88ce410",
+        "description": "frontends/vdpau: Support creating VDP_CHROMA_TYPE_420_16 surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b17cf67895688648f757f18db60880d62bce6601",
+        "description": "frontends/vdpau: Fix cdef strengths and lr_unit_shift in AV1 decode",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "f9358cb1058ed5c15ca7690a5e8ba5926f73713b",
+        "notes": null
+    },
+    {
+        "sha": "33785a2ab12861e0c53a668ee2ff2b8970da341f",
+        "description": "svga/ci: re-enable vmware farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e502542acfa6c6ed17231c3201c1a99c61f9b62",
+        "description": "vulkan/runtime: Check correct callback list for binding report.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "34e8e5d76fc1e4474c15ad78067a53db27684ab4",
+        "notes": null
+    },
+    {
+        "sha": "66066650c968769669040e85beeff412ffedb7e0",
+        "description": "zink: if AcquireNextImageKHR fails with VK_NOT_READY or VK_TIMEOUT retry",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d1cac5ed0566ed02f1a522cc690ab5cda1880ec0",
+        "notes": null
+    },
+    {
+        "sha": "a5a2bd29698ce875d1c101e36f798dfa32e93c11",
+        "description": "lavapipe: don't clamp index buffer size for null index buffer draws",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fef9ad6f66c0967a291e0ea612b6e5e0c0d87f16",
+        "description": "intel/dev: update DG2 device names",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "98f3d072b428f93d799d17ab4e56f963206c9a2f",
+        "notes": null
+    },
+    {
+        "sha": "a02d8c811d2fc084e4a212b8fba847451040bc29",
+        "description": "intel/dev: update DG2 device names",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "c74a578c54e1672634c4d8e4ff094812190dd1b9",
+        "notes": null
+    },
+    {
+        "sha": "8d5072bb7fc61c5e14b6e32894bede660f17a36d",
+        "description": "radv: fix missing unbind report when a buffer is destroyed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50060072a7013f48a560599bd0c9f103ab747220",
+        "description": "radv: fix missing unbind report when an image is destroyed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec55364f9b84114f72bf82c093a25d56905fe7e7",
+        "description": "radv: add a helper to set image bindings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91c48d8f43725a7887d2074270c57ca6bcd06466",
+        "description": "radv/rmv: fix image binds logging for disjoint images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04c9369c559be7cd18508a7965cb3e3cbe25f9b9",
+        "description": "radv: fix addr binding report for disjoint image binds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea84b50e4e56d7a8cd1997f2267975ef49569adc",
+        "description": "radv: fix missing addr binding report for WSI image binds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8626844a002c0f6a449e753f8e1cafd189b159e4",
+        "description": "radv/rmv: fix missing image bind logging for WSI images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f783ca5926c7241b258dccc4a8bd5b79db9e7c8b",
+        "description": "ci: Add VK_DRIVER_FILES passthrough from jobs to tests",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "09e5b3da7659083f655f975e349f0569e2b37d9e",
+        "notes": null
+    },
+    {
+        "sha": "e16849a0d3ba97aea57346f28c045030ffc73a78",
+        "description": "ci: Change propagated variables into an array",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03483ecb116c96196b93c15ff8ef873ba601b798",
+        "description": "radv: Destroy leaf_updateable_pipeline",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "217072d25f4e5fa2414f0c3f4203c2faf3c8a807",
+        "notes": null
+    },
+    {
+        "sha": "702f40f415bf42b7d42578f5bfdd318b9b326f9c",
+        "description": "aco: add ra test for hi v_interp_p2_f16",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2cb9c57a28c15adeb13955257275352fd148c93",
+        "description": "aco: use v_interp_p2_f16 opsel",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d15ca421c45bfe0122aa2b622d6fb195bbde6289",
+        "description": "aco/gfx9: all non legacy opsel instructions only write 16bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18706947e859c9989489020c5d1f4e1e79a7b2e5",
+        "description": "aco/tests: add assembler tests for interp high_16bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b5016a537df0325350f27a3c0af286d5c52099b",
+        "description": "aco: support high_16bits FS IO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af199c6949c81b6b9b41deafc09bbf50bf1e278b",
+        "description": "aco: swap opsel and wait_exp for vinterp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81a334a594a314c9f1f35e41b26cca66a44c3f80",
+        "description": "aco/assembler: add vintrp high_16bit support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "893ee883fe7f40383ac546452b895d70a0e76971",
+        "description": "aco: use v1 definition for v_interp_p1lv_f16",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1647e098e94d6aab0b4c454ccdd5300afd1d0079",
+        "notes": null
+    },
+    {
+        "sha": "2526d1020beddc987e92c3711e13fb4fbf2b7fe3",
+        "description": "radv/rt: stop passing pCreateInfo to radv_ray_tracing_pipeline_cache_search()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5db1ce3733799e7e0b85318782595a9701e100bb",
+        "description": "radv/rt: handle creation feedback like graphics/compute pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c73e5e08e02bc6aead9e4c26be497dcb1d7b867d",
+        "description": "radv/rt: constify device in radv_init_rt_stage_hashes()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7bb437f3d65bd1f40b692d5b77380ad56058b9f5",
+        "description": "radv: stop using a graphics pipeline for generating the graphics key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b05570d6c7a3bdd91ad6eba02d59a4cefbd6cd9",
+        "description": "radv: add skip_shaders_cache also for compute/rt pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6d9772010774bad37d1d6f2bf0841404b5b5227",
+        "description": "radv: determine if the cache is disabled at device creation time",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0413729bc39d3c39e875fd7683d8f3daa2674ad3",
+        "description": "intel/compiler: add assert for Wa_22017182272",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d4c23991a4cfa2cdc90315c736bf3f70a5f0238",
+        "description": "intel/blorp: remove unused blorp batch flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c603dee104b89c8ca4917efc0ad92265541dd43c",
+        "description": "venus: use STACK_ARRAY to simplify descriptor set update and push",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1521415092301937bf27c870a654f4f98d42890d",
+        "description": "venus: refactor descriptor set update and push",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "563a61878cb8341f381b0b758a220ab256f0a4ee",
+        "description": "venus: drop vn_should_sanitize_descriptor_set_writes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21dee4d463cee507f6ce1cb0064b2d6735fe47f9",
+        "description": "venus: misc set alloc and cleanup refactors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e488b2f85e8e5617bc0a51991653bb4d6d599069",
+        "description": "venus: optimize mutable state restore",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "799ac5d77be1e5b27bc2f8b37aaa19ac3cc35a7b",
+        "description": "venus: set alloc to skip earlier for reserved and invalid bindings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f47d43eee420e131b002aa6cfaa3d68bdf4107c",
+        "description": "venus: move async_set_allocation check outside helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d5c046c808043aa54661ee79dcca4ceaecb9075",
+        "description": "venus: rely on enum vn_descriptor_type for internal trackings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c1cb65949933a05eedb2eacc15cd893ecaef8aa",
+        "description": "d3d12: Include <shlobj.h> with lowercase name",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "05b66efb43b8ae10af56f5c2cda386383d808009",
+        "notes": null
+    },
+    {
+        "sha": "1fb74672a91b28cc62f2bcb881047135f0258a8c",
+        "description": "nak: Use undef for unset FSOut components",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fdfccfa8fa2c7bea8c72a5a5f2a1a488bb0bd40d",
+        "description": "nak: Set fewer bits in writes_color",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "078fe5454e97d073feb18bcdcf7ed1874e8b4835",
+        "description": "nak: Fix ldg/stg/atomg encoding to use globalmem",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b4bf44a574ab12972ab6836851d9ab3fc5bfd7f9",
+        "description": "ci/lp: Remove ext buffer YUV tests from fails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58b4bf04e44cff1b7e7e212528808797f38a865f",
+        "description": "lp: Wrap udmabuf usage in HAVE_LIBDRM ifdef",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18e6bb322ebb6022da7186f3b8a3170cd632b83a",
+        "description": "radv: fix 2d/3d image copy on compute queue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fdffa675f9979a11cdd0b9fbd23f9da02ed816d8",
+        "description": "docs: mark VK_KHR_maintenance6 as DONE for RADV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c12ac5f7c503bb2a9d6794ac5de54e2716fcd51",
+        "description": "panfrost: fix polygon offset calculation for floating point Z",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54ca0b3b218aae7d7cda403ff8e4e87a0edb9d39",
+        "description": "d3d12/ci: Add vainfo with appverifier CI check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5028a9ede3f6a24e9991d5a9cec3fe4a7bfd1f67",
+        "description": "ci/etnaviv: Do not skip tex-miplevel piglits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85a8cc14c0cd23f1c6f64f797c7683c8a99dde5a",
+        "description": "tu/query: improve CP_EVENT_WRITE7::ZPASS_DONE usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1df5ab25625eb5b91d87a870baf6117621c6d511",
+        "description": "tu: RB_SAMPLE_COUNT_ADDR is also used on a7xx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2613ba0fb9d7d63a188af7bd49f7b842da292a2",
+        "description": "tu/autotune: use SAMPLE_COUNT_END_OFFSET when writing the ending sample count",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85dd83aa46061f7f0762ba7d01db14601eedcc2f",
+        "description": "anv: only check patch_control_points changes in runtime flush",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2bcbcd24fd959415f9a0713fab155fd2b3f78bd",
+        "description": "r600: fix typos",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd3d1253433d02ea3ae40437c8d4b958ef902763",
+        "description": "r600: add license information to the sfn_shader_gs.h",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "79ca456b4837b3bc21cf9ef3c03c505c4b4909f6",
+        "notes": null
+    },
+    {
+        "sha": "722e5bf46f7850ebdcf3143d197aa71d40486058",
+        "description": "r600: add license info to the r600_opcodes.h",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a3a94554f5a12f0626d9712ddcdc81b1e21d36c2",
+        "notes": null
+    },
+    {
+        "sha": "0020dd85ee110ca82f943ea69970c25018b89735",
+        "description": "r600: add license header to r600_formats.h",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "82114ac02a2d5a764ce69711fc0a71f559ee9137",
+        "notes": null
+    },
+    {
+        "sha": "fb8cf56b756331487dcc672060a69ac4f14a3281",
+        "description": "r600: update licensing to SPDX header",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c423f48204ee6caa8c82fb24df9f30f2a252153c",
+        "description": "frontend/nine: fix typos",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6468f6547cd97c45569cf3b221f7178181298a6",
+        "description": "frontend/nine: Reset should EndScene",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6044cf85756b02d8c752215f6b4424be260ebd8",
+        "description": "frontend/nine: Fix destruction race",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b4a14c7ebf288d876c821e0da2e877002c3180c6",
+        "description": "frontend/nine: Fix missing light flag check",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d3cec6cdf1de14ae3b16d0a5084b0af0088e8ff1",
+        "description": "frontend/nine: Fix programmable vs check",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9063d554f34268e6c80b77c59a3155e7a916304c",
+        "description": "frontend/nine: Fix ff ps key",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "750b2af4d9eb7a175355d1769f913b8bd690fe29",
+        "description": "lavapipe: Implement VK_KHR_ray_tracing_position_fetch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cede12911963393c1edddc78c1058aeb58a24bbe",
+        "description": "lavapipe: Implement VK_EXT_pipeline_library_group_handles",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f729d9e2d33ee4cd9c8c07fef2d77dcfbe63dff",
+        "description": "lavapipe: Implement KHR_ray_tracing_maintenance1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d99e95e033eccfece156e8715a1e33daca10160e",
+        "description": "lavapipe: Implement VK_KHR_ray_tracing_pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b71c6d0d1fbffd31c30209a2382c9724b322f08",
+        "description": "lavapipe: Fix a memory leak in lvp_push_internal_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73259c9ec40ae67aa244cde4367a63a66b47b675",
+        "description": "lavapipe: Add an api_stage parameter to update_pcbuf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd8fd2d7915bef94ac4da02223844fc4b8ed2c3f",
+        "description": "lavapipe: Inline fill_ubo0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9482d8cc61040622b5cfe9573da4af75eebb133e",
+        "description": "lavapipe: Use the pipeline type in get_pcbuf_size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e0b8334ec108dd42cca1a6ab1d8fe8a580ead32",
+        "description": "lavapipe: Pass lvp_ray_flags into lvp_aabb_intersection_cb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdab90d12056b05a4cd1c86f3e4692ebfab0684f",
+        "description": "lavapipe: Add more ray tracing helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35ad2e37d9fe69e8d7355f058299f3ec19064532",
+        "description": "lavapipe: Remove unused ray tracing variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5423a479546f74f8578b3d4ef555f6e21633f805",
+        "description": "lavapipe: Defer binding compute state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a738ae483861ed43945a780d3b82782a6a34843a",
+        "description": "lavapipe: Lower mem_constant variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ff444b595a5a0859ebcee2a4c42bbd125e77c54",
+        "description": "lavapipe: Make lvp_create_pipeline_nir non-static",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a718e0adf4f1b86f8902e157e88ddf4abc51c1e",
+        "description": "lavapipe: Make lvp_shader_init non-static",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d43b8c46ed23498ecb6397d354bafab587c84a3",
+        "description": "lavapipe: Add lvp_spirv_to_nir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04af9b3ac2e706b892ff366987a61e13ed1f110f",
+        "description": "llvmpipe: Fix function call handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85e840786c6ed0cf867fce4470d9975f9e942eef",
+        "description": "nir: Add lavapipe ray tracing intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "edc8e011ebf66657c3704a77e6d779f7217daa9e",
+        "description": "nir/serialize: Encode data for temporaries",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ff8659f41d2b828596cbd2287e84d3a40b8a420",
+        "description": "nir/print: Fix printing booleans with bit_size>1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27dba224d329df47706c77de36d814e3ae63304a",
+        "description": "driconf: add a workaround for Joe Danger",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2abb72f512c5f260082d0ba0284e3cf56f1eb1f2",
+        "description": "driconf: add a workaround for Joe Danger 2",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd189dbd772ff9c25741b47a22f4d2828eeb15f9",
+        "description": "glsl: allow out arrays in #110 with allow_glsl_120_subset_in_110",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b383ca810bb853f11c127d9e1d284dc4dcb0992",
+        "description": "nil: Enforce units via Rust types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3b33de33c9107cc2c9970cf92af4cfd7508ea34",
+        "description": "nil: Take a format in el_to_B()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a075785ac48c5c5aa2637e596280aa1bbd0df39",
+        "description": "nil: Drop the nil_extent/offset4d() helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc0de7a2cf71d50cd2e777385082ac6cab1a1e71",
+        "description": "nil: Add Extent/Offset4D::new() helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f65ecac2145ec01c04a7d9681c2d3543c3f3078",
+        "description": "ir3: Use divergence analysis for (jp) and physical CFG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b349dc5c749aee4a47b928a23ea105eaed64aa6c",
+        "description": "ir3: Remove loop shared copy check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ed567fea16d0f15c1b112b65064db0c39c60fcc",
+        "description": "ir3: Run divergence analysis at the end",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "266adc3e11a0545e74152cad42c279d7304a8414",
+        "description": "ir3: Allow single-predecessor phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42ddbf4ebeb7b24f32f4d6cb64f76ec0600c5270",
+        "description": "nir/divergence_analysis: Fix load_view_index divergence in VS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "223e3727d54e6a22aa4f857bbc8cdccd7200b3db",
+        "description": "nir/divergence_analysis: Add uniform_load_tears option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "291e6d2940cf39cda94ed9ffead9c87a7ac49783",
+        "description": "nir/divergence_analysis: Add ir3-specific intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf7e1f3817d473f97427f7cf8b910b913c986227",
+        "description": "anv, iris: add missing CS_STALL bit for GPGPU texture invalidation",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "397e728ef4f1247c0c2d11bf8516763b2a3088ff",
+        "notes": null
+    },
+    {
+        "sha": "955444e0686a551500a3bb22c8a081c8ec84ac22",
+        "description": "svga: Fix instanced draw detection",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ccb4ea5a43e89fcc93fff98c881639223f1538e5",
+        "notes": null
+    },
+    {
+        "sha": "96479794a5d65f57b100e3756269e500cf65fbef",
+        "description": "nir/lower_vec_to_regs: always set cursor before inserting decl_reg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc90d4eed9f9c995171078ab76fb6462a9ff0404",
+        "description": "nil: Make the Rust library the primary build target",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "571b77fee76ccc538ca309565bbc03953088a91f",
+        "description": "nil: Delete unused USAGE bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5577128c8315dbdca3cecbec9e06118025a1d069",
+        "description": "nil: Rewrite the TIC code in Rust",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5b7dd6ce57f7a72c095c1898094c3f900c22d96",
+        "description": "nak/bitview: Add a SetField<f32> implementation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "426553d61d164a04ecf540d933f72e16dcbf9e33",
+        "description": "nil: Re-implement nil_image in Rust",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fdcd217a46da5ba1365900c0f6f1e16db33ec49",
+        "description": "nil: Rename nil_tiling::gob_height_8 to gob_height_is_8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c13e7b01f995c9cb8f8dc7fabe018733c7edae0c",
+        "description": "nvk: Stop using nvk_extent4d short names",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1713b02da728c7b44f26ad4f568c204647e14a89",
+        "description": "nil: Rewrite nil_format in rust",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "303dc1221477d3dbdfb6a5f95d6972a1ed2c2ee6",
+        "description": "nil: Add the start of a Rust library",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "299f32736a9c8489e466d606ef1bfd93de04e0b5",
+        "description": "nil: Move to a single header file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cdaa8e67e3c79d13feb4207e84018572edb095ca",
+        "description": "nil: Move nil_tic_format to nil_format_table.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dde95fc039da8bc31563d6d85bfacd97be4ba98c",
+        "description": "meson,ci: Add the paste crate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "923a0a727bfd59adf20fcd41ffb56cdb6d5ae64a",
+        "description": "ci: Add cbindgen to the build images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "640d14969ee35c294d9238330a69ba4abaab74c3",
+        "description": "nouveau/headers: Add Rust bindings for texture headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "56aefac615d4375a612ef9ec713ce5b0edd9057a",
+        "description": "nouveau/headers: Add initial Rust bindings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53bc79561689d8cf045061ba972a9e5099aa750f",
+        "description": "nouveau: Use hyphenated arguments to class_parser.py",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d2008461dc232a69496afe21ea839fcaea491ea",
+        "description": "nouveau: Move .rustfmt.toml from NAK to src/nouveau/",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f387c473651be9156e7eb2746f12a6fd57cfdf2f",
+        "description": "ci: uprev vkd3d-proton to c3b385606a93baed42482d822805e0d9c2f3f603",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f2d5ed75c4c97cfd4923f634be7a156f45d8316",
+        "description": "aco: assume no unreachable blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "306a72db1fdea15b8f156feb65016c5abd47cbf6",
+        "description": "aco/tests: add control flow tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae63d967d7f64b4546a702e083d8bcb1dcafcb20",
+        "description": "aco/tests: add isel test helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "543ca160a5d2ede99de58ac3e48d25b82b85878d",
+        "description": "nir,aco: add test intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0a25af1d4ed47e6ce67fafd19f1ea127fe217f23",
+        "description": "aco: save/reset/combine has_divergent_continue in uniform branches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46c734ff02b93a361b98f353eabf9c9f3ef26223",
+        "description": "aco: ensure loop exits exist in NIR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "842191e9ba65981918f5e44742a3d6d0aedba836",
+        "description": "aco: remove unreachable merge blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "863718d62e2ebd9ac32696e4386063770703e246",
+        "description": "nir: add nir_remove_after_cf_node helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0653370d0ea7d6c72cd419451debed52e09653d",
+        "description": "vulkan: don't zero-initialize STACK_ARRAY()'s stack array",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "856db21acd8232f0d6ba825e5ef583f4de49b60b",
+        "description": "Revert \"ci: disable Collabora's farm due to maintance\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fe53d85273e65794d20b783c7c2a93676f35e818",
+        "notes": null
+    },
+    {
+        "sha": "34b6ae96c08d2fd667f04cdfe1b029a26cad562f",
+        "description": "etnaviv: use correct blit box sizes when copying resource",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2964812aacb5e88713572753d911068be0b5d3de",
+        "description": "etnaviv: rs: take src dimensions into account when increasing height alignment",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "797454edfcc4d2a6d0c21db451e9a0ea6e0a8023",
+        "notes": null
+    },
+    {
+        "sha": "7a69d78ba2ae43dc998c43934b9b4ccdc1201c30",
+        "description": "aco: use SPDX-License-Identifier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd68c39f65f9166cde3f76ff2d5204fcc3bf6bd1",
+        "description": "mr-label-maker: be explicit about the various CI files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2f3835d00c731c20fa0128e43ff57083e1ba20f",
+        "description": "mr-label-maker: include */gitlab-ci-inc.yml in GitLab CI changes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2dd321963f1a5dc21c3b9fc96a273c0b2159198d",
+        "description": "isl: set NullPageCoherencyEnable for depth/stencil sparse surfaces",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74955dbed74f15d96529195fcd6560b70c6b3cd8",
+        "description": "radv: enable VK_EXT_shader_object by default",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6bf80841a81abe2d8ac1658fc7b14923dad668f7",
+        "description": "panfrost: add tiler-heap driconfs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d55f85491c5039d22cbfa903f1a95571e0a61851",
+        "description": "panfrost: silence compiler warning",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87fde606cf12e1d290c06a7814e2a7d8c8cb1495",
+        "description": "radv: use SPDX-License-Identifier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3d30d9e65b70475e27efb31ba210f91323b6b95",
+        "description": "anv: mark descriptors & pipeline dirty after blorp compute",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "37fca614b8642b633b94b829f7ca8fd4872a9f76",
+        "notes": null
+    },
+    {
+        "sha": "fe53d85273e65794d20b783c7c2a93676f35e818",
+        "description": "ci: disable Collabora's farm due to maintance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2bd3674679daadbdfbf511a091b33eaa36c961c1",
+        "description": "anv/video: Fix to set correct offset and size for parsing h265 slice header.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "8d519eb5f5947800279e4c02bf7aa79b0b65cd17",
+        "notes": null
+    },
+    {
+        "sha": "e808a1ead42772ddc71fa4359aef890f119c9229",
+        "description": "nvk: Early-out impossible descriptor allocations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aac2a31b3d3d4bd2aefdc10cb50a8d8b2e2ab4bf",
+        "description": "vulkan: Add a bunch of -Wpadded errors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ea591d372dfff11dd3eeb05513e0cddfdce9134",
+        "description": "nvk: Add a bunch of -Wpadded errors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "987cbaee2a4a6fdcd2f152816a616f4e8d29c60e",
+        "description": "nvk: Add a _pad field to nvk_fs_key",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ae171458827bb8fceb232b3a13f61920e87a0d3a",
+        "notes": null
+    },
+    {
+        "sha": "0cb852050d668c6f5d9dbb8b35e970d23ad6bd9a",
+        "description": "gallium: handle copy_image of depth textures",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5027b5aa28fb9395b1acff57336d2862753bba17",
+        "notes": null
+    },
+    {
+        "sha": "d5aefb7a16dfd4e838bbfa620df013c6a4d06983",
+        "description": "meson: auto-enable glvnd when libglvnd is installed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f39b8154c1b4abc2691e3c9d6545f16370fbeeb4",
+        "description": "ci: explicitly disable glvnd to avoid regression when making it auto",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f25b84b2460524d375424a81b42faa4d99c8e60",
+        "description": "meson: turn `glvnd` option into a feature",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a4a16e9e8846c7710227b8075ffcf166069e9ff",
+        "description": "meson: regroup glvnd lines to get an easier-to-review diff in the next commit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6392c06c07adc1fd2d31ae8f5ce28000f32157b",
+        "description": "gallium/dri: reuse existing meson variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe36cf6cad9b226dff993a8f1f8f0bf451f095c5",
+        "description": "anv: add missing data flush out of L3 for transform feedback writes",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f60956d002909e30bd96f0e62c5789f6be21c06a",
+        "description": "glsl: move check_explicit_uniform_locations() to NIR linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a5ae739eab6c397ec96e553f63588b99bee2a02",
+        "description": "glsl: move link_assign_subroutine_types() to the nir linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "baf13bff29bd26bfd15289b56cd7fbb46f0b26d0",
+        "description": "nir: add subroutine fields to nir_function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ea15ded2fce12012f118c0114192decb7b1e837",
+        "description": "glsl: switch verify_subroutine_associated_funcs() to nir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a78e9a7e8ba8adfd31d26e260207a75d0f85224",
+        "description": "glsl: move some linking calls to gl_nir_link_glsl()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dbaa90200ce40f7c74d2e9d1dd6690a4010344f3",
+        "description": "glsl: remove now unused glsl ir block validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07078d4b8ecb6d340ea33ef6647873b9861ab52a",
+        "description": "glsl: remove now unused resize_tes_inputs()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2066d468510bc220256cbc8ea89d3030dfaa94e",
+        "description": "glsl: call new nir resize_tes_inputs() pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1c11d957a16024dc4abde9ba1a6406585ce5efe",
+        "description": "glsl: switch to NIR block validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aea1265470613f23419757dd769a183a61030d9b",
+        "description": "glsl: add nir implemenation of block validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20978004a7ad1d469635c0d7b0988e8084978106",
+        "description": "glsl: don't remove redefined per vertex block",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c46827d52a39cf79291813aa495cef958b879ca6",
+        "description": "nir: add variable field from_ssbo_unsized_array",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ab801a1a274219ca4bb615e71438c15edaab66df",
+        "description": "glsl: add resize_tes_inputs() to the nir linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a18e06f694da45d9457bbbf05fed2a19ad76c408",
+        "description": "nir: add implicit_sized_array data field",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f24e6a5062ad88cc8b77fd39cd0c131484c681bc",
+        "description": "nir: add max_array_access data field",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "acbf3ad1fbace42f395a49586f49a7f1c12480ee",
+        "description": "glsl: Use a stable attr sort for VS in / FS out",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a7e5760178065b6691794d9d2e01d5957b9a772",
+        "description": "intel/fs: fixup instruction scheduling last grf write tracking",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "d33aff783d9fcf60009f2979f697939093ef701d",
+        "notes": null
+    },
+    {
+        "sha": "d59612f5e5ddd4d557a78341d73719e25d47329b",
+        "description": "intel/fs: printout a couple of more late compile steps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "012c696561524d8bcce8ef85dd3075c73af20337",
+        "description": "zink/ntv: pull result out of cases and use a common store_def",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa581c70204ba5bf8d23103cef0f699bc44dfef2",
+        "description": "zink/ntv: extract emit_tex_readop as function that reads texture pixel data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13f8a462c5e0a8c83163b6bbda27b92821e8202d",
+        "description": "zink/ntv: extract picking the image to load from",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2678f7a554f978818dd80d1f0a14dac667ae4ab1",
+        "description": "zink/ntv: replace if-chain with switch in emit_tex",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cadbf720767a1fc8de6246a65bec72ec0e77f559",
+        "description": "zink/ntv: Extract move_tex:proj_into_coord",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1850cd9a82fff74582531b8e7a1696c2a4a44e74",
+        "description": "zink/ntv: extract get_texop_dest_type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94bef5a182f1c6b44b59876f27c0ee519a0768a3",
+        "description": "zink/ntv: extract get_texture_load",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f1a4624f841bfc29caf069d2e081492ffb27100",
+        "description": "zink/ntv: simplify evaluation of sampled_type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c5193368b4002896eee73dbf7d0256ffd131347",
+        "description": "zink/ntv: extract find_sampler_and_texture_index",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cca3f1de56ad741d4ac37f3a1bbb17e2a6a305ab",
+        "description": "zink/ntv: use new struct to pass texture parameters",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f19d22ed7f2d15da84c47115fd91ee00bd812b23",
+        "description": "zink/ntv: extract get_tex_srcs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "881b2b11926564f5ce1a77fffabab73b750ed4a4",
+        "description": "zink/ntv: introduce structure using the source params",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b69cbb80a744a5e5b685d5a765cb5f0f38cebcb",
+        "description": "ci/amd: drop old PIGLIT_REPLAY_DESCRIPTION_FILE surpassed by PIGLIT_TRACES_FILE",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "16af090908e8eb4fff552151dbb130120e11c1f9",
+        "notes": null
+    },
+    {
+        "sha": "9c104d21587150d0ca41c713621d2b4d230c160e",
+        "description": "ci/amd: meld radv-traces into radv-raven-traces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38c5a722c20a3a81e8b4316ffb32297f0a0a17fa",
+        "description": "microsoft/compiler: set compact_arrays in compiler options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "695cde484e6e096adac9540518e4529580dd2d52",
+        "description": "zink: set compact_arrays in compiler options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9d366085c4b926a49b6845aa1eba969cc819adf",
+        "description": "nir/gather_info: fix gathering for compact arrayed builtins",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "843614f45a6eb1b2e1e233a3d041a154de2b401e",
+        "description": "nir: add compact_arrays to nir_shader_compiler_options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e2c3a70d3a2859a320cc8005c5a3da9de6098c8",
+        "description": "ci: add nightly full run of lavapipe",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5650107c288b6956bd7deca487cdd93c56a15cdb",
+        "description": "ci: add nightly full run of llvmpipe",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "581f60def165f1d9dfabdaa76a7810ba0c444e20",
+        "description": "ci/lavapipe: skip test that sometimes times out",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69023c461f47ba3d7f407cd96cd812f51b16b9cf",
+        "description": "ci/lavapipe: fix out of date fails list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "60977b2efbb2d9c490fb1f3de4862b4f5afa52fd",
+        "description": "ci/llvmpipe: fix out of date fails list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "207f45e098a62ece5172d5a1cc325ee19ec0a07c",
+        "description": "ci/llvmpipe: make sure manual jobs don't auto-retry",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ab6118361b6831e96bb9ffd9c9ed233134a33c92",
+        "description": "nvk: Allow various alu op to be vectorized for 2xfp16",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "001540bad2e326040921615a079744e4cc2cdee3",
+        "description": "nvk: Advertise shaderFloat16",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "567cae69c3efd0070e3b9b8444dc8a24f0f83838",
+        "description": "nak: Add 16-bits float operations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b2ce802b7b24d8d410bf58aa666898c2a70c0fa",
+        "description": "nak: Improve copy propagation pass to handle F16",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bad23ddb4849908a648d503a615a5a9b15e9768a",
+        "description": "nak: Add F16 and F16v2 sources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "791c2b604a48d07c545f496b6cfc201d990f6c9f",
+        "description": "nak: move folding logic to Src::fold_imm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02873c4745bbc2480cbccc3626509ee12ca92ad9",
+        "description": "nak: Support unaligned swizzles in 8/16 bits vec srcs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2ec0111b21667d1db9d6ceae295b033f044ed87",
+        "description": "venus/ci: Add patch for modifiers test to check import/export bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e84b6255d8ba07e82986dad00370385046c1997c",
+        "description": "docs: update lavapipe features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0507988f4199b2f4ced4839cb78e68bfe6e1e19d",
+        "description": "lavapipe: EXT_image_drm_format_modifier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6cb3c57930fb1807fa7e80083a24551b8d6e92b",
+        "description": "lavapipe: handle drm image imports",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd4f69a0fe495a2c584bf0e4040fc341c55d0e18",
+        "description": "lavapipe: check drm modifier info during image create",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97331d1ed41f8070b3b97e8e4f8ad176ea7103d0",
+        "description": "lavapipe: handle drm image format queries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a4290558dfc3ea4a5adba39058dc388f2f8ebda0",
+        "description": "lavapipe: include drm_fourcc.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18c345d84065aa26737040a0d5ac5104360fccf9",
+        "description": "lavapipe: rework mem handle type assert to handle dmabuf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6df7cf4cfc83a6929214551cee2c6a67e19ddb95",
+        "description": "lavapipe: EXT_queue_family_foreign",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b3d3239fc1194e77f21364bdc2b0c51d7e5318af",
+        "description": "llvmpipe: make it possible to import and bind unbacked resources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfd8c12406593e778c01fffa83fa8831f3d398f2",
+        "description": "winsys: add more stride members to winsys_handle",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "372745788454bd2252b5f7549c46376fef084742",
+        "description": "winsys: add WINSYS_HANDLE_TYPE_UNBACKED",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07f25aa785ba3f75b8ca71116b4d010b4df48959",
+        "description": "lavapipe: EXT_external_memory_dma_buf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1657de63c23914c7f09ab96aa461e80458d6594",
+        "description": "lavapipe: support VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb64f56b59a38d0382b8346642fcf86e031a44b6",
+        "description": "lavapipe: add a function for asserting external memory handle types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce3851d469755e0799a50bb0671adac364a57ac8",
+        "description": "llvmpipe: conditionally export PIPE_CAP_DMABUF",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "715b29d032bf13da70118e917ee86ae9bcca8086",
+        "description": "drisw: reuse kopper image extension vtable if modifiers/dmabuf is supported",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d74ea2c117fe96e527471e572336f931c3c77da1",
+        "description": "llvmpipe: Implement dmabuf handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e5c5d313bbf3ebbb7a0a6e5c3a49189cb9f3b4b",
+        "description": "gallium: Add dmabuf arg to memory fd allocation API",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4ae665f9336695ba3d22c3afb2552d48dd4a065",
+        "description": "winsys/drisw: implement dmabuf handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17abe3ecbd2f8135be55136015b86ade78d77143",
+        "description": "winsys/drisw: implement displaytarget_create_mapped",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73d75971abd343be0671201cb8569f4c0ae9a231",
+        "description": "winsys/null: implement displaytarget_create_mapped",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23206844eb94895d530fab66f501c3c0a659435d",
+        "description": "sw_winsys: add displaytarget_create_mapped",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e43fbdb11a6b200a143491c0e08a5f4304efba8",
+        "description": "drisw: reorder image extensions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b4e56ca273680775fc82819c0224e23ff7123d3",
+        "description": "llvmpipe: explicitly reject (most) yuv formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f97c2ec5190a15e32fe761c6b869f598493060d",
+        "description": "ntv: simplify increasing the number of dest componnets for sparse tex",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0aa6c4437ccfb00f012b1c11117dcfed0898da56",
+        "description": "ntv: pass def->index to store_def",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f73dc77cc7b1c0ef86f987581d97fde315c3015f",
+        "description": "ntv: remove store_ssa_def",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5415abe396446a5b08b107f9b7b75fa790b07f77",
+        "description": "ntv: remove store_def_raw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "77c004f7ca246386f5516bb00d92655771439614",
+        "description": "anv: Create protected engine context when i915 supports vm control",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "fd40134487c3f3ae2c0c108651041ff98bfea7da",
+        "notes": null
+    },
+    {
+        "sha": "f0a354a7a5d3811941f47894bf795e83b7b59ef4",
+        "description": "radv: Don't set driver locations for last pre-rasterization stage.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0dbf6e758211c255b55ba4c59c4402d8aca7403a",
+        "description": "radv: Don't set driver locations for FS outputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "450c8f159b7556f6f9898fc2859c5c5ff66ac977",
+        "description": "radv: Don't set driver locations for mesh shaders.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a554e44eae53063ec8a89389131e817a97e92244",
+        "description": "radv: Use NIR IO semantics for VS input location mapping.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "124202469ff2a30c0077fa7fba73f6319181fa71",
+        "description": "ac/nir/ngg: Rename confusing driver_location variable in mesh shader lowering.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "580baaf1e1cce619ddbe0a588a9178100432af06",
+        "description": "ac/nir/ngg: Use IO semantics for determining instance rate inputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11ced35e0a146d55b4ae3c1407dba5055da4bc7d",
+        "description": "ac/nir/ngg: Don't create dummy output variable for primitive ID.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14ba56718ffc85dfde8337e056bc936f39dc2114",
+        "description": "radv: make sure the heap budget is less than or equal to the heap size",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a29fda1ba06628adfb0dff9bd20c0faaea2e1ca5",
+        "description": "radv: move radv_printf_data to radv_printf.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9223b800869e8769a9dcbf5f759e0e4c60648db8",
+        "description": "radv: remove old comment in radv_cs.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64282704087cbb2f904000645533f4e00731d49e",
+        "description": "radv: move radv_queue_family_to_ring() to radv_queue.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e4f26827ca4b0c4b30dc56b356cc6be294fd530",
+        "description": "radv: move radv_get_user_sgpr() to radv_shader.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80683c220b21ea406bdbe45e35bf68abb5598365",
+        "description": "radv: make radv_get_vgt_index_size() static",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be8b8722f9532881ff34d9dd3f86f4c1520c5094",
+        "description": "radv: memset radv_pipeline_cache_object data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3c138b10f40c9225a6d00456620ba2bb1a72d98",
+        "description": "radv: optimize msad_4x8 to mqsad_4x8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5976bebed1f0e0a95e7f8b84181654c41cf7a8d",
+        "description": "amd: set has_shfr32=true",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35f9318ceee9e92ac447a561b35b3b20b41ee7bd",
+        "description": "ac/llvm: implement mqsad_4x8 and shfr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b301eae3673c5b5b0438aed2393e360db11cdca",
+        "description": "aco: implement mqsad_4x8 and shfr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08903bbe89ae5d6cab742b787a1f69b472ea803f",
+        "description": "nir: add mqsad_4x8, shfr and nir_opt_mqsad",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be93e38152248145a00a8a659b1e9cb58676c104",
+        "description": "aco/vn: remove instruction hash templates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea84b36592398a7dae5db60f4d88581028ae5ced",
+        "description": "anv: fix incorrect blorp dynamic state heap usage",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fe1baa64819f9e2d59b60ccec853610db21b9911",
+        "notes": null
+    },
+    {
+        "sha": "0624130933e609f41cd618fcff7b3100fc5c24cd",
+        "description": "zink: Remove ctx from zink_gfx_program",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0d680f54c0c58dda9e32bd07b6644bb9b7afa0e",
+        "description": "zink: Removed unused push_valid member",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a0f3b1aa59c6ce8ee90926c80fc5df11d0a3709",
+        "description": "zink: another fence that is better off as a batch state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d862cb00247113195b621f6f7d1350fbf072bab4",
+        "description": "zink: ctx->last_fence really wants to be a batch_state, so accomodate it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98f3d072b428f93d799d17ab4e56f963206c9a2f",
+        "description": "intel/dev: Add 0x56be and 0x56bf DG2 PCI IDs",
+        "nominated": true,
+        "nomination_type": 4,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b0f028c7ea21c84342b8a5b1a84fd1eb400fbfa",
+        "description": "anv: update protection fault property",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "794b0496e9467d27211d11fe7f783db3ce6a349a",
+        "notes": null
+    },
+    {
+        "sha": "d2e490dc4d201821253b39e38421b98687c27168",
+        "description": "anv: disable generated draws in protected command buffers",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "794b0496e9467d27211d11fe7f783db3ce6a349a",
+        "notes": null
+    },
+    {
+        "sha": "034a1cdb583bd3eb6b10bdb7702408528d0ff34f",
+        "description": "anv: disable protected content around surface state copies",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "794b0496e9467d27211d11fe7f783db3ce6a349a",
+        "notes": null
+    },
+    {
+        "sha": "27a37712279c6287615c24f3ea462a92d85b9bb8",
+        "description": "anv: pull surface state copies for secondary in one loop",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07bf480856536336186c3ec53f46e10b8754cfdb",
+        "description": "anv: fix protected memory allocations",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5f2c77a10a89de2ea53e7ab2e3de72b704f8c393",
+        "notes": null
+    },
+    {
+        "sha": "0e817ba548c56014c3707633c87b0ff50cf6d3ad",
+        "description": "intel/brw/xe2+: Implement Wa 22016140776",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50c7d25a9e8967cbd5a434d53ddddfbec9d30c93",
+        "description": "intel/dev/mesa_defs.json: Add LNL WA entries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c891a384e784266ccc825c116f1733278dadbca8",
+        "description": "dzn: Don't copy app indirect args if we don't need to",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db16dcf0f99b8e796157f4155f17dd4a330759c7",
+        "description": "dzn: Add a hash table of command signatures with non-default strides",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d7bd87aa27fdf51863d633651ab4775ab48efddf",
+        "description": "dzn: Rework indirect drawing keys for shaders and command signatures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ccf439629ff85825b9629aea6fc5cc74a52816eb",
+        "description": "dzn: Update pipeline cache params to take all options into account",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4de88025cc295a9e6751f15257261538b9681640",
+        "description": "dzn: Understand whether first-vertex and base-instance are needed for a pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbd4e5d8aaefd6d166d4e6d5e958ffea2870dc2f",
+        "description": "dzn: Query options21",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed465bf7387ef6b49b2cfafbdf39dd49ea04b931",
+        "description": "dzn: Delete dzn structs for indirect draw args and use D3D ones",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6c3d73700fc030ba99be886292ed2110e0836e2",
+        "description": "spirv2dxil: Output more specific metadata for whether draw sysvals are needed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30b1a6750c3b202919d4992ad2e14783bc1a27d3",
+        "description": "spirv2dxil: Support passing first vertex / base instance to DXIL backend",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "607720151f8bf9e8fcc483c7e007ad7b39a6fc58",
+        "description": "microsoft/compiler: Handle base vertex/instance sysvals as DXIL intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "349c4d84c03a6b6df088b62e5a9ab80a7def81eb",
+        "description": "ci/windows: Bump Agility SDK to 1.613.2 for ExecuteIndirect validation fix",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b67d3d90948e94811c0c1519cce943ed717296a",
+        "description": "intel/elk: Delete stray nir_opt_dce",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24cdbbdaa206100fa2ec78e3560769c3e211bcaa",
+        "description": "intel/brw: Delete stray nir_opt_dce",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "f76f4be301ef311e6be21486b6a3f5fd5e90240f",
+        "notes": null
+    },
+    {
+        "sha": "44fb57b82709a3ef653d5ee71d557f62d173ed05",
+        "description": "intel/elk: Don't call nir_opt_remove_phis before nir_convert_from_ssa",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6377e8fd299d167d9fda95fd1b26c871c5b1a5fa",
+        "description": "intel/brw: Don't call nir_opt_remove_phis before nir_convert_from_ssa",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "6dbb5f1e07b11be0cc6ac764bf1b51feaa7fa623",
+        "notes": null
+    },
+    {
+        "sha": "87101e7d83420a733f9d62b1926b158da921ea70",
+        "description": "intel/compiler: Ensure load_barycentric_at_sample and load_interpolated_input remain together",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "74a40cc4b6ed9440a0820c6f4a9cee296a8e191a",
+        "notes": null
+    },
+    {
+        "sha": "49217c2547a3866ebb0228bae0416d042ed49447",
+        "description": "ci: enable shader-db on lima",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69b911bc532d43a9213e75217872d332cc352141",
+        "description": "radv: remove radv_private.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "367cf70a2925e43b997041a27947a0f9cee9231c",
+        "description": "radv: move RADV_USE_WSI_PLATFORM define to radv_wsi.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28eefbadeb3975b2c7b0e3fe3a61e1f1ea9cb049",
+        "description": "radv: move CLOCK_MONOTONIC_RAW define to radv_physical_device.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8269c01cbb5c09380b1864d50983fc6821b2639",
+        "description": "radv: move RADV_API_VERSION to radv_instance.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e25882352bca56fd18ba4ebb48f82edc0bfb1000",
+        "description": "radv: move RADV_SUPPORT_CALIBRATED_TIMESTAMPS to radv_physical_device.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc1526eeacf011858f0f5b93e7f1ed9cf25af6e1",
+        "description": "radv: replace radv_is_aligned() by util_is_aligned()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81e3c46d065c1f2a8df20159f5c70f2b883926ea",
+        "description": "util: add util_is_aligned()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5cc3258533140997a61d7ddc65e50fe5b50e8acf",
+        "description": "radv: replace radv_float_to_{u,s}fixed() by util_{un}signed_fixed()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a27c5e9a897b2bb0e14a6a83e31700abc9c8d11",
+        "description": "radv: replace align_u32_npot() by ALIGN_NPOT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e75fdac533d582ca7e57eab5a3b6febc1583dd70",
+        "description": "radv: replace align_{u32,u64}() by align{64}()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba153fc06b83f140a54b21e1aebf3a724f116b78",
+        "description": "radv: replace radv_minify() by u_minify()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "799e99fe215f5af77c4544236fc0d3b4f78e17bd",
+        "description": "radv: rename remaining phys_dev occurrences to pdev",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b409936e975b7fdcdfe3afcb8ec98131a17432c6",
+        "description": "radv: add missing endif comment for some headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0388df3d089a5bf85bd8b9558f56f897e5b13743",
+        "description": "radv: replace RADV_FROM_HANDLE by VK_FROM_HANDLE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "67ac6e75c6d31e55ac537f1f4611d9099f3e9402",
+        "description": "radv: remove remaining forward declarations and comments in radv_private.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ade8f28a80720bbb119fbc276ee3330fff67836",
+        "description": "radv: remove pre-declarations needed for WSI entrypoints",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46515292a380db652dc250a400929c0c449f48be",
+        "description": "radv: remove unused radv_printflike()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05b66efb43b8ae10af56f5c2cda386383d808009",
+        "description": "d3d12: Add a debug flag for loading WinPixGpuCapturer.dll",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "116d0bf76be2bb970c933b4c36dc80a2c78531c4",
+        "description": "d3d12: Set fractional var masks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c21355260b060e540ec14265b6445aa26a429c5e",
+        "description": "microsoft/compiler: Add a fractional var mask for variable sorting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "760effefc6e1bf507293d31d99372960a453a91a",
+        "description": "d3d12: Don't compile useless variants during shader creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6928686df94a926617f7bf3277e4cddbf31b7e90",
+        "description": "d3d12: Remove variables instead of adding them for linking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dedbd6eea31b68de3b700209fff75a3fb598be38",
+        "description": "d3d12: Gather info less and before the final compilation steps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1e7d0598d280434cb448c591561313a8fb0e4f5",
+        "description": "d3d12: Add primitive ID sysval to input bitmask (for GS in)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c8d435373e3be99806b523e4bf51d56d2e87e634",
+        "description": "d3d12: Use TES inputs rather than VS outputs for TCS variant key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "580f801bacc81c87168994dacf788b67d4a7e864",
+        "description": "d3d12: Capture always_active_io in varying data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d0c77658c5ca628d16e4cde9591d61d6e32280c",
+        "description": "d3d12: Forward front-facing for passthrough GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d28a552e2a11f744d0a534f79b61c79d4e708c0d",
+        "description": "d3d12: Explicitly add tess factor vars to tess signatures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c3e96f25724f17c59643270dbf5fd3d38104b26",
+        "description": "d3d12: Fix var splitting pass writemasks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a01ac1aa72d1d15384cd37b1de223c0fc61ae1f",
+        "description": "d3d12: Minor logging improvements",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33735585a91e1d7afe8aa5058e22e0728be43bdc",
+        "description": "d3d12: Lower uniforms to UBO by nir options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e80cda05125863dc68465ac4f970c5c03eb0f0b1",
+        "description": "d3d12: Move some lowering passes to pre-variant",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9702ddccc2bc28f9acf0507ae4c919e3467bbac5",
+        "description": "microsoft/compiler: Don't duplicate work from gather_info in var sorting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed757b010ac6cf2c337f3f878bcb4bbedcacd1ef",
+        "description": "microsoft/compiler: Improve linking helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4a15a048b849f3fe3448735fff96459973c5291",
+        "description": "microsoft/compiler: Expect front-facing var as an input",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4180cf39f06acb439c591bad88fd9cfe5e0958a3",
+        "description": "microsoft/compiler: Simplify I/O component type enum handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "230bed221ea35be9dd8ffee10432c68b328b4058",
+        "description": "microsoft/compiler: Move kill-unused/undefined varying pass from spirv to common",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6b5514a5bee0cd8baaa43a276c2825e17932fee",
+        "description": "microsoft/compiler: When sorting variables, put unused variables last",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c37e9c1e293159990c5e5ebd88aadac431275274",
+        "description": "ir3-disasm: add option to disassemble hex number",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7eeb781c8bbc2ba84bc3a040d20e054cb3c2bfb4",
+        "description": "ir3-disasm: add options to specify GPU by chip ID or name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86468ab8aff79e434ce052634f768b7195116228",
+        "description": "ir3-disasm: remove unused #includes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9d2dd078810dad4582f3274be8880af5a0cbccf",
+        "description": "ir3-disasm: run clang-format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "56cda234599a68497cef7358da6c3abe1d0cde9e",
+        "description": "nir/dominance: fix comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0851c30d1616931501ab2c5ba0204f0710bd8d0f",
+        "description": "nir/texcoord_replace: fix scalarized io handling",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3d9a2e607e4b76bb5baadcf4182b9d61c1f3174",
+        "description": "nir/lower_point_size_mov: fix for lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0faeeb6347a335982f2abf147ac8bf1a70a2e85e",
+        "description": "nir/lower_point_size_mov: rework.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30415fe8353bae696de35e2fc0fc5b61e2c82ebf",
+        "description": "nir/lower_clip_disable: fix for lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb190a4e8bad9cf1b51bf412cb1808d0c8632794",
+        "description": "nir/lower_drawpixels: fix for lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c48f580a497d743647ea0dacb4487673b7236e14",
+        "description": "nir/lower_two_sided_color: rework for lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9af9446127cf1f0d0ca08cfbab93b14d502e87e8",
+        "description": "nir/lower_alpha_test: fix use with lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "842ac5059a9d1d5bec9cd43260d9476adbda112f",
+        "description": "nir/lower_flatshade: fix with lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "712bf98dd84fd7ff928314d0668304d16f741a09",
+        "description": "nir/lower_flatshade: break out location checking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "56d7dad19cf286ef43aa066e31a71e91954481dc",
+        "description": "nir/lower_clamp_color_outputs: fix use with lowered io",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "056fe1dc6a26dbbc1439c9eb270e33b961b9c48e",
+        "description": "glsl: set PSIZ bit in outputs_written when injecting a 1.0 psiz write",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f090f7186bba7aa9e1fc51366bafec849e81f351",
+        "description": "radv: rename si_cmd_buffer.c to radv_cs.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e133fb7c3b25bab224570bb4078b4b13b63fcb92",
+        "description": "radv: move code related to sample positions to radv_device.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ea12d6ace81afc57592a576d719fe4c54fbe5a3",
+        "description": "radv: move radv_emit_{compute,graphics}() to radv_queue.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5baa1c4c1c0a032d4df3358093c802e8f394a8f2",
+        "description": "radv: move radv_create_gfx_config() to radv_device.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d844d73fb43fd2de1c3316b3ee746a944f7db225",
+        "description": "radv: move radv_get_viewport_xform() to radv_pipeline_graphics.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa0ec3af884905b17476ba9434e3663824c0ff7c",
+        "description": "radv: merge radv_write_scissors() with radv_emit_scissor()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16b6b178899e0ca0e70b0531b1131958457d6b77",
+        "description": "radv: merge radv_write_guardband() with radv_emit_guardband_state()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb1f9da0a063a0f83ef262472dbcb2f32f9e9e52",
+        "description": "radv: move more cmd buffer related code to radv_cmd_buffer.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d5f4341085db88b2ef87098aa7996640e8bea98",
+        "description": "radv: move CP DMA related code to radv_cp_dma.c/h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b171bc2809e0bf824f59ff5560fff064711e2ae6",
+        "description": "radv: add radv_shader_info.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb73ccea561be1f386261a4d90593ba879331c11",
+        "description": "radv: add radv_android.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1d04cfeaae18283b66a89721ec3510236360ee0",
+        "description": "radv: add radv_nir_to_llvm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58cd24a63619d2b318da5397f2aa9055dc514845",
+        "description": "radv: move radv_queue_ring() to radv_queue.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f606efe62d0ff44994bda8039574a48f64f15788",
+        "description": "radv: move radv_get_tdr_timeout_for_ip() to radv_query.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a7afbfa13334b27045ab5603546080398f73edd",
+        "description": "radv: add radv_printf.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1adbf0e53f368aa4339bcc3f9446dc37747b062",
+        "description": "radv: add radv_cp_reg_shadowing.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "195383a5ec293ce595ddc880d3f6f59566594754",
+        "description": "radv: add radv_rmv.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e677b642bc5bd17ed3449ab7c402c905504639f2",
+        "description": "radv: add radv_cmd_buffer.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7196b9cc0b180d3f2a811e78f7ba95ae319d3eb5",
+        "description": "radv: add radv_spm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20611684619dede75a3dc4e8ccbcb88057e3aea3",
+        "description": "radv: add radv_shader_object.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1414a9799936e3557a13995d8559eaf7b9185ce",
+        "description": "radv: add radv_sqtt.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a313d5f82a5c65fd5f676c57c92f663546fb314b",
+        "description": "radv: Remove unused gfx_level from gfx10_emit_ge_pc_alloc.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d97c3bd064ca9b493990a1dbfd180764ab2ea60",
+        "description": "radv: Increase maximum allowed PS params for enabling NGG culling.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4464e6baff8ad3af5b979e6096d4f5ca3159377a",
+        "description": "radv: Slightly refactor the determination of max_ps_params.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dbfb96f08f82ab847163128868166f2a93e85f9e",
+        "description": "radv: Remove I/O variables after nir_lower_io.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b188561df589317b8dff570e3e1835405acad3ef",
+        "description": "radv: Use NIR IO semantics to determine FS input info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6686fda28e27565ff16c3f646899b8d9d05c428",
+        "description": "intel/isl: Use Tile64 to align images for CCS WA",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0921241866efb07db2886d16df2c7ea7534f576",
+        "description": "intel/isl: Enable a 64KB alignment WA for flat-CCS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d7bfa8051ec53907e1ec4cd48bfc135701ccabf8",
+        "description": "intel/isl: Remove a CCS_D check from gfx12+ code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8845f1e439bd0816216b39e75681692b8326ff11",
+        "description": "intel/isl: Remove inconsistency when encoding Tile64",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81d8c071aca4d953aa07f2e021e033aa2d501e6c",
+        "description": "intel/isl: Remove inconsistency when choosing Tile64",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8e48b561e5194f44f2cb2fe6ab3d53c51f96747",
+        "description": "mesa: reorder st context teardown",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "067bbf930175917d02ae132f7bb28ee8193dd413",
+        "description": "nvk: Delete dead descriptor code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f30ce2656901301957672d3e1bc7cf4d2c8e0a57",
+        "description": "nvk: Add a _pad field to nvk_cbuf",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f1c909edd5c9159609ab27e7b6a7374796cceab3",
+        "notes": null
+    },
+    {
+        "sha": "cfa955ed78bef56ba025a64468e8b841149fab18",
+        "description": "glx/egl: fix LIBGL_KOPPER_DISABLE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d3730fcd2d9042476ac21e805575d29bbb0ce970",
+        "description": "egl/x11: disable swapbufferswithdamage for zink without kopper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fe9681db1e5dd968d6853aeb9a9e2e8a8eb8cb9",
+        "description": "zink: assert that ntv interp handling isn't doing implicit component expansion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7509a09ecdf25c6fc28fac5bb2b3ff7a42330c8",
+        "description": "zink: fix add_derefs for partial interp loads of derefs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7deef8d7d2c69255d5ebb776bafec6e5efd71201",
+        "description": "zink: delete some maintenance5 psiz pruning",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24453579ad951b9f634b7052c5c1135733d8e481",
+        "description": "gallium: rework PIPE_CAP_POINT_SIZE_FIXED",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "201053bac14b695c0d8a688b051afcdb9bfd6c40",
+        "description": "d3d12: Fix d3d12_lower_triangle_strip if multiple vars are in a single location",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c17ef8c196e0262f28c4c3578638ad257515d9a9",
+        "description": "freedreno+virgl: Add missing driconf",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "850267ef998a4c13095a162d696fb936503b3b7c",
+        "notes": null
+    },
+    {
+        "sha": "6d17577b646f54a7b3e82b6b09a0de8c88192ba7",
+        "description": "freedreno/drm/virtio: Fix deadlock on exit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "145a5cd414aaf444110328af6d9fa8d5c057fa22",
+        "description": "ci: fix nightly build (v2)",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7c0b19a6071dc8fa0cd8ad3e90f11223fa876337",
+        "notes": null
+    },
+    {
+        "sha": "37be4bf1b757144a67da08b3ebcb5256fc611925",
+        "description": "mesa: clamp binary pointer in ShaderBinary if length==0",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e91c880364591f2f732d0b070e99c44ed9877a5",
+        "description": "venus: use STACK_ARRAY to simplify sync wait",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30824a118396d320500245fe3082b86120036bef",
+        "description": "venus: use STACK_ARRAY to simplify set layout creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bece3182963df829fc0973537fe136dc40d2a43d",
+        "description": "venus: use STACK_ARRAY to simplify physical device enumeration",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "630f4a5b928f75b9524b2ea217ef38449a0da294",
+        "description": "venus: use STACK_ARRAY to simplify render pass creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "36f639375b31f5af08fa079e7eede8c8122420ee",
+        "description": "venus: use STACK_ARRAY to simplify BindImageMemory2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f75ebfda7ef5c8b75c05be8794e2184b49f4c46",
+        "description": "venus: use STACK_ARRAY to simplify BindBufferMemory2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02985e37ed9c10e60424344b6300ee119126c160",
+        "description": "venus: use STACK_ARRAY to simplify modifier query",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3edd6b5554b9c1f29ec3413f105644f03c59a28",
+        "description": "venus: remove obsolete TODOs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "93421ef3d3c1778bbd468afe040b084af5c210f4",
+        "description": "venus: cleanup 2 TODOs from 1.3 support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e983c436045a9f7179299d7bd0e66613659110b",
+        "description": "ir3: fix finding uses of reloaded defs in predicates RA",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "21cd9b9557dc03dd8ffef4da541a4e62f0f7e32c",
+        "notes": null
+    },
+    {
+        "sha": "dbcbf6172677d46258530c70d582899551af2a98",
+        "description": "ir3: calculate SSA uses at the start of predicates RA",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "21cd9b9557dc03dd8ffef4da541a4e62f0f7e32c",
+        "notes": null
+    },
+    {
+        "sha": "22f64a1fe31f64f08e4ce48f66bb8408d16df2f3",
+        "description": "zink: print shaderdb info via debug message callback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57209a0c7ab79f333cb42c0e7fe21dfe9a719cec",
+        "description": "isl: allow CCS on single sampled TILE64 surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afb63443a0866f4ff94de7ee9c3ada285d0f6ec8",
+        "description": "intel/blorp: add fast clear rectangle dimensions for single sampled TILE64 CCS surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8670fd6ac4611ca29468830a8d59d99bbe872651",
+        "description": "iris: slow clear higher miplevels on single sampled 8bpp resources that have TILE64",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "772149b15ae59056364a880a7715aeb68631d3db",
+        "description": "nir/opt_varyings: handle load_input_vertex",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9b557f2e747a92011ee17269964da09dbc14d07",
+        "description": "aco/optimizer_postRA: Remove a check from SCC no-compare optimization.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b301e74ed324922263c44e18cb62ffc69d90b2b",
+        "description": "compiler,glsl: fix warning when -finstrument-functions is used",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5fa70730da1f70e880eae5b09171b3d1736fcd44",
+        "description": "radv: Use IO semantic location for shader output info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f23795e78cdc170884f65aaf7def48df754acefb",
+        "description": "radv: Use NIR IO semantics to determine VS input info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fd67c84da9f4b1163457176bc2792ec206220d1",
+        "description": "radv: Remove unused VS input usage mask.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ddecb3f0eeb72412269cdb0bae46dd7b3d600e3",
+        "description": "radv: Add helper to determine usage of VS prologs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5156d3097bc87fefd535929f4472d8a714a7feee",
+        "description": "radv: Add helper for determining per-attribute vertex buffer descriptors.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e04f66ae335c9d1167853b8bfb8285df147c1261",
+        "description": "radv: Use NIR IO semantics to determine GS output info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7276bea52d7af3c452611e6151f154f263041e78",
+        "description": "radv: Record PS input clip/cull mask instead of number.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbc8f5216a8b949fa3a6e2c506b883c9e9596f7e",
+        "description": "radv: Slightly refactor gather_intrinsic_store_output_info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d10e458df0d7e38a11d4bcf77bce7d3751804307",
+        "description": "radv: Extract gather_load_vs_input_info function.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e2eeab90dbaf4a4b7f230d1f69824c3c2df7167",
+        "description": "radv: Pass key structures to gather intrinsic info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c27877cff9f69cd8327e7e7892b69cb0fc7da416",
+        "description": "radv: Only add extra dword to LS-HS stride when there are LS outputs.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d116272689d95a3d2183d9a48b7f2f6c148ad7fb",
+        "notes": null
+    },
+    {
+        "sha": "ad7457fe20e37acd9031cba2537ad24859f6f07e",
+        "description": "panfrost: mark indirect compute buffer as read",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb1c3f7f5de6642fcd127724a0cea5643d39d7ee",
+        "description": "tu: Implement CCHE invalidation",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "95104707f189b2e1b06c855b563c1203b33da354",
+        "notes": null
+    },
+    {
+        "sha": "abe9bd38ff079cd1b08662c5c99c63e391d5c58d",
+        "description": "freedreno/a7xx: Add CP_CCHE_INVALIDATE",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "95104707f189b2e1b06c855b563c1203b33da354",
+        "notes": null
+    },
+    {
+        "sha": "a47a65c1c28e3aad5aeec86e34ea995e58cd731a",
+        "description": "intel/genxml/xe2: Update definition of INTERFACE_DESCRIPTOR_DATA",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f29b780e11ce4e6df899ccc19265f8e74d3e475",
+        "description": "intel/genxml/gfx125: Fix definition of INTERFACE_DESCRIPTOR_DATA::Thread group dispatch size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c00c685f842d86081a39c9bb89ec849b744319ca",
+        "description": "intel/genxml: Add more instdone registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f3dc31876d56340124e994c3bad7a76e35d4a15",
+        "description": "anv: Set STATE_COMPUTE_MODE mask bit when zeroing compute mode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba52fb0eca373bf9ee61e66872c7c10d898686d8",
+        "description": "glsl: handle xfb resources for spirv before running varying opts",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6cadf5cc2d9e9786ffafaa1761e4523a2d08285b",
+        "description": "zink - Fix for minLod and maxLod when mipmap filter is disabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ebfd3f2a782421dee16f37e91a3ea996b0ab9436",
+        "description": "zink: Removed unused num_texel_buffers member",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cff24443fd076724e2951001f469bfff9949f0be",
+        "description": "ac/nir/tess: Clarify when VS-TCS I/O can use registers.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9faabdd5ddc6d57873a0edcfbaee85e8d4b5d5ac",
+        "description": "ac/nir/tess: Remove superfluous args for reserved TCS outputs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae8a9540481be918873ec1aaa13ec35c11f8ef06",
+        "description": "ac/nir/tess: Calculate reserved LDS outputs based on IO info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c61eb5480674e922a512c036455b00f30c12037c",
+        "description": "ac/nir/tess: Map TCS LDS IO locations without gaps.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a167cb9ba32981ff6cd1e9518adc3d0bb89376fa",
+        "description": "ac/nir/tess: Return undef when loading an unwritten TCS output.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1c821e911942e8bb7f527523249cfca46a47213",
+        "description": "ac/nir/tess: Clarify when a TCS output is stored in LDS or VRAM.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08baefe18cda08e98ba64245c3667641e33a2545",
+        "description": "ac/nir/tess: Load tess factors from variable when they are passed in registers.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10acebf88f2dfb3c311c26137034299b9ad882aa",
+        "description": "ac/nir: Introduce ac_nir_calc_io_offset_mapped.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d43f8c1a1b006596907f383d5017565cdd0e810",
+        "description": "nir/lower_wpos_ytransform: fix for lowered io",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1c527dab9668a7cdd637498e2959fca7392de500",
+        "description": "nir/lower_wpos_ytransform: scalarize emit_wpos_adjustment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9e023ed944c267bf2e9ccdb6c1e63e0145ece17",
+        "description": "nir/lower_wpos_ytransform: update comment to reflect variable usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e871424b5e7243f8adde7efef23f10dc48c0513b",
+        "description": "nir/lower_wpos_ytransform: reuse input zw components for fragcoord rewrite",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e848d9b9ccc86d96e86435e8c8b5e21bb03ff15d",
+        "description": "nir/lower_wpos_ytransform: move new value load to start of function, reuse",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "356d88d1e8a4233a572cf0dab4bdc719f6ddf1de",
+        "description": "llvmpipe: fix DRAW_USE_LLVM=0",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5bb72e05d154c73c2bde29a530defce1b58241f3",
+        "description": "vl_win32_screen_create: Take ownership of winsys injected to created d3d12_screen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "37cafd53ef88d353017b2910796d34b8caa07075",
+        "description": "d3d12: Fix util_blitter_destroy destruction ordering",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "55e377e9652cc2063a02d850cf59234506109847",
+        "notes": null
+    },
+    {
+        "sha": "0dd871442b552e01023a24c73d2776082a7fad2d",
+        "description": "d3d12: Fix leak dxil_module::serialized_dependency_table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24197aeb2bfb3e5e1633974ffa455f77df22c422",
+        "description": "zink: only use location_frac for deref array indexing for compact variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2185da6c894b671775eb44a724a9f39c384da298",
+        "description": "zink: fix add_derefs case for compact arrays",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "baf96518fa47b1ddf1e8e2a6848815d16a2296c8",
+        "description": "zink: fix io slot calculation for vertex inputs in add_derefs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "460cd99ea540fa5b8f0a063b9943afaf29b6cf06",
+        "description": "zink: don't clobber indirect array reads with missing components",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "459b49a1749ecdee1726a793d1ca62534ad95932",
+        "notes": null
+    },
+    {
+        "sha": "a64f5ae9d703d5ae830809bdcc1aaad10577b87f",
+        "description": "zink: always check patch io during rework_io_vars",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11e988fa8048252108a2f556c726f6095b873f17",
+        "description": "zink: call gather_info during shader creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "562cb8381e4545621aa1c310e16b7439ad3e6b4c",
+        "description": "zink: track a mask of arrayed io locations on shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "364a6ac1a3e655e12acddcd97c0123e7a3fd7e7f",
+        "description": "zink: check for arrayness rather than tess io vars for indirect array vars",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "720a43858d6716af8e627f443d50b3ae2ae53a01",
+        "description": "zink: fix generated variable expansion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "404e9f11346279fb6c38fab45b024b0f924cbea7",
+        "description": "zink: always use shader sizes for clip/cull dist variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "316470920a23173cd53bc7cebcc3426314cf8fac",
+        "description": "zink: add a helper to detect clip/cull dist locations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "665755720a5600abf2d8bd95cf08234a1b31287a",
+        "description": "zink: manually calc clip/cull distance sizes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf4953d184b698425cded9a71dfc67c24334da36",
+        "description": "zink: apply component offset for CLIP/CULL DIST1 location derefs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "332c24774c057dc59ebbf98fb9c0cded9d0de245",
+        "description": "zink: run scan_nir before variable rework",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "88792b9ea3f1df2d68a9229b0aac54ca1ac993dd",
+        "description": "zink: update xfb info after lower_to_scalar",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23ce5696d68041795cd5b96d8e1f746a6402463f",
+        "description": "zink: use outputs_written mask to detect edge flag usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b8bf82133a29f1765e2625ed7572b19c6f6a47f2",
+        "description": "zink: always sort io variables by location after re-creating them",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5fd03efda03a72444dad91141ffaa2f23461b785",
+        "description": "zink: delete some ntv dead code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cefbfe6597a701e4a0e93503b1441384fd24e607",
+        "description": "radv: add radv_wsi.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfaa674583454c4d78bcaa899910630db2a6ceab",
+        "description": "radv: add radv_pipeline_graphics.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "987f3351b347df2be890413d13ce5cb38240f444",
+        "description": "radv: add radv_pipeline_rt.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7807d49f8225e3ebc9507095776043bbef5f0a0f",
+        "description": "radv: add radv_pipeline_compute.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f07a6398019f97ba9c41c1073310e042cb7c6582",
+        "description": "radv: add radv_pipeline.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8e9b41641a0e43bf4d63657218313c7633a3eedb",
+        "description": "radv: add radv_pipeline_cache.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "150ce132737dca37339e2a1296542ed675b55bde",
+        "description": "radv: add radv_device.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1c590cbd28ba305778cddf8231eaf0625b229a03",
+        "description": "radv: add radv_rra.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6849305a86cf9c5f37568d03ea0b00c400c98c66",
+        "description": "radv: add radv_physical_device.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fb19b8331f53b03d51f026acefa07bf97cbfe5b",
+        "description": "radv: add radv_queue.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30eb0ef45a783c58ba3682200c556f6387b17250",
+        "description": "radv: add radv_instance.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83841b0b78936a7b6bd774d89fc354b7ef250aaf",
+        "description": "radv: add radv_device_memory.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bcfac614683eb44450e75c057dbfe6159c5ea43d",
+        "description": "radv: move radv_shader_{layout,stage} to radv_shader.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0df927099700c706d5849758db1a39465adfdbb7",
+        "description": "radv: move radv_userdata_locations to radv_shader_args.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d058264f55e26dd9691d671ac3125b41698146f4",
+        "description": "radv: move radv_prim_vertex_count to si_cmd_buffer.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74ac72ceb2a3acae6ccb9f523d404718a823e1d2",
+        "description": "d3d12: Fix leak of batch->bos on video-only builds",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "55e377e9652cc2063a02d850cf59234506109847",
+        "notes": null
+    },
+    {
+        "sha": "bdf2a470d3b5a710a585f39ecb5639add96c6275",
+        "description": "v3dv: fix job suspend with command buffer simultaneous use flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff8d72ba22612b06c3cc8b25818ec1340ad09279",
+        "description": "v3dv: store the offset of the BRANCH instruction in a CL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c874caf33dddf3fec9b3c78223192a11edc57ab8",
+        "description": "v3dv: fix job pointers from cloned CLs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e6efee3b402b2f051b9ea8190c8ae5a9ad685e7e",
+        "description": "v3dv: add a v3dv_job_clone helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16c96b0e9358c8727f9af29a7fc7fe9879cad45a",
+        "description": "v3dv: drop single sync kernel interface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25e45b85c2ab5894f789c54d8699c26bf61a186e",
+        "description": "v3dv: require multisync kernel",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a8771f7b540f807fddf8751037ff7ca59afa6d0",
+        "description": "NirShader: don't fail on null constant_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9b3e324402f1ec6e7834fb1ada604353714bc65",
+        "description": "radv: advertise VK_EXT_device_address_binding_report",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db736ebf532794bcd3586c4f6c81021b1b0cd585",
+        "description": "radv: implement VK_EXT_device_address_binding_report",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "34e8e5d76fc1e4474c15ad78067a53db27684ab4",
+        "description": "vulkan/debug_utils: add a helper for reporting address binding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24a5165cdf9f9181b3904837efde7fe03ea7c8be",
+        "description": "r300: fix constants_remap_table memory leak related to the dummy shader path",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "29df85788a7f122cabce776c38dc6eee79ee0511",
+        "notes": null
+    },
+    {
+        "sha": "dfc6330b852f6c50cb892864c7e1698b515c33ee",
+        "description": "panvk: use integers instead of strings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3352803510bebcbf86e25068319945250e16cc3d",
+        "description": "zink: fix shaderdb pipeline compile",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0ebd6f52a20aaa57f2815b3ad2e8052153689f18",
+        "notes": null
+    },
+    {
+        "sha": "18fbe63ff215c7366dc4049e6b14fa375e59e90a",
+        "description": "zink: make descriptor pool creation more robust",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2e0c2c67f0609b4542bed696d5c22cd47fe2790",
+        "description": "zink: don't use set_foreach_remove with dmabuf_exports",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "7b7a581a52db21ed8826d6f2986ea6dfc208fb2a",
+        "notes": null
+    },
+    {
+        "sha": "3114917986c03413720d35416455879a7ad4be09",
+        "description": "util: Turn futex_wake parameter to int32_t for consistence across platforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ca9738cd7af632edf1096ac46180a6b56489d417",
+        "description": "util: futex_wait use TIME_MONOTONIC on win32 for consistence with other platform",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54e3fde5ca91834c52a0f2944e4e245a07434b54",
+        "description": "util: Fixes futex_wait on win32",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "095dfc6caa29e150b5c8e9566320eda1117e714b",
+        "notes": null
+    },
+    {
+        "sha": "8a24610477f3b23a0dc0fb423bbc67ee92a0353f",
+        "description": "nir/recompute_io_bases: Sort per-primitive PS inputs last.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ecbf3464f6afe6dd9e3b83ed7bea6b4953e53e06",
+        "description": "nir: Record per-primitive inputs without variables.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0852488193f6b3d4c841410adc7b997b6a8d495",
+        "description": "nir/gather_info: Record per-primitive outputs without variables.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "185e9b4a75bb0b7335e95cfbe8a0b65a4833f85e",
+        "description": "ci: fix nightly build",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7c0b19a6071dc8fa0cd8ad3e90f11223fa876337",
+        "notes": null
+    },
+    {
+        "sha": "a535425fb6d6def5b93f8aa5d44a1e73a0335384",
+        "description": "radv: enable radv_zero_vram for Red Dead Redemption 2",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "89182faee8ce69b0bde6f4f346286550ef993db2",
+        "description": "radv: add radv_device_generated_commands.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c4e83026afc38b9d66d62b66c1366b4399d584c8",
+        "description": "radv: add radv_perfcounter.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bccaeab5035a71b43519748338bb4d3c4ecc9dda",
+        "description": "radv: add radv_query.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbb2e82e9aacc816b6bc22d330b3274c0c62298a",
+        "description": "radv: add radv_image_view.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d7141bbf79931ad457446352ae492e9017f5b27c",
+        "description": "radv: add radv_image.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce54440af360a731faecbcdd7d12615cba892bb2",
+        "description": "radv: add radv_video.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c925f037123e006443ec3eeb5fab885844330e69",
+        "description": "radv: add radv_buffer.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ba5ba80175adc391d9c930ce07e09d398ee5d13",
+        "description": "radv: add radv_buffer_view.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a09954637be0ffb985b90ba7e59e0a19cf1e1fc",
+        "description": "radv: add radv_event.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c8f0c39183e64aa1395711cf9a530a510f2575c",
+        "description": "radv: add radv_sampler.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4aa095c6e560db867ef01837315c5e2e9687bd3",
+        "description": "ci/deqp: backport fix for dEQP-VK.pipeline.*.render_to_image.*.huge.*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80652de67ba990cee16ee68f51d86a156ad40e2e",
+        "description": "aco/ra: use SDWA for 16bit instructions when the second byte is blocked",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e21520061760fd42644e8cb3d80e781f2f164686",
+        "description": "ci: use the new VK_DRIVER_FILES env var",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09e5b3da7659083f655f975e349f0569e2b37d9e",
+        "description": "ci: drop unused VK_ICD_FILENAMES passthrough from jobs to tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff37f687408e6404a11160e93717e534384c7ef2",
+        "description": "meson: add VK_DRIVER_FILES to devenv, alongside the old VK_ICD_FILENAMES",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "364ef85a8ea461768636d52f144d013ce4c24186",
+        "description": "docs/zink: format the envvar value as code instead of plain text",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96e8648b32268142fb5132acd01203f866c1ec54",
+        "description": "docs: replace references to the deprecated VK_INSTANCE_LAYERS with the new VK_LOADER_LAYERS_ENABLE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a8ce84c92f5d1dea2f52f70390cbf856db144b9",
+        "description": "docs: replace references to the deprecated VK_ICD_FILENAMES with the new VK_DRIVER_FILES",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e746c90a4b9a0f47ad4de136a3af961f6a5f0c3",
+        "description": "docs/envvars: document some vulkan loader env vars",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b8735cd4e2fd5fca820f91d767befaa7cf39fad",
+        "description": "ci: raise the log level threshold of spirv logs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3223650baddd967837a37f2fead36d46f02ca9f1",
+        "description": "radv: Reuse TCS offchip layout between TCS and TES.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b0b0e675c7897af8d0d3ab0f5bb00414e0cb918",
+        "description": "radv: Include output patch size in TCS offchip layout.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a76f821af710d94aa7056fdb81d3cbdfab847a6",
+        "description": "radv: Change number of patches in TCS offchip layout to match RadeonSI.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "820370ca087a619bbd961e822bec6db6cf03479c",
+        "description": "radv: Change input patch size in TCS offchip layout to match RadeonSI.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d116272689d95a3d2183d9a48b7f2f6c148ad7fb",
+        "description": "radv: Add number of LS and HS outputs to tcs_offchip_layout.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a45077d845d8f29c40cdaee892c044727a7739a",
+        "description": "egl/android: Fix gl_config dereference",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "273e54391af7e0a89daec778980c3f8a800bcd7b",
+        "notes": null
+    },
+    {
+        "sha": "eb4036a4be1df7f3006ef030a53e0829934c9ea6",
+        "description": "radv: move some VK_DEFINE_NONDISP_HANDLE_CASTS to radv_descriptor_set.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "964f1ed023cf1af090296a01b5b1a1fe95d46815",
+        "description": "radv: move radv_device_supports_etc() to radv_physical_device.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57dd6691df59a6a623b4b65025409d57f43e159e",
+        "description": "radv: pass a radv_physical_device to radv_use_llvm_for_stage()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a48e57a3d1c729132c726be506f6b2e1d8a7aea",
+        "description": "radv: declare format related functions in radv_formats.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20963fbba5014ae13c0cfcc9b74ff9a1eb45543e",
+        "description": "radv: declare radv_cmd_update_descriptor_xxx() in radv_descriptor_set.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5f7a5a27ef1b630bd1aea0cc0b1256fadee9de8e",
+        "description": "wsi: Implement linux-drm-syncobj-v1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd16c28b78b77f92bfb4e49f0f03bc1b4a30c85a",
+        "description": "meson: Bump wayland-protocols requirement to 1.34",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9eb69182d392bf679c810e4486b51f0e0c41745",
+        "description": "meson: Update wayland-protocols wrap to 1.34",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cee642af36e473d110027fe8c971863a4fcc49c6",
+        "description": "ci: Bump DEBIAN_BASE_TAG for now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19607c9ff4a72509b1297b950cf56045371acf6b",
+        "description": "ci: Bump wayland-protocols version to 1.34",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59813ae468dc727623b9e701d06b14f5b959973d",
+        "description": "wsi: Add common infrastructure for explicit sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4bf8f96b3e8f5ad0c6b1a2a59a68c061bd9e961b",
+        "description": "wsi: Get timeline semaphore exportable handle types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a72ea01d35625fbd011635954a9d7a34e3dda5a",
+        "description": "wsi: Track CPU side present ordering via a serial",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7467f29af194dd98d5656000a0818f68b4812f64",
+        "description": "wsi: Add acquired member to wsi_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a50ce3df71f08a2b9dc31aef00b70423d5ba7dd7",
+        "description": "wsi: Track if timeline semaphores are supported",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "efa6fac0d735ceaaf86d886541c32a9769ce21c3",
+        "description": "build: Add linux-drm-syncobj-v1 wayland protocol",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72240780f2c1a27ea99867f103cb38456e3f88a8",
+        "description": "wsi: Add explicit_sync to wsi_drm_image_params",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c30c969c2487cbd3461a5d688ecc8c255ba69632",
+        "description": "wsi: Add explicit_sync to wsi_image_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eae948332a33377f3a3725f3e32bd5d71609bf73",
+        "description": "wsi: Pass wsi_drm_image_params to wsi_configure_prime_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6345250cae6ea3fb9d1f2baaa8f4542f9f7b046",
+        "description": "wsi: Pass wsi_drm_image_params to wsi_configure_native_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55ac1bfc57fcdf437372e505ab27a0b38db18674",
+        "description": "ci: add missing rule to disable vmware farm",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54050d88441b9c2a39564ddf80ee0545a462e103",
+        "notes": null
+    },
+    {
+        "sha": "50783351bcff9be116cd6d714877ccd0952df2c4",
+        "description": "fix(FTBFS): clover: adapt to new LLVM 19 DiagnosticHandlerTy",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1c3cce2fff8de3f81eefa82db42650a63e3a4285",
+        "description": "fix(FTBFS): clc: adapt to new LLVM 19 DiagnosticHandlerTy",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b6c9a8f68549666310efb57334a941d0c5d5d00",
+        "description": "ci: mark vmware farm as offline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a87d88854605857f83ce62f09809a2511a063a66",
+        "description": "anv: disable fcv optimization on >= gfx125",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35a9e8577cf8ccfacc65015508752d0c0de3daf3",
+        "description": "ci: Nightly run expectations update",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ca6779f3cbb816e27ed7228720509185145ac038",
+        "description": "fd: enable prefixing the RD output filename",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e0d0190ea1a7781013b638ccd98236eb8ee00d7",
+        "description": "intel/brw: Drop align16 support in brw_broadcast()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a520c976a5d2c533260c6ac083608f8d0aeaacf6",
+        "description": "intel/brw: Drop dead CHV checks.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3d12cf72f1e67aa0b3e0574edcf6c5ffd6cf4b8",
+        "description": "intel/brw: Don't mention gfx7 limitations in shuffle comments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d9e2b761a790c2873a71defb95118c0cfd2ebbc",
+        "description": "intel/brw: Update comments for indirect MOV splitting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a24f29fbbb9e95053699ef0e5e19999655fee73",
+        "description": "intel/brw: Fix lower_regioning for BROADCAST, MOV_INDIRECT on Q types",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a90edad9f72607310f64be2fd0897ffa7d74a3d8",
+        "description": "intel/brw: Fix generate_mov_indirect to check has_64bit_int not float",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "817f74748feecb6397fd486c128795733944ab9b",
+        "description": "anv/xe: don't overwrite the result from vk_sync_wait()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38af7254e207ebb5303ad97f87b5460392383ef4",
+        "description": "anv/xe: don't leak xe_syncs during trtt submission",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "18bd00c024fc0f11a36da5b025b89a26ebd635e1",
+        "notes": null
+    },
+    {
+        "sha": "4cf272364b4de52c8d918e1d04461b461f205771",
+        "description": "docs/nvk: fix envvar documentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c637c20d9764fd7a0c2e2544f2d4c17f90e5ed7",
+        "description": "docs/anv: fix envvar documentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8e7703a4550dea6b894aa6e751c1dcfea41162ed",
+        "description": "nir: add missing stdint include",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51c589234d8faf3cfe91e15eff61b38553914b23",
+        "description": "isl: fix inline c identifier reference -> inline code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13b88747d4048a1c9a5acd9dcd6ef43965b119ca",
+        "description": "docs: fix inline c identifier reference -> inline code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7668cb54dd7b0d861445501175c7c847fa76193a",
+        "description": "docs/isl: fix enum references",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a38d6547a52d8c31ed43d79f24887f60e569f08c",
+        "description": "docs/isl: VK_FORMAT_xxx_PACKEDn is not a real format, don't try to link to it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dfc211ed438658e3214be140e968b18f22784409",
+        "description": "docs/isl: stop trying to link to classic drivers code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "643cc8be7f2a535e13b0f52949259ed27ea178cd",
+        "description": "docs/isl: fix references to ISL_AUX_USAGE_CCS_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db810a064489c866c809eb6abb57dd610e10d673",
+        "description": "docs/envvars: fix reference",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6702bb91f2097c906f874938ec466cd8e3fb1dd",
+        "description": "docs/nir: vec4 reference",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7da4a97fbb1e68d984aa84c390c8bf37301ce0d",
+        "description": "docs/macos: drop reference to former github mirror",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c0b19a6071dc8fa0cd8ad3e90f11223fa876337",
+        "description": "ci: run python-test automatically only in merge pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "891e2e42c63c22e414e90e996ae12b59da555fc9",
+        "description": "ci: run python-test when editing the CI itself",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "182ff5dadaa2776d7cd2c11c3573c2bdb810dc92",
+        "description": "ci: fold .test-check into its only user, python-test",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c34cfc1a3b9ccdd0f81f7852891394df252e73c8",
+        "description": "ac/gpu_info: update multimedia info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb693cfec6c3b6d264e6684b0cfbef6c780e385c",
+        "description": "radeonsi/vcn: use num_instances from radeon_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "583921b2e75655f5c1b6a8917e980b627b4d5dc4",
+        "description": "ac/gpu_info: fix regression in vulkan hw decode",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "f3ab454f074938ec89b245ad3166c69e0330ca8c",
+        "notes": null
+    },
+    {
+        "sha": "9329f2c15b3a9d96d2365ee152eac9646b4d4a46",
+        "description": "radv/ci: simplify tahiti flakes list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e625fa16142b166349dc4f4e0edf059c349c94c",
+        "description": "ci: restore kws farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b35b2718be38dcd6e93566c66d6b8ac4071e5bcc",
+        "description": "radv: remove radv_physical_device::instance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2c29c9bb67b45ce89de01b4276c25acbf9ce9fd",
+        "description": "radv: remove radv_device::instance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "675d7f4bd0d09a80e8f0a5a60ca9eab20a6e3b74",
+        "description": "radv: remove radv_cmd_buffer::device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "29bae070d1e7ebc7c0009c4bd8d803b9cce6f1d3",
+        "description": "radv: remove radv_queue::device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "896c9cf486182a0058deeec0036ceaca1ddd2819",
+        "description": "radv: remove radv_device::physical_device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "310597cab6efb95210ec89d5fe0046876849cb76",
+        "description": "radv: rename radv_physical_device::rad_info to info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2686cd59dfe296d94571969a9eb870bfd271827c",
+        "description": "radv: rename radeon_info variables to gpu_info everywhere",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52663ec80fd8a4fa4fe82ea27188964740d4b319",
+        "description": "radv/winsys: rename gpu_info to pci_ids in the null winsys",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce1c32e358cdd74497b4bfc4302c057947808df6",
+        "description": "radv: rename radv_physical_device variables to pdev everywhere",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f674fdee726ca634f1b21cd293e72ae6cd87147f",
+        "description": "ci: take kws farm offline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fcb568a5d5a52db75fa2f6d04579bb404ca7f597",
+        "description": "docs: add alpha-to-one features for RADV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f46390198375e398dd78ae3eda4282311efb2c52",
+        "description": "radv: advertise extendedDynamicState3AlphaToOneEnable with ACO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "850605eba1ae8b17b84fd97e90725f0ed9fdf922",
+        "description": "radv: advertise alphaToOne",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7206bcdb2aaa714637d7324486f02f5851d5f62",
+        "description": "radv: implement alpha-to-one",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5f1f39bf7d1cc84ac6c8a73feec20130d00bda6",
+        "description": "docs/egl: various wording improvements",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57ceedfc3ee42b9169993a728660091efa9d5ac9",
+        "description": "docs: mesa also implements gles 3.0+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28a1cdf7e0450815cf19cbbd2bd3fbaf1d32062d",
+        "description": "docs: we support EGL 1.5 for a long time",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fad2922fb4e1b7fc5e657980fdbdcd0baec106d",
+        "description": "broadcom/compiler: fix workaround for GFXH-1602",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad647e2c90fb76e3a7c5e8d21c3f68a78bc474fc",
+        "description": "v3d: implement fix for GFXH-1602",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d68dd78d07b30cefe90d76af681075f4ed6b33d",
+        "description": "intel/eu/validate: Allow SIMD16 for mixed mode float operations on xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a368d234c8ff12eda783516dd1018609e9d2a7c3",
+        "description": "intel/brw: Lower DWORD scattered read writes to lsc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b5040bfc3f65778ab10a91cbbbc355b83a48669c",
+        "description": "intel/brw: Handle typed surface and atomic messages for xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74efde76635ca0cbd582b6ca3ab4bb5a24b9d2fe",
+        "description": "intel/brw/xehp+: Drop redundant arguments of lsc_msg_desc*().",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f1812437e877e0ec2ede01694344c171a00e3bc7",
+        "description": "intel/eu/xehp+: Don't initialize mlen and rlen descriptor fields from lsc_msg_desc*().",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa96274a87183d2c259754b11a1df4bd48668007",
+        "description": "intel/brw/xehp+: Replace lsc_msg_desc_dest_len()/lsc_msg_desc_src0_len() with helpers to do the computation.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5f9ab41457da40c5f1ae01abf0a44e00bfc4bd08",
+        "description": "intel/brw/xe2: Update uniform handling to account for 512b physical registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8587ef172c0f99d82caf430f2204096864dc6abd",
+        "description": "intel/brw/xe2: Update brw_nir_analyze_ubo_ranges to account for 512b physical registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5a89408126708652d4cda597e133d8a42d76067",
+        "description": "nvk: Use a linked list for descriptor sets in a pool",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c1683c9b9eae0ac49dc872248ba1b4a0b070b45",
+        "description": "nvk: Use a VMA heap for descriptor memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6cbd3a18d4d32618a7eea9353efec9d87db15624",
+        "description": "nvk: Use the page-aligned BO size for the descriptor pool",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2d3cdd5f206029a02ba9b94eff528336e10b3c1",
+        "description": "r300: add missing copyright header",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "024491f60fdc6747b33de63fb2bef9e18267e9a9",
+        "notes": null
+    },
+    {
+        "sha": "b2ae73b27ed420cf0989a0f4ed68c588e23302e1",
+        "description": "r300: add missing licence to the r300_public.h",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6e3fc2de2a185775a721b3633f420aa3d2c9a949",
+        "notes": null
+    },
+    {
+        "sha": "95eefce4d80c1916bfdb691c7ad456f4ba7e7a6d",
+        "description": "r300: convert to SPDX license block and fix small typos",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6a93058b95f7aa01b7871868072a46778a0a765",
+        "description": "nir/opt_varyings: simplify nir_io_semantics::num_slots of directly-indexed slots",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c66967b5cb7aa69c3c2efb12730b7b570483e01b",
+        "notes": null
+    },
+    {
+        "sha": "71becd1b44803fe28081b47c9f3ff1d2616681df",
+        "description": "nir/opt_varyings: don't generate IO with unsupported bit sizes",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c66967b5cb7aa69c3c2efb12730b7b570483e01b",
+        "notes": null
+    },
+    {
+        "sha": "5c543f4a02c4eea948c2194f021875546cd363b9",
+        "description": "tgsi_to_nir: translate TG4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96ee0d6711ed162b2d3545d7f70927ed35d20c91",
+        "description": "ac/nir/tess: Remove dead code that was meant for epilogs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b34e99d021c41d2534d5c67b383892b227fb1b81",
+        "description": "radeonsi: Use one more bit for number of patches in TCS offchip layout.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04dea4aef2e491dde2282fe0b95883a6e36d9e75",
+        "description": "radeonsi: Remove tess bits from VS state.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b82614e06bec65ee4ef8aad3af2dd7f35274eb6d",
+        "description": "radeonsi: Add number of VS outputs to TCS output layout.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8883b88dd429f7d07f14bec3eb0e9ff0f0a35b96",
+        "description": "aco: Delete all TCS epilog code.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "078a23cde440b30ff4cb7a5daa8d2493f7142f7b",
+        "description": "radeonsi: Delete TCS epilogs entirely.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71f9d4b9eb02ced25715a5bb0d75500971f37a90",
+        "description": "radeonsi: Implement dynamic TCS intrinsics for non-monolithic shaders.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05dda3d6e72bc202b3f1f8aa007b66c495b7df05",
+        "description": "radeonsi: Put HS output count in TCS offchip layout, not patch data offset.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e68ab8651e4f13c97f2983ee6336d86c166bd95d",
+        "description": "ac/llvm, radeonsi: Handle tess_rel_patch_id in common code.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3ee81ffe14c62b7c38dbe136aef88a88165a0900",
+        "description": "tu: fix memory leaks in tu_shader",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a03525d8db7b0295c955aee04d1694a4a1b4493f",
+        "notes": null
+    },
+    {
+        "sha": "fcf1a8062ba3a058d25620f90d5af8f4bfa0cce7",
+        "description": "asahi: switch to VS/FS prolog/epilog system",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "742a842811bb2e7b068e713047284cacb64c9db4",
+        "description": "asahi/clc: stop padding binaries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a2d13f59ef0563ed7e32e16b4982746950c1963",
+        "description": "asahi: add fast linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66862fa160409f712d76233a0fb618a83dca2b89",
+        "description": "agx: add main_size info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0298c5d905cc7c775da74655cb242a8f7ee181af",
+        "description": "agx: add agx_shader_part data structure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e6105cdf0c6e321db282b5ca90331c131a0b7022",
+        "description": "asahi: static assert blend key size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0698b796e43463816df10bd5a140bb30896cbf3",
+        "description": "agx: drop shader stage assertion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57fa9a2b8ed446c6201b5f62a0141fd9b9932ad6",
+        "description": "nir: add intrinsics for non-monolithic agx shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99a4d0fcad491426d1cde5bbd9d0c1e4c06b801a",
+        "description": "asahi: don't allocate tib space for gaps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eadf4cfe1c8b48e674cf765074d9597ba0a681de",
+        "description": "asahi: constify agx_build_tilebuffer_layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d375e614352ca5fe324138fc93defa44fc8afe3",
+        "description": "asahi: add agx_usc_push_packed helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9974f68bb988d86083615b80c055bba1814c0432",
+        "description": "agx: document non-monolithic ABI",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9ccd7226577df4542f878c86b736d3a7bf878a2",
+        "description": "agx: implement exports",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6839cfd69c3cf732551c38b088314ef3efa510a",
+        "description": "agx: generalize preloaded cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61a4414bf69bc4a48fdc31448ac82bd764b15f72",
+        "description": "agx: wire up samples_log2 sr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e536b4973f08abaf5863211bd0886ab8cf101775",
+        "description": "nir: add export/load_exported_agx intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df8e52a795803efb022c1dfadecd26d5365bc7e7",
+        "description": "nir: add samples_log2_agx sysval",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbd6182549ddf7eebcf9e279629009b6f74260ec",
+        "description": "asahi: fix bit sizes in point sprite lower",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "caad4703aabcab27639022197741f52d941a12a3",
+        "description": "agx: always reserve sampler #0 for txf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be81812a4bc351a23a60f0af0d17c2f0b2b284ce",
+        "description": "agx: inline sampler states",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "781dcc8ef8e9119a8f31f26d0da8a44d0ca92dd5",
+        "description": "agx: optimize out wait_pix in some cases",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c95584589194ad8a17b3b95d6492729f43ec9fd6",
+        "description": "asahi: don't set writes_memory for tib spilling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70395c1ac17a0894f02228a5f00cc3b6725bc6d2",
+        "description": "asahi: delete layer id code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a63fffeaa389035902a25171db032bf98c3d801",
+        "description": "asahi: fix _packed USC structs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b3fdede75b037df765422ad18ab66e6f7ec1393a",
+        "description": "asahi: use ht derive more",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a108b21d4c30ef0e939a9fedcdb8cb3e98ced28a",
+        "description": "asahi: drop dead linked_so code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad2f096a8b33742b761fbc1d32c949512fdd7c9b",
+        "description": "agx/lower_vbo: dce as we go",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "acc1fd3a8abbaec0c57173fef621ee256c1809d8",
+        "description": "asahi: stop using GLSL indirect lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c7ce248960ecb182fc019a7b2fde1e1af7debf4",
+        "description": "asahi: make point size replacement dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7595dc903674cce9894062b7111e8490073cb534",
+        "description": "asahi: drop now-empty base key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f0e1ccc8d490ded39b7f248fb9d564e167422b92",
+        "description": "asahi: rewrite varying linking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3764adbef106568a381b06084fefb5f312bce6e0",
+        "description": "agx: inline imm into st_vary",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a25e8de1807bef936e2f1d8161621c880ff548fb",
+        "description": "agx: pack indirect st_vary",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "78ede839f7d569e21124cc0a66a1b5687af80a1c",
+        "description": "agx: rm unnecessary iter hack",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d9ab6f7c7369411038bd456a02f93ff56be71ed",
+        "description": "asahi: advertise indirect fs inputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a17b350a3da5c349f85eea7aba4d13a35463b483",
+        "description": "agx: handle indirect varyings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87551ba3eba89749d89e3e5da23ee450b9f6d079",
+        "description": "agx: pack indirect CF",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea9ddf1b969a5e1bb6e548d801a0fca9b78d950f",
+        "description": "agx: explicitly assign coeff registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70277f8ff720b06c8aeb051ee8c184398b3e8d3a",
+        "description": "asahi: extract agx_cf_binding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2265ff588f666a483eeb83005374863be85c6ef",
+        "description": "asahi: drop =varyings debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c2df9e8144e0aac539ba9ea0eda6b39b2eec85e",
+        "description": "asahi: add agx_push_packed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "499d091208c0ff78108abcfd2789dffa2236efa1",
+        "description": "nir: add intrinsics for lowered VS outputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1773eb329c1045ac3bc0051629f6c0ff73d82f14",
+        "description": "nir: add offset to load_coefficients_agx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1f6e2818daa0e8020dbd0bde97825d16197ee35",
+        "description": "docs/asahi: document UVS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43613314ab5b5d0a2d8f57e021e16177fd7b05ab",
+        "description": "agx/opt_preamble: improve rewrite cost est",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd76caf5d342399c017b84dc02bcffd20a125a82",
+        "description": "agx/opt_preamble: preamble cycle estimates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c77f59e8a1841cc7cbfa771865a6e6655f2fe87",
+        "description": "agx/opt_preamble: restrain ourselves",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cae914978b40b2490a32d702c9ad596be964b1cf",
+        "description": "agx/opt_preamble: improve preamble cost function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9a359e9bde48bbdbc336f22ad2e2b0ffe5b227f",
+        "description": "agx: start a crude cycle model",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85f7310ba74f7e95b65b2c39cfe29eda2c90d63c",
+        "description": "agx: vectorize uniform_store",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "703e5385eb1707da3686dc6cc20b79ca986e7b9a",
+        "description": "agx: split select opt into its own pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90b4e27bb277d60aab8e6957837460ca6f797008",
+        "description": "agx: use funop short form",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42a43bbdadfbab773acdd46a4440d98c2568c3c2",
+        "description": "libagx: parallelize prefix sum over 1024 threads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3319d4fdba79688692d1327c624255bbc6d57203",
+        "description": "libagx: deal with silly NIR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13ecef56d06ded1b872c62fc6251a54bad88e36e",
+        "description": "libagx: accelerate prim restart unroll across wg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "890a96e2a788848ae2187278f6bb02f6de18e10f",
+        "description": "libagx: accelerate restart unroll across a subgroup",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b51282500d80cfa48bfecfb0a2a640e3d49583db",
+        "description": "libagx: polyfill glsl ballot()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a586c7e8798324a46728b4f031579ade2dccf46",
+        "description": "agx: implement load_subgroup_id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c274566bbff19eddcd460b911bb47f2b43acfcb2",
+        "description": "agx: test constant compaction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb785a55039686ccdf7bc114fcb5520a4b44b805",
+        "description": "agx: compact 32-bit constants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61b74894a9d73160207d100bbf9c72bd3969d231",
+        "description": "agx: promote constants to uniforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a97657792622ab02adfa140049b17e62ca0a27e",
+        "description": "agx: extract agx_is_float_src",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e2cc790eb72acc4ab1e6dcd4befc1ccca48a427",
+        "description": "agx: model 64-bit uniform restriction on ALU",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b6640d013ef2b8c261953e0a2863837939f0003",
+        "description": "agx: extract \"accepts uniform?\" ISA query",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51d3a376bcd1a26414ce6059bda321a7ece1027d",
+        "description": "agx: restrict high uniforms with textures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51eba1c38ed54ab197735c8fd27e092f78f4d46f",
+        "description": "agx: fix lowering uniforms with abs/neg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17e05c2f211817d5a4cc8e6193f680d7e9f04f5c",
+        "description": "agx: add more shaderdb stats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "36491b6e0b5a989a865a232602f41f64926fdb8e",
+        "description": "asahi: use less bindless samplers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55d7267d6c6726875a3d705c0da675044784067f",
+        "description": "agx: implement get_sr remat",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03000030d06cb5e60ddf3989c452812ffd090140",
+        "description": "agx: generalize remat code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2ce64d0131a1b89bb878cf07a3db1789ec13cc8",
+        "description": "agx: enable indirect temps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e80d451e55af8fecd8b98a24fa06cfa9324351f3",
+        "description": "agx: move spill/fills accounting to shaderdb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43e804b0e46346617d61f2ac6b2d8c1c359dddab",
+        "description": "agx: add tests for SSA repair",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0dbf1b48d12347ca5e8d30eda827d91d1654de4e",
+        "description": "agx: add helpers for multiblock unit tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a181f3caf4db1e0332224f1ad9bfe0a4ee2f1993",
+        "description": "agx: make add_successor public",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c147ae4483091fab71c1156c66f436abf1fdaf2",
+        "description": "agx: use dense reg_to_ssa map",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "034f369ddf93fe75734a477dbe9d3fb6733d4dd6",
+        "description": "agx: switch to Braun-Hack spiller",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe8b245cc47eff3f64054842f907f20daf8f0e57",
+        "description": "agx: add Braun-Hack spiller pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6e9f707f4f35613251e3f143ec0d2a3541848d9",
+        "description": "agx: add SSA repair pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "450e79c1e6c5e338502380ba96b18d4e38a78bfe",
+        "description": "agx: add SSA reindexing pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20409b6baec1639d9c7b0d6f6c6c309f7b3daccf",
+        "description": "agx: validate phi sources for consistency",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d553af7f8bedf645f0b85f0c2238cf6280a46cd1",
+        "description": "agx: drop scratch regs for spilling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b48f2d0ebc29783d577cb1647304527b4097911e",
+        "description": "agx: try to coalesce moves",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe612acb8f621c45585c2c083a6426d049c80d30",
+        "description": "agx: coalesce phi webs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afdcee6a0a6c5b99a365ec685af0d985412cf8c4",
+        "description": "agx: add limit for max sources per non-phi",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3684c9ebbd21d80203bc55b78edfd1e177a2df3f",
+        "description": "agx: add before_function cursor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6bff596505dde64dee22da661c2641ffbc0bda59",
+        "description": "agx: add temp_like helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ffd2b846c42d851346bc8b0dc1b4560a8aec7087",
+        "description": "agx: add more iterator macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "645f5187ed6eca33dabb97b5d1e8444afbc2d49e",
+        "description": "agx: don't leak shuffle copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "106da137e37ce2120ae922740bf985213870d885",
+        "description": "agx: implement live range splits of phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7f01d8ca5cd80cde0b86a1a9487a672f2baf7bb",
+        "description": "agx: sink harder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4024a82aa31415d8ab3c9d2769688ccafda6c7d3",
+        "description": "agx: fix bogus implicit cast with 2d msaa arrays",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c41c6ff27f88c6cb240620a593c446a71cdb12a0",
+        "description": "agx: assert phis don't have .kill set",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b878c5b5799b2c2965d267420621a0c13d84172",
+        "description": "agx: allow vector phis to pass validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f2b344a041428971c45b392ac16903fe5a26eca0",
+        "description": "agx: scalarize vector phis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2fc2a45c8fffff69aa941a25ee01b4c61294355c",
+        "description": "agx: fix 16-bit mem swaps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5bfdb20dac013b77e3dd600293e0cc411e9cac33",
+        "description": "agx: add num_successors helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da18ac5dfabd14043e3daa2d5185dbda8def69b7",
+        "description": "agx: add more asserts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0d47d827afd1786f1872881106b661acd22442a",
+        "description": "agx: fix allocating phi sources past the reg file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a3f9de4865839bcd4a7903fb042ab5d638b2630",
+        "description": "agx: fix stack smash with spilling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ca5778f3eb22774f0994d90f1216da10bbefd98",
+        "description": "agx/opt_cse: alloc less",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "114f858440f63de7d30b742934ecbbb0a1b04aa2",
+        "description": "asahi/clc: fix mem leaks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e28998017aef18ffa9c69b19b7c6f4616ee733c",
+        "description": "libagx: improve static assert message",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b01ccc13e923eb8b38d506b37d4fd2f443acb506",
+        "description": "asahi: drop asahi_vs_next_stage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c497d41c78f6b8e2b673ca8b7a59112e265d489",
+        "description": "asahi: drop TCS key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72ef80dfc839dfb132804475674f2404617f4ed1",
+        "description": "asahi: stop merging VS and TCS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "351698d165a8d9a57409025e64a7ae240d58bafe",
+        "description": "asahi: be robust against tess batch changes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20089a681adf557b77a99906e8fe093b2c65b833",
+        "description": "asahi: implement CDM stream linking for GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69dc5bed896c91b6fab227e68219a624bf7f841e",
+        "description": "asahi: fix depth bias interactions with points/lines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c40768207298c18847552ed67315b1f7546cdaf",
+        "description": "asahi: accelerate QBO copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f642e9bb972d50f34c12c9927d6deec7894bcc4",
+        "description": "asahi: add helper to classify queries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7bc904cb4a775e7c9084ba977d42980c85823362",
+        "description": "asahi: add flush_query_writers helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0582fcd8e3868ae3c686a2f9ccd6bda79625a57",
+        "description": "asahi: export build_meta_shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83737cca5c3f2f0ae8fff3ee791447869ab774b6",
+        "description": "asahi: fix stage accounting for meta compute shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f2a1d380964275158909147bdf50c3c454565d83",
+        "description": "asahi: fix unit mismatch with unroll path",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1dee26b61f36edafbb8066754864c988adfdaa08",
+        "description": "asahi: zero more in the unroll path",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f1b50d8bcb3cd6a1e2420494bf14e20fe2cd89e",
+        "description": "asahi: clarify how unroll index buffers are offsetted",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e952189443430a24fa5a9ebefd8c4c649f14670c",
+        "description": "asahi: fix overread with samplers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "007a440a33d49e12909d3cf7ca8ee4f6783830fa",
+        "description": "asahi/lib: fix overread with stateful",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0a8d0217c94083890965a4b3c09e7fa42f7ea03a",
+        "description": "asahi: move more code out of agx_preprocess_nir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6800d5cc678791ea3ded5a91645128bb5bcb9d4",
+        "description": "asahi: allow more samplers for shaderdb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff6722814af6abb0925f17ae63e64fc4f2567f7f",
+        "description": "asahi: Add >16 Sampler Access for Ryujinx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4779e9d5741aefcc46e061f31ed0623b91410acc",
+        "description": "asahi: bump maximum samplers for Blender",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e4b5e0b000884ac09ef9cc34477ff0b9a39a91c",
+        "description": "nil: Drop unneeded types from formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c593986156c96196960397977a92567153d39b1",
+        "description": "nil: Remove 2-bit SNORM from the format table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ca6ad7f8c79bae0e405a9a40e25e296c78b0f6b",
+        "description": "nil: Drop bogus color formats from non-renderable luminance/alpha formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b6b5aa0c69f38a612b744a79c152c3bd669223b",
+        "description": "nil: Switch to using the CSV generated table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc0ce3848f04bd046e204e96f6a911008f49a454",
+        "description": "nil: Re-organize the format table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70843be321674ea40940cae056b987a2b725ffb3",
+        "description": "nil: Add a CSV version of the format table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f50d72ec562135a012aa9925610dc71161e495a",
+        "description": "nak: Don't do a scope break cascade for nir_jump_halt",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9312356d999f6a03e115c21579df95869690cc57",
+        "notes": null
+    },
+    {
+        "sha": "b593de2c498963da7fdedf8e53b270f0c0623fd5",
+        "description": "nir: Delete the rest of the CF list when adding a halt",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "75861c64b8282c8e6a3c59cc22f062f9a15bb3de",
+        "notes": null
+    },
+    {
+        "sha": "d9e737212d5e9a8d61a50592234aa35c2ab530d7",
+        "description": "intel/brw: Add a src array for the common case in fs_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dae97956282d0ace455881dbe4e23901cbadb2bd",
+        "description": "intel/brw: Remove vestiges of sources on IF opcode, only valid on Gfx6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "816a33849a2e3e00b9ec27299280ab8b793b9e0b",
+        "description": "intel/brw: Rearrange fs_inst fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "814017103ca579e16f141694d10a982184d23f9a",
+        "description": "rpi/ci: another batch of flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f395d44b195dd11d860ff55c1dce326fc30682d",
+        "description": "nvk: Advertise VK_KHR_maintenance6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16397c10c7635be6f56b01ca30526388494b4a35",
+        "description": "nvk: Add support for version 2 of all descriptor binding commands",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a88e3f18bd3fdbd31da798cd8cb6e382469cb2b",
+        "description": "nvk: Support VkBindMemoryStatusKHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e9c01dfe40796ffab4521357dfdaeab217c1240",
+        "description": "intel/brw/xe2+: Use phys_nr and phys_subnr in DPAS encoding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d85f7129a8d5222aa262e4c86148c185215ad9d",
+        "description": "intel/brw/xe2+: DPAS must be SIMD16 now",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a8115221e596a8bed7a64799ccc03aa9ad225d92",
+        "description": "nir: intel/brw: Change the order of sources for nir_dpas_intel",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6b14da33ad3aa8a30ed5e479eace8bc6470095a7",
+        "notes": null
+    },
+    {
+        "sha": "c6bd6f2a41253e6430229e1e2ea8a969fd04363b",
+        "description": "intel/brw: Use enums for DPAS source regioning",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1c92dad5cb7f5d46dfaf56d2f9ce0203c2fbefbe",
+        "notes": null
+    },
+    {
+        "sha": "be4fa59a724fff6c94be66665d151b6462ecedb8",
+        "description": "intel/brw: Clear write_accumulator flag when changing the destination",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "efa4e4bc5fc39cccc6d7103e9f15b795de3ee07c",
+        "notes": null
+    },
+    {
+        "sha": "b5f4b16811a6f08f8210f97e69ea4db69be51c35",
+        "description": "nak: Implement load_ubo with an indirect cbuf index",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4ac517cc885ac655422925b4c421ee2261977fd",
+        "description": "nak: Plumb through LDC modes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "189b4193eecfecaf645127c90b190de23a703e34",
+        "description": "ci_run_n_monitor: explain how to pass multiple targets without having to use regexes",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "6825c67c991fc1fc6192f81a25e86f5bde7367d1",
+        "notes": null
+    },
+    {
+        "sha": "48566d00b1071a9c8ad52976b0b46a154aed53c3",
+        "description": "ci: don't run rustfmt on every core change",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f310b04f01c8fd6f75f0d3d796fdcbada3b4ee9",
+        "description": "wgl: The default swap interval is supposed to be 1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc5e9def564526df042faa87b9238582a5fa8165",
+        "description": "radv/ci: dEQP-VK.spirv_assembly.type.vec4.i8.mod_geom Fail -> Crash on tahiti",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64293c5aa3a57946256b2d09a7a892625753cfb4",
+        "description": "radv/ci: another batch of flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "edeb3fec4dc7c2d1593501521161597d1006cd01",
+        "description": "zink: only check that CUBE_COMPATIBLE for images doesn't subtract flags",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03938804f14a00b71421294556207ef373399c55",
+        "description": "aco: avoid breaking clauses with waitcnt",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "88a9576a3ef0e65a1b020961145bd1718bb0f71f",
+        "description": "meson: fix link failure with llvm-18",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3fd002f6d551e377cc9db623c477ece8e3b0aa97",
+        "description": "radv, aco: Remove the code that jumped to RADV's TCS epilogs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e42192369235fc927fd3191420987a20d973c63d",
+        "description": "radv: Completely delete TCS epilogs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "508f293b14cd6c1a7320ba0a1f62326b14dde2fb",
+        "description": "ac/nir/tess: Emit tess factor stores based on new intrinsics.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "476a42c02c21d7221b6302c4f67937edcfff8724",
+        "description": "radv: Call nir_opt_dead_cf in radv_optimize_nir_algebraic.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "315cacddbda1b14a70f60126ad7577b905468d43",
+        "description": "radv: Implement new tess intrinsics.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a43f3342652718a821c2b7aa9c9e603d5e13cdf",
+        "description": "radv: Copy TES primitive mode to TCS info.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f646b057377ee9044dc61777a32302e327f62137",
+        "description": "radeonsi: Implement new intrinsics for monolithic shaders.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "411de8488cb01017289bb3c4980f4800fd843d4c",
+        "description": "nir: Add two new AMD specific tess intrinsics.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a8fae252032da798f0a88a5109ed9675be32c82",
+        "description": "d3d12: Support HEVC slice L0/L1 active number override",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33336a2766d6b176d2a244a96a068769e8f43dc0",
+        "description": "d3d12: Support H264 slice L0/L1 active number override",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc04a04f13571c8bec0a4f36cacd52518d4c9e62",
+        "description": "d3d12: Bump directx-headers dependency to v613",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66153f7bfe8373d26e779120650c75865712bb8a",
+        "description": "aco: always emit float mode for merged shaders compiled separately",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df3a1348d121ceef5775b28aa959a5b0d4d275bf",
+        "description": "intel/brw: minor rework to de duplicate variable assignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7155121773059ec34a4d4f3f420ae481fcf9092",
+        "description": "intel/brw: adjust the copy propgation pass to account for wider GRF's on Xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d425913f7a731dbe811ecb336337579d9b6f954",
+        "description": "intel/brw: update disassembly for MATH pipe",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "467ee9d27ab97476ca8bd4640a663851e1886560",
+        "description": "intel/brw: Xe2+ can do SIMD16 for extended math on HF types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c4b38c717de208dd64dabc21cfc03357bcc6292a",
+        "description": "intel/brw: account for sources when determining if a operation uses half floats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07f0825c03e0b5f43fa1da21ec5632088588cbb0",
+        "description": "radv/ci: another batch of flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d92db5e14af610a4d6877f56de1b31d44c47edc1",
+        "description": "v3dv/ci: another batch of flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6978b1af2749f521c8371ba19526f56f1e5d42d",
+        "description": "Revert \"zink: store last pipeline directly for zink_gfx_program::last_pipeline\"",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "be8b7980e66f3526d7c1eb9b137772fb6fc90a96",
+        "notes": null
+    },
+    {
+        "sha": "5eb0dec525a2e368d7b2a4cb79264926b51d8f88",
+        "description": "wsi/x11: Return OUT_OF_DATE on sw resize.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "19dba854be005142f70c36895622c5d46c3b9ba2",
+        "notes": null
+    },
+    {
+        "sha": "a4231d4f56cbceea12a6777536425568512242fc",
+        "description": "aco/spill: use average use distances to spill loop variables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c37188206047cbcadd465d826317a75d39d1cc7e",
+        "description": "aco/spill: use average use distances in init_live_in_vars() for merge blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2ac4f1917e680eb277e1abb5f1c708856df1acc",
+        "description": "aco/spill: use average use distances in process_block()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9833120e91c57747b71f1b58045a950d738953ab",
+        "description": "aco/spill: gather information about average use distances",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6e56ab356e734e660f3ef8032f55c45891b7c81",
+        "description": "aco/spill: use live variables instead of next_use_distances in add_coupling_code()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b96482ec998c488c1338c249f86e13963c5a1a3",
+        "description": "aco/spill: maintain valid live vars at any point",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fab87578316295a31ad845b52be21879ca15b0f5",
+        "description": "aco/spill: compute live-in variables from live-out",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfb62fa70d0b4b7f72c9c6ef1f367960f04da5c7",
+        "description": "aco/spill: pass live_vars to spill_ctx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66616f08620ff025859f6c3802c2c464eb1d2489",
+        "description": "aco/spill: Fix assertion for nested loops",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "898fd9227a7e4d5bf2a6ff5c3cce17dc7d0fc964",
+        "notes": null
+    },
+    {
+        "sha": "c38a2ab9936ddb35a0d0005275ed2b439262e47d",
+        "description": "radeonsi/vcn: mark rc_per_pic as obsoleted",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b61ffe2151df2eca1e9af9730cfd712ee43e6bbd",
+        "description": "radeonsi/vcn: choose rc_per_pic by encode verison",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5ecf83e9adcd652e6159e324ea0c14cb34e80976",
+        "notes": null
+    },
+    {
+        "sha": "76425cdf236a287ad1dd2a9b67d640a873f9a53b",
+        "description": "ac/gpu_info: Add vcn dec and enc version query",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51a5ebbd01ca7ed73699c68eb8a0cdf80ec1d84a",
+        "description": "aco: don't combine mul+add_clamp to mad_clamp",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db29984c254f60f5daeec0ea4e6048b6ee7902f8",
+        "description": "aco: move create_instruction() to aco_ir.cpp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a863c7951e6ba581ab27581d393f9ec8b7baa913",
+        "description": "aco: remove create_instruction() template parameter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4cb73cb5f3ae0e2ca89f321b249bbde96d945e8d",
+        "description": "aco: defer instruction size from aco::Format in create_instruction()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b0ebcc39b59360cfcaef3506249de2545b4fb12",
+        "description": "aco: change return type of create_instruction() to Instruction*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd62f977197c313069a591f621a50acb1d4b1a92",
+        "description": "aco/builder: use accessor functions instead of casting to subtypes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "118718923569c82fd4d07175b5e7d6c2bba471aa",
+        "description": "aco: unify different SALU types into single struct SALU_instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d265257a052670b2a4c73b2b524158c94ecc9f8",
+        "description": "aco: remove SOPP_instruction::block member",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cef01e817de517037135f768595696ccb8873af0",
+        "description": "aco: use instr_class::branch to identify SOPP branches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2d189380c4b70bf359a349aa09569867a74a5d2",
+        "description": "radv: remove useless RADV_DEBUG=nomemorycache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fcf574f4c1081f10a8568162ed288031737ab06e",
+        "description": "radv, aco: Delete now dead TCS epilog code.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53ab1642340c4e462a0dc4d0743d931aeafb286e",
+        "description": "radv: Always pass tess factors to epilogs in registers.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "542992d037998efc926c9461bf7a07cbd65468b2",
+        "description": "radv: Declare tess_lvl_in/out args for TCS epilogs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "023d7fc76ddf707b6fc1956218510379f41dd9ad",
+        "description": "aco: Use tess factors when TCS jumps to epilog.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "34220840266d56c40fc64afdb32876c47726dd27",
+        "description": "aco: Use common helper for counting tess level components.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "524c4fa5adf65d7673d953ac63d21e93df89a4e8",
+        "description": "ac/nir/tess: Refactor how the end of HS is emitted.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96998b448cb106c38a7476f7079ace2e77c7d574",
+        "description": "ac/nir/tess: Emit tess factor output independently of whether it can be passed by registers.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a5a462a75383c5045884b77b7060b3cd44e2ef0",
+        "description": "ac/nir/tess: Split tess factor write into multiple functions.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d53e836d55e6690935c3525a9a433d46d2c79a82",
+        "description": "ac/nir/tess: Don't record mapped tess level location.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7d5d7629aed5546171079ba774110a363abd4fc",
+        "description": "ac/nir/tess: Always record tess level info and use it at the end.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02f6a2591ce81aa4a2df246ded5c8e7fe2439dcb",
+        "description": "compiler: Add helper for counting tess level components.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74a1564aed84dcde5d9d0329f59f76008e3718d3",
+        "description": "freedreno/replay: Allocated maximum available size for cs overriding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df3ba95a2498447b037d0d8efbdf605be25ff8ff",
+        "description": "util/vma: Add function to get max continuous free size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bcf793306fbfd013a4f756dfee199b88b5190d11",
+        "description": "radv: fix conditional rendering with mesh+task and multiview (again)",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46127a4ba747b98e76071361f3eb85480e772e43",
+        "description": "pvr: Add pvr_ prefix for vk_format_* functions in pvr_formats.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86c88369c692c0e8fcf7d3957f1a98cf5f13e0e7",
+        "description": "pvr: Merge imagination/vulkan/vk_format.h into imagination/vulkan/pvr_formats.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a4a42eb65228a3b2a1d1c6e395dc401c6ff17b30",
+        "description": "pvr: inline and remove vk_format_get_channel_width",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49f6270e7de9962d3cf874c2d32ceaee47dcf304",
+        "description": "vulkan: Move vk_format_is_alpha and vk_format_is_alpha_on_msb into vk_format.h from pvr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df3d37d7d69a61bf7d38143ac1098e1533a20a97",
+        "description": "radv: Rename src/amd/vulkan/vk_format.h to src/amd/vulkan/radv_formats.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0173825278d2c87c7c68e70b4758b66339dfd106",
+        "description": "docs: add sha256sum for 24.0.4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8372991400f8b95acfb8088071a4fbe766b14da3",
+        "description": "docs: add release notes for 24.0.4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a538dcc571cc8eed88cee32983f0d09a06b5043",
+        "description": "docs: update calendar for 24.0.4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5cf3260de8c72b7985caca18293c1a8e3084ce42",
+        "description": "docs: update calendar for 24.0.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "65e2b37ade632604a4a81e0ee7e74ee84c892ffe",
+        "description": "anv: optimize emission of dynamic state with blorp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe1baa64819f9e2d59b60ccec853610db21b9911",
+        "description": "anv: reduce blorp dynamic state emissions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a147ccaa5cf4988408e127fc36d4a851187fd1ab",
+        "description": "blorp: add support for cached dynamic states",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdc3d7543168b50475a3c1ba620045b96b33c0a5",
+        "description": "radv: Remove redundant inc_gallium",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c4705d4cff5f6d8477070b64e2b2da16bb18abf",
+        "description": "intel/meson: Remove redundant inc_gallium",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aaf81bd069fa49ff306655f6852fbee6e8b87e7d",
+        "description": "v3dv/ci: add more flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "82ed8aadea26770331974b8d3abab56f13c7fc8d",
+        "description": "vulkan/wsi/x11: Explicitly discard errors from xcb_present_pixmap.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "2b885b233f7a6300ae88732c179888c02788493d",
+        "notes": null
+    },
+    {
+        "sha": "b5877e05019e28c27445187358f76111d8f99860",
+        "description": "nir/opt_varyings: update alu type when rewriting src/dest for moved ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c32401f49b0675c0d6f5b4b2952acd6cdb00231d",
+        "description": "radv: Allow NGG culling with LLVM.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af2a0ea4528e6ab13402cb7c24981bfc74b52c66",
+        "description": "radv/llvm: Remove dead code.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a10d1be0e9840d16ffa1c8024b193c5aa2e0995",
+        "description": "etnaviv: fix depth writes without testing",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b29fe26d43874c90df60edbffda70fca67b98e4a",
+        "notes": null
+    },
+    {
+        "sha": "2b2f74ab35481295f0f7e186193d0ff18f302e12",
+        "description": "nir/divergence: add zink intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ab81efefc02b69f51d6c7e05c20cfd1aec42029",
+        "description": "gallium: remove always-false parameter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ea8249e556a37eb5dd8bceb250ecaa80b5fdb8e",
+        "description": "nouveau: Fix NINC TERT handling in vk_push_print",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9e133c4000dcda4cfabe959fe5664b25ff820a66",
+        "notes": null
+    },
+    {
+        "sha": "382a53979b3071623efd99acff37197182e51cfb",
+        "description": "radv/ci: add more flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b75d65dfb22023bb9530dd86f0f42454725ab4fd",
+        "description": "freedreno/registers: fix installation of schema",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "bf89f777f8d73b0ccace07e5c27a12f19fd412ba",
+        "notes": null
+    },
+    {
+        "sha": "c0875d21563257442fd91aab5740248b0fd96a5c",
+        "description": "rpi/ci: add flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c4625c88753312794cce11f5d5fa186b3574229",
+        "description": "ci: bump VVL to v1.3.281",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "739d45d5d4312cb6add0667cbd2a6aebe1438200",
+        "description": "radv: inline radv_device_fault_detection_enabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4199a9b21951533625461ec5773e6bb50aa782d",
+        "description": "rusticl: work around reference-to-mutable-static warnings",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "437e0cb3cbd02abb7a8293cb5d780c7a27bdd0ee",
+        "description": "zink: Removed unused function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b707e03019ad511d50deab07ea36de6edf74c8f",
+        "description": "v3dv/ci: track regression",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dac3b9ac264eacc5a10add9f8b6bdbc9e7e2de6a",
+        "description": "ci/etnaviv: Remove duplicates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ea357a7d77499c33d5eba53a7cf56d2304933ce",
+        "description": "ci/svga: add missed test and gl-rules include",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "54050d88441b9c2a39564ddf80ee0545a462e103",
+        "notes": null
+    },
+    {
+        "sha": "3d348e632e3465ddfd24ca597d17ec0f9c0917c3",
+        "description": "svga/ci: workaround vmware farm's inability to use public DNS 8.8.8.8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54050d88441b9c2a39564ddf80ee0545a462e103",
+        "description": "svga/ci: land vmware mesa-ci lava farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8dde690a5b2a798d3361972e293f3916fa76dd34",
+        "description": "pvr: Implement VK_KHR_index_type_uint8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d7517afa810c1e94fc4170e5ea3e903114a9de24",
+        "description": "panvk: Make panvk_pipeline_layout per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea98467a2dac7e41fd73dc4cbbb50eb0c8e061ac",
+        "description": "panvk: Make panvk_queue per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4253ad999949bb4f59ddf906ba5dab3f8b577fb8",
+        "description": "panvk: Make panvk_pipeline per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f912b075dd6de711a334d50dff911db8d0272d5c",
+        "description": "panvk: Make panvk_descriptor_set_layout per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52abe6e921c54d950c9a97cf1ab81cc0011a42bb",
+        "description": "panvk: Make panvk_descriptor_set per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc61d544898b1a641c9703f4470abb411d1c8752",
+        "description": "panvk: Make panvk_shader per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a790f771691544f31a1a8dddeb4b17e3f7b69e85",
+        "description": "panvk: Make panvk_cmd_buffer per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18e03803a75c66e45eb9b2380282d175d134e6d2",
+        "description": "panvk: Make panvk_sampler a per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ff7971b16b1c6283128246628e1f9d1fe7e2c8d",
+        "description": "panvk: Make panvk_image_view per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4aeb7aa22fde04bf288af9570d2da3d7a62d7a9e",
+        "description": "panvk: Make panvk_buffer_view per-gen",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2de95773b9cc366c4d4b1339a993e31f8812b2f2",
+        "description": "panvk: Kill panvk_private.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc69751abdf6b9811c916db0af321595a6d6b21d",
+        "description": "panvk: Move panvk_wsi definitions to panvk_wsi.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a032600c615a77a18630221eca7eb4861a45d67",
+        "description": "panvk: Move the panvk_priv_bo logic to panvk_priv_bo.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23c3edf3dee833c40f512f443c3ffc71d770f6a3",
+        "description": "panvk: Move the panvk_cmd_buffer definitions in panvk_cmd_buffer.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8157f51fae3eafb4967fbfb63b5c94a92b0f7cf1",
+        "description": "panvk: Move panvk_device definition to panvk_device.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "524e17664f759c6ad5a0fb796983a8227ee0de89",
+        "description": "panvk: Move panvk_meta definitions to panvk_meta.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac34183ec3df1435481f345d87f06ee949ed43c7",
+        "description": "panvk: Move the VkPhysicalDevice logic to panvk_physical_device.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afdca260919040dcbf23ce1952dd1d7c1bab5b56",
+        "description": "panvk: Move the VkInstance logic to panvk_instance.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b0ff2643f22a25dc167c46d8392ec2da77f5b5f",
+        "description": "panvk: Make the device creation/destruction per-arch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a58268f6a9d882c10a43bc57068b1193c1a1a970",
+        "description": "panvk: Add a panvk_arch_dispatch_ret() variant",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "01a6f128c13aed290dcaecad2aa343214242f016",
+        "description": "panvk: Move VkQueue logic to panvk_[vX_]queue.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afbac1af7737310fc5741ee8d2d94e147333ce1f",
+        "description": "panvk: Move the VkCommandPool logic to panvk_cmd_pool.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7bf8805e5aa8e2fc95ca53de7c7cf890d06086a9",
+        "description": "panvk: Move panvk_{draw,dispatch}_info definitions to panvk_vX_cmd_buffer.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69525b7955a0597599ddcf351ef80ae7caefb1fc",
+        "description": "panvk: Kill panvk_[vX_]cs.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18174d8665aedb7d5a7a07d3544558414d9bf049",
+        "description": "panvk: Move shader related definitions to panvk_[vX_]shader.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80947ae1d20fd87f0427ac117824e17f6818263b",
+        "description": "panvk: Move VkPipelineLayout logic to its own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2da06e66288b66e76d6b2cebe228a49f3f14ec9b",
+        "description": "panvk: Move VkDescriptorSetLayout logic to panvk_descriptor_set_layout.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a944d7270b65143c353d58e4c4807e302fc2e1e4",
+        "description": "panvk: Move panvk_descriptor_{set,pool} definitions to panvk_descriptor_set.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a16aaafb530280cb702dfdf0a689d1e72bf541b",
+        "description": "panvk: Move the VkEvent logic to panvk_event.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "adab7d3fccc1c8740f080a5cb96c9acd636862ef",
+        "description": "panvk: Move VkImageView logic to its own source files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86a4978071742ad0296a71fcd2a3ffc58aed5e65",
+        "description": "panvk: Move panvk_pipeline definition to panvk_pipeline.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b511f756479a11495f566caf7291084843299ef",
+        "description": "panvk: Move the VkSampler logic to its own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a817bd62b1b151ffe6030e54102ffaac77775da",
+        "description": "panvk: Move the VkDeviceMemory logic to panvk_device_memory.{c,h}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09d3411ad8a57e8edccfa7367eafb64fce7dc8f5",
+        "description": "panvk: Move the VkBufferView logic to its own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "822478ec20c8bca8a3a7e23cffc7ceee7773ff03",
+        "description": "panvk: Move the VkBuffer logic to its own source file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "763fa8f45afc8ac3e4348bc59922486c250ba7fd",
+        "description": "panvk: Move image related definitions to panvk_image.{h,c}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b91e4430977580f1f2c63b6dc0d34d5882eb909",
+        "description": "panvk: Move some macros to panvk_macros.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6440abce3b26d6a946c1dd5d9867f790431df799",
+        "description": "radv: add radv_bo_virtual_bind() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e715cf30dc42df71d120b0b8b43bc283fe844681",
+        "description": "radv/rmv: log allocated/destroyed BOs in radv_buffer_{create,destroy}()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b4787ebc0a0814a7d6039833571a7600f460d2b",
+        "description": "radv/rmv: prevent logging BOs allocated in GDS/OA domains",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "36f6a5b8ff7b9b990dbe6d8dc200717b0b29100b",
+        "description": "radv: add radv_bo_{create,destroy}() helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b1ab23130fa1d1dab5ac2223b5a8bc7c23d83a7",
+        "description": "radv/rmv: remove unnecessary is_internal parameter to some helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9105dea24656e5adc3896622ac8556a250348db",
+        "description": "radv: make some create resources helpers static",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e863880ffb6915db0584cff4a84a4bfb40eacbdc",
+        "description": "radv/rmv: remove BO size parameter in radv_rmv_log_bo_allocate()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c718b19f7b799d1cd8b879d99e8d4e2264113789",
+        "description": "radv/winsys: move BO size to radeon_winsys_bo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7d21220e8243b4e89aed95d34c5ab8c122433c6",
+        "description": "radv/rmv: fix logging sparse residency",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13ad10bd263262fd43bef4217ec09fd3d6f3d20e",
+        "description": "radv/rmv: fix logging of per-queue destroyed BOs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f0e1aae8746c1229f9cc19a6286ba9a8e575580",
+        "description": "radv/rmv: add missing logging when events are destroyed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d004c2e72517d4374bd1ed89bc7054243830b29d",
+        "description": "radv/rmv: add missing logging when sparse BOs are destroyed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71841afa5e0bc9644d0c7bdf0100a4b984663b37",
+        "description": "crocus: fix potential null pointer dereference if transfer_mapping fails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "348506462a0e4497e1bd12ddeb17a5924fb2ee09",
+        "description": "intel/brw: Stop checking mlen on math opcodes in CSE pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8441043161c1a06610a9c39c9548949221488890",
+        "description": "anv, hasvk: Fix nir_lower_multiview to re-emit outputs before EmitVertex",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b3f78796d131980627f95f07be7de4b4f8b515c",
+        "description": "anv, hasvk: Move multiview remapping loop below output stores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c831355d64b65271f65ccb7f3fdce08cba8c3945",
+        "description": "anv, hasvk: Save the original instance ID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a203722634b3800df2ff93125cc711a92dc6054a",
+        "description": "intel/brw: Delete brw_fs_lower_minmax",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5a0f3b570f617261b3da12439fc6e7b1eef6aea",
+        "description": "intel/brw: Allow changing types for LOAD_PAYLOAD with 1 source",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0c05c1041e38933ea456227332eeaa17cfd6086",
+        "description": "intel/brw: Fix destination stride assertion in copy propagation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1cb994622854a2c3c89e5642e20619c82baa1fbc",
+        "description": "intel/brw: Fix register coalescing's LOAD_PAYLOAD dst offset handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba11127944d898581eab17dc76ea56372b97d0bd",
+        "description": "intel/brw: Fix opt_split_sends() to allow for FIXED_GRF send sources",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "589b03d02f0662553012249cbf097b63e7a03d72",
+        "notes": null
+    },
+    {
+        "sha": "9e3932e99018bbb3ae0ae716bd7d9f53fcebf698",
+        "description": "{vulkan,radv,anv}/video: fix issue in H264 scaling lists derivation",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8daa329634e049b377c61eb3ada9f291584c971b",
+        "notes": null
+    },
+    {
+        "sha": "f36c0683a01868bfd9595d9d17f2693e7cb0fd88",
+        "description": "radv/ci: add a bunch of flakes seen recently",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1007e00696e47f2298a497f161ea2648f4a75b2",
+        "description": "radv/ci: sort tahiti flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b7628463596950166468092a417b89d6c100422",
+        "description": "util: mimic KCMP_FILE via KERN_FILE on DragonFly and FreeBSD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e12b68aab58b0a6b4fbaffe6e18c2801ac43f697",
+        "description": "microsoft/clc: Install clon12compiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e9b980b3fb614eb3aebfa78d7912cff4326970f",
+        "description": "microsoft/clc: Adjust order of UAV binding assignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b64f13e70f194ce0d945709598c98a2223070ebb",
+        "description": "microsoft/clc: Add linkage capability to libclc build to silence warning",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6468c6a80b3e95e4fc250dbd04a0c57c44614825",
+        "description": "clc: Move libclc helpers back to microsoft/clc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6658e3dc65425300e62824d931b22b2f025c8e2",
+        "description": "microsoft/compiler: Simplify code emitting CL globals",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1649a4d92ba880242f5891c278ec8e8352b1e42b",
+        "description": "microsoft/clc: When possible, compute a part-constant \"pointer\" value for kernel inputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6fc8d0147efddeb62bd98e26db354a70e8e58182",
+        "description": "microsoft/compiler: Don't store static-indexing handles that are dynamically emitted",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "108b205830f56aab1243c5a6e16fb95f7f08b24c",
+        "description": "nir: Handle ptr_as_array for build_deref_follower",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b5414e7166846f59cba6ccf6ff563e7fd33c2dc6",
+        "description": "freedreno/registers: Add license header",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e7bb74a1a6d232139d21cd171c3792180c4bfe4",
+        "description": "Revert \"intel/brw: Don't consider UNIFORM_PULL_CONSTANT_LOAD a send-from-GRF\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5814534de57444475cc3e20c88c4110e7629d9de",
+        "notes": null
+    },
+    {
+        "sha": "4311314891280e829444fb0733e30f2f0c49fa09",
+        "description": "docs: Update features.txt and new_features.txt for anv and nvk",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99f576979a2324d2a127e6908437c6b855c07a5a",
+        "description": "d3d12: Implement PIPE_VIDEO_CAP_ENC_SURFACE_ALIGNMENT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "983b62ea5009069a495e8a57a76f75a4e5c05619",
+        "description": "anv: fix query clearing with blorp compute operations",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "6823ffe70ed18d0438006780ec82c0b3610b36d9",
+        "notes": null
+    },
+    {
+        "sha": "b6c1390354bbcb99687fa60774697cfa90b5f271",
+        "description": "nir_to_spirv: Allow LOD for external images",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "3f783a3c507e16bffb2e460484fbf65eb11ba826",
+        "notes": null
+    },
+    {
+        "sha": "601d2192573d15f24244af95906d1f08e3d624aa",
+        "description": "anv: fix bitfield checks in gfx runtime flushing",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "50f6903bd9c472eef2af2cbf62027df3bbe0ca8a",
+        "notes": null
+    },
+    {
+        "sha": "341a9e9194a5d01186277196f5de6c55f8b90081",
+        "description": "anv: fix temporary state pool allocation failures",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "82d772fa9b3a5eb7809921ca448b6e796a3d92b3",
+        "notes": null
+    },
+    {
+        "sha": "0264fc688f08e4720090b85216e1cfa5a552dc85",
+        "description": "anv: fix block pool allocation failure",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58a91f6a8c07c6ad877e7ca12feedbf7d209e5f9",
+        "description": "anv: fix invalid border color free",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "44bf5527047246ae8192b87f346fc801ad80817c",
+        "notes": null
+    },
+    {
+        "sha": "1d7c38a5def7f6f8b4441ca60780ddb78b4c5216",
+        "description": "blorp: handle a few allocation failure cases",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b5097081a366fde4f9a45eef3b46527df1a59a1",
+        "description": "freedreno/devices: Add A740v3 from Quest 3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b8c739ccd3a8564ce08aafba5a42cfd2f9fa4e0",
+        "description": "tu: Emit non-draw-state state at the first draw call",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5acdb22ba2374ed8c0119731327cfd060c131430",
+        "description": "tu: Update RP state depending on pipeline in first RP draw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a19c5118184a494d7d98d3813f70cf7458a581f0",
+        "description": "docs: Update features.txt for tu",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98ae874344bea7cd31dd1ce30074e169e55c90b7",
+        "description": "tu: Trivially expose three VK_GOOGLE extensions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05b9e0dfed25c0ae74c2b3e9cc6b5209cfe215f8",
+        "description": "tu: Expose VK_KHR_surface_protected_capabilities",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3bac815c782a5a6be0946dc581ba49ec48c9b394",
+        "description": "pan/bi: Update the push constant count when emitting load_push_constant",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d53e8489365f9f51e2571df8b9ac84a11b74373d",
+        "description": "pan/bi: Lower load_push_constant with dynamic indexing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a07685bf15b250c0900b657a6d0941a7ae2bacb",
+        "description": "pan/bi: Lower push constant accesses",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb8379557e601cecb9c16991c9fca7eaf3655e39",
+        "description": "nir: Extend nir_lower_mem_access_bit_sizes() to support push constants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "544f76dd137f10ed4fb0e9fdeabc71492f610124",
+        "description": "nir: Extend nir_get_io_offset_src_number() to support load_push_constant",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "595d362d4bc739837eae560e07ad585cd7e2cb8a",
+        "description": "panvk: Implement dynamic rendering entry points",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8cba4977019764e0752827f4af26fc64096da1ef",
+        "description": "panfrost: Move the image attribute offset adjustment to a NIR pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7992d44b2453ad97863f00594aa0ab4524065cbd",
+        "description": "v3dv: fix image creation when exceeding maxResourceSize",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d2c5999fd8917155d2bd7a344ab9dec5dd2b180",
+        "description": "nak: Don't write undefined FS outputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb15a42357893cb7617d3ea2f63674752860f393",
+        "description": "nak: Simplify over-all I/O lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1e8bba7fa7990143cb8ea34c3cd3f9c0608bfc0",
+        "description": "nak: Drop lower_io_arrays_to_elements_no_indirects for FS outputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4ac4ce112059ce821f6eaf2c4490a6c5d3d9cb3",
+        "description": "nak/nir: Use nir_io_semantics for FS outputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "278eaa5ab137463b90dfad0eda559227319784d9",
+        "description": "nak: Call nir_lower_io_to_temporaries for FS outputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f46445a0f6e6a3234f02adae424527f050ea4502",
+        "description": "nak/nir: Clean up lower_fs_inputs a bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b9a836ee36aa644362ecaede2bbceb9283d8d2a",
+        "description": "nak: Break lower_fs_inputs into its own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdb237a19568968926a312a6efcf5de2483c75d5",
+        "description": "nak/nir: Use nir_io_semantics for varyings and attributes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b967789f491c49c6aa7d512a217411203f954e4",
+        "description": "nak/nir: Emit nir_intrinsic_ipa_nv directly for FS system values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "668880c8c8cd3a7c0b1501f452d97cb96e6799f6",
+        "description": "nak/nir: Add a load_fs_input hepler for flat inputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d5cea7d81280b8696fb381d72fefaa994711516",
+        "description": "nak/nir: Rename load_interpolated_input",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9cce4e63644acba980163f59b772da8faeb6b220",
+        "description": "nak/nir: Emit nir_intrinsic_ald_nv directly for system values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b4095d086596a32c5c136ad5f4d7b2aa519e796",
+        "description": "r300: fix NIR passes regression",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "092299f18ad1744d821b6551b2269ed107130b71",
+        "notes": null
+    },
+    {
+        "sha": "bf5d203f240bf26d74c63127a8bc62745972242e",
+        "description": "zink: set dynamic rendering color attachment layouts",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "2ad01461797ecd249ceee691b673bb60bd727ec9",
+        "notes": null
+    },
+    {
+        "sha": "561fae6845479b81d8f41f23376c469524004166",
+        "description": "nvk: fix valve segfault from setting a descriptor set from NULL",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a475c70b26680b48dfddc3893397c44c8886583",
+        "description": "venus: add a more relaxed polling strategy",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7dc2f622734b304334aafc5e3b07a4d2ba768485",
+        "description": "venus: decorate cmd enqueue macro internals with compiler hints",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fa9950ef507184b1e98613fe69485433dd3e0d6",
+        "description": "venus: deprecate unused perf env vars",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e47ec2321664a513f64e57772c77d66ffd5fb35",
+        "description": "venus: avoid constant busy wait for query result waiting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "88b64d14d8392f481e17660f7612d1ac87a4fe15",
+        "description": "venus: add enum vn_relax_reason",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d05eb9740889429d3935c64cde78d3e843149a1a",
+        "description": "venus: further reduce idle timeout from 5ms to 1ms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30d7b3bdecddb3c727aea9616fd5a892ede39dfc",
+        "description": "venus: avoid excessive ring notifications",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c81b6e5d4c2e19aa8b05fc8a8c884870f4ef9d89",
+        "description": "nvk: drop meson version check that is always true",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0113a2d4b3af7c0436d6a52972f5caacf40b384d",
+        "description": "intel/decoder: Fix binding table pointer entry being marked as invalid",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "787079e52a07afe0308da2e96ce1bb764960f16d",
+        "description": "pps: Config tweaks to avoid loosing traces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1e57ea2878f1012a91b9b8fc4df9e3391dd436e",
+        "description": "pps: Enable memory traces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5154a0831e7f3ce290cf1179f3c3bf65e07b4ba8",
+        "description": "tu: Add perfetto memory tracing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9936e91808b5eefd60c0a766043e548b28227351",
+        "description": "freedreno/drm: Add perfetto memory tracing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3fb2b07aa299f6d4d3656a92d30112be2212674",
+        "description": "freedreno: Add bo usage hints",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db49237267b4ac6b5647055cefb5a89207c38b9b",
+        "description": "freedreno/pps: Don't re-init perfcntrs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8498371b65c2286e7af8804ca9235c1a9f457040",
+        "description": "ci/debian: Update DirectX-Headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff802ca93beebc961f10bd36326924b754b9ca37",
+        "description": "ci/windows: Update DirectX-Headers, Agility SDK, zlib, DXC, and WARP",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "267ae85a720637aec984189206028023642f3696",
+        "description": "microsoft/compiler: Disable GS streams workaround for validator 1.8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "811bed8a233088b18f5461e338bb4f03e6d80faa",
+        "description": "microsoft/compiler: domainLocation component index needs to be i8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "007b0fdff0b19775ce6da7fe2a6f3d9da5cf43da",
+        "description": "dzn: Initialize memoryTypeBits for querying properties on imported handles",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5957778c164bbe95411837f2fd80ad0001b6b7ec",
+        "description": "dzn: Include vulkan_core.h instead of vulkan.h in the device enum header",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9d6514fbccd05343e3f7cc48a8d07218b9c28ef",
+        "description": "panvk: Disable global offset on varying and non-VS attribute descriptors",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "c0d65398279db02f68b5acc23c3afbf1c34a5204",
+        "notes": null
+    },
+    {
+        "sha": "44cfc5706245c91e544a105e93aa24e2017c5043",
+        "description": "nvk: Advertise VK_KHR_shader_subgroup_uniform_control_flow",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "79abb2aaffce90faf210a343908dae2975ccb6b2",
+        "description": "nvk: Advertise VK_KHR_shader_maximal_reconvergence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b5e785d9e03e29eac413ddea346c448dc1bb1d4",
+        "description": "nak/nir: Use nir_lower_terminate_to_demote()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cad080412d52f733b6351414aa1615746c542157",
+        "description": "nak: Remove the old barriers pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a510e858b1f7989c037ea4dbee148d214aed2164",
+        "description": "nak: Use the new lowering pass on SM70+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4bf8d8bd51ca73e3d2a4286f51ea08c5b0ddc16a",
+        "description": "nak: Handle unstructured NIR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b75dde0cc60b6eab0e6669c160ab67ef05b52082",
+        "description": "nak: Add helpers for emitting jumps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2938e7934b6ee56a52002a1c30e254c2869ae7f8",
+        "description": "nak: Add NIR helpers for jump instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8e7f33818f0c8c8f73f82057c3ed536b0302d1a4",
+        "description": "nak: Add more NIR wrappers for walking the NIR CFG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9312356d999f6a03e115c21579df95869690cc57",
+        "description": "nak/nir: Add a control-flow lowering pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "879c5c1dda309b04f01cb9b3ec5c6e21a47b52f7",
+        "description": "nak: Add a condition to bar_break_nv",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18c4c36ae2b0b7d3918ad29cb98cd84883bf0d51",
+        "description": "nak: Move barrier removal into its own pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4fcbf558dda1afd5e0d4ed88004984c30f657168",
+        "description": "nak: Add a copy_fs_outputs_nv intrinsic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75861c64b8282c8e6a3c59cc22f062f9a15bb3de",
+        "description": "nir: Add a lower_terminate_to_demote pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bd9c1b95890de05ccbe1b0b3c849ee7eb1b84b5",
+        "description": "nir: Mark divergent regs in phis_to_regs_block()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2be97717e696d70ce3153e8e2f54e5b20e1d51d2",
+        "description": "nir/gather_types: Support unstructured control-flow",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "260a9167db54de8ec6cd687aab2225751fb2dda6",
+        "notes": null
+    },
+    {
+        "sha": "3293248439bb864ef96a983566c0e81602421093",
+        "description": "nir/repair_ssa: Support unstructured control-flow",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42853b8115d6ff3909b07542ff588091542ee342",
+        "description": "nir/lower_reg: Support unstructured control-flow",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bef0601d51a95f0032ec63f708bba523db4c9325",
+        "description": "nir/lower_reg: Remove dead reg_decl intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7576212c2c3b9572969f269e580f984bc4f860fb",
+        "description": "nir: Validate that unstructured blocks are in reverse PDFS order",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c859ea5783b15ee32435dd6d49a4e3645a45fd19",
+        "description": "nir: Add a sort_unstructured_blocks() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a18a9172371d2cb1375b02aaccfa7ea876882e2f",
+        "description": "nir: Improve the comment for nir_block::imm_dom",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a782809f81dc32079691b3a280580dbf7b800dba",
+        "description": "nir/builder: Correctly handle decl_reg or undef as the first instruction",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1be4c61c957d656d0d874b82779b4016a8bb03fd",
+        "notes": null
+    },
+    {
+        "sha": "b069151e627b57928ce79fc64d5f765fe63d2907",
+        "description": "nir/print: Inline print_ssa_use()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba8860301f6bae280f69fdd2be2bdb8989446664",
+        "description": "nir: Take a nir_def in nir_goto_if()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76cd9388a140cc57a5bed00d85dc69c71fafdbd6",
+        "description": "zink/ci: enable RADV_PERFTEST=shader_object for NAVI10/VANGOGH",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fecbb4177c63e2df91aa72798d2668bf42c0e6e9",
+        "description": "radeonsi/vcn: update to use correct padding size.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b24748a93ab164c5c5884e49974de0902a42c3be",
+        "description": "frontends/va: add surface alignment attribute",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7525d2242bd70ee4acbcb9507286593a935f64e8",
+        "description": "radeonsi/vcn: add enc surface alignment caps",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9be380c6da14c1130f344c577ff425985395dc6a",
+        "description": "ci: simplify unnecessarily complex printf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed45e373bfd30882a2acf79f3e17bababf245c57",
+        "description": "ci: convert the job start date into a timestamp only once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "775eca9449c16d1a622a216927eb7a4da6754349",
+        "description": "ci: deduplicate converting the current job runtime into %M:%S",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfd56a1fdd05635425e0f3a403a1d3367d1eefc7",
+        "description": "freedreno,tu/a7xx: Add PC_TESS_PARAM_SIZE and PC_TESS_FACTOR_SIZE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "328f74fb44934025eec1934362aec1bc8069a759",
+        "description": "radv: make sure to disable NGG culling with TES when the FS stage is unknown",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d3374a7a6f0cfb1a1f71530634b318c392d6323",
+        "description": "etnaviv: Do not set tex.amode for rounding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b1456ccdbccedaa3342fd1a7a0a6fbba26df49b",
+        "description": "etnaviv: Remove isa.xml.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "846d4988ce930de925529b682eff6e2e81e50297",
+        "description": "etnaviv: Switch to macros from isa.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8e0f2c25398faf5d7e51ab0e1ca143eac1f85276",
+        "description": "etnaviv: Move swizzle related macros to scr/etnaviv",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "abe5bd35d0bcd10ff08c4dd0239ab1fbeea3db49",
+        "description": "etnaviv: Switch to isa_assemble_instruction(..)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "520886817e55a8b19645a7392d5d175c5a9e1572",
+        "description": "etnaviv: isa: Add isa_assemble_instruction(..)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b216fd044bca400aab12e24fbdacc4e70953890c",
+        "description": "etnaviv: isa: Add encode support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3263d533d3b9eadcbd303be17740ec7f3acb2e80",
+        "description": "etnaviv: Set dst.use for MOVAR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8de9be6eb1beb7883a3d5ace1eb3a3d81a7a750c",
+        "description": "etnaviv: isa: Add rouding to etna_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "feacc7239c8b29bde4037b9eb02d2c95f2477f5d",
+        "description": "etnaviv: isa: Make use of generated enums",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "36c826d7ecfbcb6127ab8e4a33604d0988f2a1e9",
+        "description": "etnaviv: Move struct etna_inst to src/etnaviv",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59f9a54f36dbe07234196664027e19ed06641e44",
+        "description": "etnaviv: Link against libetnaviv_encode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a4e15fdff7b88d93bbd810f3d51f3be3ba8432d",
+        "description": "etnaviv: isa: Add an empty libetnaviv_encode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76e1588ca88e7cd2e739e08caee339d30a513aec",
+        "description": "etnaviv: isa: Generate opcode enum",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a0635f8f5287ac3ffc6e093860b21bb16adf089b",
+        "description": "etnaviv: isa: Generate c header containing enums",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9cc8b12e8c993f839d359c3adbb94facd62bebef",
+        "description": "etnaviv: isa: Add name attributes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "898fd9227a7e4d5bf2a6ff5c3cce17dc7d0fc964",
+        "description": "aco/spill: keep loop variables spilled during nested loops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80bc658efcbcbb071ef95fd099e4d5dda3193913",
+        "description": "aco/spill: select more loop-carried variables to be spilled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "31f6aebb2ca4b99cbb05a81cd752e6d5a0dd7865",
+        "description": "aco/spill: keep loop-carried variables spilled at merge blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "971407bd2ffb4d602886e8f09f3dc2fff38c8b97",
+        "description": "aco/spill: keep loop-carried variables spilled at loop headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e968a18652af9a6d72b0aadb761d66185defb45e",
+        "description": "aco/spill: avoid re-spilling loop-carried variables in add_coupling_code()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7726b92707bf1cedb42a89d0da4bbc14885a5d95",
+        "description": "aco/spill: avoid re-spilling loop-carried variables in process_block()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb3b6a5ff3e038b6d1c3a9461dd4a50cc153e8f8",
+        "description": "aco/spill: add interferences with variables spilled at loop headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09c5414760413b96abd4c0460c20ad30ee869ffe",
+        "description": "aco/spill: don't prefer to spill phis at merge blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d234f789b5ac241ee6d9096c7e1cb0e52bcca57e",
+        "description": "aco/spill: keep live-out variables spilled at branch blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "32882d647e718e8b4f7496ee6d53b5e4c8fa72d9",
+        "description": "aco/spill: refactor adding spilled vars into separate function add_to_spills()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5e8f9f879040b69839582a9c27603401cb37944",
+        "description": "aco/spill: add spills_entry interferences only when necessary",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a1d6aef562dedb1f10a87710c87884fd4221c72",
+        "description": "aco/spill: don't allocate extra spill_id for phi operands in add_coupling_code()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1468fc95252acd36cfbe96e7e831db072bacea8",
+        "description": "aco/spill: refactor SSA repairing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "585b4c5a010442e07d37e9ce69528c997d43f293",
+        "description": "radv: invalidate L2 metadata for VK_ACCESS_2_MEMORY_READ_BIT",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4fc2ab43c0004a972a36685a845d12d38064281c",
+        "description": "radv/video: fix h265 decode with unaligned w/h",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "db62c38091a3b244b1d720a6aa47bf1d1855db55",
+        "notes": null
+    },
+    {
+        "sha": "dcc2e596c1ff1ce26e7fb3a34e1175e80dc4f730",
+        "description": "nvk: remove some dead code files",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "813b253939ee8c965bf14746a48c6191b062a57a",
+        "notes": null
+    },
+    {
+        "sha": "f351e4be11e2dbcfe99d0c0219ebdfd99e14b629",
+        "description": "radeonsi/vpe: support vpe 1.1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c73c244a6c2ee62952c64ba958a508786907e156",
+        "description": "ci/deqp-runner: print deqp-gles version log as well",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "78ea3bb43dc37013c3ab87c261ef5987d5e876fa",
+        "notes": null
+    },
+    {
+        "sha": "14279087fb37b2869e6abfbc571ecc69184b5fe1",
+        "description": "ci/deqp-runner: split gl & gles groups to use the correct binary",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "78ea3bb43dc37013c3ab87c261ef5987d5e876fa",
+        "notes": null
+    },
+    {
+        "sha": "9bbbe90f060914448910d17a38d815ac24db6030",
+        "description": "ci: enable MESA_VK_ABORT_ON_DEVICE_LOSS globally",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "197e3f710911c9e1d459dca22cfe78920dc8becb",
+        "description": "v3dv/ci: assume list of dEQP-VK.wsi.*.maintenance1.present_modes.* flakes is the same between xcb & xlib and between rpi4 & rpi5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a856d30b72c63d0474812fa4705d54af3a3ac170",
+        "description": "v3dv/ci: add more flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7156575dcb1c90bbabbd15ee61b6f8648739d8a9",
+        "description": "v3dv/ci: assume dEQP-VK.wsi.wayland.swapchain.simulate_oom.* have been fixed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "912e203a534be8b70b3ef8bf00294e9c962e385a",
+        "description": "drisw: clamp damage region to texture bounds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85a91f461c535cc07ac1ed321cccb7908fe1e254",
+        "description": "drisw/winsys: Flip y coordinate when creating pipe boxes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b3680c92a12598c963ee88c88137c09e614c70f6",
+        "description": "egl/wayland/sw: don't invert y `wl_surface_damage_buffer`",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d82ff37ed074ef206915d6ef669ee52559c6f51d",
+        "description": "nir_tests: Add /bigobj when compiling with MSVC",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "6dbd1dcd9399d758d954a5c42454fbcedbbd1d09",
+        "notes": null
+    },
+    {
+        "sha": "72e1e6e120611e4df020fa0f77e8048568796ec5",
+        "description": "driconf/anv: set fp64_workaround_enabled to DIRT 5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "460bacc2230d12d8c6454cb08744133810aa5dd7",
+        "description": "anv: set shaderFloat64 to true when fp64_workaround_enabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc5e7f8b9b46a693aa498b09525bc44a94fb5bba",
+        "description": "ci: fix shader-db job existence condition",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "3983ae89e9a2c7a7e96435891a3d65ecb6f60bcc",
+        "notes": null
+    },
+    {
+        "sha": "b835784ddedc29b08085f4a53d177245fe471bc9",
+        "description": "intel/brw: Remove last vestiges of could_coissue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "60231e6d6f78ac1251e9ad9c223f482236017f55",
+        "description": "nir/validate: validate more fields of nir_io_semantics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2034cf87c547f4d99bc5beb5cdce7944c82d0109",
+        "description": "nir/lower_io: add nir_io_semantics::interp_explicit_strict",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f02678bb50b7301238baf6f51f6a581c718871ee",
+        "description": "nir/validate: validate interp_mode of load_barycentric_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ae952506da105d9e8296aabeced957aaed75c36",
+        "description": "radeonsi: implement the shader debug log from ac_nir_store_debug_log_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a60b9eb17c9863b1263f224ee187ce4631c5b6e7",
+        "description": "ac/llvm: remove remnants of gfx10 NGG streamout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c25243f86adec8adf1be3d799ca779ff1d23600",
+        "description": "aco: add a helper printing shader asm by disassembling via LLVM",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df6fe9092624e9cca633bfe3d7cde04753517d50",
+        "description": "aco: implement aco_is_gpu_supported using switch statement",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1585a5cc6d124775ee4e9266c4a26fd8f287e102",
+        "description": "nir,amd: add nir_intrinsic_load_debug_log_desc_amd and its use",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6773595ed0485afb49834d252e7b7e9849c8ad3f",
+        "description": "nir: rename AMD XFB intrinsics to *_gfx11_amd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "311f32caadefb88329b7888cc56eaccdaaefa1dd",
+        "description": "CI: add a test for checking the validity of .mr-label-maker.yml",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf7cb69027ba55d2de3f86416dcdad2dd1b1efb7",
+        "description": ".mr-label-maker.yml: fix wrong label",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b8ffa9f956c4bcb416a0ad94d8b65ce050a05357",
+        "description": "freedreno/rnn: drop custom aprintf function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c95eada0df1db64e72cc48b9d84154da4e07781",
+        "description": "freedreno/rnn: drop headergen2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec61c49f26964969671f91b4b1cb63ee288b3461",
+        "description": "freedreno/registers: drop unsupported features from schema",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "639488f924d9bf4f8ac43442faf8c852e4a0486e",
+        "description": "freedreno/registers: limit the rules schema",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12f32ff8644461eae67ae8bd12ed6c45a6efcbd6",
+        "description": "freedreno/registers: support processing display display headers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f50da7119823816dfdfc71f66693b8fbf40cd5ca",
+        "description": "freedreno/registers: fix WB doffsets array in mdp5.xml",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f2af6841b631a883375acafe6720278d82c7152",
+        "description": "freedreno/registers: inline mdp4_csc group",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3d8acc875b19447d3ba3d31fd9842bf7590e6b9",
+        "description": "freedreno/registers: add missing copyright imports",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf89f777f8d73b0ccace07e5c27a12f19fd412ba",
+        "description": "freedreno/registers: fix generation dependencies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ab3a5a0f745f3f17f3f7e86584943d4103970df",
+        "description": "zink/ci: allow RADV_PERFTEST=shader_object on NAVI31",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d18aba0166ca678120f027eac06c9484b57edc7",
+        "description": "meson: Remove the non-used -DDEBUG manually",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ac1c0843f5be6e51ad3a10cd96eeec53df0d9d0",
+        "description": "treewide: Replace usage of macro DEBUG with MESA_DEBUG when possible",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0578f13fc93edf954b75ecf206410366b3712ff2",
+        "description": "meson: Define MESA_DEBUG for latter usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d3ce49e76c7d8baf29eb071cfe4f1912a46139a",
+        "description": "meson: Extract with_mesa_debug and with_mesa_ndebug for latter usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf8f89492153cf0fa2ca5364cdbcf1b74925b3eb",
+        "description": "teximage: allow glCopyTex{Sub}Image[123]D into R/RG textures with OpenGL ES 2.0",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "63366781aa5b467fb4e500d3b739db4bf7bcd038",
+        "description": "wgl: Check for null before dereferencing ctx in swap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df638c023d87cb3891b520e9fb863ca2f1cfabbc",
+        "description": "wgl: Delete unused context param to swap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f729fe50e55a2268f077c81d9d64a955e988c3d5",
+        "description": "radv: trigger a new PS epilog when the framebuffer is dirty with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53ec57d42dc09a43ceb6ec274a7fbb3460db0136",
+        "description": "radv: always export MRTZ in FS epilogs with ESO on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1900617baf929c5fd59cd1f33d42f4fe8c4f9c24",
+        "description": "wsi/wayland: Init outstanding list earlier.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0d51cd48089c2b03abbf1db956248b618ee5759f",
+        "notes": null
+    },
+    {
+        "sha": "2743adac7fd58649caa4e455643520efcbaf1b2c",
+        "description": "zink/apple: update docs to reflect the current status of Zink on macOS.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f75750f7404e5505b582fd6c5feb3e10446073eb",
+        "description": "zink/apple: added `moltenvk-dir` search to allow MoltenVK to be sourced from brew.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5532f135664c7f67d4a8162336005d0118948343",
+        "description": "driconf: override vendor id for X4 Foundations on NVK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03d72c4ef11bbf74fcc649b99063aefca206052f",
+        "description": "nvk: support driconf option force_vk_vendor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "951aa2fa822d09fcf511a4ba9b141d170275c13b",
+        "description": "v3dv/ci: add other flakes seen during nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "423e85caf5b3315dc3c7a0aa685c76a522ea8566",
+        "description": "v3dv/ci: mark the `dEQP-VK.wsi.*.maintenance1.deferred_alloc.*` flakes seen so far as happening on all platforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "648490f7ce072349cac59c4b2eb213fdc76bb2a0",
+        "description": "vc4/ci: add another `spec@arb_vertex_buffer_object@vbo-subdata-many draw` flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5f2915e8ee69a31ad248d69bebe1dc8c8637be7b",
+        "description": "vc4/ci: add another `spec@!opengl 1.1@depthstencil-default_fb-drawpixels` flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa0f83445319db1eaffe98f8a604644c4575e68c",
+        "description": "v3d/ci: mark spec@ext_framebuffer_blit@fbo-blit-check-limits as fixed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "588b1ce53316b91d3aa37268c82a6898c036e600",
+        "description": "aco: split instruction assembly into functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5651aa7644319843092ebbaa688a40e53ba16789",
+        "description": "aco/gfx11: fix scratch ST mode assembly",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cdcc856cbf71249d9551a949ba3e6291dc817ad0",
+        "description": "aco: unify MIMG opcode lists",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20b14381c4085650ead63bd28be74ffd9d7d8132",
+        "description": "aco: move dot/wmma instructions into VOP3P list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6bfd3dc39f64043ccdd985b3008248d9464bb09f",
+        "description": "aco: use op()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a806e4898225762b697776a8b02562d5c02c7b57",
+        "description": "aco: use single tuple for all opcode numbers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5864c22fb7e9a72fa4f2ea605c3a6136014fec59",
+        "description": "aco: refactor VOPC opcode list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d23f8b0dcf9f33467669f8ab05b7387bf2233307",
+        "description": "aco: rename opcode->instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b723a15bd065895c9773be550831d0b33dbf3cf7",
+        "description": "aco: fix GFX6 buffer_load_dwordx4 opcode number",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cb17a936e02297fe406f59497b59c6e2c45a828a",
+        "description": "ci/r300: implement rules for d3d9 testing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c909aefc49034e6d596797b8e85e23af0684edf",
+        "description": "amd: fix addrlib regression",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e01266335b2d91b3945c8553710062d558eaeb31",
+        "notes": null
+    },
+    {
+        "sha": "53f9cdac9b15eb705fd8e7ba7e9bfed61a51c2e0",
+        "description": "radeonsi: preserve alpha if needed in kill_ps_outputs_cb",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6d2a7f53acfb219910fde175a4233bd5157937f0",
+        "notes": null
+    },
+    {
+        "sha": "4acea392afb297a8b40054f36d7f27deef93207c",
+        "description": "intel/compiler: drop unused ray-tracing fields from cache hash",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a72116367dcabb2fc2ed9eff208cbcb0e951f4f",
+        "description": "intel/brw: Unify DF and Q/UQ lowering for MOV",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ea423aba1b45f90526149f1e0c190ce113ffa7b7",
+        "notes": null
+    },
+    {
+        "sha": "97c7d5113db0ee7297c8674f5b608ad729408b02",
+        "description": "intel/brw: Use correct execution pipe for lowering SEL on DF",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ea423aba1b45f90526149f1e0c190ce113ffa7b7",
+        "notes": null
+    },
+    {
+        "sha": "26d65e96dd9c75c94f45f2cf2fd2fc3ceb50ec59",
+        "description": "intel/brw: Assert that min/max are not happening in 64-bit SEL lowering",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ea423aba1b45f90526149f1e0c190ce113ffa7b7",
+        "notes": null
+    },
+    {
+        "sha": "a2c2a7bc0045010edf26cbe8b375561d0aba14b8",
+        "description": "intel/brw: Fix check for 64-bit SEL lowering types",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ea423aba1b45f90526149f1e0c190ce113ffa7b7",
+        "notes": null
+    },
+    {
+        "sha": "75ede9d9bcda7328e2a98ac9fbf74260caec982f",
+        "description": "intel/brw: track last successful pass and leave the loop early",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2ee98d2dbde3042d9ba40c741a95c511f3a3cd0",
+        "description": "intel/brw: Handle Xe2 in brw_fs_opt_zero_samples",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cd70e49394ee9110e3461dfe866afc63c2efc953",
+        "description": "intel/brw: Allow SIMD16 F and HF type conversion moves",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66dc6e07f5c8124dca5122eb74bf98b50ba0a9fb",
+        "description": "intel/brw: Fix handling of accumulator register numbers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8f53f698c1ed870e08e0cb642d2e34b466ef63e",
+        "description": "util: move gen_zipped_file into generic util and rename to gen_zipped_xml_file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16753bc2f1c77fae321f354dc381ac3aa1939360",
+        "description": "nvk: Implement calibrated timestamps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b0ad410d01b709b8971b6d7aaa79391db5bdd39",
+        "description": "nvk: Advertise VK_VALVE_mutable_descriptor_type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "359bb89302cdbe0dd493b6eadb2781f5ac2c5421",
+        "description": "nvk: Move the mutableDescriptorType enable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bed037b88a6578df7fe9515ca2069a36d4744dd",
+        "description": "iris: Remove i915_drm.h include from iris_indirect_gen.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50eceb1e334dd8cf12febaa19de8b16a8f99b9e6",
+        "description": "iris: Move tiling_to_modifier() implementation to i915 folder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc570dbada06e810788a045f27c3e14a841b9845",
+        "description": "isl: enable CCS for 3D surfaces on gen12.5 and above",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49ed35c08a43b795cb199b35ef0b8e7bd9ba5419",
+        "description": "anv: 3D surfaces have fewer layers for higher miplevels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "962872394393952077fa05c885b549ba5a20ee13",
+        "description": "anv,blorp: implement restrictions from WA 1406738321",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c83dcd4967bfb2e4e3e0fdc5e4b0e37b3ef262e2",
+        "description": "nvk: Trivially expose three VK_GOOGLE extensions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2719a73c11088d78cf340eb89a0c8d315af059d",
+        "description": "crocus: Support offset query for multi-planar planes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "899fcaf23744778bb16662185c26b9df982c5365",
+        "description": "zink: Avoid issues when kopper tries using XCB WSI on Apple.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d644b64ff24de00f9cebd7fdb3ea5aee495512b3",
+        "description": "zink: removed `MESA_PRIM_QUADS` from the supported `PIPE_CAP_SUPPORTED_PRIM_MODES`.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e1e0c6824cdbe1d735b2beefb7ef4717da3a800",
+        "description": "zink: stopped the use of VkFormatProperties3 if the reported API is less than 1.3 or VK_KHR_format_feature_flags2 not present.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0015ebbab924ef01512a6c4ad72aad72ab0897e",
+        "description": "zink: use portability EXT on Apple.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "32ac90d8c2c54f15fc0df99f3f564a655274bd25",
+        "description": "zink: Fixed header location and compiling issue with [[deprecated]] from newer MoltenVK versions.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47bbd1c7ffa6eb6abf01a4d4ad6344dda55ffff0",
+        "description": "intel/tools/error_decode: Parse HW context in Xe decoder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec3a41960b96638d5efcd21174fc4a7b1401a9b4",
+        "description": "intel/tools/error_decode: Add function to print batch in Xe decoder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "171eb89b75d3bd61b3450a6ac10c1599ecd929e7",
+        "description": "intel/tools/error_decode: Fix parsing in Xe decoder",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "90e38bbb3b577535a665edd0e8091e7c3a85bdb3",
+        "notes": null
+    },
+    {
+        "sha": "477943cc9d08c6945d5fd284083f425e852bf4f1",
+        "description": "meson: Allow building intel-clc for the host if it can be run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "098136e52a5975ab09618be9c313475cc948a9ad",
+        "description": "anv: avoid partially compiled warning with GPL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3983ae89e9a2c7a7e96435891a3d65ecb6f60bcc",
+        "description": "Split debian-build-testing job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee13512a624153913e2789f31ab24aa925313fdd",
+        "description": "zink: clamp swapchain renderarea instead of asserting",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27f42a38aaf67160de5daac2ddcd49289bf234ff",
+        "description": "zink: clamp present region size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1670c40557ad5c6eb0deccddb2223896e2ec35ef",
+        "description": "zink: defer present barrier to flush if a clear is pending",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e686fa417ec068ba9c726f43ef6a1182379059e",
+        "description": "etnaviv: isa: Define a dontcare bit in atomic instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83f53be8c712353cc8e0544c5d85b2b398647d08",
+        "description": "broadcom/ci: add skips for unsupported features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "795046a8d401c766720b53ce74dd46ce4b18a65c",
+        "description": "v3dv/ci: update expectations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b065fe8630e23c04c05c72ada8addc3728488e4",
+        "description": "zink/ci: update CI lists",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0ca29e7a3ada7d064855205636a8e598b719c71",
+        "description": "isaspec: deocde: Remove generic functions from public interface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f2295d99bc813be3dfba7135de0f96b4e8fbf85",
+        "description": "isaspec: decode: Add libisaspec",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "878fa2032ea1165344e5cc0327c8157dfc311f59",
+        "description": "isaspec: deocde: Make isa_decode_field(..) private",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "872f714e321838636f59adaf5c99d1524b1c3246",
+        "description": "isaspec: deocde: Make isa_bitset arrays static",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1196b828152f8d6a03a7819fa7616cf6f1bc68de",
+        "description": "etnaviv: isa: Rework meson dependency for libetnaviv_decode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3968999839404eaa651e0adc775312fdab74b88",
+        "description": "freedreno/isa: Rework meson dependency for libir3decode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "505ec13f87ec3a8dfa1dda3690b3b46731022583",
+        "description": "isaspec: decode: Make isa_decode_bitset(..) private",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "77872bec95dc284b0984817c53486658381c7b30",
+        "description": "isaspec: decode: Add isa specific functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16e8a3548ffbfd761f344ad8d3189b7cf201d567",
+        "description": "isaspec: deocde: Hide all the internals ISA details",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08e899852b61a85e73caa2a5372f697bd3c96c6b",
+        "description": "isaspec: Remove not used isa_decode_hook",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "651191801a8751c9ac1bc09327a50c19a9927392",
+        "description": "gallium: increase the size of pipe_box y, height fields to allow bigger textures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfdbfd6ade34f518846b4adaedb4dca30faebf52",
+        "description": "gallium: use u_box_3d to initialize pipe_box instead of non-designated initializers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dc57c6b59e5e9271a56648a8baa2a9fd9fc327a9",
+        "description": "rusticl/util: make create_pipe_box indepentend of pipe_box's field types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fd907fc7b66cb4700c21761667d76565ef6fc38",
+        "description": "ac/llvm,radeonsi: fix memory leaks triggered by ac_nir_translate() errors",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d92d35c9db6da78e1e49e9a851a6c3227a93305c",
+        "notes": null
+    },
+    {
+        "sha": "3556dbb97fd6b357e3d6a39c5caa628924bd88dc",
+        "description": "intel/brw/xe2: Correctly disassemble RT write subtypes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "871805215a041435fd704252d09990979c3260c7",
+        "description": "iris/xe2+: Disable coherent framebuffer fetch.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c4325f426c693cd90d051cecce18a01e05dd2454",
+        "description": "intel/brw/xe2+: Setup PS thread payload registers required for ALU-based pixel interpolation.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6427f160744785ff03c62475618fcb219dda3eaf",
+        "description": "intel/brw/gfx12: Setup PS thread payload registers required for ALU-based pixel interpolation.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2df6d208c88c6d51a3698875707ad2976a97c8ff",
+        "description": "intel/brw: Adjust src1 length bits for xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83f2bdc116aa5ba02164110949d2cf261e0937be",
+        "description": "intel/brw: Set the right cache control bits for xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "adb853ed10c3b01e084dc9c07e6d52331d542721",
+        "description": "intel/brw: Update written size depending on the LSC message",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48376ac3b8e0ed006f25238d4c137f3b14064c47",
+        "description": "intel/brw: Cleanup send generation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "65f66974a59000913aa26f4e7f5e2cc98b6c8c1f",
+        "description": "intel/brw: Use the dimensions supplied in the instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "644a0ede1ee318a516c6f103a91730b3165baaf2",
+        "description": "intel/blorp/xe2+: Don't use replicated-data clears.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af8b9af700e889366b4210082920fb94c2b679bd",
+        "description": "intel/brw/xe2+: Allow dual-source blending in SIMD16 mode.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "762ec3fd59322b06028c871418535f7d0aba8a89",
+        "description": "intel/brw/xe2+: Allow FS stencil output in SIMD16 dispatch mode.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "efc0601ddfa0201bd3a4c085777e503e72d8e2ea",
+        "description": "intel/brw/xe2+: Double allowed SIMD width of FB write SEND messages.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d96bfb160f8863bc2a164adbdd4d997422d8acb1",
+        "description": "intel/brw/xe2+: Update encoding of FB write extended descriptor.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "189422de1bd35b8fb2c8f97fc1e6593f1b70a601",
+        "description": "intel/brw/xe2+: Update encoding of FB write descriptor message control.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b0fbc22dd7509abdb5726289db18be21222f1d6",
+        "description": "intel/brw/xe2: Render target reads have been removed from the hardware.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ec1e322f0a9bb211fe0b9b6703f94bc35513cb9",
+        "description": "anv: don't leak device->vma_samplers",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "7c76125db25db9bdf5521baf7c848ccd4bd37b5f",
+        "notes": null
+    },
+    {
+        "sha": "5ee8fd6b497ce0cbabac199e6e922085b547857a",
+        "description": "freedreno/a6xx: Fix z/s preserving sysmem clear blit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42ad4c6e6eeb11e4027d954c5abcc8248c82a187",
+        "description": "rusticl: set OCL_ICD_VENDORS as directory, not file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4fbdfdce9c63537225ea10dafa9e23a34e351684",
+        "description": "anv: allocate pipeline bindings tables dynamically on the heap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7730fa5683c41c3a2de042f5bc046c92029a4d8a",
+        "description": "anv: track embedded sampler counts in layouts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dc1069b16745c3b0dadf1d9c741ffdb1cb36ef69",
+        "description": "venus: extend device format prop cache with VkFormatProperties3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aecd46182d6a6615653cb3b0f28e9c701e88b6c4",
+        "description": "lavapipe: Enable EXT_swapchain_colorspace",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc263e03081cb7be0ae8ddae749fcb99cf18a798",
+        "description": "v3dv: Enable EXT_swapchain_colorspace",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c49f3c1aa30e935ed346d67de92400c6df9dc63",
+        "description": "lavapipe: Enable EXT_swapchain_maintenance1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f977e4d4f54c94c8020c873d087ee96b81ee3d6e",
+        "description": "v3dv: Enable EXT_swapchain_maintenance1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "145ab5b853d8ce7d47f6e9e66e74e03b501bff68",
+        "description": "anv: Enable EXT_swapchain_maintenance1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76e089ea48bc7ccd72495a46d164cf8a1f104b71",
+        "description": "aco/cssa: update comments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c0819f0da49b38c980a8e4a42aca1e89d40b984",
+        "description": "aco/cssa: reset equal_anc_out if merging fails",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "18ba93e6732a328a8e982f4d18bf7943171b4eb4",
+        "notes": null
+    },
+    {
+        "sha": "f72cd2eae797d34d3769360f4bde888011231694",
+        "description": "fd/decode: Fix \"OPTSIONS\" typo in help messages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8b4b252674f9b842505230d2cd021b0957922b56",
+        "description": "fd/replay: Use generate_rd as default CS generator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69d347e42f39a0e7ab768ae7acbe576abb28128b",
+        "description": "fd/decode: Build generate_rd executable rather",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bdd89dad1c31a55638532870aa19de3a8fbf086a",
+        "description": "fd/rddecompiler: Disable IR3 cache for replay context",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc9e718a86ed0ee4cde54de6c755b851cc65e028",
+        "description": "fd/replay+rddecompiler: Add option to clear wrbufs at start",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "694ed34673294861667ad37331fd2419c4695979",
+        "description": "fd/replay: Error when VMA AS allocation fails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0a680162d96bd4cfb6b1253fda6bc8917c2b357",
+        "description": "fd/replay: Add wrbuf support for KGSL/DXG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fad4e547b44f4ec2595a87bb3075d19de0dfec7",
+        "description": "fd/replay: Clear wrbufs after submitting cmdstreams for DRM",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "011cacd9826eae88d6c128ffde6023c9c5f1678d",
+        "description": "fd/replay: Clamp dumped wrbuf to buffer size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e10202fdf4e2dde9afbae1f2145a9c736857d154",
+        "description": "fd/replay: Dump wrbuf into cwd rather than exe directory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d043ebc9410702efe52d9c285419159865de887c",
+        "description": "fd/replay: Fix wrbuffer name extraction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e27138588f459c9dd08d102f6bdc2d446ebc654",
+        "description": "freedreno/fdl: avoid overflow in layout size computations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be4a6b946a1b6ce9805f839d71bc2ff28b0b4918",
+        "description": "radv: add a workaround for null IBO on GFX6",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d87ccf06320aae922b5d47addbfe6e779c2a1361",
+        "description": "broadcom/ci: add new expected failures",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "74be42d9a4ac71fd87d134c6f2de9102503eee4e",
+        "notes": null
+    },
+    {
+        "sha": "f79557dd38db2fdf6fc1c009aec969508b69d50a",
+        "description": "zink: do io fixup on patch variables too",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f88922e8161624e52bbeb7f918bee23f94b1aafd",
+        "description": "radv: use dual_color_blend_by_location with Half-Life Alyx",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a075b4449319966397f69ebdc220ee06000665b6",
+        "description": "intel/brw: Eliminate top-level FIND_LIVE_CHANNEL & BROADCAST once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5814534de57444475cc3e20c88c4110e7629d9de",
+        "description": "intel/brw: Don't consider UNIFORM_PULL_CONSTANT_LOAD a send-from-GRF",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea423aba1b45f90526149f1e0c190ce113ffa7b7",
+        "description": "intel/brw: Split out 64-bit lowering from algebraic optimizations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "831703157e7b272fcd1d36de2b3bcc8d5ec7d500",
+        "description": "iris: Use resource_get_param in resource_get_handle",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf1008ac28ab9de318287f3958836a37bc4b883d",
+        "description": "iris: Report the correct modifier for Tile4 images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "345c918a769191d6a6edabbef34006bea3ccc035",
+        "description": "intel/dev: remove pci revision from shader cache key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58e3b1f930feb70f3294180847aa758f0e76fb26",
+        "description": "aco: Allow passing constant operand to is_overwritten_since.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1cac5ed0566ed02f1a522cc690ab5cda1880ec0",
+        "description": "zink: acquire - maybe clear timeout after waiting for presentation fence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e133c4000dcda4cfabe959fe5664b25ff820a66",
+        "description": "nouveau: Add support for TERT opcodes in vk_push_print",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d473004576c7871ce64c799d60dbd6942f8f93e0",
+        "description": "intel/fs: Avoid generating useless UNDEFs for every SSA def",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6b93c50d0b8e1888248c549c3ef4a811225fe9f",
+        "description": "radv/printf: Use fprintf instead of printf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d902b6d8050149cf67dddf0f5dde1d37f74eec82",
+        "description": "radv: Skip more acceleration structure build markers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b58b6d2d32d3a7bfdf41875b97e50a68aeacd1e5",
+        "description": "anv: Enable VK_KHR_shader_quad_control",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b22879e7533fe216d904d9cb10e34c104fad39d6",
+        "description": "intel/brw: Use predicates for quad_vote_any and quad_vote_all when available",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "857e62e6ac7f15158ee315dcafcb179f85125655",
+        "description": "intel/brw: Implement quad_vote_any and quad_vote_all",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "671745b616a91eacb46b46f814d43fde5fcec83c",
+        "description": "intel/fs: Don't allow 0 stride on MOV destination",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d10b5467764984db223c574b74ddcbf39c922001",
+        "description": "freedreno/replay: Use real queueid for submissions and waits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f18f39208703ba8eaffcb6e7375014b21c9ffef",
+        "description": "zink/ci: enable RADV_PERFTEST=shader_object for polaris10",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6095b70f857f0bd6d01db4c979e73f21aecc4f00",
+        "description": "radv/rt: Use 32-bit offsets for load_sbt_entry",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "00dec0343884f4b2e69d3920bf09ea436c783e19",
+        "description": "radv: Use radv_buffer_map for parsing IBs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a78cbc98cc43ce2c7bf6ef53dfcc5d965352c5a9",
+        "description": "ac: Improve context roll readability",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d747653d4203e130a76fa2886e012497582c5ae",
+        "description": "radv: Add an IB annotation layer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f0ee3a92bd1c89a63144193d392b7b995263c4e",
+        "description": "radv: Add support for IB annotations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf15688fa15bbd64d54658edf1e8814c330c2abc",
+        "description": "ac/parse_ib: Implement annotations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f436e0fe157cc78a0a3b35a9ed68133c4e1516a",
+        "description": "ac/parse_ib: Replace the parameter list with ac_ib_parser",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e4d36510488cd4b6d2a0d6356e9ef0b6819b606",
+        "description": "ac: Annotate context rolls",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f3cc3cb29d970aaac5f7871783a60a9a48c167e",
+        "description": "radv: Use mapped driver locations for determining I/O strides.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f1f55cf32dd21c52b655c087799d40316f4b9da",
+        "description": "radv: Extract input and output stride info to new functions.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c72bb8de75f014190565f6ffe9123e10292082ec",
+        "description": "r300: mark new fails",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c92ac3ee3a818b2ecf4190f86f6a28337ee9b58",
+        "description": "nvk: Add NVK to the Vulkan device name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "432d8bd0818c1c38459c2397525f778f94ae2ac5",
+        "description": "freedreno/devices: Do not write to 8E79 on a750, KGSL has it protected",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ebde7d5e870d7d0d0386d553cf36854697e17824",
+        "notes": null
+    },
+    {
+        "sha": "9bbb9f110482bb25d05ae1e07bf9bc25a30ef7a3",
+        "description": "aco: use small_vec as Block::edge_vec for predecessors and successors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3e58a736e4c3468f3d932fc48c8c8b3e539504f0",
+        "description": "aco/util: small_vec few additions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5cbd7689be9e7c89fb947fdaf5a71587889ebfca",
+        "description": "aco/util: add small_vec",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4564ca313bee2a3d1eeab7fb5818407b41566bf5",
+        "description": "aco: reorder code and use namespaces in aco_interface.cpp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c30c1af5db348f51ccd33ef7e19247eda286bcb9",
+        "description": "ci/etnaviv: update expectations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b8981e4717259935ee4db2fe8b49648c174ebb9",
+        "description": "etnaviv: fix fixpoint conversion of negative values",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8bce68edf553c079ed8451ecf24dd2831f409c25",
+        "notes": null
+    },
+    {
+        "sha": "bf3c1cf568ef773172ac1b29ed5f4991024b1ea5",
+        "description": "broadcom/ci: add a test that fails only in CI",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74be42d9a4ac71fd87d134c6f2de9102503eee4e",
+        "description": "broadcom/ci: add new expected test failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55a8c20e4d6d203a2ff8bebe6fbda80408e9b6a9",
+        "description": "broadcom/ci: skips for tests that don't check for extension support correctly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "92172760e2cc3d85fa9a4c66257c01cc8bec0a21",
+        "description": "v3dv: enable VK_KHR_dynamic_rendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a2b17235d185827042b118db9ab4baa52c5d44e",
+        "description": "v3dv: also emit subpass clears with secondary command buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9b44a3bb55dffb72c49edc8c1f8c4e1a16edb2c",
+        "description": "v3dv: handle render pass continue flag with dynamic passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4ec92084ef90ba722486eff3194d4cb93cfa588",
+        "description": "v3dv: fix resume address patching for secondary command buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0bb04c019e0b07527c3864c02056cabbae33f92b",
+        "description": "v3dv: rename SECONDARY job type to INCOMPLETE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2478939b6988ae26ecef9b9f15376c122af134f6",
+        "description": "v3dv: implement dynamic rendering resume/suspend",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c15e0aac176481685dd888cef45db87d73758736",
+        "description": "v3dv: implement vkCmdBeginRendering and vkCmdEndRendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "78015a9da3b93dee1b0077e193c8e8e5869e22ad",
+        "description": "v3dv: don't assume that pipelines have a render pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e22d843fa4f8a25b32440786c69bce990f56e75b",
+        "description": "v3dv: add a vk_render_pass_state to pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10df18754087b8a90ff71db9e667f1e5109949a4",
+        "description": "v3dv: add a helper to setup a framebuffer for dynamic rendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6684aa09ff83555c3552d7514c8b5171ec7402ce",
+        "description": "v3dv: add helper to build a render pass for dynamic rendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72c3769437926906b679ee61e22a9cc0685b1ec2",
+        "description": "v3dv: add helper to check if we need to use a draw for a depth/stencil clear",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f1e6e58aefc9159fd659d3ee74a3db8cc3b7d75a",
+        "description": "v3dv: add a helper to constrain clip window to render area",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f285f696771567e4189602d908653937e3456eda",
+        "description": "v3dv: refactor checking and adding pending jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1b52e30522229fbfcc557e83ac28a59e2e46154",
+        "description": "v3dv: fix copying v3dv_end_query_info into primaries from secondaries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "93f9f2bcbbb1444ff80ec847cc1a2d65381459f9",
+        "description": "v3dv: always set view index before drawing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aeee18be1b5d4deafc67a3a41c0800695c8f7475",
+        "description": "v3dv: fix subpass clear with draw call for multi-layered framebuffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fd5ac42c352217ad535cb9e804dd63fb6a687ee",
+        "description": "panfrost: group up stubbed params in drm-shim",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25a6af36c9a7fb6b25c9894e89a3a9e4a579a428",
+        "description": "docs: Document Mali-G610 in drm-shim section",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76397f76c944092164df1a96732c37272b5863e4",
+        "description": "panfrost: Add support for Panthor in drm-shim",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c92d92ab9a47006a92685c49619413aafa84074",
+        "description": "drm-shim: Add io region handling in mmap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d4b1820ca17b71acc56365d0488966e5d4ffa16",
+        "description": "radv: add radv_force_pstate_peak_gfx11_dgpu and enable it for Helldivers 2",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99017891cad55972c26c0ca8354f48e722b37a66",
+        "description": "winsys/radeon: pass priv instead NULL to radeon_bo_can_reclaim",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "4a078e693e913921d11e30988dc6e923e7cc27b7",
+        "notes": null
+    },
+    {
+        "sha": "9b089ca943cffc6fc0cc2a779da66add25bc135f",
+        "description": "radv: fix occlusion queries with MSAA and no attachments",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d17779430f52c21398f5dea50da129efd7df3544",
+        "description": "util: Cleanup strtod.(h|c) by introduce _mesa_get_locale",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ed3418a43c2bda23318f1faa8a91569be9d9abc",
+        "description": "Unbreak Viewperf by reverting \"util: use crc32_z instead of crc32 and bump zlib dep to 1.2.9\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "010272b62e2ee9407513643f9eb85920d4a0da63",
+        "notes": null
+    },
+    {
+        "sha": "97084199bb6bf48cc8a521e0ac86983bd9279dbe",
+        "description": "radeonsi/ci: update failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b98bbb851c5583ea4ee7e3f8fe6ba3797c6e163e",
+        "description": "radeonsi/ci: run GLCTS, ESCTS, and dEQP from the glcts directory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8573e9bf472bb78af44514ae8941df155b919b4c",
+        "description": "ra: Add debug functions for printing spill costs and benefits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "84e8a295a0979def2a73f17be63d78cb10fd4a6d",
+        "description": "freedreno/afuc: Add section on reassembling firmwares and relocations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e6cfc9e2311139fa32dceceed31a51279b2e027",
+        "description": "freedreno/afuc: Add magic control reg values for a740",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7ed7a32cd58dc80a3882a1aa6b1f080cac9f96b",
+        "description": "freedreno/afuc: Add a7xx test case",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11b4b570a9a0ebd5de7b853d13c4441de6d5e55f",
+        "description": "freedreno/afuc: Run entire bootstrap routine",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71f80d3deb9fac1a9fc57d8fe915c22de94b07e6",
+        "description": "freedreno/afuc: Emulate THREAD_SYNC on a660",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e9380e2bc8b33d42aed9bef283699e03a288617",
+        "description": "freedreno/afuc: Allow -e option on a7xx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d860b2eca52cea968f09570649849cbff503e149",
+        "description": "freedreno/afuc: Add support for multiple sections when assembling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5db8e9c1f99cff697fcc75bd385bf7cbfd0d623",
+        "description": "freedreno/afuc: Add more general T_IDENTIFIER in lexer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7bf4db339e1f08db2a442ea536c15e508b11c28",
+        "description": "freedreno/afuc: Add .align directive",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "542ae9de0198e1677acda91b3d690c336f611e17",
+        "description": "freedreno/afuc: Improve jump table handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46681d64f61d602c6eef30c64fab5305539ac4d4",
+        "description": "freedreno/afuc: Use left recursion in parser",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1955a0b169f11d7eb15a8426e3da6aba66f29bf",
+        "description": "freedreno/afuc: Fix setbit/clrbit parsing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "105ea1fc681d17cf5e68fd9322e54a713113f4f4",
+        "description": "freedreno/afuc: Bump max instructions for a7xx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eeb2db3b5e5fcd8b254c34dfff623fb343530d87",
+        "description": "freedreno/afuc: Add missing ALU encode case for bic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "443e8b89ca1dc627e569a2833e02a39098578ea3",
+        "description": "freedreno/afuc: Decode (peek) modifier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f88c269148f2396bf76fc2aa471c7f589ebe09de",
+        "description": "etnaviv: tex_desc: emit texture comparator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6a616058347ed9f4c95a11619a2569395be4ba0",
+        "description": "etnaviv: don't use int filter for depth textures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5464feed7380418a69ab0c9e0337f0a078f1540b",
+        "description": "zink: set handle type also for user memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "995727e57501f7a35eb5e6797124f8ec3d6911a0",
+        "description": "zink: Handle aoa derefs of images",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50a6c5d5fa3df34ec4e56cdbda1c833c3f7c1879",
+        "description": "nir-to-spirv: Cast SSBO input pointer when needed",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9f6be8effb43fcd4ce2fd00045bc6244ddf63529",
+        "notes": null
+    },
+    {
+        "sha": "0108bae30f5f5deba8e430766dc3465bda82d309",
+        "description": "apple: Meson defines GLX_USE_APPLE to allow for Gallium drivers to work on MacOS.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97b6851815acee2115bd1caff8e7edde23f3f7c5",
+        "description": "apple: Extended Apple feature support using GLX_USE_APPLE.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0bdd0cae3b22d9db91a49e0c6f625445a055831",
+        "description": "meson: relaxed some meson restrictions on MacOS/Apple allowing for wider build support.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af04f17909109b91425ac21d0d9d54f2ec3b59af",
+        "description": "glx: Switched DRI2 functions over to use Apple specific alternatives and extension name.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0158b40ca974b6ae0efac7695d0a070528d3ced",
+        "description": "mesa/st: use sanitized shader keys for feedback draws",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5eb0136a3c561e25d3f274e33a86812cfb2af589",
+        "description": "mesa/st: when creating draw shader variants, use the base nir and skip driver opts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f7a4cf1913a08ddd9b6a7dbf898d6909e1bfb84",
+        "description": "mesa/st: add is_draw_shader param to st_finalize_nir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f2f640f3c7b6931ff27564b863c8e1d2d55fd8a1",
+        "description": "mesa/st: add 'base_serialized_nir'",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d279bee0ae566fcfcca6887bb69a0b2695d2bd6",
+        "description": "tu/rmv: Remove tu_rmv_DebugMarkerSetObjectNameEXT",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a13860e5dfd0cf28ff5292b410d5be44791ca7cc",
+        "notes": null
+    },
+    {
+        "sha": "ad580a711bda071e3f9e649608e5a8a6301d152d",
+        "description": "radeonsi/ci: udpate expected failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "67997fd735038c4c71a8f6688a59f3627eb50881",
+        "description": "aco: avoid full 32bit imul for uniform reduce/scan",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96ff511b7562ee37aeca787b16010167d77d29c1",
+        "description": "aco/optimizer: combine v_mul_i32_i24 and add to mad",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c57340c2323cf712b00df44b0f452df6a5a1eb2",
+        "description": "aco/builder: use 24bit mul if low bits of imm are zero",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b48a101d8f54ac835c4d988ea56216fd435bbd8a",
+        "description": "aco/builder: improve v_mul_imm for negative imm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f6f2cea6a68d9ea518d0c54d417878720c1037a",
+        "description": "v3dv: enable smooth line rendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f5d4242928303680fdf96d454bd3b9333ee25ccc",
+        "description": "v3dv: assume that rasterization state can be NULL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6553bf17736d07ea65cfbb89a95c1ad48ee8cb6",
+        "description": "compiler,gallium: move u_reduced_prim to common",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a236dc7852343eab35cafc023544d9f06b3a25b",
+        "description": "tu: re-emit vertex buffer on MESA_VK_DYNAMIC_VI_BINDINGS_VALID dirty.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "44a3a3e7d9d1d8cf7f2cf97b192fbdbe4620df1a",
+        "description": "tu: Add MESA_VK_DYNAMIC_RS_LINE_WIDTH to tu_rast_state.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f455ac88b86d11eebd119afa3b0fed59061595ef",
+        "description": "vc4/ci: add flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba2af1dc3630bda4a4c168eb54326a27c1663c96",
+        "description": "CI: add mr-label-maker.yml config",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b7b185711548b955cf173d3fc2a425604922a79",
+        "description": "radv/video: Set maxActiveReferencePictures to 16 for H264/5",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99f0449987bec1f82cd42a06f40bb4a863a37792",
+        "description": "Pass no-verify-fixpoint option to instcombine in LLVM 18",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7982751307774342c55b3b1bed16feba5770b23a",
+        "description": "ci/deqp: backport fix for dEQP-VK.wsi.direct_drm.* bug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eac703f69128d5aa6879c9becbad627ce08a7920",
+        "description": "Revert \"nouveau: add missing vl lib\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "4e3f3c10e14d8778781c81f39ced659b5ec2f148",
+        "notes": null
+    },
+    {
+        "sha": "7bd1d4848cf755257644e9b79289a364db659026",
+        "description": "Revert \"nvk: Enable VK_KHR_shader_subgroup_uniform_control_flow\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ac5d529c6513baba30641466d88afbc5ba2787ef",
+        "notes": null
+    },
+    {
+        "sha": "f424ef18010751aae1e70ebda363ada0bed82bda",
+        "description": "r300: enable tiling for scanout to fix DRI3 performance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "58b773bd9a4c108ee7c2b8a1405f832fa147b13a",
+        "description": "r300: port scanout pitch alignment from the DDX to fix DRI3",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d779a5d16ae6a17b3fc0c097f4eb477a80e54566",
+        "notes": null
+    },
+    {
+        "sha": "3bed7b22fe90a93c937452a7d9bdb9510c8cbc6c",
+        "description": "nvk: Always set SET_ATTRIBUTE_POINT_SIZE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "446f652cde22a3292b0860c16efb9d28bf89e1a9",
+        "description": "intel/cmat: fix stride calculation in cmat load/store",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "3a35f8b29bb9b6a92f98e8bb897bd444a54ca255",
+        "notes": null
+    },
+    {
+        "sha": "ba6dfb6ca448df0901f146f6f1711488a2d9e49c",
+        "description": "amd/ci: update stoney results",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b819adbd867dc250dba3b73a0d0a0407aef94fb",
+        "description": "glsl/linker,st/mesa: enable nir_opt_varyings and lower IO in the linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70fd817278d101e1cca8ca062d90d3db8073e9ea",
+        "description": "st/mesa: skip a few NIR passes that don't work with lowered IO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b48188e46c84d103aacb365a27bf914789b03344",
+        "description": "st/mesa: lower sysvals slightly sooner",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3de3a5c32397e7a8f77e656d44b9d6f909bcee4",
+        "description": "st/mesa: get dual slot input info from NIR if IO is lowered",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f28f8bba9f7fce1acb9db6f952176019effdc82c",
+        "description": "radeonsi: add test failures due to incorrect tests for nir_opt_varyings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "abf0de57ab5249abc5bff92e7eca88c0f3b3001e",
+        "description": "radeonsi: enable uniform propagation for varyings except VP/Energy",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db5cf460d7aee0e7b39fe3b990078191b8dc995e",
+        "description": "radeonsi: set trivial NIR options for nir_opt_varyings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5bbb279e7d6bc844a98621dd27f38f95e826d30d",
+        "description": "radeonsi: set the lower_mediump_io callback for GLSL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6dbd1dcd9399d758d954a5c42454fbcedbbd1d09",
+        "description": "nir/tests: add tests for nir_opt_varyings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c66967b5cb7aa69c3c2efb12730b7b570483e01b",
+        "description": "nir: add nir_opt_varyings, new pass optimizing and compacting varyings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba54099dce61f9ec49fa75fbc82c3eede86f3deb",
+        "description": "nir: add a utility computing post-dominance of SSA uses",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d76ba37e8f538269977e01d865819607568c1e0",
+        "description": "winsys/amdgpu: add more comments for winsys create in header file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f93f7f8f3a52c76ce4a742a27b54014b9b89c1b8",
+        "description": "winsys/amdgpu: remove tab space",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "efbd602b632e2212a2c3d5b66a246e23a98e8788",
+        "description": "winsys/amdgpu: use _destroy_locked() for failure to create winsys",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b6c0fdc97edcbec345250203e744082787aebc0",
+        "description": "winsys/amdgpu: aws instead of ws for amdgpu_winsys",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7e84861303e623e139a318b15d6695ca8125a67",
+        "description": "winsys/amdgpu: rws instead of ws for radeon_winsys",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f2275eed44eaa45ef886cbab15e52c0089928fef",
+        "description": "winsys/amdgpu: sws instead of ws for amdgpu_screen_winsys",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "92879e9da84a6c558d7c80013ac34db1001f08e1",
+        "description": "docs/features: Add missing VK_EXT_surface/swapchain_maintenance1 entry",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5bde82b3537623c99881f813d15a5b5fa674ef5a",
+        "description": "nvk: Expose VK_EXT_swapchain_colorspace",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68e93cce5ee013839d64e3f81642f71eaf6b1f27",
+        "description": "nvk: Expose VK_EXT_surface/swapchain_maintenance1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "547636dc43799fb09ca8b8004bc5b57f4fa2ca70",
+        "description": "nvk: Expose VK_EXT_display_control",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3da1c0b6c940ea40b2b510d668df210b3ada1c6b",
+        "description": "nvk: Fix missing implementation of creating images from swapchains",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "092299f18ad1744d821b6551b2269ed107130b71",
+        "description": "r300: remove some late NIR passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d430225b29a5be827ec77beec862f00491709948",
+        "description": "r300: move sin/cos input fixups to finalize_nir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba1bc94233c22e483a3a6feb0781cac72d4c5378",
+        "description": "r300: explicitly check if sin/cos input is already in correct range",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "67fd490fe5accc70ceabfd3e7d706f95cd986743",
+        "description": "radv: add a GPU hang workaround for legacy tess+GS for GFX10.3",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "a23802bcb9a42a02d34a5a36d6e66d6532813a0d",
+        "notes": null
+    },
+    {
+        "sha": "96e9c3fe77a315869a567dcdd5b1a2549a51925b",
+        "description": "radv: program SAMPLE_MASK_TRACKER_WATERMARK optimally for GFX11 APUs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d81809618f08e8d20ccd6a317078b5e0a08443a0",
+        "description": "radv: fix programming of PA_SC_BINNER_CNTL_1.MAX_ALLOC_COUNT on GFX11",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "25a66477d0268181121c0436f62b2100b72df068",
+        "notes": null
+    },
+    {
+        "sha": "8203284c036d780803c5a5e1b7ae931889ae903d",
+        "description": "radv: disable binning correctly on GFX11.5",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b44a886b84c91320f170bd108213768bb47ff6a3",
+        "notes": null
+    },
+    {
+        "sha": "680e707534d2e0463e8df1306959cb44359f9588",
+        "description": "treewide: Replace the invalid usage #if DEBUG with #ifdef DEBUG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f1cb470f0b634a7412cb229223ee7abdf4c6d97",
+        "description": "radeonsi: Only enable SEs that the device reports",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bad41f4db7ab86fe2d290026c096c55c5ce6281c",
+        "description": "frontends/va: Report vendor and device ID through VADisplayPCIID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c480c206622b525713a7caa53abe01d736bb8b5",
+        "description": "nouveau/ci: only trigger jobs for relevant changes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "67bb74863d2ffae844893567645ad9def0af169b",
+        "description": "nouveau/ci: fix yaml indentation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e3f3c10e14d8778781c81f39ced659b5ec2f148",
+        "description": "nouveau: add missing vl lib",
+        "nominated": false,
+        "nomination_type": 0,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "656f590bf59147b3dc1bbb2f7e7d3ba4d3500614",
+        "description": "iris,anv: WA 1509820217 is no impact for Xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b3cb226b1c9b5f4d2c896dbd6ffe44ff6fde9fd",
+        "description": "ci: include all the src/**/gitlab-ci.yml files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5fabb66f590fbcebc3f1d5a5d943caf519fe6b6d",
+        "description": "dri: guarded DRI code.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fcd0b4c94aa750711c9f88585a07660ef16aaecc",
+        "description": "util: Updated util/libdrm.h stubs with drmGetMagic()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ad4862126027e250ca5153d80b8b4e2c20ea6f0",
+        "description": "gallium/dri: Added XCB dependency to frontends/dri/libdrm build. Fix header issues with xcb.h being used.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "00e1562f5b90e5a8861b085daca926a5100b3bf1",
+        "description": "gallium/dri: Switch xf86drm.h for util/libdrm.h to allow for the no-op shim to be used.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d9215f90440e5c677f68d68d806c1912d7071c1",
+        "description": "egl: Changed EGLNativeDisplayType size check to make sure it is big enough instead of exactly the same size.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4477139ec2e537519fc8bf4667356b80bb935bf3",
+        "description": "egl: Added DRI3 code guards.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "275fdf709deb8899b8ef620f723a59283cfcb03e",
+        "description": "egl: MacOS platform guard around pthread_condattr_setclock()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8387deff8765bf31dd912303e8ebe8dc78249b74",
+        "description": "compiler/clc: fix compiler issue on MacOS with st_mtim[e] in stat.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6146a1651a6378c1c438d470cdc58a4c8f5b7ffd",
+        "description": "radv: emit VGT_GS_OUT_PRIM_TYPE as part of the dynamic primitive topology",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ccf894f29c79c421562c63d41d534860fc3c294d",
+        "description": "radv: fix RADV_PERFTEST=dmashaders with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd0b4f05ad2bf2ca50151a2afbf9ea8ddc6e452d",
+        "description": "radv: add helpers to bind the GS copy shader and the RT prolog",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc61409ea6ae14cf4ceb8af4e98d847065693029",
+        "description": "radv: Only enable SEs that the device reports",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfdcddfda987237a2e637ce7c32dc66ec4767d8e",
+        "description": "intel/tools: Make intel_stub_gpu work when using meson devenv",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6922f421f4bc3d5ceaecd0238490ebf745092ade",
+        "description": "intel/compiler: nib_ctrl no longer exists on Xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72d289b8d1491281a1c3011cdea78a6465546024",
+        "description": "intel/compiler/fs: Restore SIMD32 restriction for ray_queries on Xe2",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "96e0d979a7b9fb65a8fa88079ae779310e36ad2a",
+        "notes": null
+    },
+    {
+        "sha": "2ad4d5f8ddedeb4e8f0fe3674857b147e8598155",
+        "description": "intel/compiler/xe2: fix decoding of sampler simd mode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4df58ef50309c12b410ae0190d7e29d859e7a27d",
+        "description": "intel/fs: bump max simd size of some messages for xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5bc5bba7c6871c6a733231e457d2157a328d26c",
+        "description": "anv: Enable VK_KHR_shader_maximal_reconvergence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d56f65f7ca4f35757e9ef41779181a99360ab806",
+        "description": "venus: ensure shmem is attached to renderer before use for guest vram",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72b124031bae6f068119bc8e21d7e004311a4290",
+        "description": "venus: minor naming cleanups",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "362ba3f007fbd0b1ea6473b8ab2953a7761a5b39",
+        "description": "venus: roundtrip now belongs to ring",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "160aa8ba48edcfc2715233b59a4f7d3364a0396d",
+        "description": "nvk: Ignore rasterizationSamples when handling sampleShadingEnable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20db9b77aabfa5403e9d3645c3d030848557951c",
+        "description": "glsl: move invariant builtin validation to the nir linker",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bc25f4754837347e9206df885bb7696f0119edb",
+        "description": "venus: optimize to further batch query records",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c221e65a42e77506d566520d1084b9f21a0b42d",
+        "description": "venus: add vn_queue_submission_get_resolved_query_records",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e868fc0b1ebae357de382bf974119561971281bd",
+        "description": "venus: refactor vn_queue_submission_add_query_feedback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6bc116f848284755a3b78ad497ec221a0eabd18",
+        "description": "venus: rewrite qfb vn_feedback helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aabb52979af7c2233634c2c2ff5965ffed62cf14",
+        "description": "venus: refactor query record recycle",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a7085584e1de921379ac7853f50a90e952e3099",
+        "description": "venus: simplify vn_cmd_reset and apply more code sharing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5dbd88ad2a18ba8a25545087f47f97de21d1298b",
+        "description": "venus: drop vn_get_temp_cmd_ptr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e7797c8c176127e0dc1975616933e7d654ed9be",
+        "description": "venus: minor cmd count related refactors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4bab7344a8dc9b4edfac7f19e533d7015d422c80",
+        "description": "venus: massive qfb renamings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25be8e721d15b32fe64172690d2c8146eecb033c",
+        "description": "venus: combine query record and reset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71bf46fa5d31970393deeffce7304fa1979ba6f6",
+        "description": "venus: qfb to track cmd handle directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e931ef4884cc6eb910b7448309900c0d1ef53a4b",
+        "description": "zink: iterate all the modes when doing separate shader fixups",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0a12cedec91514cfbd1d584705c4debc6a3abd40",
+        "notes": null
+    },
+    {
+        "sha": "b68f2e747c71dd3524ef9514099ea28c96534c7f",
+        "description": "zink: Rework sparse texture lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a5120003c4af074c45ccdfe71d507d1cc4cda04",
+        "description": "ci/deqp: document which build produces which binary",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51593c6b34daa45b8c1a8bdf0c5d31d94e536f96",
+        "description": "dri/kopper: Assume a non-null drawable in flush_frontbuffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "484246ea0a95e6e8e26acf30ad560ff2bc7b2ef4",
+        "description": "iris: Eliminate prototype introduced in the previous patch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa24ff24dd5836c569e4db7857b09014b5152013",
+        "description": "iris: Remove suballocation in iris_flush_resource()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a330ecc48a66aa05faff795f67b0435383ba3501",
+        "description": "dri: Flush the context after flush_resource when creating shareable image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27d35588f5df72247c7f54c06ecb7f3c65037cf0",
+        "description": "iris: Copy main ISL surf when reallocating in place",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98690db8478abe1c87ff6f32f102e878d68b5ee2",
+        "description": "tu: Reorder device features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1726e03df42958f8b0b479cffa042d3c2195f00e",
+        "description": "tu: Advertise VK_KHR_vertex_attribute_divisor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "355dd782c5debae8982e24f822d88c3fe2e74c6f",
+        "description": "tu: Implement VK_KHR_map_memory2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7de9ab62a5c5d9d9ec678475ee26871aab27086",
+        "description": "zink: Make sure to initialize all the fields of VkMemoryBarrier",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2aab8e08065afcb30de54f6033dd1dc9064d3f41",
+        "description": "meson: Correctly get sizeof_pointer with cross-compilers",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ad34c932cdf9583f27b35a948a90c37c45c27889",
+        "notes": null
+    },
+    {
+        "sha": "d2229304dc3db575c1888f72a8c02b4380a464da",
+        "description": "panfrost/meson: remove redundant gallium include from meson files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13ce0358b00e108b6253ec2a4d1e6e8d94349dcb",
+        "description": "panfrost/shared: avoid use gallium helper in pan_minmax_cache.*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20df1d2b1f85711732eb190cf373b56df573e36e",
+        "description": "anv: ignore descriptor alignment for inline uniforms",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "812be09cd2095562617febc73e932d69389b056b",
+        "description": "st_pbo/compute: Use the correct structure type when allocating a specialized key",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27ab5fcf9f582d1777ca135731a8d388cdf5cb29",
+        "description": "anv: Set VM control to true in Xe KMD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c20388d617448faad60c4622f888766ed6814d0b",
+        "description": "anv: Set VK_QUEUE_PROTECTED_BIT during queue families initialization",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9102cb972a1646333894260cd0e1a0b2c44c0577",
+        "description": "anv: Replace the 2 sparse booleans by 1 enum",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec892c4d2b6360efdae4e2dc9a23ce320b6aa1d6",
+        "description": "aco: don't reuse misaligned attribute destination VGPRs in VS prologs",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df7024bcdd319f24e1ce7ead2a1eb3e7f6d6e151",
+        "description": "radv,aco: allow VS prologs to increase VGPR usage",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a20942f6a6220675791862590d8d52e2033cb24",
+        "description": "radv: fix wave32 support with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1c73db01c6533cbdf6725243e520200281d35a8",
+        "description": "radv: rework generating vgt_shader_key for pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6485f560d05b29b540564973879cc7e21f38631",
+        "description": "radv: determine radv_vgt_shader_key::has_ngg_xxx with the last VGT shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ccbd459c6bd521c59404349b762b8920ff145bc",
+        "description": "radv: fix determining if PrimId is used for merged shaders compiled separately",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e052e30b29dc6b1dd3370154156e98a301eb588e",
+        "description": "r300/ci: Update xfiles based on nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d45451fb44c26c6351bfbd16a9a5a3b3e436b34",
+        "description": "etnaviv/ci: Update xfiles based on nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d9ba366d4098a49975e87cb1814f61eb43f52a1",
+        "description": "freedreno/ci: Update xfiles based on nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6b65ac639345d497a5007fbb4e25a3740e04976",
+        "description": "v3d/ci: Update xfiles based on nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4350c7cb30d5e72684b51f801e4d9d8ba4cd06c4",
+        "description": "radv/ci: Update xfiles based on nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "697a5a7b9128d43365b78d955005878d457f1c09",
+        "description": "radv+zink/ci: Update xfiles based on nightly run",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f5b0dbc2538693b288d7efae08c2d64fe194346",
+        "description": "zink: handle image_deref_samples when stripping MS image instrs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b46479d443ccb5b54ea5564e905b730761a379f7",
+        "description": "zink: don't deref swapchain image array with UINT32_MAX",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8fb83c0935948c3bf0717e0a3d9ea3ba4cdf4f6c",
+        "notes": null
+    },
+    {
+        "sha": "9f2b23dd8528e91a8a384aa83dd38befd8996b6f",
+        "description": "panvk: Get rid of fields we already have in vk_xxx objects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5ed77800e04fee670dbc1091d98490e4fa470ce",
+        "description": "panvk: Fix GetPhysicalDeviceProperties2() to report accurate info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "783172add317def58d98772fd6a182773a953032",
+        "description": "panvk: Make panvk_sampler inherit from vk_sampler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "203f1a35a7b5bf804cc3aa129b9e1ace58adc5aa",
+        "description": "panvk: Implement {Map,Unmap}Memory2KHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9c0c728a225f473224a938aeff6264700772af3",
+        "description": "panvk: Add extra checks to panvk_MapMemory()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "88930cd95deaefdd54826acd494198c4492c4c8f",
+        "description": "panvk: Make pan_AllocateMemory() robust to errors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db1fde16d714b5d9e9fa40bbd999ed2cecd12a6a",
+        "description": "panvk: Make panvk_device_memory inherit from vk_device_memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4dc5613be60b038abf0e0ef0237bb58ec16fc347",
+        "description": "panvk: Make panvk_buffer_view inherit from vk_buffer_view",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "567324749c959476658fce942bc4892b98f18010",
+        "description": "panvk: Get rid of panvk_pipeline_cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7b68cdef15cb2d33e178315067a376819e22ee2",
+        "description": "panvk: Drop panvk_framebuffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39204afde153a20406a2d977f4cd54324efbc866",
+        "description": "panvk: Kill panvk_{Create,Destroy}SamplerYcbcrConversion()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2e6dbf0f6edb2d1f3d5f2319ded45c07d155859",
+        "description": "panvk: Get rid of unused panvk_cmd_buffer fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b91c8543c0e90e7c7b06078534879556dfe24236",
+        "description": "panvk: Don't pass a device where we don't need one",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cab8f193614e605930c18369dc6211fc40756aed",
+        "description": "panvk: Allocate descriptor set arrays using vk_multialloc_zalloc()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f69f99b2cdc7e63661393edd1c1135761e8e38e",
+        "description": "panvk: s/panvk_event_op/panvk_cmd_event_op/",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b59d2a513730475462b85f55aa3eeae7449d67f2",
+        "description": "panvk: Don't allocate a TEXTURE descriptor in CreateImageView()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40c1d0d3223dddc3503bc7c479c3faa1e52877ab",
+        "description": "panvk: Don't open-code panvk_cmd_open_batch() in CmdBeginRenderPass2()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c4f7aa549c03426b35da53352c6f135f7eccb9c4",
+        "description": "panvk: Add missing util_dynarray_init() in panvk_cmd_open_batch()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c73e2f984ce683334adf7fdd8227d1233d4b771e",
+        "description": "panvk: Fix allocation scope of command buffer sub-objects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff9c47f463c471caaef3eb1a15799f0e5a86aebb",
+        "description": "panvk: Get rid of the custom device lost handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3aa02232a51b655889493bba54fd33db443accdd",
+        "description": "panvk: Get rid of unused panvk_image_get_plane_size() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac61d6d0c09eee0260ff0439407a66493cbc4b9f",
+        "description": "panvk: Do not handle invalid NULL memory object in BindImageMemory2()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7d30f10f9118a1e29c4a05c61bfa8ab87d0a4ec",
+        "description": "panvk: Add VKAPI_{ATTR,CALL} specifiers to all panvk-specific entrypoints",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0136e8aec9529dbbdc2204f0f0e4544f2c33500a",
+        "description": "panvk: Kill the panvk_pack_color() prototype",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43bb5acf26be9cdc31976765cbff09da4be37a11",
+        "description": "panvk: clang-format the source files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d2820349a23e3f6065cd3c3d6f50dc4fca34f15",
+        "description": "panvk: Fix call ordering in panvk_DestroyDevice()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "211aa201945b5fd93a9419bacf89e89be23d830c",
+        "notes": null
+    },
+    {
+        "sha": "ce900dcbb133e2e9b8b2478fce8aa1c146d741bb",
+        "description": "intel/dev: Add ATS-M PCI ID for Data Center GPU Flex 170G",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59e0c38427df012ded895229dbf3d955efb59362",
+        "description": "intel/dev: Adjust device strings for ATS-M devices",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b6d6c1d2d0c8a517e974abbf7b75a47a607f6ec",
+        "description": "docs: add sha256sum for 24.0.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0a40e724b77747ceee8e22210ae5788928467b1",
+        "description": "docs: add release notes for 24.0.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7604697ec61dffcf59bb390ddb85fa6c77915bfc",
+        "description": "nvk: Implement shaderStorageImageMultisample",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "357720c5a7d06f62a41514ff367ae1df0d482021",
+        "description": "nvk: Use different descriptor layouts for storage vs. sampled images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86a462fb96d9f15fe42f98cf3372342791c2a6f0",
+        "description": "nvk: Stop pretending to handle Intel image intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd9836a0b823cc9355627b96787c43239c7b4bd0",
+        "description": "nvk: Use a HW generation names instead of chipsets",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be1ef1a8d8560831faa2778559baa0ded68e8a0b",
+        "description": "nil: Expose nil_pix_extent_sa()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "418f8be9eac6575e9c73f80e6596d40a0ef05fad",
+        "description": "nil: Add a helper to view a MSAA image as samples",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed6fd25a6201a78e96a2ea9c046310af6635d870",
+        "description": "nil: Add support for larger textures on Pascal+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3177e4fc272eb0d8dcce672f612f492e24623f1",
+        "description": "nil: Whitespace fix",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72e1a5775220a3979e0499f3a9aaac52bcb2b39a",
+        "description": "nvk: Reorder device features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94622ae491724acbb5304d50f1b8a30b3de78e02",
+        "description": "nvk: Advertise VK_KHR_vertex_attribute_divisor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "133c73da8560f689f8d560b30b1557a353b44995",
+        "description": "nvk: enable a mappable bar heap when rebar is disabled.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "647a2d1f6b6fc0b95effdfb0f4a6bfbfc6bba1fa",
+        "description": "r300/ci: enable nine tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98b36e02b9c44f56263394465d37ee2802384440",
+        "description": "ci: build nine tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96640b142eefc30e3edb91396301163cbbc4c888",
+        "description": "ci: build nine in debian-testing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da285796334b677e721ba319b808c1cbd374b488",
+        "description": "ci: install xwayland in x86_64_test-gl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13812cc91d5d8d77c818bb4e9d10c4676cfc993c",
+        "description": "ci: reduce irrelevant output to a simple list of libraries",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "90b6f84c5eace12f8facd7e4ea0170f86426cb97",
+        "notes": null
+    },
+    {
+        "sha": "045bc86ac9d994f9496ad76ae587226e76f1c052",
+        "description": "ci/freedreno: mark fails resolved by \"drm/msm/gem: Add metadata uapi\"",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f1680f58b14c56793f35b697e59c8bc909b71651",
+        "description": "ci/freedreno: disable workarounds for Adreno 618, 630, and 660",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ab690f25e8c1f2a89ef0171ad29451ad3fd2fc4c",
+        "description": "ci: uprev kernel to 6.6.21",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0da118ab1257ad265a491fca8d1cbf307ef9f8c",
+        "description": "anv/hasvk: default image_read_without_format to true",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c770f06c64d408b9a49ff2d335719047e7a0505",
+        "description": "nine: drop useless and a bit too long line",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b6a4b1c796516ee568743f04be2f785600b3804",
+        "description": "nine: fill missing licenses headers and copyrights",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81d3de71cd43d21f8c760901fd36a648a74ccb97",
+        "description": "nine: convert licenses block to SPDX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac5d529c6513baba30641466d88afbc5ba2787ef",
+        "description": "nvk: Enable VK_KHR_shader_subgroup_uniform_control_flow",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "376d1e6667a80e1811d4c25115633817f16666a7",
+        "description": "rusticl: implement cl_khr_suggested_local_work_size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de94d989406e2ccf3858c29927d705a28e848b80",
+        "description": "iris: Set BO_ALLOC_NO_SUBALLOC when allocating bo for slab",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f165117dc25b2d290e9c06aedcfd6e2f0b316f1",
+        "description": "nouveau/drm: remove nouveau_client::id",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9583fb8d00eb1e66f9fc75d5d6f520a55bde5d8c",
+        "description": "nouveau/drm: drop unsued chan argument from nouveau_pushbuf_kick",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2101c9f2ac62fdc391cb27010973cafa9e8ab455",
+        "description": "nouveau/drm: rely on nouveau_pushbuf::channel being always set",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a28cd6b1de0deaab2d2634b77cbfcc23d7e12fb0",
+        "description": "nouveau/drm: drop immediate parameter from nouveau_pushbuf_new",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a4c2cba956fe593a0fc09416bd8142a5a34423f",
+        "description": "nouveau: call glsl_type_singleton_init_or_ref earlier",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "91029b7e87bba2a28aeb202cdf920d6ec6a70fa7",
+        "notes": null
+    },
+    {
+        "sha": "821f4c8d99a3068758db834a5c219082a9609b3c",
+        "description": "nouveau: import libdrm_nouveau",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a62fba6b62bc87a5798fdf7e242011a21904331f",
+        "description": "nvk: use c.get_supported_arguments for compiler flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c398bc59099330155651587f4fc39130438613f0",
+        "description": "drm-uapi: Sync nouveau_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7719a9ed85cdfd179a108c19586487605a5555f",
+        "description": "intel/fs: remove some unused send helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0eaf7cca35b48f001c59f3818d7ac8e30e32e6eb",
+        "description": "mesa: prefer read-format of RG for snorm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9e66df39fb1eef50f7e9ccf519391f5137c6b6f",
+        "description": "zink: Add error logging on surface creation failure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28854743dccfdcac525158c6c76214f1985109b6",
+        "description": "zink: Change zink_get_surface to return a zink_surface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "207db018297af9abaf053f45dca9a3c276063782",
+        "description": "zink: Make sure to not leak anything on surface creation failure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "948695e1a4bae1f0e1ddbc6b7a185e9ee5b516aa",
+        "description": "zink: Move zink_surface_destroy before zink_create_surface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27bde4b420043036d36e8aa3b73b38aaf7c7df04",
+        "description": "zink: Return early if the source could not have been acquired",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c22e78619d90c128ca7f108bfe9bda7dbe4deca",
+        "description": "zink: Separate the template from the wrapped surface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55cdde758c86fa97932ecc4fec1028bc0f5bfdaa",
+        "description": "zink: Use an intermediary variable for create_surface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "faaa65a1a31041c97f23a0706df6196cd8635fd5",
+        "description": "zink: Make wrap_surface return a zink_ctx_surface directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a77a46837f637c068dc1720b460f14e36ac182d",
+        "description": "anv: return unsupported for FSR images on Gfx12.0",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e324fbbe68df870dede5a7b4efbd6528dd041de6",
+        "description": "intel/brw: Fix validation of accumulator register",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "12d7aaf2b825fe49277b84a605733e8fc39e241d",
+        "notes": null
+    },
+    {
+        "sha": "db8022dc4d30cc1dc2903f1a8be0b2354d406357",
+        "description": "intel/brw: Use helper to create accumulator register",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "58907568ec526df87fa87177441743fa0d1d0a66",
+        "notes": null
+    },
+    {
+        "sha": "90cf8d14d619967b2da7471d04bb20aa0665a482",
+        "description": "zink: add a pass to strip out multisample storage image ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f122761a1732c32119c5bce6dfe4e83599576d9",
+        "description": "zink: remove stale comments for DRLR usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7e55dcfaf9208a3de0e07757cf8afcdec3c8542",
+        "description": "zink: be even stricter with shader object usage about blocking invalid usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "485b4d9abedfd747bc324d5b3858e5df3b38eec2",
+        "description": "zink: add even more strict checks for separate shader usage",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5910ce4b86343cf92ddae6d9fd813eb2f8367bc8",
+        "description": "zink: always sync and replace separable progs even with ZINK_DEBUG=noopt",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "460c7eeecbd5439baeb86a3d3648b1c63afba0cf",
+        "description": "zink: use the sanitized key in update_gfx_program_optimal()",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "daf2f4a583cd02d80d0acb200279411d1247356e",
+        "description": "zink: rename optimal_key in update_gfx_program_optimal()",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee476f3eda38ae7c94eb0b587c43f793cbb4147e",
+        "description": "radv/av1: limit profile and bit depth to supported values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "18df1a81a8c1089238f6eef3e5318432ae28ebc9",
+        "description": "anv/trtt: update GFX_TRTT_VA_RANGE for LNL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f0769f5d8a9d718060c59c78db5804278875b23b",
+        "description": "intel/compiler: Adjust fs_visitor::emit_cs_terminate() for Xe2",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "97bf3d3b2d4a2c01cafff413a44ec42002ba9956",
+        "notes": null
+    },
+    {
+        "sha": "caabd41cd14e3e562e0ee36212bb431a70689f16",
+        "description": "panfrost: make sure blends always have 4 components",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2cedf5b5697e924e545a3edc3176fa50a8f129b",
+        "description": "panfrost: make drm-shim work again for panfrost",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02b6f4ef6b76c8ee65be5ad38a1fc71306a93a42",
+        "description": "radeonsi: don't test so many wave limits for AMD_TEST=testdmaperf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e99765df08c7fe6be836022896152bbca7a94ff4",
+        "description": "radeonsi: fix the DMA compute shader",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6584088cd5e6fe2538428b2ae13cbafc62604de2",
+        "notes": null
+    },
+    {
+        "sha": "e589833ee1e6833f4611c200f2044ff303dd6346",
+        "description": "ac/llvm: fix SSBO bounds checking by using raw instead of struct opcodes",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6b573c00c9156297513a0783ef05a1c5601e6620",
+        "notes": null
+    },
+    {
+        "sha": "31920cb60c3cf487bc29ebd1d8ad8b1825e09fab",
+        "description": "intel: Enable Xe KMD support by default",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97aec4011110a62c9681ae13187427a33a0e2393",
+        "description": "intel/brw: Emit better code for read_invocation(x, constant)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e87881f6168f6af10a6d29fd0703bf02e007a095",
+        "description": "intel/brw: Avoid a silly add with zero in assign_curb_setup",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9674cbe7d2afd8bd03c8443242f10213d01c9b4",
+        "description": "intel/brw: Combine constants for src0 of POW instructions too",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7480f94c1bda89d6f263180ac0e3da4ab1fe235",
+        "description": "intel/brw: Combine constants for src0 of integer multiply too",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd3bed1d92715a22a0abd37e4f559bbe6c5220c6",
+        "description": "intel/brw: Integer multiply w/ DW and W sources is not commutative",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "93478c095e7a4acb67c2af775e3b3b20e8cd268d",
+        "description": "intel/compiler: Enforce 64-bit RepCtrl restriction in eu_validate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "31f640bc5f1078a8e838a9b0a5a9c1fd4b05a536",
+        "description": "intel/brw: Correctly dump subnr for FIXED_GRF in INTEL_DEBUG=optimizer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f89d9cc53d91a3a9b7627d894c8c7ba73f3c6e99",
+        "description": "intel/brw: Silence \"statement may fall through\" warning",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c85768e3804d2e6a9ee3a0f33e31f31530ecea0c",
+        "description": "zink: delete faked_e5sparse",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fa413fef05ceaf4e811d2c564e766431c1d6701",
+        "description": "zink: set the sparse format usage flags directly based on queried props",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9a412c10b7a96adf71c9a2ca44a0abca75de1c49",
+        "notes": null
+    },
+    {
+        "sha": "ba2731941f17ff0a6c9bcb7ce1c5c2a9aff906ad",
+        "description": "zink: nvk baseline updates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c24841190748987e8f273135c6b34c21fbb91aa8",
+        "description": "zink: only add STORAGE bit for sparse images based on multisample usage",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "d320e8328d6152df5703d230adf8ac0bcb6de9f9",
+        "notes": null
+    },
+    {
+        "sha": "63f5a6cbe30b614aa416a3634da25712788b76ef",
+        "description": "u/inlines: constify util_res_sample_count()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61e5b6ad9dcde1f2a75dfd09cdbf9ea86b352223",
+        "description": "zink: try getting sparse page size again without storage bit on fail",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80eac1337d47dd7899781bdc74796bf167b33c90",
+        "description": "nvk: Always copy conditional rendering value before compare",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8c25cd307afb5ebf4404dfa6ae1f99c5a5bd27f9",
+        "notes": null
+    },
+    {
+        "sha": "8a3e85776a941c8e77a3ffa3e8c44425c0ef8c85",
+        "description": "glsl_types: derive ht",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c29110ef99e1a8ad892ee23110c671a6820e48d9",
+        "description": "v3d: derive ht",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d32239b7a682919b2d9b8b2bbd4c396564ab5c3",
+        "description": "radeonsi: derive ht",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f287d100cd783aa80f757d144e8d87047fc8562",
+        "description": "nvk: derive ht",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da59672e2bf168df7142e077059588379bac7d9d",
+        "description": "asahi: derive ht",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be5c288dbfead7575ca21f9c69772e5f4abc8cc1",
+        "description": "panfrost: derive ht",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "93879b1920722ac21d352efcb73f7a7f93070c7d",
+        "description": "util/hash_table: add DERIVE macro",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49a89911c408abbd134f9765d6a21d79c86ad767",
+        "description": "nir/print: do not print empty lists on intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec9b6b5cfaa02ca75cd72c4472fa5530816cbe81",
+        "description": "util: add _mesa_hash_table_u64_num_entries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6123a80dab3da3b52125bf42821a4c8be2c93b4",
+        "description": "nir/opt_shrink_vectors: shrink some intrinsics from start",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa99753a283becc5fbf554a11a9b01594a278a2e",
+        "description": "nir/opt_shrink_vectors: hoist alu helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1916432ab1528ff00b5ddf7f302f60fbf947e54",
+        "description": "intel/dev: Nuke display_ver",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b09ffe48f227e79f2a477da42002dba1483dc080",
+        "description": "intel/dev: Nuke 'ver == 10' check",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a977a51a216a449f2b96b3caef48e1d984cb11b4",
+        "description": "radv: stop using 5/8 component SSBO stores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc7e3efc7cb419d448a2a6b32927f9c398d483ce",
+        "description": "radv: don't advertise DGC with LLVM",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3409c600991cb9202dffad759c49fccbb8ed4ab3",
+        "description": "etnaviv: isa: Support multiple encodings for texldb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20678b92048c0644201c3767455ec6b6d7df4d00",
+        "description": "etnaviv: isa: Fix #instruction-tex-src0-src1-src2 bitset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ccc99bd42dcd629556741e2da9bcd9fd52725fd7",
+        "description": "etnaviv: isa: Support multiple encodings for texldl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d117b46ea41908c97fdcdf00cb2fb20ef7d54ac",
+        "description": "etnaviv: isa: Support unary texkill instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86de104d07f53cee89988d117b28f6cd40400f7d",
+        "description": "etnaviv: isa: Support unary branch instruction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0aa737018ebd272b44d39638735c3d72ef29f25e",
+        "description": "etnaviv: isa: Combine branch and branch_if",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48e1589b44a9457a5f8b329b48a8713faef0d1b4",
+        "description": "etnaviv: isa: Correct #instruction-alu-no-dst-has-src0-src1 expr name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10a7cf31215e329f6ced6de5f8f69eabf968863c",
+        "description": "etnaviv: isa: Correct #instruction-alu-no-dst-maybe-src1-src2 name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dfb2fcf6520c71c9dc24d85e39a5db33f3e95244",
+        "description": "etnaviv: isa: Correct #instruction-cf-src1-src2 bitset name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2ffc7a09b9909d0313f6a634ea97fd26653861f",
+        "description": "etnaviv: isa: Correct SRC0_AMODE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1cbd35bb59d7fa9df92242921ec48da735f063e",
+        "description": "etnaviv: isa: Move {TEX_SWIZ}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8f6de731410f82d8b12661d73f2aa46f52c6042",
+        "description": "etnaviv: isa: Add movar opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e77fbe2bcc96f358a6c6d50c37f8267e0bfd640e",
+        "description": "etnaviv: isa: Add internal register group",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f416bb3f8c65b73c34ffe9520f2d52e942a0bd05",
+        "description": "etnaviv: isa: Rename reg_group u2 to u",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf3fa2fd8c49ad6d813a9aa05222a14c53a04ec3",
+        "description": "etnaviv: isa: Reorder instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c6378abeccf32f676770dcf93e559bebef01671",
+        "description": "etnaviv: isa: Add div opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2a9bc73f5baf3c8cd862eb836d84a1819312250",
+        "description": "etnaviv: isa: Remove note about GC3000",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa3d2bc486b95be7f6d5757b692d7ee62c6ebca1",
+        "description": "etnaviv: isa: Add texldd opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0701f3ef9b60bad6e7c73bf1825747d0a38c9c06",
+        "description": "etnaviv: isa: Add texldl opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c86bd0209be133c0b2ad64919905a4510d06406",
+        "description": "etnaviv: isa: Add texldb opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c72596ebfd6ca8c41dd220afbda7c6f44788e8d",
+        "description": "etnaviv: isa: Add bit_rev opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e2a0e805991643d197fbe9c920d5905d47f55a9",
+        "description": "etnaviv: isa: Add movai opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73584cf46a588014460a2786b57af7a83b712a0d",
+        "description": "etnaviv: isa: Name cond enum value 22",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20022f538948d36d9af5d348538649e8848ffb8d",
+        "description": "etnaviv: isa: Add branch_any opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a716361791901ca78115d6a4d765f3b28146820",
+        "description": "etnaviv: isa: Correct dp2 opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47106e0f80554fe07563c20ca69b99e8ba044ffb",
+        "description": "etnaviv: isa: Add bit_extract opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b4cbbf0d273ceb3ec5e551185a2f5f859e40425",
+        "description": "etnaviv: isa: Add norm_dp2, norm_dp3 and norm_dp4 opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4cd779af3f69a45eca74be454e6b70fc1c85312b",
+        "description": "etnaviv: isa: Add frc opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ede0008c1697714b124ec504b5c41ec87b6244cc",
+        "description": "etnaviv: isa: Add dsx and dsy opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "031c2c26dfe4b39e20a62c8e0c9ac39b9892cf87",
+        "description": "etnaviv: isa: Remove duplicate #instruction-alu-atomic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f66589c2a461524f324655ffc62503f259cb79b",
+        "description": "mesa: force rendertarget usage on required-renderable formats",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d7def3ccdf4ac7f436dcd27342851179b68bee42",
+        "description": "panfrost: add pan_force_afbc_packing driconf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2bcdc4939c283003e8a7f638229604973aa5327a",
+        "description": "panfrost: add driconf infrastructure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d861bd1563694761d8d050439b8ec3d6b3572c17",
+        "description": "panfrost: give afbc-packing its own flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7487ac204634a421d7dd5a076f9ac8f512571f5b",
+        "description": "rusticl/device: support query_memory_info to retrieve available memory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2df640c4f66c4064dfa94711602af49dcaf53d69",
+        "description": "rusticl/kernel: assign sampler locations before DCEing variables",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "25b8a34b48fce99164f1cb853bcde86d1cf6cba5",
+        "notes": null
+    },
+    {
+        "sha": "493d5764e3e672ae86939dcaa918f844fcf5e0e4",
+        "description": "iris: setup distribution granularity with Wa_14019166699",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da3d5d10644f309627f35e682c6ca351dcb19c1b",
+        "description": "iris: refactor function that checks primitive id usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "275bcbd7a7001fd31f39b63c94697e6cfbc3e469",
+        "description": "anv: setup distribution granularity with Wa_14019166699",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75c6ad99073ff4632955ae899057653902e6839f",
+        "description": "intel/fs: fixup sampler header message",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db8eaa3620393f504e12c8bab99285eb679e7e9e",
+        "description": "anv/video: fix scan order for scaling lists on H265 decoding.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8d519eb5f5947800279e4c02bf7aa79b0b65cd17",
+        "notes": null
+    },
+    {
+        "sha": "182bff5c056a1e7de71ab766a77f9f61cd0ed1fb",
+        "description": "glsl: remove unrequired do_lower_jumps() call",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1391bc372191db10dff97f279631816555192fc6",
+        "description": "glsl_to_nir: never convert instructions after jump",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f06aed8e1d15cf2f41b8163db07689dee35c9c42",
+        "description": "glsl: make an explicitly safe version of visit_exec_list()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "626502d7c7f6b2266e2bdc7979e512b7a7292e44",
+        "description": "nil: Advertise support for PIPE_FORMAT_R5G6B5_UNORM",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "edd3379c09afb6eb929070aa5254ab14a64d6a87",
+        "description": "nvk: Manually offset array and Z slices in BeginRendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81db82bd8cfd71301bc4d1037fd2c8e982ff59a1",
+        "description": "nvk: Add a nil_image helper variable in BeginRendering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "696e2064bd7a00d271bbaa1f70e4f36076834fac",
+        "description": "nil: Move Z slice offset calculations to a helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "813f37a8ed770ad1b10be9b704d9714e7b86b181",
+        "description": "nir: add nir_block::divergent to indicate a divergent entry condition",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "936690f733a62d83e2d8374247bc1557056c25b3",
+        "description": "nir: print nir_io_semantics::invariant",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "867a0a7db9fef8e23fcbd905a0fb6105ad20d4ea",
+        "description": "nir/divergence_analysis: handle derefs of system values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb670d6eafb59d4da456b0b4a7b5339d2b6c12ae",
+        "description": "nir/divergence_analysis: load_instance_id is convergent within a primitive",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "310b13b7f0e5c5aab740888cb705873303239151",
+        "description": "nir/divergence_analysis: load_primitive_id is convergent within a primitive",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1621d4a0d3e36312498c18981b30dc3ce4ef00be",
+        "description": "nir/divergence_analysis: change function prototypes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b1fd20780450b4afbf1ac94507cba0d95ccf261",
+        "description": "radeonsi: split RADEON_USAGE_NEEDS_IMPLICIT_SYNC into CB and DB flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "123e0b4240f5e882681b9d8489f5432b0d09ab1c",
+        "description": "radeonsi: add radeonsi_cache_rb_gl2 option enabling GL2 caching for CB and DB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2347259f1da7ae7bece064f224401956212333c3",
+        "description": "radeonsi/gfx11: add missing DCC_RD_POLICY setting",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5acff16ce4e191e95c9640cd52d2ab6792225707",
+        "notes": null
+    },
+    {
+        "sha": "82aca689c10fd5acaf3d0c688ee02d6f1b63e153",
+        "description": "ac: use the gfx11 shadowed register tables for gfx11.5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ce3a958523dd0be97d9fb9e29af9336440b1213",
+        "description": "radeonsi/gfx11: program SAMPLE_MASK_TRACKER_WATERMARK optimally for APUs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd71d62b8fcf0c74ba31415375a0ec68b0525c88",
+        "description": "radeonsi: program tessellation rings right before draws",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9b7d34d05fee61b05ddac61a73ec38489d73ffc",
+        "description": "radeonsi/gfx11: program the attribute ring right before draws",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e08569d6afbb90789a6c9e277e2ee6859f78a80",
+        "description": "radeonsi: allocate only one set of tessellation rings per device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea94cb95e4dc6da8ee458db276942be1f72afa44",
+        "description": "radeonsi/gfx10.3: add a GPU hang workaround for legacy tess+GS",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a23802bcb9a42a02d34a5a36d6e66d6532813a0d",
+        "notes": null
+    },
+    {
+        "sha": "7d3a414662ed4aaffd80762532a1c3c9f4cfc4f1",
+        "description": "radeonsi/gfx11: fix programming of PA_SC_BINNER_CNTL_1.MAX_ALLOC_COUNT",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "25a66477d0268181121c0436f62b2100b72df068",
+        "notes": null
+    },
+    {
+        "sha": "20445f296bfcf3be40436617aad5d8378ad09bce",
+        "description": "radeonsi: disable binning correctly on gfx11.5",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b44a886b84c91320f170bd108213768bb47ff6a3",
+        "notes": null
+    },
+    {
+        "sha": "62d360c287193609e921cfd9886c3f5b37c4b9ed",
+        "description": "amd/registers: add correct gfx11.x enums for BINNING_MODE",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ced3fbbcf9354789b7aff0b99fb8df1b4f67110f",
+        "notes": null
+    },
+    {
+        "sha": "74c28b93c8aad54c7e3348b702d254219d99f53d",
+        "description": "glthread: invert _mesa_glthread_has_no_{un}pack_buffer by removing the negation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9939f20a499b4201ab4ebdc0d0e8dde01f78637a",
+        "description": "glthread: execute small glDrawPixels asynchronously",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b43b111b19829271d49acfd169793d635334efc8",
+        "description": "glthread: execute small glBitmap asynchronously",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ada351f2ea97cfa33d69d94867884c4e2f9d33f3",
+        "description": "glthread: track glPixelStore(GL_UNPACK_*)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c76efafc0d14aabe655b204d62b98ef323cd9c3c",
+        "description": "mesa: move struct gl_pixelstore_attrib into glthread.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fe8ef128276ee7315e34b763221fe88a6378866",
+        "description": "mesa: deduplicate initialization of gl_pixelstore_attrib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a52c50a65112678ea513954e2e216008c40bf9e",
+        "description": "zink: simplify vb masking on bind",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "068973b0697850b90038101668c92a8ac3b6c575",
+        "description": "zink: set VkExternalMemoryBufferCreateInfo for opaque fds too",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7fd12a446d09cb2b21311cad09515cad08987051",
+        "description": "zink: destroy batch states after copy context",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b06f6e00fba6e33c28a198a1bb14b89e9dfbb4ae",
+        "notes": null
+    },
+    {
+        "sha": "9227d63c19523b58e278a3d1b40fbde27bb53b41",
+        "description": "anv: Fix Xe KMD userptr unbind",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "19439624d9fac333bcd046683bf172a89ff16873",
+        "notes": null
+    },
+    {
+        "sha": "a56d2b8dad21ec6d9c44a36fc06fe0556b6e66ed",
+        "description": "zink: Remove interpolateAtSample() when not multi-sampling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4bc1bf16252d7a1ad0d3a8df375fca26efabbf58",
+        "description": "zink: apply zink_shader::uses_sample to fs variant updating",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b061ab7198bb93ff77aef7c219102b125cd56e8c",
+        "description": "zink: track whether shaders use load_barycentric_at_sample",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1b66f9707c010a4b554b3039649afb13cba61de",
+        "description": "compiler/types: fix serialization of cooperative matrix",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "2d0f4f2c17b79830e9780a68bc473718d4abd4ad",
+        "notes": null
+    },
+    {
+        "sha": "fc2b61962160c684b865153f5b8035430cce7c66",
+        "description": "ci/image-tags: re-generate all the images building deqp-runner",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fcd43ee243883238b7d5aea6c5338218c12fe9aa",
+        "description": "ci/deqp-runner: fix list of image tags to update",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d80f355627422e5e021072ed8eb443f95e81b76",
+        "description": "ci/deqp-runner: update repo url",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "810586279c1085387a51acb81a5002549727e13e",
+        "description": "ci/deqp-runner: bring \"install from crate\" & \"install from git\" to feature parity",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9eb50036d41fd94beaf64b327bbc0bd32e43abdf",
+        "description": "ci/deqp-runner: set android rust target in the caller (debian/x86_64_test-android.sh)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fd86519a11284d2ff62581096961a9cbb0983c9",
+        "description": "ci/deqp-runner: do a release build instead of debug",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c92084ed970bc8f75ebd1dbeca5fa1b387bebe7",
+        "description": "anv/trtt: invalidate the TLB after writing TR-TT entries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3e5dfd668d09ea260a667003e33a97fd7b954869",
+        "description": "anv: add an anv_pipe_bits bit to allow invalidating the TLB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52ced4008c90693fe242e6be985a4b58b8b5fe2c",
+        "description": "intel: Drop pre-production steppings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80f532a63664c0c37cef5e261be38ebb5dbf5be2",
+        "description": "venus: fix VkDeviceGroupSubmitInfo cmd counts from feedback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "577085ef0e7b4a1290612df00485535d6d578ea7",
+        "description": "zink: update nv baseline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cda4ca53b8df9bbb3a4b788ade8b0b7422dc6dc2",
+        "description": "nvk: Drop nvk_device::pdev",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b38ba5d70a4383f03fd0cee783bedf99386be7e",
+        "description": "nvk: Replace more dev->pdev with nvk_device_physical()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ddaa4ea105a0ee85af76e4eefea68f4787f58c3",
+        "description": "nvk: Add and use more cmd_buffer_*_cls helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f55bb91159ecf62874b4afde1660c1a50fbbcbb3",
+        "description": "nvk: Drop a bunch of dev->pdev and just use pdev",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c3582893382af2fd39d98d483d73a966fc76681",
+        "description": "radv,driconf: Remove active accel struct workaround",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "217072d25f4e5fa2414f0c3f4203c2faf3c8a807",
+        "description": "radv/rt: Force active leaves for every updateable accel struct",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d12984edb8a9de6cfd6ade8201fd229c494880d2",
+        "description": "ac/nir: fix exporting NGG streamout outputs with implicit PrimId from VS/TES",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d287943d17a662c14dfefc110f073159b2955e0",
+        "description": "vk/update-aliases: drop VK_ERROR_ prefix substitution",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a57b1df5395bbcaa6f48ea851860bedc7ceefb9",
+        "description": "driconf: add radv_zero_vram for Crystal Project (1637730)",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c19edbb6afc44a6a9c51ebac275683d98d1f8562",
+        "description": "zink: update nvk baseline with nvk changes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e3056e21c00da9fa7b1475bd376f51fcaecf983",
+        "description": "zink/ci: update list of flakes for RADV jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0f9cd882c33b9d1f04676d1a16298dcc7214ef2",
+        "description": "radv/ci: update list of flakes for VKCTS jobs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91579236dc6a51838986ecd92d7c003e05a0c50e",
+        "description": "ci: use Linux kernel 6.6 for RADV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69fbd5cb90a6958aa86ccf35fb552920b8c8f43e",
+        "description": "v3d: fix line coords with perspective projection",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ee4d51f8b2de004b04d02c7edf66ca0608adf16f",
+        "notes": null
+    },
+    {
+        "sha": "62e1dff256097eff9665dd68f59f51b7cb2f274d",
+        "description": "v3d: add load_fep_w_v3d intrinsic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e720f1fefc29d2bda3d711acf41ba417a76999f",
+        "description": "docs: delay 24.1 branchpoint by 2 weeks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d38ff02c033a2cd0d7d926f395a0728bc7f2abf6",
+        "description": "v3dv: mark some promoted extensions as supported",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6fab8abebb321d2d16c82217713ce93e54971729",
+        "description": "vk/meta: Fix base_type selection in build_{clear,blit}_shader()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c722265c16ef3220f2473c515526598f760f873d",
+        "description": "vk/meta: Add the PUSH_DESCRIPTOR_BIT flag when creating blit pipeline layouts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24cedcf838f1008810ef689f35da97de0ae72a48",
+        "description": "pvr: return the OS page size for minMemoryMapAlignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "433a3c262a06c15c2884149d450043ad0ffdb32a",
+        "description": "util/u_debug: fix parsing of \"all\" again",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0c42c79edfb031509c9c0cf833d52a6f4c064356",
+        "notes": null
+    },
+    {
+        "sha": "7eae0e03f1241f0ca75da50baf8cebbe1749eb80",
+        "description": "broadcom/compiler: fix SFU check for 7.1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b1008f3bc395c141416b00aa41f758db4b7ee4f",
+        "description": "v3d: disable Early Z for multisampled 16-bit depth buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08af5f2703ae21522aca2ec353f4ff8288e1fe5e",
+        "description": "v3dv: disable Early Z for multisampled 16-bit depth buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "33e77c904182668f36634a18ddf8f569dd2a4a7b",
+        "description": "v3d,v3d: use new simulator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75a940c949d5b4d8135531e1a9c5491c008910b5",
+        "description": "radvi/ci: enable RADV_PERFTEST=shader_object for RENOIR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "898f28f790dd56201260ec9720ac58ecdd6402c4",
+        "description": "radv: allow RADV_PERFTEST=shader_object on all GFX9 GPUs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbe820f5a0221212a53435170f520069d8ccf3b1",
+        "description": "panfrost, pan/lib: Move pan_resource_table to panfrost",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a4698733b1173655cf12af9ff154294940c12b4",
+        "description": "pan/bi: Lower ubo table in indices for Valhall",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "652e1c2e13946de1e6dc6ae94b8b1f4af6685732",
+        "description": "pan/bi: Rework indices for attributes on Valhall",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27031910f788fe9f51e3f6641e6f7ad26dfb4840",
+        "description": "pan/bi: Rework indices for image on Valhall",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce52b6d35975c82077d5d2efe8430063fa2a4abc",
+        "description": "pan/bi: Rework indices for tex on Valhall",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "181891495a3113912aa04645c85d9ae84fe24bce",
+        "description": "pan/lib: Remove variables in blitter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05607311feb3edf6d4997ef361057d5b69cd39c1",
+        "description": "pan/bi: assert indices when offsets are present in bi_emit_tex_valhall",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7202751ad9c223f4fb4324141919e679b8d57de",
+        "description": "radv: fix emitting default blend state for PS without epilogs and ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ebff681dbc1986c3d6bc6d1ca15e01f182a9dba",
+        "description": "radv: re-emit RB+ state with PS epilogs only when the col format changes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1307184d21ade30cdeaa075b842060130c79e7c",
+        "description": "radv: stop using the custom blend mode for PS epilogs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e592ab466fd9756e668aa3d127b685ce3f8ce35d",
+        "description": "anv: use workaround framework for Wa_16013000631",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "93255abe30b0a2181fd7ef844c2e74e43865f32a",
+        "description": "etnaviv: Fix how we determine the max supported number of varyings",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "84816c22e4cf782bf521a005cff6063932a11872",
+        "notes": null
+    },
+    {
+        "sha": "14e9894a19c208811fa6c67183a2778a7d6f75da",
+        "description": "glx: Remove DEBUG code in xfont.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc74a819e41c0275e5e4cbf93931d7554b05f665",
+        "description": "nvk: Disable the Out Of Range Address exception",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ed7bce8e5d2e0dfa68f98bd7fad33a7ba6051d8",
+        "description": "nvk: Always wait for the FALCON in set_priv_reg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df90d80d9d50bfbc3fe1ee30fd3cc17be9ba08d2",
+        "description": "nvk: Document the register name for the helper load workaround",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbcef73668115e758fe49cec81af19af7c1ad96a",
+        "description": "nil: Fix a typo in a comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8f9bceb172026bb7433a9a50157bdf95b7eb492",
+        "description": "nak: Rip out a few dead_code statements",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1afffe7fa7bd8e1cd1f7e58cfa2f33faf889628",
+        "description": "intel/brw: Use hstride instead of stride for accumulator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e01266335b2d91b3945c8553710062d558eaeb31",
+        "description": "amd: update addrlib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2cd192f8799c8cc27cd76e3acae45e807aadd926",
+        "description": "mesa: fix CopyTexImage format compatibility checks for ES",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5010f5f03963fb8e0ab82848cd67ebd3fa42c00",
+        "description": "ci/deqp: add EGL patch for correct suite (GLES, not GL)",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9ab02222d042d88425168fa4e8446523c5a47c4c",
+        "notes": null
+    },
+    {
+        "sha": "3b05ebaa625428ac3590a7ba1848a6234a572db4",
+        "description": "nvk: advertise shader resource residency",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "410de4bf69a0ba92a9ec56ff3d24497bb7adef10",
+        "description": "nak: wire up sparse image loads",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b17f139281b1f1419d7705d200480771fb43a958",
+        "description": "nak: Wire up sparse residency for texture ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "140cf8d616b1f020a8c9c9ec6f96e492044058ae",
+        "description": "nak/nir: Add sparse support to shrink_image_load()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "671c6334bfced8ea6d720f380213cc5ae1b98ee2",
+        "description": "nak: Plumb is_sparse through from NIR for texture ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75390a7aebf8edbc783ec43637f1b87e323720e4",
+        "description": "nak: wire up shader resource residency intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09e2917ee8be49da9522051913b7b9ff4233d29b",
+        "description": "nak: Rename resident to fault",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48803ac53db8daf26af70c9d2b68802d29e1128b",
+        "description": "nvk: enable sparse residency features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db45b29f5f596d02fc610429fee7a311a8aea960",
+        "description": "nvk/queue: Add support for non-opaque sparse binds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80b417d557316a41ffae17879192971cc3002ac4",
+        "description": "nvk: Refactor opaque image binds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97de81af13faefd0b7ca9e7ebe5f31d7f309d2ee",
+        "description": "nvk/queue: Add a push_bind helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd6940a68d40aaa23ce904478cfbeacccc751db6",
+        "description": "nvk: add sparse queries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23f2cfe8fb16af126aca1011fb6dd171394b22d5",
+        "description": "nil: Add support for sparse resident images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3700e586921b5503f1dc3ca116b66d9500018c13",
+        "description": "nvk: Use \"real\" 3D image views",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5a2a9b60e8684ff32944605d3e48569df2478e6",
+        "description": "nil: Add a concept of sliced 3D image views",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c809e858326852f095cbfcb32db6f440548aedd5",
+        "description": "nil: Add a concept of width to tile sizes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f406206fee342fec844350efdf40b8da71e9795e",
+        "description": "nil: Rework tiling calculations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a2f23439b4d2a83b5e823d26eadbaf6d6032c54",
+        "description": "nvk: Use row_stride_B instead of width for render and copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "301e707db5b8d70de92b69d56bf43f18b8f9387c",
+        "description": "nil: Expose tiling_extent_B()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a314170f785d4965b6a5c599956fa3f3a3cb60b",
+        "description": "nil: Add helpers for conversion from pixel values to tiles",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "132516d7025afc304f9cb38d3fd5354d9755afd6",
+        "description": "nil: Add helper function to get tile size in pixels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad62f870451e5cab47d012af064f7a75c324cb70",
+        "description": "nil: change image_level_size() to take tiling in account",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a8f7d26c2ba3a43513351565eeae63341c989735",
+        "description": "anv: change the vm_bind-related kmd_backend vfuncs to return VkResult",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4863e12679f17a30a61a3f78ed6536f9c58ddaf6",
+        "description": "anv/sparse: don't use the bind_timeline when doing sparse binding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8051919b3ce99b3efff0073e029da2b4b9884ccd",
+        "description": "anv/sparse: leave the semaphore waits and signals to the vm_bind ioctl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa07d8a04c4b02ddd57d1a00aebb8b95134fe0a3",
+        "description": "anv/sparse: don't issue a single bind operation per vm_bind ioctl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd6301935e5d88fc61f91fe94cdd908a18a04a5c",
+        "description": "ci/freedreno: update expectations comment",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c91bd82b4b069ac2674802ab102c84167c286643",
+        "notes": null
+    },
+    {
+        "sha": "9ab02222d042d88425168fa4e8446523c5a47c4c",
+        "description": "ci/deqp: backport Implement support for the EGL_EXT_config_select_group extension GL-CTS patch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9d3cc2615c1c146fb72765503bd0c30a0cd04a4",
+        "description": "vulkan: refactor the runtime header gen order dependency",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d857f105746cfae629edf0fb2d2cd2463e89fb05",
+        "description": "vulkan: remove header files from lib source files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "90824e07a2ba3f99937d8570f71ce40d9e9ff65b",
+        "description": "vulkan: properly ensure wsi_entrypoints header gen order",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "872c9fabeb5c8b0aed300a860f9d4528e3013bdf",
+        "description": "vulkan: remove unused wsi_common_entrypoints include and dep",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8af267eb00ffd55419996358935fdff1616616a8",
+        "description": "venus: fix ffb batch prepare for a corner case and avoid a memcpy UB",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "493a3b5cdaf038d757198085838819472618f76d",
+        "notes": null
+    },
+    {
+        "sha": "f5532f8babeb2135db140052cbd2ffbe7e421400",
+        "description": "intel/tools: avoid invalid time and file bits combination",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "cc41603d6da4552f0aaf32325a8f019c44c3d9c8",
+        "notes": null
+    },
+    {
+        "sha": "c91bd82b4b069ac2674802ab102c84167c286643",
+        "description": "Uprev Piglit to 1e631479c0b477006dd7561c55e06269d2878d8d",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "803f7f5398fc73ed9c5229ff9f9758591739d1ad",
+        "description": "d3d12: Video Encode - Add driver workaround for rate control reconfiguration",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "830561c5757a9e844ba6bf59a753b06c577d81f6",
+        "description": "d3d12: Only check D3D12_FEATURE_DATA_PLACED_RESOURCE_SUPPORT_INFO for D3D_FEATURE_LEVEL_1_0_GENERIC",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "55e377e9652cc2063a02d850cf59234506109847",
+        "notes": null
+    },
+    {
+        "sha": "1b6d7ab80ba6cd0ba8832e253764089745168fba",
+        "description": "d3d12: Add GetDesc wrapper for ID3D12Heap",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "55e377e9652cc2063a02d850cf59234506109847",
+        "notes": null
+    },
+    {
+        "sha": "089cb522be1f400fcb2039478a138901722c9a1c",
+        "description": "docs: Update features.txt for anv, nvk and tu",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbd32697564805cd80720ec7e1ed6a0fae3de089",
+        "description": "tu: Promote VK_EXT_line_rasterization to KHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "465ff8114cb9a0a42e13f2eefe834b38550d6be8",
+        "description": "tu: Promote VK_EXT_load_store_op_none to KHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d3ed6853d5203e35aab58ad0403ad09e41d47f8",
+        "description": "tu: Promote VK_EXT_index_type_uint8 to KHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ea5d1ed7dd883cefe3ab489740616cdfb90dcca",
+        "description": "anv: Skip cmd_buffer_emit_bt_pool_base_address() in blitter and video engines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cccb5e36f15682670246166f0f02cdec01f135b5",
+        "description": "anv: Call flush_pipeline_select_gpgpu() for compute engines in compute code paths",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a13860e5dfd0cf28ff5292b410d5be44791ca7cc",
+        "description": "tu: add RMV support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e29677b16d979776278681adf86cf3e378e9354d",
+        "description": "vulkan/rmv: enable logging miscellaneous internal resources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6965c569cc9923f5df34d64a5f6f707836ff989a",
+        "description": "radv/ci: mark dEQP-VK.shader_object.binding.mesh_swap_task as flake on NAVI21",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fbdf99d01b030aff46a593084cc20864bdefe64f",
+        "description": "radv/ci: enable RADV_PERFTEST=shader_object for VKCTS jobs on GFX10+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26da033c91e50edcd05662902466668a92136cc2",
+        "description": "intel/ds: add pipe control reasons to perfetto flushes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f8ff988fad38f22bad89dbaeb96f421a0ef96d9",
+        "description": "radv: add a helper to emit PS/TCS epilogs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ed6aba85a68e7de95daf71ddb625665e3b3a921",
+        "description": "radv,aco: stop duplicating PS/TCS epilog fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "974d1395a2ce42ff06169c37c692eadf55c9d6b8",
+        "description": "radv: allow RADV_PERFTEST=shader_object on GFX10/GFX10.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86e4c56dbb0af18c2f3ca5bcf61508aeb66a2704",
+        "description": "radv: implement has_vgt_flush_ngg_legacy_bug for ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62e6132284db07aa0a1d74ba141a2100e17d2c38",
+        "description": "radv: disable NGG in more situations with ESO on GFX10/GFX10.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bffdd05a79961bce5439f01af811669130eceaae",
+        "description": "vulkan: fix runtime libraries' dep against generated headers",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fe2ec50844d9c235298dc07bb733b7a86a18e4ab",
+        "notes": null
+    },
+    {
+        "sha": "c75c485d7d19d1a6d815ea157ea8a819de62c4a7",
+        "description": "dzn: Support bufferDeviceAddress",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68f43aa3ecb08b09c8e7df9063d609069ef7790e",
+        "description": "spirv2dxil: Support buffer_device_address",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57d914b757b0f3d33f94591b39ec538010e03985",
+        "description": "ci: Update virglrenderer and crosvm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe2ec50844d9c235298dc07bb733b7a86a18e4ab",
+        "description": "vulkan: allow building venus without libcompiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a367cd49314a993d09168e790d3090a2303a48d9",
+        "description": "Revert \"meson/vulkan/util: allow venus to drop compiler deps\"",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "3923d43908fa3ac2c8535e33277229038333fe8f",
+        "notes": null
+    },
+    {
+        "sha": "12c71ef847c18fe2025f946d53009de314f13b1d",
+        "description": "radv/rt: Fix raygen_imported condition",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0f87d406b58aa103ae67f3cc8a694c1343d8f8ed",
+        "notes": null
+    },
+    {
+        "sha": "0e8f2eca9ea1a95eb8728f97280342619ead5da9",
+        "description": "radv/rt: Inline constant information about ray flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b4735a944a7cc0bd25fc5a236370ad03d0eddd0b",
+        "description": "radv/rt: Inline constant trace_ray srcs into the traversal shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "843d19a995a3d50ab3acfb576ed9face32b3c189",
+        "description": "radv/rt: Avoid passing unused data to the next stage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb249bb18e250dca198332def96a1ad921cfd77b",
+        "description": "aco: Only fix used variables to registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "348d13f06ebd869ecf427ac607b3052dba81ea58",
+        "description": "radv/rt: Fixup constant args",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0597906adae811f00d78891f861075eb08287ac9",
+        "description": "radv/rt: Add radv_ray_tracing_stage_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a44765606ce90ad53e9c5b18318224441b0b43c1",
+        "description": "radv/rt: Implement RADV_DEBUG=shaderstats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3fe1f2f18d7ccc8a7cf85cd88c4bdf426445702",
+        "description": "vulkan: Implement DebugMarkerSetObjectNameEXT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0397644103bdea3c14cb7a2d388faa54391f0fd",
+        "description": "anv, hasvk: pMutableDescriptorTypeLists can be out of range on pool creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e1862a2ab4c28ff0b4afb9c040023cbf4354664",
+        "description": "panfrost: protect alpha calculation from accessing non-existent component",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6f270c1601e37d04b0b05d54e3be67525126ad9",
+        "description": "radv: Lower mesh shader draw ID to zero when they have a task shader.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a038cc097537dcb05f59e8090c1d6ae2a030291",
+        "description": "intel/elk: Clean up unused code in elk_compiler.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be73fa1434644eca5b05d2dff4fcaa2a49d84285",
+        "description": "intel/elk: Remove multi-polygon support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd3a815a5b2b9d5d64431177f1b9f2567138988b",
+        "description": "intel/elk: Remove remaining Gfx9+ code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea12b38602c29ce2e4fae95cbfafeb4d074c7855",
+        "description": "intel/elk: Remove uses of intel_device_info_is_9lp()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f5213923e7d35274c1a9b481717be8c501653d2",
+        "description": "intel/elk: Remove Gfx9+-only passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb2eee2aaa763744361c38f504a0823225480eda",
+        "description": "intel/elk: Remove use_tcs_multi_patch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "abbb7d64f566a837276428a8581f9b8a5b69c2bd",
+        "description": "intel/elk: Remove Gfx9+ from NIR auxiliary code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64ff9fa5ae40b5da1c09ef74d7d6bbcce82544e3",
+        "description": "intel/elk: Remove Gfx9+ from disasm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "566e3c675eb49e0ce88f87a9896ab1fd9989e2d3",
+        "description": "intel/elk: Remove Gfx9+ from asm grammar",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "936528cda56bd33b2e072555b0d56f398a64d1af",
+        "description": "intel/elk: Remove Gfx9+ from Reg related code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f170d8395bb6012c0d358273d2c6bc94241ecc5e",
+        "description": "intel/elk: Remove Gfx9+ from FS generator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d867e2fc720501985464531b5136998b979548a",
+        "description": "intel/elk: Remove coarse pixel handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7bce435dcaaf518d6be7e1e605a09a91afd9b8ad",
+        "description": "intel/elk: Remove Gfx9+ from EU emission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9e7682ccce9777a38b9e496d8b9f475ea843da7",
+        "description": "intel/elk: Remove Gfx9+ from thread payload",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "241a03b8ec4759722168d82112ea19547fcb9ed0",
+        "description": "intel/elk: Remove Gfx9+ from passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b6b786febefad8039d77388d6d892fbaa8904be",
+        "description": "intel/elk: Remove FB_WRITE_LOGICAL_SRC_SRC_STENCIL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b651ac6c3e9e5c5971ab162312acedc451a810c",
+        "description": "intel/elk: Remove Gfx9+ from compile/run functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cb2d96af6a72102fea56491567b2d35da8b76d3b",
+        "description": "intel/elk: Remove Gfx9+ from nir conversion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b6de68b1cf354fc060424ef6d4ef64bf2e0c39f",
+        "description": "intel/elk: Remove validation code for Gfx9+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f80fc3d70ca6138dfa5e1d1ad7796005fc09dbc",
+        "description": "intel/elk: Remove unused SEND features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b15a90cc352fc16f257f66782db0c0f5470c0fe",
+        "description": "intel/elk: Remove unused sources from ELK_SHADER_OPCODE_SEND",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e44bacfa91f709f532a388e2ad1d3b15f410b68f",
+        "description": "intel/elk: Remove Xe2 logical sends lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff64e68ef4f77fac361429ebeeb31f84d270fcee",
+        "description": "intel/elk: Remove ex_desc and ex_mlen from elk_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75e13ac70575b7f8870c6c13ac8fa3af3e689c49",
+        "description": "intel/elk: Remove Gfx12.5 URB message",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3f67c2d3ad1d8a0bfd8082be4bed3ed715b1deb",
+        "description": "intel/elk: Remove FB_READ opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "77ba6f5dcdf2b764613ae654d874396a9ec7002d",
+        "description": "intel/elk: Remove Gfx9+ dataport messages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59c5c67d229c2e566add5ebb76a9be28da52c39c",
+        "description": "intel/elk: Rename symbols for A64 OWord Block R/W messages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05d78994a763d220f69cb9770fcc6c4e9cb40275",
+        "description": "intel/elk: Remove Gfx9+ sampler messages and modes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b709e31cb3d2ed8e02497086714661749ca2961",
+        "description": "intel/elk: Remove Gfx12 SFIDs and related LSC code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43b2261ab5f6b0ca16632da417510e79727d2fad",
+        "description": "intel/elk: Remove SYNC opcode and SWSB annotations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "37cd18e30ea671f8ba6ac4c602947d29355f1b02",
+        "description": "intel/elk: Remove encoding for Gfx9+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "accac95c0d7c571ad9a7cd2c760188d9424ba0ca",
+        "description": "intel/elk: Remove EU compaction logic for Gfx9+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8c4104362ba90d55101629ab1fa90ed1b8179da",
+        "description": "intel/elk: Remove IADD3 opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1049408b5d48dbd909aa0cef64c6ca06e9b76fd",
+        "description": "intel/elk: Remove ROR and ROL opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28a7265b10a6cd80ab3ec51d1b951c40c638954a",
+        "description": "intel/elk: Remove DP4A opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e58170f84a5c1bd24d250d38bcd2dd9c4c9063f",
+        "description": "intel/elk: Remove BTD and RT opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24569b80792e8942a7961ee4efea5a54c07494e5",
+        "description": "intel/elk: Remove DPAS opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b90470ca123f7b207778d688f0df31135d05ccd",
+        "description": "intel/elk: Remove split sends",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7d6d90dabad885c2578e2195901f60ac6ac4e7c",
+        "description": "zink/nir-to-spirv: Make sure sampleid for InterpolateAtSample is int",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9f6be8effb43fcd4ce2fd00045bc6244ddf63529",
+        "notes": null
+    },
+    {
+        "sha": "dea8b02b03132aa7a5144b1edb4346addecca657",
+        "description": "aco: don't pass constant to is_overwritten_since()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "def0c275c460a829470aedf89cc259ac57ebda1f",
+        "notes": null
+    },
+    {
+        "sha": "c383739cfc1cd0bace0d9ad462d8643efa9c7209",
+        "description": "radv/ci: remove dEQP-VK.robustness.* from the VANGOGH skip list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52be850d7f430979ec39bb71b128199bfe85b438",
+        "description": "radv/ci: remove RT tests from the VANGOGH skip list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7792ee1c15379d95ccb20ce34352473f2bb2bfbd",
+        "description": "radv/rt: Fix frontface culling with emulated RT",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23441f7f4afa3365b90f7bbe900e5adfe8b02f5e",
+        "description": "drm-shim: Avoid invalid file and time bits combination",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e5fd49cbe98dd3afb8660f85b687efe36364127",
+        "description": "iris: Fix tessellation evaluation shaders that use scratch",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "4256f7ed5847505c30e903b6674dac88c5d03315",
+        "notes": null
+    },
+    {
+        "sha": "f9358cb1058ed5c15ca7690a5e8ba5926f73713b",
+        "description": "frontends/vdpau: Add support for VDPAU AV1 decoding.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f64e8ca7f44349157a40d0c9f8d891ddfc8dc206",
+        "description": "meson: bump the minimal required vdpau version to 1.5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2665badcfe998ba7e2632bb7b1a49270542d67f3",
+        "description": "util/blitter: iterate samples in stencil_fallback",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "981900055ce2830e1553e79dbc070a108e715988",
+        "description": "glsl: remove now unused glsl ir lower discard pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ceb10a1bdda07eb9a69742cebafdc0939fa4203",
+        "description": "glsl: make use of nir lower discard flow",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8317a37ea7447252af5f5085287bf19a1cbb4cde",
+        "description": "glsl: implement nir version of lower discard flow",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef454176903993e4b0b14f991b57ec664181c4c4",
+        "description": "d3d12: HEVC Encode - Query slice config mode based on user slice setting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cda6877cb6bb473970e32f3b13f6e5483ada6bcb",
+        "description": "nir_lower_tex_shadow: For old-style shadows, use vec4(result, 0, 0, 1)",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b7bf9a6db0e06f34710e16679a6fff161143648",
+        "description": "zink: update nvk baseline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2074da0c396b3ae7cfd48b753cc84f84f5606f51",
+        "description": "d3d12: Refactor graphics functions from context and blit to separate files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55e377e9652cc2063a02d850cf59234506109847",
+        "description": "d3d12: Add partial media, compute, graphics support with CORE and GENERIC feature levels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0cd023bf6a204307a8d51328aea4bbac263d8a75",
+        "description": "frontend/va: Use get_resources in VaDeriveImage for media only devices without get_surfaces support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf6a415841a79ed52fa6b76cd40f75417488dfb7",
+        "description": "frontend/va: Support media only post proc without compositor using shaders or surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b6a2c24d693f52f78ecbf4f1265b2ff20c8c499",
+        "description": "anv: don't copy the null descriptor from the GPU memory",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9506d3f3388ee65f99f263246fc1a135fda3de40",
+        "notes": null
+    },
+    {
+        "sha": "d20b547e8eef32d21e189e4afc011d73480abfe5",
+        "description": "nvk: Report official GPU names from NVIDIA when we have them",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1069b216ac27ce99df03821c24db1a286d1187f2",
+        "description": "nouveau: Import g_nv_name_released.h from NVIDIA OGK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43b857a0152724c232bdb4beb443394706916252",
+        "description": "d3d12: HEVC encode - Update CQP using current frame type as per VA frontend change",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8c9445896fa2980196143a44294201e26b786932",
+        "notes": null
+    },
+    {
+        "sha": "f8274eea76b516a9a87cdb58e75ddd5b577cf415",
+        "description": "d3d12: H264 encode - Update CQP using current frame type as per VA frontend change",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8c9445896fa2980196143a44294201e26b786932",
+        "notes": null
+    },
+    {
+        "sha": "e3e593d72144b5d6c2352ee670c28fe9987af488",
+        "description": "d3d12: AV1 encode - Configure CQP using qp and new qp_inter parameters",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8c9445896fa2980196143a44294201e26b786932",
+        "notes": null
+    },
+    {
+        "sha": "4762d033918ea71b8f64f494bd48d17af37d33bf",
+        "description": "lima: update expected CI failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "feccf4121b6dcd11909a41d497f3540db2e30df3",
+        "description": "lima: gpir: abort compilation if load_uniform instrinsic src isn't const",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6998c48f778127760def06b6542e17f47899f9c5",
+        "description": "lima: ppir: use dummy program if FS has empty body",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b999e41250e508ee267a8bbb29a4080f42ed8b7d",
+        "description": "lima: ppir: always use vec4 for output register",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6c908293ef4aee688e6cad8a6da97748d401ceb",
+        "description": "iris: Increase target batch size to 128 KB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a76fcebfc00df371cbf45a48c7e6385c2bda2c75",
+        "description": "tu: Fix dynamic state not always being emitted",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "97da0a7734188f4b666bc38833bfadc8b4c53f84",
+        "notes": null
+    },
+    {
+        "sha": "6823ffe70ed18d0438006780ec82c0b3610b36d9",
+        "description": "anv: try to keep the pipeline in GPGPU mode when buffer transfer ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "194afe841635e43d55c4f71f4122c6048f585450",
+        "description": "anv/iris/blorp: use the right MOCS values for each engine",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c40f14bb318967586d397126341b357b1567698d",
+        "description": "anv: fix incorrect ISL usage in buffer view creation",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "64f20cec28d8df7815157dc09ba0bd33d3202a57",
+        "notes": null
+    },
+    {
+        "sha": "33bf7ca710a90401b6b37a0a0758a877362b8569",
+        "description": "nvk: Return os_page_size for minMemoryMapAlignment",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8017ac0e7973f2e4d514b05cdf843f7a640293a5",
+        "notes": null
+    },
+    {
+        "sha": "1882527f786bd25a050a3e8e04de06aa88a7e377",
+        "description": "zink: decrease aggressiveness of increasing descriptor data space adaptive",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8e239dda41d3c7070547b0f714a4b7e2e8fc4be2",
+        "description": "zink: use only ZINK_BIND_DESCRIPTOR",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "13c6ad0038aa42f1c908ca1adecde9bebf9f2509",
+        "notes": null
+    },
+    {
+        "sha": "1bcb7f1eb820edb0625bd4f7d0e4022978486b3a",
+        "description": "docs: Document lavapipe ray tracing features",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b55580cab871c02c4ce8af9b9805c8340040552f",
+        "description": "lavapipe/ci: Document ray query failures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2646c6bbc929ef75afd414a0d11c91acd25dcca",
+        "description": "lavapipe: Advertise VK_KHR_ray_query",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "32e86e1bff1b0c5c17742149ed4432cbad2ab37e",
+        "description": "lavapipe: Advertise VK_KHR_acceleration_structure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09bf35e3c432fc7c287340ca60b963e018178b8c",
+        "description": "lavapipe: Advertise VK_KHR_deferred_host_operations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed6c0a74439ca292152f6064c591e68d3e557d72",
+        "description": "lavapipe: Implement VK_KHR_ray_query",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b69ae8b355f2a5e086f8684f201c26af59650a0d",
+        "description": "lavapipe: Add ray traversal code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "897ccbd180ae2e0e6a60173e0511bc25a4f5a118",
+        "description": "lavapipe: Implement VK_KHR_acceleration_structure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff09e950800030bc6461651e05c42030cf663aa2",
+        "description": "vulkan/cmd_queue: Implement CmdBuildAccelerationStructuresKHR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48da361eb7b355f6ce79983d661dd0422e278967",
+        "description": "tu: wideLines support for a7xx.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "beb07fafbaaac0674424128f41d909ce43729b92",
+        "description": "nir/search: fix nir_replace_instr() debug code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a93bd52f4f54fdf8e2ee82548bf0802b8973f829",
+        "description": "nir/lower_int64: allow 64-bit comparisons when lowering minmax",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b37804c8de8bf6babefb9a3db65a3485cfcdc79e",
+        "description": "nir/algebraic: optimize 64-bit comparisons with zero'd halves to 32-bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "417eb390c637f143fe2767ee48ec6335d3180278",
+        "description": "nir/algebraic: remove duplicated iand(ien, ine)/ior(ieq, ieq) patterns",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6952bb359c48fc919558dfcc2529aa0590ff1e6b",
+        "description": "nir/algebraic: don't create 64-bit min/max/ior if lowered",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61854009f31ae44e7426649738f5e68ac459df02",
+        "description": "aco: rematerialize constants in every basic block during optimizer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9baa57158de95104c5980a7546ab59f5552b50ae",
+        "description": "intel/genxml: update PIPE_CONTROL so that we can decode it on the CCS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b28ba823904eaa835edddc700abcc763d427430",
+        "description": "aco: optimize for purely linear VGPR copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8cd3a3a5207a46b37725f0f93dfc8dab9e3e476f",
+        "description": "aco/tests: add tests for linear VGPR register allocation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9b37723d0e0f688a5d0f05fae18905dddc9b4b5",
+        "description": "aco/ra: emit linear VGPR parallel copy separately",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9b69a7cbfa18fb6ed261ae3ebee10dab609a15d",
+        "description": "aco/ra: disable live range splitting of linear vgprs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b7738de4f93e25401332040b236b7403fb237977",
+        "description": "aco/ra: rework linear VGPR allocation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d49c79c7e5c166e3bfca9017f5303f3e72fb842",
+        "description": "aco/ra: change get_reg_bounds() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a38bc9e165e918ecc737d9601560d8ca65159ec9",
+        "description": "aco/ra: move parallelcopy creation into helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a8b72082cfb2dcf92a46e6e6e66ae5d4aa0bcac4",
+        "description": "aco/ra: constify various RegisterFile",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a195bb521e47e9d252704650ad9f6ae9215ee81",
+        "description": "aco: only allow linear vgpr kills in top-level blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07eab4ab40a5ad972814e2e40c684f80458ed27a",
+        "description": "aco: require linear vgpr uses to be late kill",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e17a39b15e3a11d5eda30afc03549dbbb9ea702",
+        "description": "aco: allow p_start_linear_vgpr to use multiple operands",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f764f6848adcdd8d8f98bbdf8705a0a17c42dfea",
+        "description": "aco/ra: disable p_start_linear_vgpr allocation hint",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f99443a68b743d866cd6fc79d29d2f549f200a23",
+        "description": "aco: don't combine linear and normal VGPR copies",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "599de4b47ce6ffb02610b6f55383647e0fae85fc",
+        "description": "etnaviv: Remove not used etna_assemble_set_imm(..)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2777a4c692c78bc373b89a74f76471c6aef7f7ff",
+        "description": "intel/dev: update DG2 device names",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "99354efe314a98906fd0ce0dc823dabbf66cd948",
+        "notes": null
+    },
+    {
+        "sha": "731ffa0737b3f0720cc4e43aec2210d37fd9b831",
+        "description": "anv, blorp: Set COMPUTE_WALKER Message SIMD field",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d95bbf35c9d2a601d04ed83a9095091df02fee9e",
+        "notes": null
+    },
+    {
+        "sha": "0de856ecef03e81f2833c776923fac76189f9010",
+        "description": "anv: fix companion command buffer initialization",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "edcde0679c058070185468919424c1037211be72",
+        "notes": null
+    },
+    {
+        "sha": "67c9f94b055623588a3343b86cb0111e75c6fe37",
+        "description": "anv: delay internal shader upload to when needed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11ce5b1a9f00c29000da5ed5a9e77b17624a8016",
+        "description": "r300: enable R400 cos and sin hardware vertex shader opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "158e5882e9ad8ace49bac170b0aa8dbca69d5fb1",
+        "description": "ci/lavapipe: fold `DEQP_VER: vk` and drop .deqp-test-vk",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54254ae3f21ee7d4fa15500ac1a5433ade3bfc8a",
+        "description": "ci/venus-lavapipe: drop unused DEQP_VER that's being overwritten by DEQP_SUITE anyway",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a2a261a79e086c111a29bffb29368ba1948e638",
+        "description": "radv: stop passing radv_cmd_buffer to draw functions with task shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c2288ad43d20feba10ac3b238dbcebdb6fb1a751",
+        "description": "radv: allocate a 32-bit value for the MEC fw bug with indirect mesh+task earlier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d18c50856ad3f0ef503749b7995f23b2e227680a",
+        "description": "radv: refactor emitting the view index for task shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f8cfb2b2e1e56293bd4af9c1b15d95c9d4129ed",
+        "description": "radv: always use ace_cs for the gang CS variable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b7f4724f88b8343d9d950f66dc93f5e6313b276",
+        "description": "vulkan: Fix calculation of flags in vk_graphics_pipeline_state_fill",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "2b62d90158821f16a9b223a04b2b5a7641b98f34",
+        "notes": null
+    },
+    {
+        "sha": "597c1c1c188e58415371e7f22fdad8a00bda7594",
+        "description": "intel/dev: declare workarounds required by ATSM platforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac391536ebdbb7c93c4906e674d8ff86827e61fa",
+        "description": "nvk: only unmap heap bos that were mapped",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e6f137e9edcbc66715ccc0f7534e33c66f4a7245",
+        "notes": null
+    },
+    {
+        "sha": "2feb3c6e3007b80fb7ceef2627e6537e0454bb20",
+        "description": "nak: Support F2I for 8-bit integers on SM50",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "11de56139523e0d00a228f9a16568bb31b627438",
+        "description": "nak/sm50: Use OpBfe instead of OpBRev for nir_op_find_lsb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d13d190e6818002509a3c24f2a754fc101e1633",
+        "description": "nak/sm50: Fix encoding of immediates in OpFFma",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21de61b1ac933e5ad4d0f3bd5dfe99294bcf05a0",
+        "description": "nak: Fix printing of OpIsberd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1316854e740dda7eb12f514a2e3fbdeea30e20ed",
+        "description": "ci/intel: split asus-cx9400-volteer into acer-cp514-2h-11{30,60}g7-volteer",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "861c123ba029a226fadd0ce205a1eb57bfeb92c9",
+        "description": "ci/intel: move machine definition to the intel-tgl-skqp job",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9ba4926474bb72b7a1e3fd7d157fe091104f4a1",
+        "description": "ci/intel: add acer-cp514-2h-11{30,60}g7-volteer",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed73137d35a0900382eef3622ff9df7444b66749",
+        "description": "ci/intel: decompose anv-tgl-test so we can specify custom devices for TGL",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2bd99f521a4bd14577c511e407dfc778ce0e654",
+        "description": "driconf: add SotTR DX12 to Intel XeSS workaround",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9c4c1796d7de8dcd000da72328665fafdd853279",
+        "description": "d3d12: Point sprite lowering pass needs to handle arrays",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "788c106ea129880c07efb8d64f27365742e37bf4",
+        "description": "wgl: Initialize DEVMODE struct",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d1cf01dc5275bf058ae6d59a27ba1967e7edc3bc",
+        "description": "vulkan/pipeline: Always init pipeline cache objects",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "bb8b11d806979c07a7fb009ac7f254824625bff6",
+        "notes": null
+    },
+    {
+        "sha": "def0c275c460a829470aedf89cc259ac57ebda1f",
+        "description": "aco: Eliminate SCC copies when possible.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a53e3b1fd2db1cdc83531e54b4775b6f071c615",
+        "description": "nvk: bump NVK_PUSH_MAX_SYNCS to 256",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba17f5ca6ae4a204759fa0e4fe3cca51289a374c",
+        "description": "microsoft/compiler: Remove code after discard/terminate in later optimization steps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d4dfae7ebdbaf4bdadced307496ccf5130c6d2c",
+        "description": "aco: fix nir_op_pack_32_4x8 handling",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e0d232c2fc729fd95f3c01bddeead2eebf3d4e9a",
+        "notes": null
+    },
+    {
+        "sha": "482137402ad12876a47e61536ddc27ef67c170be",
+        "description": "aco/ssa_elimination: check if pseudo scratch reg overwrittes regs used for v_cmpx opt",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7d6cd9216eb83805fa617c0e36257c6834ce080",
+        "description": "aco/post-ra: track pseudo scratch sgpr/scc clobber",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1eb067ee9fc44ce9bdf603bd8eac3cf7ff1a582f",
+        "description": "aco: store if pseudo instr needs scratch reg",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd93e8372d0fdcbdfba66faf7d037b08a5efa473",
+        "description": "aco/post-ra: assume scc is going to be overwritten by phis at end of blocks",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5056b2f93e261bc50cc3d5ab237da77f636023e",
+        "description": "aco/post-ra: rename overwritten_subdword to allow additional uses",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0554ab0a1263bd4c8340860c4055b6832f7225a",
+        "description": "aco: create pseudo instructions with correct struct",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8d0f9c8fcdac44d49b9c3caed7d12ec7b502d747",
+        "description": "ir3: fix returning false instead of NULL",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9de628b65ca36b920dc6181251b33c436cad1b68",
+        "notes": null
+    },
+    {
+        "sha": "9cfc44532b8f425b5db033e36904191242c2c9f9",
+        "description": "ir3: fix freeing incorrect register in loops",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "21cd9b9557dc03dd8ffef4da541a4e62f0f7e32c",
+        "notes": null
+    },
+    {
+        "sha": "1e97fded4723f10c9afea12e76ebc741f224af46",
+        "description": "vulkan/runtime: Mark vk_default_dynamic_graphics_state to be private",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2f57834d27faf25337140837684880bde78ddffd",
+        "description": "freedreno/vulkan: Use vk_dynamic_graphics_state_init instead of direct assignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db103c56abe32d0dd81c3eec2f3b5e59d3aae695",
+        "description": "treewide: Remove vulkan/runtime vulkan/util prefix in include path",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ea9d87bf75a2138486f16ac2109a5be292bc9d2f",
+        "description": "zink: call CmdSetRasterizationStreamEXT when using shader objects",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0736c212b537fb1595fa93373ccc113ab44bcba2",
+        "description": "zink: fix PIPE_CAP_MAX_SHADER_PATCH_VARYINGS",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c05ebf3a572321abde65a1c636f1941c4646012",
+        "description": "radv: Set SCRATCH_EN for RT pipelines based on dynamic stack size",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac4e60b9c991da5473d9eb20bdd19331a1bd3304",
+        "description": "lavapipe bump descriptor buffer address space limits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "850267ef998a4c13095a162d696fb936503b3b7c",
+        "description": "freedreno/a6xx: Add dual_color_blend_by_location",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c82edb4e8f3bfca5d27050df13b6be802cbda062",
+        "description": "anv: drop duplicated 3DSTATE_SLICE_TABLE_STATE_POINTERS emission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1d8b2b159ef0a1fe04a061a5d74274d70b6232b7",
+        "description": "nir/divergence_analysis: fix subgroup mask",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "df86c5ffb35700466cdafc6a87b8a0279e473d07",
+        "notes": null
+    },
+    {
+        "sha": "230743da2e9bfb3536b9e76a5bd17b4121ff5b37",
+        "description": "nir: remove rotate scope",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "edf14f4b7c2a24196e785f5bb63b8c885a1c9741",
+        "description": "intel/brw: Unindent code after previous change",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c106136259e3a6bb7d59a8cde2c1c601a21e1b7",
+        "description": "intel/brw: Remove SIMD lowering to a larger SIMD size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb191e3af5adc2cf3dcc7699584a488fc0af7ba7",
+        "description": "intel/brw: Call constant combining after copy propagation/algebraic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8ef184677f36cc729fc5893d7a8fa579923b21c",
+        "description": "intel/brw: Make register coalescing obey the g112-g127 restriction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1c1e79d75a49328e37dd1bc8bead31a3e48e06f3",
+        "description": "intel/brw: Copy the smaller payload in fixup_sends_duplicate_payload",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91252c98a822efa639f7b2f38cd7c7ba66933bcf",
+        "description": "intel/brw: Add assertions that EOT messages live in g112+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6ac6c94a9d574d1d4a10af65eaae3aa4ed2bc19",
+        "description": "intel/brw: Handle SHADER_OPCODE_SEND without src[3] in copy prop",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49606ab0676f918006dde4156846759ae62aaa3b",
+        "description": "intel/brw: Avoid copy propagating any fixed registers into EOTs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97bf3d3b2d4a2c01cafff413a44ec42002ba9956",
+        "description": "intel/brw: Replace CS_OPCODE_CS_TERMINATE with SHADER_OPCODE_SEND",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f93f215898861154b89691689888122940a97bcb",
+        "description": "radeonsi/gfx10: fix main_shader_part_ngg_es memory leak",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8f72f137ad168775e6b50b69b1af2ba2754dbcfe",
+        "notes": null
+    },
+    {
+        "sha": "516a2a3a0e41f3f0bd67780aeaa775f08984e134",
+        "description": "isaspec: encode: Constify bitset_params",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "381d19d138a11e41b64643d98dd129245843772c",
+        "description": "isaspec: encode: Constify encode.type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dde2527afb7414aab567457d372bc56fd6c88b3e",
+        "description": "anv: add support for VK_EXT_map_memory_placed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ad2a03ffdd2f4d2c6772ffca78ef65e7d6406d7",
+        "description": "anv: remove some wrapping around mmap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0df9571bfb1a2fec1361fddda25db1bb9c3dac9e",
+        "description": "crocus: make sure aux is disabled for memory objects",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d18cde8ed1160041f6a2b69ec69c965deef12fe",
+        "description": "hasvk: make sure aux is disabled for memory objects",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aaa2d13181e44e5cf1d74cc03bda139e1ffca4c3",
+        "description": "venus: add VK_KHR_fragment_shading_rate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9edf1807964898c99bd1743edcb627f04fa4f9af",
+        "description": "venus: sync protocol for VK_KHR_fragment_shading_rate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "78ea3bb43dc37013c3ab87c261ef5987d5e876fa",
+        "description": "ci/deqp: use the proper gl/gles releases for deqp-gl*, deqp-gles*, deqp-egl",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8bb59f16ecd60f3370f42d2086863ac2dfa6367e",
+        "description": "ci/deqp-runner: inline never-used DEQP_VARIANT variable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9fb4d951b0ca32e2ec480a68acb32e507176fc3",
+        "description": "ci/deqp: split vk/gl/gles patches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74bcb91a91984850b1a48443bf13e4259a27b5ba",
+        "description": "ci/deqp: drop zlib url patch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3b0330fbc8afd3b45a96c67c10e2501cc277afb",
+        "description": "anv: fix helper usage for CmdUpdateBuffer()",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "82d772fa9b3a5eb7809921ca448b6e796a3d92b3",
+        "notes": null
+    },
+    {
+        "sha": "f9acfeeb59f5660c3cd04e75b31c7db8c595950e",
+        "description": "compiler/types: Fix glsl_dvec*_type() helpers",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "90e364edb078e0568b266b8fd1e5da8ca74f7a15",
+        "notes": null
+    },
+    {
+        "sha": "0fe5ad708d89a5415f2d19d449bc07cb356450f9",
+        "description": "radeonsi/vcn: avoid hard-coding the number of jpeg instance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3ab454f074938ec89b245ad3166c69e0330ca8c",
+        "description": "ac/gpu_info: query the number of ip instance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "29df85788a7f122cabce776c38dc6eee79ee0511",
+        "description": "r300: fix constants_remap_table memory leak",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1c2c4ddbd1e97bfd13430521e5c09cb5ce8e36e6",
+        "notes": null
+    },
+    {
+        "sha": "dfc9656425850d4f5acf1fadcfede61966aa6c73",
+        "description": "softpipe: update expectations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "31ef5b203fd53eafc619d85cb8a585b7a4de3c81",
+        "description": "ci: re-enable Collabora farm after maintenance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e8642ebbe5daf882c6deb28bdab501f979266d2",
+        "description": "zink+radv: update navi31 expectations (one test fixed)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6962bbfc803669e418e82ae5afe32046c0975c4",
+        "description": "zink: Return early if the file descriptor could not have been duplicated/acquired",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da2f393dda65517e7096e5c52f5d60c67853dbab",
+        "description": "venus: enable VK_EXT_attachment_feedback_loop_layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6746c3483b24ff8600b3f9668a547f294138efeb",
+        "description": "venus: sync protocol for VK_EXT_attachment_feedback_loop_layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc11e6ee8db3933e9e425dfc269907fce1e4f510",
+        "description": "glsl: Ensure that we are dealing with ir_variable and ir_rvalue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d795bd380a66b2be3dab3c00b6587c6b516c565c",
+        "description": "glsl: Make error_value a real ir_rvalue type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a38e7f127a703bb6877e9dee3d41c11517278353",
+        "description": "radv: preserve streamout_buffers user SGPR for VS/TES + GS compiled separately",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eefd836ebcc37647dc32488a6957e85881224503",
+        "description": "glsl: make use of nir recursion detection",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38eb85088345ed32ce1ecb31e4fac7a2f77086dd",
+        "description": "glsl: move function inlining out of glsl_to_nir()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7a664754f62ca03beac0c92a604e5db68201bbc",
+        "description": "glsl: add nir version of function recursion detection",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eecd7504a8ae0449984d19b34aa09ce580e1d9b3",
+        "description": "glsl: add missing define to linker_util.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "edf242f825cce1cc92d1138e04d449b55a030e4b",
+        "description": "nir: add some nir_parameter fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ed4058910e83231f553f12a21c9219b3a37a65d",
+        "description": "radeonsi/vcn: set jpeg reg version for gfx 1151",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ed893116425a3f99132fed6f2a0e874c9749ee8",
+        "description": "radv: initialize video decoder for GFX11.5.1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8446604dd4a3a1b6aef113de1e129d21373ef703",
+        "description": "amd: Add code to enable gfx11.5.1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4d8b4592f1b2bd0775d9a1b777cc8dd28e000d7",
+        "description": "ci: disable Collabora's farm due to maintenance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39052dabf9596da99703203621d1ca404f5dde6c",
+        "description": "glsl: don't inline functions in glsl ir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6c150b4cd8741cc20d95bbd32a8a772f9781d62",
+        "description": "glsl_to_nir: support conversion of opaque function params",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de7574f70a9fda1b5684b0379e5bcfba89d9fc2b",
+        "description": "glsl_to_nir: support conversion of struct/array function returns",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fac9b1c594b5ca8cbf9847d9ebb9d829d0dc0384",
+        "description": "glsl_to_nir: support conversion of struct/array function params",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7afce96b806a3f06fc88e574e85f4a9a30b68fc2",
+        "description": "glsl_to_nir: merge function param handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a852bd24cc10e08e42703751e7d1ba384b76e31",
+        "description": "radeonsi/ci: add vangogh piglit flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "176f9b2fbed8ce0d1ae0fa2f7f3811a88b694219",
+        "description": "r300/ci: add flakes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ba43413b92cd671929f1722030db344ee8bc120",
+        "description": "zink+anv: update expectations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59cccade3aa3387fd8d901577e7f189bf34f4923",
+        "description": "freedreno/ci: add another a618 flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f703aac4ee95dbfdf99c4d2d73ddb50f7709a2db",
+        "description": "rpi3/ci: update expectations for vc4-rpi3-gl-piglit-full:arm32 2/4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7016538cf00e2675dc2bbf7e6fd1ba4b0e50b02c",
+        "description": "panfrost/ci: skip dEQP-GLES31.functional.copy_image.non_compressed.* on t760 as they hang",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5bbf4975fd6337283408c8f0c4226364658ca7b",
+        "description": "iris/ci: add pbuffer flakes for amly, same as apl and glk",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3328e9cf0f6c90a35d1db12fa4f10edeb0812d86",
+        "description": "r300/ci: add another tex-miplevel-selection flake",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4be5cb2ccbefba4fec97d25e07086ecfea0c93e7",
+        "description": "r300/ci: group tex-miplevel-selection flakes together",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "63d2aa4eb645e32ea3d5aea453a45aa6a3412e15",
+        "description": "intel/brw: Mark FIND[_LAST]_LIVE_CHANNEL as not writing the flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ece531e33ca4ebc4e90eaa8121ccda6d5c119a2",
+        "description": "docs/panfrost: Document Mali-T600 support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0129b3ff79caad0b7a2f3500e5566f774fb83fca",
+        "description": "panfrost: Enable Mali-T600",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "337641cfcc952c01d0555791a7a5465abc867e0a",
+        "description": "intel/compiler: Fix SIMD lowering when instruction needs a larger SIMD",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5b8ec015f27e879438216f20198e907419ee2f13",
+        "notes": null
+    },
+    {
+        "sha": "ad37622a8f18a38dececb99f64635a1ebe7d5ab0",
+        "description": "intel/brw: Delete legacy texture opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19248f48eba04eb2aa386ada94ea65146c64dae6",
+        "description": "intel/brw: Allow CSE on TXF_CMS_W_GFX12_LOGICAL",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "261dd6c8f894fe13926ede073669b96652da61db",
+        "notes": null
+    },
+    {
+        "sha": "45a5e4c0c4726b7d4087579b3dbf29cec1328ade",
+        "description": "intel/brw: Delete SHADER_OPCODE_TXF_UMS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "601ef1246796efc40f686b026c2e14753e0f262b",
+        "description": "intel/brw: Delete SHADER_OPCODE_TXF_CMS[_LOGICAL]",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "494eee1337b2edee1dfd0bebea3df91e2562a2d8",
+        "description": "intel/brw: Change unit tests to use TEX_LOGICAL instead of TEX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e03e5931431f3c807370e251604bd423a9acc6a7",
+        "description": "auxiliary/rtasm: fix unaligned stores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7d78a7b8763a807beba4709804c2fa97d39ec72",
+        "description": "vulkan/runtime: Allow more than 8 DRM devices",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ccbaa2cd8b75ebfce144b8612359f5fb53eca5f",
+        "description": "microsoft/compiler: Remove deref load/store/atomic ops that statically go out of array bounds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "941d83ded4541775be0ebed89041c47b2d383e84",
+        "description": "spirv2dxil: Set push constant register space to nonzero",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe520ecfbf0d57545e089768c021cb1cbc79b3ef",
+        "description": "meson,windows: Use relative paths in Vulkan ICD manifest files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1e3c93ff78dce7e9f645e38201c6bffc0eaf13a",
+        "description": "isl: Pick a better initial state for zeroed MCS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5775bc0c53c9b31651fd92e0639ad17e1e65f8ca",
+        "description": "anv/xe: Consider pat_index while unbinding the bo",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "19439624d9fac333bcd046683bf172a89ff16873",
+        "notes": null
+    },
+    {
+        "sha": "963c08b623aa47b460586429f4bcd5dd494e9900",
+        "description": "iris/xe: Consider pat_index while unbinding the bo",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "eb18a92ef94e721407527c6c66ffff324772a610",
+        "notes": null
+    },
+    {
+        "sha": "6380118d1384119bebe18179fb1520e2c4f10b54",
+        "description": "radv/meta: Add shader - device mapping for radv_build_printf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9a1882daaabc7e274c02326b9b78eb5668614bb",
+        "description": "radv/rra: Avoid reading past the ray history buffer",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "767f6280794db0edb1009d3b1645c41bac38ff4c",
+        "notes": null
+    },
+    {
+        "sha": "082735750b3602c82a7e82b455bc9eeaa6d166f3",
+        "description": "intel/brw: Simplify usage of reg immediate helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb1d871714788e554f123dac1cd9665b9028bbb9",
+        "description": "intel/brw: Fold backend_reg into fs_reg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "67c461dbe02c556491a9611c7fe8935b5bc4d831",
+        "description": "d3d12: Do not use PIPE_BIND_DISPLAY_TARGET for d3d12_video_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "570ebe1b379a146f2b62e09f43b159af270c9461",
+        "description": "radv: enable radv_zero_vram for RAGE2",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73d98848fa98ee5d1fbd69e55cf2fd226c747c48",
+        "description": "intel/compiler: Xe2+ can do URB load/store with a byte offset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ef7b4dfc12a56c8feaf23dd0b53035d7996c9ba",
+        "description": "ci/deqp: control the GLES release independently of GL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c9cba1085fc144b30bd5c8894adfef567cee1b1",
+        "description": "ci/deqp: control the GL release independently of VK",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c59f0ca97ea1757403a6416e536c18e0309d1489",
+        "description": "ci/deqp: make deql-egl for android less of a special case",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3fb95a9457976ebd0c9c2e1053409c3dbc1a75d7",
+        "description": "ci/deqp: build deqp-egl using mold as well",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07b8b410a82074a0aa01f33c92cb0bca440bc737",
+        "description": "ci/deqp: only apply the android patches to the android build",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d63e7b44036eaae21448ee35f7c2b618eba4c4de",
+        "description": "ci/image-tags: move KERNEL_ROOTFS_TAG to group the test images together",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b15a9c52c52141a766d728606c731175a940a94",
+        "description": "radv: Expose VK_EXT_map_memory_placed.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e029735e65fec5c0d3f611c296ec8747c1f2d4e",
+        "description": "radv: Implement reserving the VA range on unmap.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a6a31538c5379d052cbb8e2686afcb1373822599",
+        "description": "radv: Support for mapping a buffer at a fixed address.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d779cda0ae52fa156bab7ae8f0b30d1804d93ab7",
+        "description": "radv/amdgpu: Use mmap directly.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cccbe1527ca7dfa3e761ce5a078a0df9eef5401e",
+        "description": "radv/winsys: Use radv_buffer_map wrapper.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7e8fdf35d2aa8fc28b542651f2e3729e52961ef",
+        "description": "radv: Add winsys argument to buffer map/unmap.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e95d1cc12b7fcc81e59c1f04276cf33e0fa9127",
+        "description": "radv: allow RADV_PERFTEST=shader_object on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "426d8b5216ad45ad4de64011af47289950039963",
+        "description": "radv: add support for emitting NGG shaders with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85d682b318e677977c48fc8558985f479bcb08e6",
+        "description": "radv: lower lds_ngg_{gs_out_vertex_base,_scratch_base} with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a9b466299dbf669f025c8eee0988b6893a3564c",
+        "description": "radv: add a new user SGPR for NGG shaders compiled separately with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d87a05d34b98e7e74ace1fe770d58bc435423df",
+        "description": "radv: add a helper to emit PKT3_COND_EXEC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f21cc55daeb7f4866510c0ec088397d348670a13",
+        "description": "radv: add missing conditional rendering for indirect dispatches on GFX6",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cdf7e356183ab84f9ea3a5834c8af1d5b9d90e80",
+        "description": "radv: fix conditional rendering on compute queue on GFX6",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b953bdbb81439c3d812631282429feeaf393db8",
+        "description": "freedreno/ci: Update pixmark-piano-v2 hash",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9de628b65ca36b920dc6181251b33c436cad1b68",
+        "description": "ir3: fold and/or and negations into branches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96c2fe3e1a548e0e55c9a8a1ca5f434ac9cf4a73",
+        "description": "nir: add search helper is_only_used_by_if",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ddd5f6abaed3e01ba5ee3291c2a079e3efee1ab2",
+        "description": "ir3: fold negations into cmps.ne zero",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c43d0e4e4fb0d7faa11f6fe3cd2e90f0805b6f28",
+        "description": "ir3: insert predicate conversions after their source",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6a6902e4d6744ccf8f97b153296a9ecd151bc63",
+        "description": "ir3: optimize bitwise ops that can directly write predicates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9905b6f2f414bd1e5e0ecc8a1b66594f28be902c",
+        "description": "ir3: integrate predicates into RA validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96dc227988e4df094d3a3142ef77e13f68003435",
+        "description": "ir3: validate no registers are invalid after RA",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21cd9b9557dc03dd8ffef4da541a4e62f0f7e32c",
+        "description": "ir3: implement RA for predicate registers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49f5a733127430a63dce1b092c6a0058fa8c147f",
+        "description": "ir3: allow finding SSA uses for a subset of uses",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f55a44d88be07dc888a700344cbc3e7526cd3ed0",
+        "description": "ir3: allow liveness calculation for different register types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "49b2fbe2f0246e6b62c7be64e5c5d61bbd0420fa",
+        "description": "ir3: remove comp1/2 from cat0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a720eef12dfe101e1f95a6e5a98eb3e5db8552e7",
+        "description": "ir3: remove OPC_B and brtype from cat0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a665231246c35c6098a3f482bc8293633907f77",
+        "description": "ir3: print branch sources",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "846c813355a3a258fd0fb49a9c867b9bdf5978c0",
+        "description": "ir3: fix instruction count before kill_sched",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eefb1d9d3f9721f851283a4f62bb0571df6c5d43",
+        "description": "ir3: add terminators to blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1aa1036525a1c903e690cf0c087e72d1d65f7006",
+        "description": "ir3: validate instruction block pointer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d0445d914ae604cad7dcbffcc0634b88a6e8536",
+        "description": "ir3: fix alignment of spill slots",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "613eaac7b53bfbfcd6ef536412be6c9c63cdea4f",
+        "notes": null
+    },
+    {
+        "sha": "cef867edc5a7c2ec7336cc1037db8b9cc23da755",
+        "description": "ir3: update a0/a1 users when cloning instructions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a38f7ea125724ed9b978becd8d1d6b36360ff657",
+        "description": "ir3: add disassembly for flat.b",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "54cb45cc6c7b8f8a336629132b671a0d8a5ba472",
+        "description": "ci: uprev mold to the latest release",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "140480974e4d0824995a6a9291be01a3a1a6f353",
+        "description": "ci: document which image tags to bump when touching build-mold.sh",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3711964f33625add10b486cdfe8cb37d12e5c85e",
+        "description": "panvk: do not handle illegal null",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a7e58a430122f7ad976c4fd1a2f95241f9c32ff",
+        "description": "anv: fix non matching image/view format attachment resolve",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2106092e63ef24bbabb1ecfd04972acd4e1ca1a4",
+        "description": "ci/android: use a specific version of android-cuttlefish",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fab675956a8aa3439e9c3dec05062b34ff30aca1",
+        "description": "panfrost: Update the release note to mention G310/G610 addition",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d778df1a60708fbb5807347663cc354f71e39384",
+        "description": "panfrost: Advertize G310 support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d17d076cc668526f1daab207d208a0e84a965d94",
+        "description": "panfrost: Advertize G610 support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f54c8413e676dcec7c4ea9a9277204c30889c618",
+        "description": "panfrost: Add the gallium glue to get panfrost loaded when panthor is detected",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a29443dc6bc53e722730ef21c68fc9cc9ea8d3a6",
+        "description": "panfrost: Add an entry for panthor in the renderonly_drivers[] array",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4943002a2cbc2e33cadf1c5f2a250caa18e4474b",
+        "description": "panfrost: Enable v10 in the gallium driver",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "447075eeeef8a9fd91f42ae869fd2e0246513356",
+        "description": "panfrost: Add support for the CSF job frontend",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e6a97a2b4ace0653d5774657fb0e81de55141453",
+        "description": "panfrost: Add a cleanup_batch() method to panfrost_vtable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b53db5f6097e5fc039beed9553939420cc84d1a",
+        "description": "panfrost: Add a panfrost_context_reinit() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e3771ab5a694b5df692e0b5aa3dccf61bdc6f03",
+        "description": "panfrost: Add arch-specific context init/cleanup hooks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b93524605e09b762daf0ac4472a8c61a2834637",
+        "description": "panfrost: Relax position result alignment constraint on v10+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b82448f4751fdad028ab74669768aef7f188994",
+        "description": "panfrost: Add a library to build CSF command streams",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8e303b935068ca8f1a272c5be437007b21dba66b",
+        "description": "pan/genxml: Make sure pan_pack() evaluates 'dst' only once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d44800079f0846ac521fa5904835a93ff140160",
+        "description": "panfrost: Don't allocate a tiler heap buffer on v10+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce24f786035c2eb7d009f1dd5ecafe37b1eaa593",
+        "description": "pan/decode: Introduce the concept of usermode queue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2e9450f49fec2ce1bf9ea32194f164d946ffdeb5",
+        "description": "pan/genxml: Various CS related improvements in v10.xml",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "729f6b28a6954410426715dbe149fa1d96ffc874",
+        "description": "panfrost: Add v10 support to libpanfrost",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97f6a62f7ef82b909f62ca78788d4f24416fbd31",
+        "description": "pan/kmod: Add a backend for panthor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe76c22aebc584b6d10d1acfe2150ed2461b251c",
+        "description": "drm-uapi: Add panthor uAPI",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "89ea39c09d9cb8c89d82346ab81e124a35c65cd5",
+        "description": "pan/perf: Reject panthor kernel driver",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1519d613c8cad962f49ab5a1d819f1037814fbdc",
+        "description": "panfrost: Prepare support for GPU variants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4477daf957cafcca1e4873b2d5c5b244c590f56c",
+        "description": "panfrost: Rework the way we compute thread info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73da66706e6f8845b78591e90c2cbb8db5f0c92c",
+        "description": "pan/kmod: Reject pre 1.1 panfrost kernel drivers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b5f1b6cb13bec7d0e45521476de02a477ac8f55",
+        "description": "pan/kmod: Add a PAN_KMOD_VM_FLAG_TRACK_ACTIVITY flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "812035b2d2db352dd21d47f3ef7aa2ac39379db9",
+        "description": "pan/kmod: Fix typo in pan_kmod_vm_op_check() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "36fb256e9ad0409749c694429eba002fe4099f8d",
+        "description": "rusticl/event: we need to call the CL_COMPLETE callback on errors as well",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "47a80d7ff4f966e3839640efd5f9d75e36af8906",
+        "notes": null
+    },
+    {
+        "sha": "67ea2eb97a84f3d6dd2c9dfe26f195d51caeac48",
+        "description": "radv: fix initialization of radv_shader_layout->use_dynamic_descriptors",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "66eaca3a0a596385436082ae1e4bd70dcf09f466",
+        "notes": null
+    },
+    {
+        "sha": "0a3a80a4ca2b34cd199da8e6843129790af49167",
+        "description": "etnaviv: Remove no_oneconst_limit from etna_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "529efb1f9b1f25c8c4b61e4bac470a847254327f",
+        "description": "radv: enable deviceGeneratedComputePipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbeb88012c0078b844804933f1ab7ae45c2126a8",
+        "description": "radv: force shader BOs to be local BOS with DGC indirect compute pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c253a76f5d172e55d1105b99b14c9a2d5ddd5773",
+        "description": "radv: handle indirect pipeline binds with scratch and DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2d67adff14347abfc7b095a05a5165181d84642",
+        "description": "radv: implement indirect compute pipeline binds with DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12b015940fda30a215861a76fa9614a3d9730423",
+        "description": "radv: implement vkCmdUpdatePipelineIndirectBufferNV()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74ff7fe02fdbae5de88262bb838cac6535110b10",
+        "description": "radv: implement vkGetPipelineIndirectXXX() for DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91c21c8cba26755ac67f24d2c2dcd88e8429c2f7",
+        "description": "radv: add support for VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d8f88d12ffed181dabe05fa76e776441e0bc9e9",
+        "description": "radv: add a function to get compute pipeline metadata for DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7409d7ec294d8580812ddbe58c3ef430b5066d24",
+        "description": "radv: add a helper to calculate the compute resource limits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1cddf59165f6b1783542e3ba364b1891317cdb9f",
+        "description": "radv: get the pipeline layout info from the push constant token with DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97759ef139746c4f31ceb037359e72f60e6fff2b",
+        "description": "intel/brw: Remove typedefs from fs_builder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f5f3fddd4e016a9e8d30678f6732235f74c9f2d",
+        "description": "intel/brw: Fold backend_instruction into fs_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e5c5a983f72eb6580446011334a5e6324eff0fab",
+        "description": "intel/brw: Move functions from backend_instruction into fs_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f5a593ade77dfd10be1fa3b7f394488f4887fd09",
+        "description": "intel/brw: Use fs_inst in disasm_annotate()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db322554a70f5dd34649154a9fe5035cc2eba915",
+        "description": "intel/brw: Use fs_inst explicitly in various passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "692021cad74bdb840f6465d71392d19defde0986",
+        "description": "intel/brw: Use fs_inst in cfg_t",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5ed82b97ca74e9f3f0441acf098576d31d3e3d8",
+        "description": "intel/brw: Hide the definition of cfg_t et al from C code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f975e7af730c77a8607a81ae63e7f8141e20920",
+        "description": "intel/brw: Use C++ for brw_disasm_info.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e33b39b46c742a02daa69e13fb924c20098e286",
+        "description": "intel/compiler: Remove nir_print_instr hack in disasm_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ba5e9432dbc33b20e3597ebecf4993062369a56",
+        "description": "intel/meson: Add dependencies for brw and elk",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5b6f8a414b7e5ab959256c076f35cf2bfb093f7",
+        "description": "nvk: free leaked cmd_buffer descriptors state.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b588cb29a3c35866ea34d74a55a4c5f761871f78",
+        "description": "radv/rt: Handle monolithic pipelines in capture/replay",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f72eb9e6c493392b16df0c385faa0afacdbbfe5",
+        "description": "vulkan/wsi/wayland: More descriptive name for swapchain queue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73c1fbfc7994e64dda8f5aaf23b999efe30dfd7e",
+        "description": "wsi/wayland: Replace surface pilfer with retired bool.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7dc82e3e84c5dd99bf7eec0aa81c6265b392df6",
+        "description": "vulkan/wsi/wayland: Use wl_display_dispatch_queue_timeout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7eaceb03921eb0d12d1e92bc8a655ad23b253b17",
+        "description": "vulkan/wsi/wayland: Adjust presentation id locking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb22b69df3de1bb471d2256e59c5c9849c0fe078",
+        "description": "vulkan/wsi/wayland: Remove confusing comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f96d31bc8a748329614b0808d969e26c8d710cc2",
+        "description": "wgl: Check for stw_device->screen before trying to destroy it",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c107677327f02719cd584716705ce04f558f725",
+        "description": "radv: set VK_SYNC_FEATURE_GPU_MULTI_WAIT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9907733e3a704e4cda01374df761bf99b064042",
+        "description": "radv: hide the sparse queue on older kernels",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd84a575c0841e2de27ae3ebd471034df0ae094b",
+        "description": "radv: hide the sparse queue when radv_legacy_sparse_binding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ac7ea7578dcf3b9ea5c4d7a54f60e860987bc46",
+        "description": "dzn: Fix conditions for barrier in texture-converting copy case",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "865ef36609eff540861437750d5290e95e6ac750",
+        "description": "intel/brw: Remove brw_shader.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9552fccf288426138a9c84a6d979f0a15b38680",
+        "description": "intel/brw: Remove extra stage_prog_data field in fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "634dff403f55a772242dd378ee13f182d7cf6fb2",
+        "description": "intel/brw: Fold backend_shader into fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3e9a5c719b091f511c8352cd1d284cc5e73277f",
+        "description": "intel/brw: Move dump_* functions into fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "20dfee69c3323644476b4ccad7bf07b20434937b",
+        "description": "intel/brw: Change cfg_t to refer to fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e3fbb1afedd6d390616550689a098b8a11f90d9",
+        "description": "intel/brw: Fold fs_instruction_scheduler into instruction_scheduler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "559d94cd0d77bf326d55682832b2ef1f3294728e",
+        "description": "intel/brw: Use fs_visitor instead of backend_shader in various passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b890825f6df23988e44dd575b6e86f597f62e06",
+        "description": "i915: Fix value returned for PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0c31fe9ee743f699bcabcb638ccc83e515f0d1bd",
+        "notes": null
+    },
+    {
+        "sha": "3ea1d4787d73d6846043de8e79bc1bb2ca6541d3",
+        "description": "nil: Enable A8_UNORM for storage buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3418105b9169b8f72745c9901db37cd545ac583",
+        "description": "egl/wayland: Remove EGL_WL_create_wayland_buffer_from_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f159a7943c11bdbfa8cafadfc553c4b368b4e612",
+        "description": "intel/brw: Delete brw_eu_util.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "655cb9c61fd24caec0146dba5e6e1ba4f0b54937",
+        "description": "intel/brw: Delete some swizzling functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbcd35141bbab231a405b3b340596f33c1210790",
+        "description": "intel/brw: Delete unnecessary brw_wm_prog_data fields",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0eeeab16a8be98e34cd9231f73b8ca6bbfa2b4a9",
+        "description": "intel/brw: Delete brw_wm_prog_key::line_aa",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfb12def74dc4d4ec69ed9b165539cd30928ea50",
+        "description": "intel/brw: Delete enum gfx6_gather_sampler_wa",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5fbba530cfdf41756a5e8d40a61431a9e67f8c01",
+        "description": "intel/brw: Delete compiler->supports_shader_constants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "485b2bca17101b41dfd596dc653d32b1f5acfb02",
+        "description": "intel/brw: Delete constant_buffer_0_is_relative",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eebd24680ca6f095c1d1c0426542718c80654303",
+        "description": "intel/brw: Delete SINCOS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "292e424162aca82500883beef584eb6e099f2253",
+        "description": "intel/brw: Delete more unused compression stuff",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a18030305cefdc0953ceead68dc17ba3da06a01e",
+        "description": "intel/brw: Delete SIMD4x2 URB opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "288b966e3ee3f19e2f4b0417b8de7ae853bc7118",
+        "description": "intel/brw: Delete legacy SFIDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "afae5e78ca9a3025f638c79b54198fd6a55c4856",
+        "description": "intel/brw: Delete more unused defines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3202f3fdbe65408c412b5b0a7dc32607a43ce2a3",
+        "description": "intel/brw: Delete enum brw_urb_write_flags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbbed6ca3ec71666796ca7952db9aef0178ae3d4",
+        "description": "radeonsi/vcn: Implement separate QP for I/P/B frames",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "252ba4bbdda41443e0f7cc8c153e390d380c1fd4",
+        "description": "radeonsi/vcn: Use temporal_layer_index to select temporal layer",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8d44a115080645c210e055fa410fb18accf510aa",
+        "notes": null
+    },
+    {
+        "sha": "8c9445896fa2980196143a44294201e26b786932",
+        "description": "frontends/va: Separate QP for I/P/B frames",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c69f76170ea33cc2ed3983285364b27a6e166fc0",
+        "description": "docs/nvk: Document NAK_DEBUG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6638e89fdbe8680087d9e3bd22d192202cef7e6",
+        "description": "docs/nvk: Update the NVK_DEBUG docs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc8df338ca2f0c3a3c0279a45b5a0f8f48ca186a",
+        "description": "docs/nvk: Update the conformance status section",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "532d43881f34e8b34d4ead4c49a370acae11cdc8",
+        "description": "zink: stop enabling EXT_conservative_rasterization",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ca6d044c155fc3417677b33a6af31adcf52d8e1",
+        "description": "ci: enable Collabora farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64f037e079db56f6bb6d20fdbf279c9354547042",
+        "description": "vk/util: print a nice error in vk_icd_gen.py when VK_HEADER_VERSION is not defined",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f2790adcda3cf6ad6b3e4fee159f02aeeb70404",
+        "description": "vk/util: trivial cleanups in vk_icd_gen.py",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bc38b68ab8c27543dc38c28eb509fa112a68cf7b",
+        "description": "ci_run_n_monitor: read job logs as utf-8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "656e329fa2d2871ffaaad05f4bb2c059122394f2",
+        "description": "ci_run_n_monitor: fix handling of optional jobs again",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4d45c582b445686b82fc47b4474aa27ca45a08b",
+        "description": "glx: only print zink failure-to-load messages if explicitly requested",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "571effdf087ac3a62f62227fd157f808135885a6",
+        "description": "egl/dri2: use the right egl platform enum",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0fd066a1d7f64011fed63c64a1d3e3757ba5a55b",
+        "notes": null
+    },
+    {
+        "sha": "75f186f3c42e35c55d1d260806040b6f5885cb82",
+        "description": "ci: temporarily disable Collabora farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d76d46154ae8fffde26159813b55ed75c8f93f4",
+        "description": "iris: Enable pass-through state init for gfx12 CCS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06dff45abb862a7b68ff324e5c4c063f1efbf794",
+        "description": "iris: Don't memset CCS on integrated gfx12",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1443074f3a037eb134b962486c438a20cb5c9d3",
+        "description": "iris: Don't memset the extra_aux memory range",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8567d0268267446a9daaf0a670fae76570d03655",
+        "description": "tu: Update prim restart state when we switch from/to indexed draw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4f3770ea232e015e445b9d1fcab699119417fac",
+        "description": "zink: use uncompacted vk_dispatch_table",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d91db9666ea61be549b2edc28d5ad4c34b34aab",
+        "description": "vulkan/dispatch_table: add an uncompacted version of the table",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "185d420b27199af2fed3f2b53f95accdf0e0d2ce",
+        "description": "anv: make sure aux is disabled for memory objects",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9058a2a78ec7b7a40bd8f16bb838f0b7030a9d69",
+        "description": "iris: make sure aux is disabled for external objects",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe037dec6e14cfbfdc6a1c30e0a6009b067ee319",
+        "description": "anv: expose VK_EXT_descriptor_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "454d38124395c0f705ce3c3ccc7fcc587e77d6c9",
+        "description": "anv: disable mutable combined image/sampler in descriptor buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ab7641b8dcbfee419b761abb27fe6fed476b4e05",
+        "description": "anv: implement descriptor buffer binding",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "349c46c5538aa656e2ac972a1dd54901b490552a",
+        "description": "anv: handle push descriptor writes with descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1de44b1951df3c25c897a4e66440409a8621ba80",
+        "description": "anv: add pipeline/shader support for descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8090bd78b856163bb8d895d5eeaac557a9de5490",
+        "description": "anv: add descriptor set layout support for descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ba059854c5ff4478ebb5c73163a5262efc2bcc9",
+        "description": "anv: add new helper to update  binding table pool offset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef8f09148f35a03f03156ef4b8a62e68bbc48a5f",
+        "description": "anv: add embedded sampler support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "259cdc549650a08a548befc69964e0d9f998f113",
+        "description": "nir: add additional flag to resource_intel for embedded samplers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99047451c913925f56457e27ab31113019652002",
+        "description": "intel/fs: add plumbing for embedded samplers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3f25b2826f20391e5f4f427fd76964815a806685",
+        "description": "anv: add embedded sampler parameters in descriptor set layout hash",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6d59168dc9279d5eac6e7c243a2846d0bd33596c",
+        "description": "anv: compute a sampler hash based on parameters",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9506d3f3388ee65f99f263246fc1a135fda3de40",
+        "description": "anv: implement data write entry points for EXT_descriptor_buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec73db3b8c2930e6c2c7c1ca97e7f30b9cca681c",
+        "description": "anv: allocate fsr states for descriptor buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "44bf5527047246ae8192b87f346fc801ad80817c",
+        "description": "anv: allocate border colors for descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "271f0b8b9cb4be60eaef77c379bd970015fa7daf",
+        "description": "anv: allocate slice_hash for descriptor buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "859f087c0ba6e538eb5db0d070b3b05865b494fc",
+        "description": "anv: move aux-tt to general state pool",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "226c519f28439368d592091a577651acb73be389",
+        "description": "anv: add a second dynamic state heap for descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "82d772fa9b3a5eb7809921ca448b6e796a3d92b3",
+        "description": "anv: create new helper for small allocations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6a91f16952cfe9f685cc6a0a185161364fdcdcf",
+        "description": "anv: add new heap/pool for descriptor buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc1aeb57bb84a268ea06dcfc4a1c4531ede9a0d1",
+        "description": "anv: optimize push descriptor updates",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3d38c9597ff3b687026fa4c664f8b4aa20b97f53",
+        "description": "zink: hook up KHR_partial_update",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0131cd3719e564f0370db4841bc5788f0760715",
+        "description": "zink: use VK_KHR_incremental_present to propagate damage rects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4fe88170ce294bc31ab8d3b0a08c5f30741cf0e1",
+        "description": "zink: hook up VK_KHR_incremental_present",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "738fbddca8a1d8343e2ae322299de22a9ae108ae",
+        "description": "zink: use a slab allocator for zink_kopper_present_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cdd1ce140d2e77e68b64666718c472a86860fdbe",
+        "description": "zink: make zink_kopper_present_info public",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c73e529332d217de79f16659d24ea2dbfd1b3ab",
+        "description": "nvk: Advertise VK_KHR_pipeline_library",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fb564040a7bf86d9638cab0c799e86cb416bd928",
+        "notes": null
+    },
+    {
+        "sha": "bb8b11d806979c07a7fb009ac7f254824625bff6",
+        "description": "vulkan/pipeline: Handle fully compiled library shaders properly",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9308e8d90d26fca678fe72380d899cdae77415b5",
+        "notes": null
+    },
+    {
+        "sha": "d9908af9d280aa357005d0d01444d9ce8fb426cb",
+        "description": "vulkan/pipeline: Whitespace fix",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "283d8ca98a706113aaa1390c2f2bee1c4ce37eee",
+        "description": "iris: Force lmem cpu accessible for bos with clear-color",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a9168584cf00c5f046ec4add93882e89bbb99c6",
+        "description": "iris: Add IRIS_HEAP_DEVICE_LOCAL_CPU_VISIBLE_SMALL_BAR heap type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f55ed175ebfd931c0ade98bee30f3880f896bc6b",
+        "description": "zink: fix stencil-only blitting with stencil fallback",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f0430b095b9a873b896ad5ce30cb36e848baffd7",
+        "description": "egl/wayland: delete swrast references to zink",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17355e737da14996bdcaf8587a78919bf2bae3af",
+        "description": "egl/wayland: split out kopper update_buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19596910334261df67f10735a7fa559cc1994db2",
+        "description": "egl/wayland/kopper: actually call kopper swapbuffer functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a8c6cf7ac4cb88149ca8e99ba163fcecc055032",
+        "description": "kopper: set drawable buffer age",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9cf22c5fd0a609d5127dd7ad1037500ef101cc17",
+        "description": "egl/kopper: call swrast buffer age query for kopper+swrast",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bd28d62e44d062c23aef4315df0f488614a2448",
+        "description": "egl/wayland: split out kopper swapbuffers functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76f74f55a40bfaf6e1d73f5da23d1b067b1e37c2",
+        "description": "egl/wayland: add a separate hook for kopper buffer age",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4345c415d7ffcb48fd230e5259ce328a5daa49ad",
+        "description": "egl/wayland: split out kopper vtable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1188178811020a97d97dfe3a2d3ab91e7bd60e67",
+        "description": "egl/kopper: advertise EXT_swap_buffers_with_damage only in non-sw mode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad8794884cc6af7fc1fc3da1a5e940c7272c4dc0",
+        "description": "egl/kopper: plumb through SwapBuffersWithDamage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c82a67ea65deece5767b3d68ac63da194300bbc",
+        "description": "drisw: pass all frontend swapbuffer damage rects through",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cda627eb48a4e740bbfd687caee9037d6bdb09af",
+        "description": "drisw/winsys: loop over all the boxes in display()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "389e83c4fec180cfd566c504840c915c7c87a668",
+        "description": "drisw/xlib: loop over all the boxes in display() hook",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c83768c76cc79b7428f84ca87e686f3e47ae7093",
+        "description": "egl/wayland/sw: clamp putimage geometry to surface size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa465e34cadacb7d29a664006b5d73bc2a8d9cf3",
+        "description": "egl/wayland/sw: pass damage region through from put_image2 to wl_surface_damage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d90b14c7687635bc6f9ace9ef5fa897405a0fe09",
+        "description": "egl/wayland/sw: fix no-op updating of current backbuffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75cf82005dd2630a6dba984e0d8edf17181ef159",
+        "description": "egl/wayland/sw: move partial->full copy promotion to swapbuffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "425d919b0a67307dcb9329d42df06fbb336ca292",
+        "description": "egl/wayland/sw: trigger damage from put_image2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e4db8c6e8d793df222b2952aa5de75093bfe8e94",
+        "description": "egl/wayland/sw: call dri2_wl_swrast_attach_backbuffer() before swap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "448cd2cd3783fc82b6fc2d2a26678aaa8925a494",
+        "description": "egl/wayland/sw: split out surface attach from dri2_wl_swrast_commit_backbuffer()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cce12981e462c0745f362e957e6d3454e12ad96e",
+        "description": "egl/wayland: unify back/current swapping between zink and swrast",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73a3a1c646b1a100fab7d85b67dd0b006a653dc0",
+        "description": "egl/wayland/sw: move dri2_wl_swrast_commit_backbuffer() directly into swapbuffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81e5f9c398f4949130917fccebc13be44381976d",
+        "description": "egl/wayland/sw: move swrast_update_buffers() directly into swapbuffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd6f7e3f16ad7c40e9dc5076f0cecc15caf92361",
+        "description": "drisw: plumb through a swapBuffersWithDamage interface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3aea0e31a4db7e21de0daab0ed3d79f34db2770a",
+        "description": "winsys/sw: propagate nboxes to displaytarget_display()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3cca761934e1739c9e65cd28faab0356f5d3c2f1",
+        "description": "gallium: add a nboxes param to flush_frontbuffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74f63925450aedb3a32b03f7272549c961fd8539",
+        "description": "meson: bump the minimal required vdpau version to 1.4",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "c3ceec6cd8533a5a5f3ccaf687308dee2f097a99",
+        "notes": null
+    },
+    {
+        "sha": "cdab305e36e6c7f3e3b7d749c54af43e30280410",
+        "description": "docs: update calendar for 24.0.2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4de363278afe1dafcd2e01095c0ee93a1dd4a8b",
+        "description": "docs: add sha256sum for 24.0.2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64eb09cd7cb49847ebadde66f588d8221b7abc56",
+        "description": "docs: add release notes for 24.0.2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83f3b1d76acf699781f06ada5d1315329da2e30b",
+        "description": "venus: mandate a few venus capsets long required before 1.0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "661ddf60840fae8f8d4e54adf3e7c04d023be965",
+        "description": "intel/nullhw: Fix 32bits compilation warnings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "209ae6bd41f8ab1940ce168b26f02db11946934c",
+        "description": "intel/tools: Fix compilation in 32 bits",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "90e38bbb3b577535a665edd0e8091e7c3a85bdb3",
+        "notes": null
+    },
+    {
+        "sha": "1ba6ccc51a4483a6d622c91fc43685150922dcdf",
+        "description": "tu: Unconditionally enable GMEM on A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de3dc30a29e6d4119f501ad4e54b75646e9946c4",
+        "description": "tu: Add blit cache flushing for input attachments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0cf27a7236cbad271430986ba6625b4ae5d4ee02",
+        "description": "tu: Clear `VSC_UNKNOWN_0D08` on A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "71918f7cffc06b0a680440209b0547012b615af2",
+        "description": "tu: Fix CP_BLIT sync on A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9a67f00398d2fa197221dcdb9ac499763c3aec6b",
+        "description": "tu: Set RB_CCU_CNTL during HW init on A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "265eb463b561c2ba4b1b1ed0b6d3b3c58fb824b1",
+        "description": "tu: Disable LRZ properly on A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3188c1b5c74c4e5894be7b7878dc0d11a9121c67",
+        "description": "tu: Use `Z24_UNORM_S8_UINT_AS_R8G8B8A8` for A7XX GMEM D24S8 blits/clear",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1714e0c240a59777fae371eeaa7e38fda5e59e14",
+        "description": "tu: Fix 2D blit path for GMEM stores on A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e699afa9b7277ffdbab3cc0e1df1b454b0636a6",
+        "description": "tu: Allow event blit to resolve depth stencil formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc6399de31e31169e4db83a2a711d32bbbe18fea",
+        "description": "tu: Update CCU layout selection logic for seperate stencil stores",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b44474407dea46d5c871fb77e14a7a7c59852c70",
+        "description": "tu: Use full size color CCU in sysmem mode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40b3a38951596de5e23072a49ed8882100963656",
+        "description": "freedreno/devices: Update A7XX tile values",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "120779f0093626235990f3a393cd136a79a7ddce",
+        "description": "tu: Set `RB_UNKNOWN_88E4` for A7XX event blits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f0ae416fc13b1312947887c6c24904ec91e349a1",
+        "description": "tu/autotuner: Use CP_EVENT_WRITE7 for submission fence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e6a1f885250cfb8aedab50b795a466ea0156e55",
+        "description": "tu/autotune: Use `CP_EVENT_WRITE7::ZPASS_DONE` on A7XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "45b415a04490d9e8d64f7d6ff5b9ffd1636cc94a",
+        "description": "tu: Use `CP_SET_PSEUDO_REG` for A7XX VSC stream regs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c78d104b09346aeb97fced40c7e7d47ef8c498a",
+        "description": "tu: Only set PC/VFD PWR_CNTL regs on A6XX",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b2df4ca26d8a4f47f6fc5dbdcd936b6b9feb78e",
+        "description": "tu: Set `CP_THREAD_CONTROL::CONCURRENT_BIN_DISABLE` in A7XX HW init",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1af86d5a6ad6d8654c76537ee0913146ab7e2c2e",
+        "description": "tu: Set A7XX registers in `tu6_tile_render_begin`",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9759222282fadbe02ac2e80910f54bb231660d18",
+        "description": "tu: Allow GMEM on A7XX when TU_DEBUG=gmem",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3dbc15e74e78bf9d698d463cceb5e41712a3af30",
+        "description": "anv: add a command streamer stall on Xe2+ when switching pipelines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af41fad1e984daf276dbadc7d749fffb470c2921",
+        "description": "egl/wayland: explain why implicit modifier downgrade is allowed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35143febbaca5e3f0bbc57ae104322696aae34ad",
+        "description": "egl/wayland: ensure wl_drm is available before use",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "c60fea8c228ae3f32e20d6b65c473d9f04871d20",
+        "notes": null
+    },
+    {
+        "sha": "1f36cc6ca38a5a141d077812bce33bbc3a7a65b3",
+        "description": "anv: cleanup duplicate robustness flag calculations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b1d12b104eac1bf329216f4262d17a4fa52d0bf",
+        "description": "zink: force max buffer alignment on return ptrs for mapped staging buffers",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f7d6a75d6b0ad9dc21264bd32de50aa8085a72ff",
+        "description": "zink: delete unused buffer map conditional",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80456abff7a77396b0cc2345b1739f8788ea4d93",
+        "description": "zink: fix unsynchronized read-mapping of device-local buffers",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91f99f82ab4b054c136b9fba46a2414522a46560",
+        "description": "zink: null out bo usage when allocating from slab",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "689a80704ab55a7ecd0d71541fc5dc084bdc2cf1",
+        "description": "zink: emit SpvCapabilityImageMSArray for ms arrayed storage images",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "701ee4be913a98569a5ba2e0d4d4d8888c35249e",
+        "description": "zink: apply all storage memory masks to control barriers if no modes are specified",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75785749efb1e5a1711c868840e3c32e3038fafe",
+        "description": "meson: Rename nouveau-experimental to nouveau and build by default on x86",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e32c36df079676811f9c02058d6ae384633b5fa1",
+        "description": "nvk: Don't print the NVK_I_WANT_A_BROKEN_VULKAN_DRIVER warning in release builds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b5dab7c9654c3ec25e299228c61e8dd8d8f29b3f",
+        "description": "nvk: Drop the non-conformant warning on Turing-Ada",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4ce4560a45b58c084182f8dc9a62c13464e7244e",
+        "description": "nvk: Advertise a CTS version of 1.3.7.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81230513a8a35874cd6b052e358840d3757e3bc9",
+        "description": "radv/ci: add a vkd3d-tahiti job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "778ef9b133934fa8b2fa36fb86b8609cd55909f2",
+        "description": "radv: move conditional rendering for compute in radv_cmd_state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "536c44d9460063588b4b654bb1f835e88953c87b",
+        "description": "radv: fix conditional rendering with direct mesh+task draws and multiview",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba7b7e2d3fa7660059bc7c01ab0e1fb4dcde0e1a",
+        "description": "radv: add missing RADV_DEBUG_NO_NGG_GS to the physical device cache key",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "69d734a8d531cf2a291560701c966d7a6351548e",
+        "notes": null
+    },
+    {
+        "sha": "be466399747bc1d63030abc4f3193690cef31065",
+        "description": "freedreno/a7xx: Fix base_align for non-UBWC depth-stencil",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "25a0eadcaef9612865ee29156018923c51e2e8cb",
+        "description": "tu: tu_device should clean up its global bo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f623c27eab9e4bc616600da88334937e750e87dd",
+        "description": "meson: fix a build ereror",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a00f9c401bbe7c537fde2dbf277e0790a52b7052",
+        "notes": null
+    },
+    {
+        "sha": "9c096e23c001d558aa18bb4628ec8d6c6ecb89b5",
+        "description": "vulkan/wsi: fix force_bgra8_unorm_first",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "7c16a1ae4e629ccbae3979ec9be105e6b44e0acf",
+        "notes": null
+    },
+    {
+        "sha": "224ff116178f8ca18008c2cdbc6a8feab1eb0a81",
+        "description": "egl/wayland: use __DRI_IMAGE_PRIME_LINEAR_BUFFER in get_back_bo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55e99728e03cc8a290db4d1b97d7d512361b362c",
+        "description": "tu: Do not emit zero-sized fs params",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "76e417ca593866080731da59c479a99542e3a529",
+        "notes": null
+    },
+    {
+        "sha": "b3064f9cf43b0a128fb5cf1f611c390a0df1eb1b",
+        "description": "radv: clean up MAX_ALLOWED_TILES_IN_WAVE programming",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "61cfabda5dd54d7d2c49e8b2b81c4feb157dcd70",
+        "description": "vulkan/wsi/wayland: Give names to our Wayland event queues",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "235144cf51536d98975f1c65e2df317332e9b35b",
+        "description": "egl/wayland: Give names to our Wayland event queues",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb1235f3439a279bb188454fb9a762ec2ed2ae6e",
+        "description": "loader/wayland: Add named queue fallback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e219a22e2f6014cd552f8e88633b6587079c47a",
+        "description": "Uprev Piglit to 2a1c49a81cd9a6bf5d0c3a9b87225be94771ca96",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "150525980e1d2211cf07a9d1e43367f97525f8f2",
+        "description": "ci: disable clang-format job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "803a1a5adac2b3fe637f16a8d4d2fc2ec1d6f751",
+        "description": "intel/brw: Remove automatic_exec_sizes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dae59e7078d84a277aacee0c3a223e1a93105556",
+        "description": "intel/brw: Remove runtime_check_aads_emit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35b07ab035f8427282ffb6c2985dfcff1893668f",
+        "description": "intel/brw: Use a single register set",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3ef6fa3767ad6b90ad5bc5dd35993891f9a0a7aa",
+        "description": "intel/brw: Remove Gfx8- fields from *_prog_data structs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aff961f423e7009f5f6ccd72d6862c6623c89069",
+        "description": "intel/brw: Remove Gfx8- fields from *_prog_key structs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "63a4a4400a64d80886fdb53a04cb879b3884c831",
+        "description": "intel/brw: Remove edgeflag_is_last VS parameter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a3f65e67850575f830b2ae6ed3f37a3650c34b0",
+        "description": "intel/brw: Remove unused attrib workarounds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d3e451780b0f4a5c1d6d0bfdc851faa205543312",
+        "description": "intel/brw: Inline brw_nir_apply_sampler_key code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f3c52c1da5c6500f18cc8d044decae7e8946f32",
+        "description": "intel/brw: Remove MRF type",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c93a0e125e9a61019393ecc200145997bf8cd08",
+        "description": "intel/brw: Remove Gfx8- remaining opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3ef1ed73d3313811d9f8941f251376a99382131e",
+        "description": "intel/brw: Remove Gfx8- code from visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c793644ce9f332efa6dade415d56d3c876bcb11b",
+        "description": "intel/brw: Remove Gfx8- code from SIMD lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e0d767f5fefb6d86d64d6599a674e8ec86f27d30",
+        "description": "intel/brw: Remove Gfx8- code from VUE map",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b3931daece70a70edd6e9fb337702701c2c3f30",
+        "description": "intel/brw: Remove Gfx8- code from fs_inst",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6098676fa86a6890303bd5cc5fdef2c1d070ff9",
+        "description": "intel/brw: Remove Gfx8- code from builder",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "071e9f49f1fbc6ac4a5e1d5b73483522c69ba589",
+        "description": "intel/brw: Remove F16TO32 and F32TO16 opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "866a2f88dffcbd5f20b9261bfe490d86db2c1729",
+        "description": "intel/brw: Replace inst FF macro with F or F20 macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "625338389ecb03a16b1f83ee987f26ce7ec46597",
+        "description": "intel/brw: Update comments for FK macro",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e16c565f41a3e516f58d0d2a4db2cc998340ca1",
+        "description": "intel/brw: Remove Gfx8- code from inst FFDC, FDC and FD macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2822bc8d4ed2235a6847462708b6e0c2d8cde7a",
+        "description": "intel/brw: Remove Gfx8- code from inst BRW_IA*_ADDR_IMM macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7da7e4e698e79984aaa052c74fc9beb8d58ac4c",
+        "description": "intel/brw: Remove Gfx8- code from inst FI macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b523a9f8e8278901cf23dc2c4b53349ec44a463",
+        "description": "intel/brw: Remove Gfx8- code from inst FD20 and FV20 macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e684ab6a0675e547fe61878e323e95fff40646cf",
+        "description": "intel/brw: Remove Gfx8- code from inst F20 macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72a73eca96f63f6f460a846961040746de4de9a0",
+        "description": "intel/brw: Replace inst F8 macro with F macro",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "add6ea8a22bd78159eb4e7602e65d05842b0b233",
+        "description": "intel/brw: Remove Gfx8- code from inst FC and F macros",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ccece38623fd3dee10472ae2a68d8b8a24adcfbc",
+        "description": "intel/brw: Remove Gfx8- specific EU inst helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8ee44e8f18aee3269b7ba47471db14347ab318d",
+        "description": "intel/brw: Remove Gfx8- code from register type helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0a637dce056c61fb1e4c66befba6049505c7caaa",
+        "description": "intel/brw: Remove Gfx8- code from NIR options",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d61d6fc3bc1c9c965ff640530111112a2aa8d911",
+        "description": "intel/brw: Remove Gfx8- code from EU codegen helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99d41ca90d62b32b17070bd439a55a7d9b6f3b97",
+        "description": "intel/brw: Remove Gfx4-5 manual compression selection",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1e694a890e5d1b3ace7a76cbdc31069d5081e2b",
+        "description": "intel/brw: Remove Gfx8- code from NIR passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99f173ddd285278faf0326b521144acef532bd40",
+        "description": "intel/brw: Remove Gfx8- code from EU validation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f321e555b6fc8bf28a616afef4eea6981320931d",
+        "description": "intel/brw: Remove Gfx8- code from EU emission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "91c05d990abc0c05591e2ab6fd7493a463cd7d4a",
+        "description": "intel/brw: Remove Gfx8- code from IR performance analysis",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5765c7b80c378e31b107ad417800799341b25a77",
+        "description": "intel/brw: Remove Gfx8- code from EU compaction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ac5696157faaf5fd2e317885c8c1e04c843af07",
+        "description": "intel/brw: Remove Gfx8- code from backend passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9569ea82a885d4e3bfd71bf7ae2350cfc85b9c4b",
+        "description": "intel/brw: Remove Gfx8- code from generator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "371468c0133b8d204aec8107a314ae85cf82f2e2",
+        "description": "intel/brw: Remove Gfx8- code from lower logical sends",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ee29f82d2f562b5c7b7b0eb3a8f1b2f0764a92b",
+        "description": "intel/brw: Remove Gfx8- code from lower storage image pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a03280af1b86a43ae954e47b7912320469a676f",
+        "description": "intel/brw: Remove Gfx8- code from NIR conversion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2a1c2a1bf119779e8f569bc8ce1e6051cd2e62c4",
+        "description": "intel/brw: Remove Gfx8- code from thread payload",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed6f0665e0b79163c857ad340af93bd79daba636",
+        "description": "intel/brw: Remove Gfx8- code from register allocator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85eb6723258820162bbb3b0182d47bda0f88c402",
+        "description": "intel/brw: Remove Gfx8- code from scheduler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e88fa8a77b3aa130aed32664aac0ca13b41506b",
+        "description": "intel/brw: Remove Gfx8- code from brw_compile_* functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a4bf0165828694894c5a88d318d02c9685ca6f44",
+        "description": "intel/brw: Remove Gfx8- code from assembler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83d7ddebcbd1afecf34b914679c1ec371876ae87",
+        "description": "intel/brw: Remove Gfx8- code from disassembler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "15469b0a6339b821aaed49bd0d73822063e79696",
+        "description": "intel/brw: Remove unused legacy shader stages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c621f75e7bed1b728725a052b2a5ae09899ed638",
+        "description": "intel/brw: Remove now unused vec4-only opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a641aa294ef155ca1133e131a920dcab4cb1c990",
+        "description": "intel/brw: Remove vec4 backend",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c23b90537e359853d8ecd11c275e13ff23b0469",
+        "description": "intel/brw: Always use scalar shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "303fd4e93501e447abdd0d0a69fffbdfe74fa3ed",
+        "description": "intel/brw: Move type_size_* functions out of vec4-specific file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9bfccc1935340c581cbdc760e476d7e58808f587",
+        "description": "intel/brw: Move brw_compile_* functions out of vec4-specific files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c11d7743b39fb4559420d0371d03b4efc486f6af",
+        "description": "intel/blorp: Remove Gfx8- references in BRW code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c190bdfe97ca4666f1ab2d861a8dd720a1f7597",
+        "description": "intel/clc: Fix file descriptor leak",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "4fd7495c693818e0823b100df0e0607e448a29fe",
+        "notes": null
+    },
+    {
+        "sha": "41722c61376eacc346fd459108d4e9697834f2fd",
+        "description": "nak: Add support for imad on Volta+ and enable it in simple cases",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a747cd1bd595eade6096bada1c6a230ddb7053f9",
+        "description": "nak: Move NAK_FS_OUT_COLOR next to the enum",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4fb5277c3da1797056f41bb5ed99de1b40feb06",
+        "description": "nir: Add an imad opcode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1881d97c2743a6b999942aeaae94176d4a1962bb",
+        "description": "nak: Implement nir_op_iadd3 on SM70+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c95d393093a214d245152051056fbd8337ce335",
+        "description": "zink: add nvk baseline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ffb7e0179008c5cc1b8cc8b6e5f33b19fc63851",
+        "description": "zink: update nv blob baseline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "efc4ac0d27eec2e9c241accd95c396352e477d15",
+        "description": "nak/sm50: sprinkle OpAnnotate in optimization passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "feb2d3e1daabf71e7d63497541ab2f08a0b7c173",
+        "description": "nak/sm50: support annotations through  OpAnnotate",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a69bd9a70a6ce66f80fa2ae20cc4a70d865ea451",
+        "description": "nak/sm50: add an annotate debug flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "02774be708876e90e3cf333d30a86ff798154ac5",
+        "description": "nak/sm50: add a memstream abstraction",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e57cf175e23937f4acef6e4a1c5b9ed7f8e3cc8b",
+        "description": "venus: move feedback on empty last batch to prior batch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0586a3fb22581e6f2eb0453ce0b68f14794f31a8",
+        "description": "frontends/va/postproc: do not use efc if image is to be translated",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b8c3d18fba579b57aa483cf3de08573b31991fbf",
+        "description": "nvk: Advertise VK_EXT_shader_object",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb564040a7bf86d9638cab0c799e86cb416bd928",
+        "description": "nvk: Advertise VK_KHR_graphics_pipeline_library",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "813b253939ee8c965bf14746a48c6191b062a57a",
+        "description": "nvk: Switch to shader objects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4001658c182e99dd99aaed32d9d9f84853804e41",
+        "description": "nvk: Use vk_render_pass_state::attachments for write masks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "839629634fcdbe3722de90d125910f224a2ab530",
+        "description": "nvk: Move nir_lower_patch_vertices to nvk_lower_nir()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bd76444257071d655c4970958b9fa4fb3e3c8bd7",
+        "description": "nvk: Pass an array of descriptor sets to nvk_lower_nir",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a4f519d72db3c7d13c8455391c5cc2e0800eff1e",
+        "description": "nvk: Move populate_fs_key to nvk_shader.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "045741ac304a2f16a71295f13005b9ed0b54861d",
+        "description": "nvk/shader: Refactor some helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "626f38e25e72c10c395dd9f66ad00b843124593c",
+        "description": "nvk: Populate vk_descriptor_set_layout::blake3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9308e8d90d26fca678fe72380d899cdae77415b5",
+        "description": "vulkan: Add generic graphics and compute VkPipeline implementations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c488dc9f5089033d3f630fa5a84d7a7ebd16cf89",
+        "description": "vulkan: Add a BLAKE3 hash to vk_descriptor_set_layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "682b99a63f461b97843fd46560c18f3578230735",
+        "description": "vulkan: Add push constant ranges to vk_pipeline_layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2cb395a1fa55aa45d210f690c8e3291074e2ff4",
+        "description": "vulkan: Add a vk_pipeline base struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e71e6f3f6fa26e1ca7f30f7eccae00eace8c209",
+        "description": "vulkan: Add a new dynamic state for render pass attachments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ec177b116a43f1bf8d3e00c1cfcbdd021e38ab7",
+        "description": "vulkan: Rework vk_render_pass_state::attachments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c09c086c120a830496e9d30f289f376a38e275b4",
+        "description": "vulkan: Add a vk_render_pass_state_has_attachment_info() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f62008bff541c7e6eeddf8f0f4e94db591398cf",
+        "description": "vulkan: Add runtime code for VK_EXT_shader_object",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0d225c9e43fe95d0ff23dedf3aa0ae8ff60d00da",
+        "description": "vk/graphics_state: Add stubs required by VK_EXT_shader_objects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "657b8e5264176bf1ce31ac85081234371c4203a9",
+        "description": "vk/graphics_state: Remove bogus assert in CmdSetSampleMaskEXT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ad294202e7b6b3a0fa5506d0a1c468c9b6f62dc",
+        "description": "vulkan: Move the descriptor set limit to vk_limits.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "498d58a5f838ef15af297fea1eba05da0a4cfce2",
+        "description": "vulkan: Add a vk_get_subgroup_size() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af2cea8f84d5fab12fec98f4eaed9d308c2e6657",
+        "description": "nak: Remove assert on nir->info.outputs_written",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "82ff9204abab5267f82a9ce73f9dca1541ef5ee6",
+        "description": "frontends/va: Only set VP9 segmentation fields when segmentation is enabled",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb74aa8515a137be93ecee91f06ba6f29e0ebe90",
+        "description": "frontends/va: get av1 encoding ref frame infos for L0.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4b92fa9e104551d09c894a70f6be394f4e853e4d",
+        "description": "radeonsi/vcn: vcn4 av1 long term ref support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5663221bdbb822bf4860765b080ac6eceb52df81",
+        "description": "radeonsi/vcn: data structure av1 enc long term reference.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d3e7b6e9a74d0a1a0ffe5733c5cea31baa59f41",
+        "description": "wsi/wl: Fix deadlock in dispatch_queue_timeout.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a00f9c401bbe7c537fde2dbf277e0790a52b7052",
+        "notes": null
+    },
+    {
+        "sha": "a2292f53b525a751d32a7114a3152ab4be0e2d5c",
+        "description": "nir: Optimize uniform vote_all and vote_any",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "535caaf3e027963536e48fa5bbb59dc779523e00",
+        "description": "nir: Optimize uniform iadd, fadd, and ixor reduction operations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c63ea755feab96003cc9d079a95214ca0f02bbdd",
+        "description": "intel/fs: Use nir_opt_uniform_subgroup",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f10d1ef372653f80bfa941fa881c5f5981bca7b2",
+        "description": "nir: Initial framework for optimizing uniform subgroup operations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fb37ef9854c77c810210b2d57c5d5f9ae3ac5a1",
+        "description": "intel/fs: Add fast path for ballot(true)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c42830c64a18ec9d69b591640cf8e65976f924e0",
+        "description": "intel/fs: Use constant of same type to write flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b22fff90d521112b5c8b029bc406852cee4002d8",
+        "description": "intel/fs: Enable nir_opt_uniform_atomics in all shader stages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "75de4458a1350ac6f3843e4f8da7a69717c92687",
+        "description": "nir: Mark nir_intrinsic_load_global_block_intel as divergent",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9f44a264623461c98368185b023d99446676e039",
+        "notes": null
+    },
+    {
+        "sha": "56a3f031f407b45d0eb0577c33ae58458886433a",
+        "description": "intel/fs: Delete stale comment in nir_intrinsic_ballot implementation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5da51067273423fd8c1d0259197da973ae1409ba",
+        "description": "nir: Add documentation for subgroup_.._mask",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "727170fee0573d30425f61a95d5dd96c42914347",
+        "description": "radv/ci: enable RADV_PERFTEST=shader_object for vkcts-tahiti-valve",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83efcd6a7212e60728b0c25ce67ad2ca78ed1bf6",
+        "description": "radv/ci: add a vkcts-tahiti job",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fe7e06f5fc70fb1ae8052a1edd2bed6b373ec2c",
+        "description": "vulkan/wsi/wayland: Use dispatch_queue_timeout in acquire_next_image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a00f9c401bbe7c537fde2dbf277e0790a52b7052",
+        "description": "loader/wayland: Add fallback wl_display_dispatch_queue_timeout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df801bec1e6cd58d1a21e955cac5026dd5914f7a",
+        "description": "util: Add timespec_sub_saturate to avoid negative time for deadlines",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a80a23dc49c0c98811b44327623a5f95298d07b4",
+        "description": "tu: Enable UBWC for storage images on a7xx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b9e04f829301b28b9ee7320c1212bad76ad3257a",
+        "description": "tu: Enable UBWC for SNORM formats on a740+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4529b2ea54390fc274d13e19160dfa10a3f5260f",
+        "description": "tu: Reenable MSAA UBWC on a6xx gen1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dcbf61f5dfe313a4e8b832e376c772a4db48a58f",
+        "description": "egl/dri: Use pipe_format instead of DRI_IMAGE_FORMAT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "68eaf820e16e0533d52156e8970893b745182e8b",
+        "description": "st/dri: Use pipe_format from config directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "832d814852cca7b85cf550a9bcbe967ad9206415",
+        "description": "egl: Remove shifts/sizes from dri2_add_config argument",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e66305d681954ce3777bd2b7357f097fc248bfb6",
+        "description": "egl/x11: Compare config shifts/sizes locally",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "273e54391af7e0a89daec778980c3f8a800bcd7b",
+        "description": "egl/android: Remove hard-coded color-channel data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8d153d4c2dde6c5ae704fc96c3e5861d53a1e07",
+        "description": "gbm: Remove hardcoded color-channel data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a10f10c4cede42b9c323c5698f966d36af8801d5",
+        "description": "gbm/dri: Query DRIImage for FourCC directly",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b04b64a21458ea10d0079180b8ec72993770a52",
+        "description": "egl: Use pipe_format for pbuffer configs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "630fda2492f3c2e0d66c60e3543a9bd4350ac37b",
+        "description": "egl: Automatically set EGLConfig ID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "487016796b1c491c9dc86876b9701115601f955d",
+        "description": "egl/{surfaceless,device}: Remove check for EGLConfig presence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e12a55c97981c9be9e105b239e954d2e146dc989",
+        "description": "egl/android: Remove check for EGLConfig presence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac304d0393f2653d5a78f2a1b024b10a8bf45218",
+        "description": "egl/x11: Remove check for EGLConfig presence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "677092191896b0d342f33f8c3472d2ddeed25f97",
+        "description": "egl/gbm: Remove check for EGLConfig presence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bf7ebe6ff817578d15748c06991465f5d5a62ec8",
+        "description": "egl/wayland: Remove check for EGLConfig presence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cbb6f621353912f69880d4f9b3f0473f3d7c6c79",
+        "description": "egl: Fail display creation if no EGLConfigs created",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97c435c926d7742e1002aeadf5d20210f9b6a6ef",
+        "description": "egl/wayland: Remove shift/size masks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7889c9dc92d92c00d979ae1ebf475e7e05d459c7",
+        "description": "egl/wayland: Use pipe_format for format names",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "84bb6d0e0a2105fe43d9eab7178f3340a00feedf",
+        "description": "egl/wayland: Remove WL_SHM_* format listings",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5ac70182e8b4d3a77aab6c743fbafd713a14b361",
+        "description": "egl/wayland: Simplify alternate-format fallback for configs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee04cc5d2baeff5c07d578461f256e7baa02f0a3",
+        "description": "egl/wayland: Eliminate double loop for configs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f63e676370bedd9b49dea5ec65d53782ec190785",
+        "description": "egl/wayland: Use helper to look up visual",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ebdf9ad85cf3d3357c51245da2f4e5c59fd33259",
+        "description": "egl/wayland: Add helper to check server format support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a34d3c290ef9a4001866c394f7e80114f1ac9e89",
+        "description": "egl/wayland: Use FourCC to look up wl_buffer support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a084e2b081882ff027e426e8faddbe1f5497614",
+        "description": "egl/wayland: Use pipe_format to look up configs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ea9a963aa142910ed3a0fcea9060d3a92ee5ab7",
+        "description": "egl/wayland: Fix EGL_EXT_present_opaque",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "9aee7855d2ddf47169270d5d1e3e92ff6e5f65c2",
+        "notes": null
+    },
+    {
+        "sha": "c74f4803911d8cbc9e9617ed79ea9480f335addd",
+        "description": "egl/wayland: Add opaque-equivalent FourCCs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "084fea1e7d17768f55b0313746406c2334d69cd6",
+        "description": "egl/wayland: s/DRI_IMAGE_FORMAT/pipe_format/g",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba3b867552718e1c287a883b487816564e77cafd",
+        "description": "egl/wayland: Query image FourCC for linear copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "57c3343c2d2115cd0151a45261aa1da919a09ea7",
+        "description": "dri/kopper: Flatten pipe_format/DRIImage/FourCC conversion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c462525708d31a8f86e38f8575bbe0d544e3ce6",
+        "description": "dri/kopper: Reorder format tables",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d60415bad5d37d94517a795af05e07ed0e9d1763",
+        "description": "dri/kopper: Add translations for sRGB formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ca0f94c805de29f97658fda95559872ddfb19222",
+        "description": "dri/kopper: Move format -> FourCC translation up a level",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a8cb490193d4011d47f8c1f00702cc05f75a4347",
+        "description": "st/dri: Reuse stored texture format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "858ad38f8ba5810f5e4267fcbf2e6fdbc669a30d",
+        "description": "st/dri: Reuse stored renderbuffer format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "303b935dbd7e289b4996c034bf9c9c7817aa2fd8",
+        "description": "egl/wayland: Remove format-query fallback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "216d4613c3f3073a09bdbcaeb43375d6f4678e47",
+        "description": "st/dri: Store pipe_format in gl_config",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad0edea53a732fecf6ddb8340e724b66275a0619",
+        "description": "st/dri: Check format properties from format helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "402584513707c69773bc64c9232b4e581e68e6ce",
+        "description": "st/dri: Use pipe_format for Z/S modes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "69d64812e20e3b99237e1771cdce24be2d6d2356",
+        "description": "st/dri: Rework depth/stencil format selection",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4816cdd204cc48cdd3724613eb10e6d2326756d1",
+        "description": "st/dri: Add transient HAS_ZS() helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e018c91384bbd89dab141e4cdcd8596b71ae382e",
+        "description": "st/dri: Completely remove mesa_format from config setup",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4515bcf5afc47a221e847d748acbabee83468786",
+        "description": "st/dri: Remove format tables from driCreateConfigs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d3ed00f38ae823e6d27179f1c4718e34d33b6d49",
+        "description": "util: Add util_format_get_component_shift",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b3d419ad24d78162fe6a6f10e1071d2629696b97",
+        "description": "st/dri2: Use u_format to get config format information",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "87955b67aed37ddf8a8724481260cfab430f9ec2",
+        "description": "st/dri2: Pass pipe_format to driCreateConfigs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5cdfc9a811699c87071653ea1381e9db4bc85fa9",
+        "description": "st/dri2: Remove __DRI_IMAGE_FORMAT conversion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e106017863272887976673cf702e90bfe2d4efe",
+        "description": "dri: Redeclare __DRI_IMAGE_FORMAT_* as PIPE_FORMAT_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9891f9cf10e9aec2fabab1a04c92008a990a899",
+        "description": "st/dri: Use correct pipe_resource for GL texture image export",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d71eb60f337789e9204ab90d5f0e28e53002230",
+        "description": "v3dv/ci: remove crashes from expected list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "450b375b69db255902a17758eae59c81c198ede9",
+        "description": "radv: disable VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 with minmax filter on GFX6",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "926d9f1cef12189418258d4812d42193344f4128",
+        "notes": null
+    },
+    {
+        "sha": "1b1afd7b2412b142d140d482e0517aaf1778658f",
+        "description": "iris: make sure DS and TE are sent in pairs on >= gfx125",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d103b76ad68ceb21c309ab2de62c59e4027824a5",
+        "description": "radv/video: add VK_KHR_video_decode_av1 support.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c0e0b7462ccb35843d41ad95f8200315a8d1438",
+        "description": "radv/video: use proper struct sizes for decoder structs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0466453d3199369cb32ccb7e9f8b2039ddca7d32",
+        "description": "radv: rename it_ptr to it_probs_ptr in advance of adding av1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d599391ac9b5510c3c33b655a4d0917a8c2459da",
+        "description": "radv/video: use vcn ip version in more places.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "03f18be6071d758c1261292c717a4d1441fc196e",
+        "description": "radv/video: fix filling out decode operations.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9290ec0bb1e7faf8dc7a54bc24c842ecfe02776",
+        "description": "venus: fix to ensure sfb cmds can get recycled",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d63432012d9189d5f1d8eb8025acfae2463fd449",
+        "notes": null
+    },
+    {
+        "sha": "90e38bbb3b577535a665edd0e8091e7c3a85bdb3",
+        "description": "intel/tools/error_decode: Parse Xe KMD error dump file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7e88176b0b3b955c9e6d7a695f5fb50f84ea631f",
+        "description": "intel/tools/error_decode: Move code that can be shared between i915 and Xe error decoders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f9a5f48113b043ed597e3d815ca8d9040429e7c",
+        "description": "iris/xe: Add VMs to error dump",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c26663eedec1535210f4b1f5638be25eab4f1479",
+        "description": "anv/xe: Add VMs to error dump",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d40c48cac1a04b9100dea5f46fc7f035f590a940",
+        "description": "intel: Sync xe_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e800ab6f7e61ebfe741a14bcad9247e2a4d1f6a",
+        "description": "anv: Implement VK_AMD_texture_gather_bias_lod",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "269d2c4a3f570d7bf92e7df13b42b5f7b7468dbd",
+        "description": "intel/compiler: Enable packing of offset with LOD or Bias",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30ead72e80e5b7ba5c5dfc46261b4d249f4fa382",
+        "description": "nir: Allow nir_texop_tg4 in implicit derivative",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "48158636bf1b0e62ebab4835e1f474866a34c6fe",
+        "notes": null
+    },
+    {
+        "sha": "6f0ab5e4d57f96db2ac70058c1322a9651eb1fe2",
+        "description": "intel/compiler: Add texture gather offset LOD/Bias message support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "79af0ac29a18046a4d02a7f5259e1fa005bb098a",
+        "description": "intel/compiler: Add gather4_i/l/[_c]/b sampler message",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c7f1feebf5e46377df86801d2b3f74004501d97",
+        "description": "intel/compiler: Add helper method to decide if header is required",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2ea041e04a5001c0a82698a78491bf5c75099169",
+        "description": "intel/compiler: Pack texture LOD and offset to a single 32-bit value",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b37b3ba730500877ef33fdf05f74e94ba43b890",
+        "description": "intel/compiler: Pack LOD/bias and array index on TG4 messages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b34b2bdff3a89988bab3d2dc2ebb6a6d86a7592a",
+        "description": "intel/compiler: Adjust sample_b parameter according to new layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4ce848476882c205a69734ca8d69c26a2507c37",
+        "description": "intel/compiler: Trim vector properly till array index",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "73a3257968b6f746f0dc859dd3af2d1410800a28",
+        "notes": null
+    },
+    {
+        "sha": "db0291c235592a7eecceb788ef622e3a630f98aa",
+        "description": "tu: Follow pipeline compatibility rules for dynamic descriptors",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "88db736472b6e9b18d3736a42b038e2a7836b0b4",
+        "notes": null
+    },
+    {
+        "sha": "8c8669007224f67b1cad43c5a319cf4128752805",
+        "description": "venus: add vn_set_temp_cmd helper to initialize feedback batch cmd",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d63432012d9189d5f1d8eb8025acfae2463fd449",
+        "description": "venus: refactor semaphore feedback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3c166710f6bd3f3bd9d146ce3a8266e6ee69a993",
+        "description": "venus: simplify to drop the struct vn_feedback_cmds accessor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa8c7dcb5a466a4b2d6c07eaa3af2b2fdceecbc9",
+        "description": "venus: refactor to add vn_queue_submission_setup_batch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "72fd719698278fe09c0eb95d29abce8036cbd0ec",
+        "description": "venus: massive feedback renamings for consistency and clarity",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3dc608db97660ab5d554a7359e8bab209464eef",
+        "description": "intel/brw: Move workarounds to a separate file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c25803880ef619e437fa55dcf3f46cca6bc96559",
+        "description": "intel/brw: Move lower_simd_width to its own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c989ad09f14b23a4dc9eab0633a557b71b3faa15",
+        "description": "intel/brw: Expose flag_mask/bit_mask fs helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "404630ad2ee67fba4b6410d12c7904584b2c12bd",
+        "description": "intel/brw: Move lower_integer_multiplication to its own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4fe3498e7261780f92b6036b017fb26c5abe3a70",
+        "description": "intel/brw: Move small lowering passes into brw_fs_lower.cpp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbffe124fc40cc3c631d1a2496ef6a0918abaaab",
+        "description": "intel/brw: Move fs algebraic to its own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "df013738dbc7872ebb61fc83431e682821b4775c",
+        "description": "intel/brw: Move virtual GRF opts into their own file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3b7f4726a2da548583fcd92cb82f9bbb34da5a9",
+        "description": "intel/brw: Move optimize and small optimizations to brw_fs_opt.cpp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7451c0f5d678d31b8cc2f711bc4ed2e730e10a8b",
+        "description": "intel/brw: Pull optimize() out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "254312b9dd6fa156f29a4a548ba750d0059bb7ce",
+        "description": "intel/brw: Pull lower_scoreboard out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a5a242210fd4bd02e0f4be0f482a4a4a9e24759",
+        "description": "intel/brw: Pull emit_dummy_mov_instruction out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "755d6e8c44c1d2c4bad3cd0e4511a2d513414a83",
+        "description": "intel/brw: Pull emit_dummy_memory_fence_before_eot out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7e0eec62be1badc1ad953ad45eea5289af1b76b",
+        "description": "intel/brw: Pull fixup_3src_null_dest out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a073116091b33081936763d997ee6733d0cff12f",
+        "description": "intel/brw: Simplify OPT macro usage in fs_visitor::optimize",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de6a79857794d126962ed981d3c772eb1317fba9",
+        "description": "intel/brw: Use references for a couple of backend_shader passes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19b28ee44afe30c32469cd7af9ea384c2ea58ae5",
+        "description": "intel/brw: Pull lower_load_payload out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7397d3c950ae05b6d27839300ab331946b32457e",
+        "description": "intel/brw: Pull lower_find_live_channel out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "619888e077b4620f93343d69fa33c87b8da7bbdd",
+        "description": "intel/brw: Pull lower_uniform_pull_constant_loads out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b007195131999d647b677089c8c84f49e2367e7",
+        "description": "intel/brw: Pull fixup_sends_duplicate_payload out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06272d488306675ec1ee7207beb0c1c1b69ea8b2",
+        "description": "intel/brw: Pull lower_regioning out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "89866b62591411082e9125404716a1a94e01c179",
+        "description": "intel/brw: Pull lower_derivatives out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b7da31c45be7e1777bdcca94b3ca871755f2f5f",
+        "description": "intel/brw: Pull lower_sub_sat out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "058b723d14c4f5960845b48961940b737f6783ce",
+        "description": "intel/brw: Pull lower_integer_multiplication out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8dd8b461e08f95c46b3a953b65bffb2a45f446a",
+        "description": "intel/brw: Pull fixup_nomask_control_flow out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bdfa5230fc77d2b515343d47af2336d8e6b2b85",
+        "description": "intel/brw: Pull lower_logical_sends out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "422b4bead6988eac3540e8054807f7b288cb4440",
+        "description": "intel/brw: Pull lower_barycentrics out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af2b3c478c6e088a8758b89bad30d5bf28699d72",
+        "description": "intel/brw: Pull lower_simd_width out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14954cbd5843008c8d070db621dbb11040e511d4",
+        "description": "intel/brw: Pull lower_pack out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6b82b0270c2e3dd078345384156d4af566a1928",
+        "description": "intel/brw: Pull lower_constant_loads out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a1c35563ae271117b15adcc9a56eb2124efe62e7",
+        "description": "intel/brw: Pull register_coalesce out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce10130f09fe58001599f16d2919c091914f6290",
+        "description": "intel/brw: Pull remove_extra_rounding_modes out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "73fe65845652f97883a609f54b935cc754f470c0",
+        "description": "intel/brw: Pull eliminate_find_live_channel out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f314f89f752cc788c97c3d5f5efc321e46a422b",
+        "description": "intel/brw: Pull opt_zero_samples out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "838d6d5cd2ceb492057fa8a8b2bba18f1b1075c6",
+        "description": "intel/brw: Pull opt_split_sends out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8dcbdc8fac605a7e533628964702aeda872895bb",
+        "description": "intel/brw: Pull split/compact virtual_grf opts out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1947a386800a15706d0690f214f9349815f873f9",
+        "description": "intel/brw: Pull opt_algebraic out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d849c2ecff67f49fec037f1e947605a7d8e649de",
+        "description": "intel/brw: Pull redundant_halt out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96c4aa85455a5331e05088d5a6c2a9c930e6805f",
+        "description": "intel/brw: Pull peephole_sel out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10489b418c6d0ec045fdc8eaa76d0f8ae413d73c",
+        "description": "intel/brw: Pull bank_conflicts out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13c312431cc17ddffbd1e799d31cdcb232501474",
+        "description": "intel/brw: Pull opt_cse out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4f09ad9dee2b9231268dd5d32895268b33d89741",
+        "description": "intel/brw: Pull opt_combine_constants out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59bff8adf42b1e1c053bc9636def3be984fff214",
+        "description": "intel/brw: Pull dead_code_eliminate out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1bd175f4583681092bb5209bfadd24b48493b102",
+        "description": "intel/brw: Pull opt_saturate_propagation out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dc33a8fb06fcbe9797fb1cbc62ce8cb5986fb8f3",
+        "description": "intel/brw: Pull opt_cmod_propagation out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a3329a6c4f7860a0c96d124c0cb3366442d58c4",
+        "description": "intel/brw: Pull opt_copy_propagation out of fs_visitor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b73d163d48880ebdc7daafeb4e19775382da212",
+        "description": "intel/brw: Remove Gfx8- passes from optimize()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1a4f220c29b8ac9d8dbc83eb829e9780cbc1415a",
+        "description": "intel/blorp: disable use of REP16 independent of format",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1adb2e9e959d9de9601b9d5dc8d733a065ac1d1d",
+        "description": "panfrost: support multi-sampled image load/store",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9831a4d34aa9962550bbcb0dad63142d2cccd72",
+        "description": "panfrost: add lowering pass for multisampled images",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a8a4bcec362108bf41f34166e8fcff60e6ec7064",
+        "description": "wsi/wl: check wsi_wl_surface's validity before use",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9a00a360ad8bf0e32d41a8d4b4610833d137bb59",
+        "notes": null
+    },
+    {
+        "sha": "8ab337047cda1d23f624aa5839742094c3700d2c",
+        "description": "nvk: Advertise VK_KHR_maintenance5",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "509fdf4fe4fc464be6c06a12f8d9e534d6673410",
+        "description": "nvk: Use VkPipelineCreateFlags2 flag names",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a72bcc0a26dd401d5d0a5900fb147fd7b0eb8673",
+        "description": "vulkan/meta: Handle VK_REMAINING_ARRAY_LAYERS in blit and resolve",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ed3aa7b1a8d892061058ed8b383e7d23f778ba4",
+        "description": "nvk/copy: Handle VK_REMAINING_ARRAY_LAYERS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a120022b022b69372464dde759b2a64a94f2b25c",
+        "description": "nvk: Handle missing gl_PointSize in the last geometry stage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4287d04e9832196e5fe23c7bc640b0079910ae04",
+        "description": "nak: Add writes_point_size to nak_shader_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "828b3c18fbf54d8e63ab40f2f7affca25a5cb63b",
+        "description": "nil: Add PIPE_FORMAT_R5G5B5A1_UNORM",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6825902bb6146a36248cb7d53c8fa2469f73a048",
+        "description": "treewide: use ralloc_memdup",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66b00e2966d348a298ebcb4881c01b538058a2ef",
+        "description": "util/ralloc: add memdup",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d964f57a48994f3f737ac1885a6dc5b8a56c7edd",
+        "description": "util/hash_table: add u64 foreach macro",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cc1501628fd98bbf0f2a56d149347effb688722d",
+        "description": "nir: Clean up divergence analysis for TES patch input loads.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "870a2e419758478a117685ff01a88320ce1cba49",
+        "description": "nir: Cleanup divergence analysis for mesh shaders.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9553d67373830e6e77f7c8556523f956aa4b8e32",
+        "description": "nir: Fix divergence analysis of load_patch_vertices_in.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "537c0029ddece2bb0f5c56947ff7e92258077a92",
+        "description": "nir: Fix divergence of reductions.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9548cba8ab54e6256bd644f1cd177d1485ac6331",
+        "description": "anv,hasvk: use vk_index_to_restart",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9da77e6c9748f4ba166181885f79c912d23af607",
+        "description": "tu: use vk_index_to_restart",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a97966b840f728d6894d75ea3924b7108d9fa1f6",
+        "description": "vulkan: add vk_index_type_to_restart helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d00edda00041de0492a5097353407f6d1781df3",
+        "description": "r300: fix memory leaks when register allocation fails",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "54f6e72b27154219be237690453bb9c3b57cd3ec",
+        "notes": null
+    },
+    {
+        "sha": "b11ecacb9377240a81c24bc0eca3a110f9642bc3",
+        "description": "r300: fix r300_destroy_context() related memory leaks",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e01f86c67b0bd955758366827cb8322aa1bec263",
+        "notes": null
+    },
+    {
+        "sha": "4071c399a27932ea9253eb8a65d5725504bac6f3",
+        "description": "radv: compute the total LDS usage in gfx10_get_ngg_info()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d85311b120605d1c3c6b9c0a681e8ea59323ab90",
+        "description": "radv: compute NGG scratch LDS base in gfx10_get_ngg_info()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0570d40d5b367c4d44fd8e89e68dafd2f79b7327",
+        "description": "radv: determine NGG culling info before NGG info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3863a22bbf3c322a4370dea6bed69bbf51028fa",
+        "description": "radv: pass radv_shader_info to gfx10_get_ngg_info()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4db0952639ec72f7784d87ccd3a6cf47e7bdb6be",
+        "description": "radv: pass gfx10_ngg_info to gfx10_get_ngg_info()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "beb2e7df6823fe291e4b4f313fbed903891beac9",
+        "description": "radv: determine NGG query info before linking shader info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64f46c83a34a70090de36cb6dd387f0a10f656d4",
+        "description": "radv: use so.num_outputs to determine if NGG shaders need XFB queries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7f8a84a0246e62b30c2f8587d169c7d7ad82cb91",
+        "description": "radv: do not set gs.has_pipeline_stat_query twice for NGG GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c1e82e309f2e0bbf50edfada6bb10651308aa36",
+        "description": "radv: remove unused parameter in gfx10_get_ngg_query_info()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9169881dbd1f72eab65a68c2b8e7643f74489b7",
+        "description": "anv: add missing generated file dep",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5816b5961f5bc0c034450ab6f1779a64f31e8293",
+        "description": "zink: use new flag to determine whether swapchain readback cache is usable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "01c9199cb8cc32ff6d6eda993c173bdc37081aed",
+        "description": "zink: only update swapchain readback cache when necessary",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fb83c0935948c3bf0717e0a3d9ea3ba4cdf4f6c",
+        "description": "zink: only update swapchain readback cache on create if necessary",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "417a1986fb17ae3d65bd57a8fb3efea7bda90752",
+        "description": "zink: set and manage a flag indicating that swapchain readback needs updating",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "114a5da7905520ec8626beee885572dc386a383c",
+        "description": "zink: update swapchain readback cache on create",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7486aaa1c0ea8dda75ecddf631ebab9064d2b161",
+        "description": "zink: make readback attempts count towards ZINK_READBACK_THRESHOLD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d5d5f54fe9d9065c2476e520d8007c76f38b1839",
+        "description": "zink: add a swapchain readback case for reading differently-acquired image",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae80f9ce65d46c0680d2c5b4e60f3b9a9f879a8b",
+        "description": "zink: make kopper_swapchain_image::acquired the resource that acquired it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d2ed77072cfa354862843789f30b7702feeb9c70",
+        "description": "zink: flag acquired swapchain image as readback target on acquire, not present",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3a2e2f9f2e4be1e11792c01f3b9a2748dce6acb",
+        "description": "zink: lock buffer age when chundering swapchain for readback",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "c123ab213797c1d0d2a34e57c503428261324cc6",
+        "notes": null
+    },
+    {
+        "sha": "9fa2d9bd50e6d464e102111c66a14cb1b20c5e0b",
+        "description": "zink: fix swapchain readback conditional",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50b671c1c39ebae5131723b8e4e10a6653f6c464",
+        "description": "zink: fix (dynamic rendering) execution of scissored clears during flush",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e6020355969c8f6a78e1698b2c31539055e5698e",
+        "description": "zink: clamp in_rp clears to fb size",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e032e7f6cce48acd840a6439a864b82d36851830",
+        "description": "zink: don't pre-init null fbfetch info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5fdbb0868ac5eb73055745de57575c694ae90a46",
+        "description": "zink: start out with 256x256 sized dummy surfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aaf78eadf3734dfcc43faa5c7e6a257accaf09db",
+        "description": "zink: create/resize dummy surfaces on-demand",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ea64063c8e4a99a34d70cfc415ed6d4663996b5",
+        "description": "zink: break out null fbfetch init for descriptor buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "263d26202558a503610470209a07850c4ee54152",
+        "description": "zink: also set null fbfetch surfaces when no fb surface is bound",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f3347a4603b55e2650071765767725b77379bc0b",
+        "description": "zink: don't pre-init dummy fbfetch surface when missing nullDescriptor feature",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe13841a99a39e8acf1e73c8495ccfcc91ffa81e",
+        "description": "zink: move flagging rp_changed in zink_update_fbfetch() to caller",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35185ad9df8efa84981607cec3dd495c875a534b",
+        "description": "zink: assert that batch_id is valid in zink_screen_check_last_finished()",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3283415bbd9d291a20a2e02e1a76f6b1b4984eda",
+        "description": "zink: fix longstanding issue with active batch state recycling",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16103b61e7dae3ac426fcc523a1a9b18a3c71e8e",
+        "description": "zink: only scan active batch states for free states if > 1 exist",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2179a7f4d7da3becfebe4f520e0db3471fc3ea3f",
+        "description": "Add Xilinx ZynqMP KMSRO entrypoint",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4499871e34cd316fcafe66e621828c5fd1d5488f",
+        "description": "nvk: Advertise VK+KHR_incremental_present",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b3fd66c8899a1e8946173ef805b3b427b3d60eed",
+        "description": "nvk: Only expose VK_KHR_present_id/wait when we have WSI",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "726ae2570ce27a2d417d4a5442dcb56b461c106d",
+        "description": "v3dv/ci: update expected list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "423add61e2d5b6ab6b5505d1feec01b93609f8fc",
+        "description": "gallium: lima: Don't round height when checking alignment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "642b12baef65889000c47d0efd8f0cdf2e49cad5",
+        "description": "anv: limit depth flush on dynamic render pass suspend",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "abeac8cf96d9fbba3126339b2a62005ba8fd2dfc",
+        "description": "intel/nir: only consider ray query variables in lowering",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "373130a66c9f3ea0cd8945e5c5cc467a3b5ff075",
+        "description": "intel/compiler: Remove has_render_target_reads from wm_prog_data",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10230d2eec01c5446a17db19150b5585d71bab3c",
+        "description": "intel/brw: Assert Gfx9+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40437bea860bd478692bb769789c1007dee5f5e5",
+        "description": "intel/brw: Remove pass test cases for Gfx8-",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c3165f0ff53fe370a2dc88f25ec2d5ad4df2457",
+        "description": "intel/brw: Remove EU validation tests for Gfx8-",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5b67d4bea4859404c170b55c3759c63540bf814",
+        "description": "intel/brw: Remove EU compaction tests for Gfx8-",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9bc670509c51dd2938d6fcd602d9c736622f01c0",
+        "description": "intel/brw: Remove assembler tests for Gfx8-",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80de55801ef19912902ae8878ae1a30ecc129583",
+        "description": "intel/elk: Remove tests for Gfx9+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f508a5dac0eba281e76a837f58675960dd52fd8",
+        "description": "freedreno/registers: Add some HWCG regs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e7ee2c8ca51107716dea3368c128bcdc39d5e90d",
+        "description": "tu: Give suballoc bo's a name",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bcc5ddcc3b38df8a4ff6eb54127175ef0c6ec2dd",
+        "description": "freedreno/crashdec: Find potential fault buffers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "32db7a9533ee53635fc801340dfb48cd238f2145",
+        "description": "intel/elk: Use anonymous namespace in fs_combine_constants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2bc18fe46f2d312683a622f9601384492fc942ef",
+        "description": "intel-clc: Use correct set of nir_options when building for Gfx8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c83f92087bb9678ae6cbbd4f328360565b3e0b9a",
+        "description": "intel/elk: Move nir_options to its own c/h file pair",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f83b1dddc122b7560e49b4ccbc6e7d704b14caf",
+        "description": "intel/tools: Add extra compiler device sha only for Gfx9+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8abfbc9ccad8512ab5591b65da99562bdddd4587",
+        "description": "intel/meson: Rename libintel_compiler to libintel_compiler_brw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "255a411450ea062ede90a23189abc5f3f8e25a1d",
+        "description": "intel: Use _brw suffix for genX headers that rely on brw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23e0cff90701e27e43b8ffac99c06169a76f406a",
+        "description": "intel/tools: Add ELK support for intel_hang_viewer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d641ca5b866df91c5a9ca69ee11858e6e58b3d25",
+        "description": "intel/tools: Add ELK support for aubinator_viewer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9d379f08afed3f952d59a06b68a74061e8be6760",
+        "description": "intel/tools: Add ELK support for intel_hang_replay",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9a6b49b4bcdbff6a72f34981dccafca4b716543",
+        "description": "intel/tools: Add ELK support for aubinator_error_decode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5338a24fe003cd341192079d59b5bbbf0c627e4e",
+        "description": "intel/tools: Add ELK support for aubinator",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9796b56e41cff161bde25840e22ad3b5ad8f8bdd",
+        "description": "iris: Use ELK compiler for Gfx8",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c3b65ccf9c07929fad00d71eb5bd5c0c8f35cfa",
+        "description": "iris: Rename screen->compiler to screen->brw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9294afe7fd74915edd4fe7a86d54dcc50b307861",
+        "description": "hasvk: Use ELK compiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4968d1a92570397c5766de903161276a66178aee",
+        "description": "crocus: Use ELK compiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0669210ef4274bb68aaa92402ed633290edd60d7",
+        "description": "intel/decoder: Add ELK support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "80cfc3d71279d675c8ff2fc64372cbd396594ce6",
+        "description": "intel/blorp: Remove Gfx9+ references in elk code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0e582f0dfdef9d6a3f254c45978660ae2ff96686",
+        "description": "intel/blorp: Add ELK support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f5149e025e8a6ff9e0cfc393247ccc06dba8436e",
+        "description": "intel/blorp: Explicitly include brw_compiler.h header",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4eb63a01375ef1f62c709de79c092230c240731a",
+        "description": "intel/blorp: Move brw specific code to a separate file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4866649052354551e7b3248bb8ae4188df55f4c9",
+        "description": "intel/elk: Create separate header for opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "77f52417c5ef06f1a22840361f2a7e76640b694c",
+        "description": "intel/elk: Don't include elk_eu_defines.h in elk_nir.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6648e0ebd37dfc795e2a20d0fb2d9015d40d6252",
+        "description": "intel/elk: Rename symbols",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f677485ad48265eaf10ec9e749ed0bac158e176c",
+        "description": "intel/elk: Rename C++ namespace",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ed89a42f7a03d5346c4de6d175193f48f3445455",
+        "description": "intel/elk: Update doxygen-like file comments",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "783f3d0b4f98ddd531474c4e20d0102f1970f2ac",
+        "description": "intel/elk: Rename header guards",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e6022281f273287499e9012f9a7c3dd87a733e5b",
+        "description": "intel/elk: Rename files to use elk prefix",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b02712efc2d7803be64be946b46e76ae243cd8cc",
+        "description": "intel/elk: Remove DPAS lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b743ab7acc86ee1346e13e6aecad03ca34a64b40",
+        "description": "intel/elk: Remove stages not used in Gfx8-",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a57012ff487d077a86478bc764697f2f27b8ff3",
+        "description": "intel/elk: Use common code in intel/compiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dcf29202d48ff017e22d6b85e63be908cb6c92fe",
+        "description": "intel/elk: Remove a bunch of files that don't apply for Gfx8-",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06b553f02c9856ba8028bc55b94c8d787f01a438",
+        "description": "intel/elk: Remove compiler specific devinfo hash",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0083585fc5b42f7f25801f80aadaad401ed2eaac",
+        "description": "intel/elk: Compile ELK library, tests and tools",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d44462c08d8858a4ab2dc37b311cc69501adb0dc",
+        "description": "intel/elk: Fork Gfx8- compiler by copying existing code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a9214460eec38500919cd0eec5513dce987ffb32",
+        "description": "nvk: Expose a host-visible VRAM type when we have REBAR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f5cb1eed26ff809e732400c69c09d9dae4a34dee",
+        "description": "nvk: Upload shaders on the CPU when we have ReBAR",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ed7f8c54ef4ff22fee6ffebe05245d01d118fde",
+        "description": "nvk/heap: Upload shaders on the CPU when we have a map",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d4623da9a35ee48c8e69bc1487b5fc60280173b3",
+        "description": "nouveau/winsys: Getch the BAR size from the kernel",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "85849ed9cb6ee802ae6917d8fa78cca86b41fb85",
+        "description": "nvk: implement EXT_memory_budget",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db2162efa6d70e8e135a23ab74a6a0f0a4ba4270",
+        "description": "nvk: Add an available query to nvk_memory_heap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbb458be8d9c01563de2022e5f9c9446fa858181",
+        "description": "nvk: Use 3/4 of total system memory for the VRAM heap",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9bd005c441cc16fba6e2392dd64bf6caba1bc70",
+        "description": "nvk: Add a hand-rolled nvk_memory_heap struct",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a8c60d67485ac2b168e06f6355239e06fdf24fa",
+        "description": "nvk: Add a nouveau_ws_device to nvk_physical_device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b887c9ba2c45ecb1ac945e0d0973ab05cefa9d73",
+        "description": "nouveau/winsys: Add a vram_used query",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e08a849367cd7de4f018d634e7dbe964361cbde",
+        "description": "drm-uapi: Sync nouveau_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "028080c716c95b51af23ff21c9654ee29900d45e",
+        "description": "isaspec: encode.py: Include util/log.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9abb7ff6ef35de3fa2975fd1c1b4a76769a7804",
+        "description": "glthread: generate packed versions of gl*Pointer/Offset calls",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24f14f8daac2268fc650c81ad4c666fb7f21d09f",
+        "description": "glthread: add a packed version of DrawElementsUserBuf",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c566df8b39e0554f001fbcb7e15d14a1e313b98e",
+        "description": "glthread: add a packed variant of glDrawElements with 16-bit count and indices",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5925a864b539bfce60d6ff771c97795bfddb13da",
+        "description": "glthread: rewrite glBindBuffer packing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f9b5548396f194de7871abaf711518a262ec83a",
+        "description": "glthread: use marshal_count instead of count for more functions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8721fefcde8ae008836ce2786c977c4001846e9",
+        "description": "glthread: don't check cmd_size for small variable-sized calls",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "798f4307778560d5a0127cf2ab55c636d496e4a7",
+        "description": "glthread: deduplicate batch finalization code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d70c21d82f7e3d631379bfbe99bb7cc389caa10",
+        "description": "glthread: pack uploaded user vertex buffers and offsets better",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97532db988f55743d498a1fe3f9e30f9cb549b2e",
+        "description": "glthread: fix multi draws with a negative draw count",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eda0b9f8d4cb36a487667947eb0b2ea0b034ab37",
+        "description": "glthread: pack glVertexAttribPointer calls better",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ad34c932cdf9583f27b35a948a90c37c45c27889",
+        "description": "glapi: pass pointer size to python for glthread from meson",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "610bc4d115b6ece70a2d1278d61649547fe576d0",
+        "description": "glthread: remove \"if True\" from print_marshal_async_code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2994739682fa7f4930b4d2168c63e83539f2d44",
+        "description": "glthread: separate marshal code generation into print_marshal_async_code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d796de15720b0c97600495ec1c78e37307a3579",
+        "description": "glthread: separate unmarshal function generation into print_unmarshal_func",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd6b0ea015bc96fd37bce0641363ced8fb5fa7ea",
+        "description": "gltrhead: merge 3 blocks conditional on marshal_sync in print_async_body",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e9819744b32542b3070e83ef68f38cf9bd7929fc",
+        "description": "glthread: precompute fixed_params and variable_params lists",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6eef0c60f806e00694fceb1d734e0d72c478f4b8",
+        "description": "glthread: move global marshal_XML.py functions into class marshal_function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aea16b5ae9da8b8a4955058544b155fc26e2e6af",
+        "description": "glthread: sort fixed-sized parameters before returning them",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ee0d869d6696f49baad9cee04dedb9d946f4fc77",
+        "description": "glapi: fix type names for glthread and handle all types",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12754aec1a2a6b5a99075b2c37159d62a6b7260f",
+        "description": "glthread: rewrite glDrawArrays call packing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e5d91671e03bcf14133dcd4ff79b376eb70ecc9",
+        "description": "glthread: rewrite glDrawElements call packing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "99f8f01dfb97e44e144ec0c91d80494e969c2464",
+        "description": "glthread: pack the index type to 8 bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "15bc7e1d6258fca2c970384463726ab08aaecba0",
+        "description": "glthread: pack the primitive type to 8 bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "39edcd695ab5820ffad3d4a070dafa6578c1b448",
+        "description": "mesa: deduplicate is_index_type_valid code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "259a0a9aeb9d734cd51eef1f66878fb9c3708f89",
+        "description": "mesa: deduplicate get_index_size_shift code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1388be4d39714c46f03af2d784272a0cde818690",
+        "description": "glthread: pack \"size\" in Pointer calls as 16 bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "13a8efcb2c3b5715e5fa74e54a42d2e78c992f87",
+        "description": "glthread: clean up how vertex stride is packed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "617cdedd35a89f7ac5e3c9b018e930dbba6e4762",
+        "description": "glthread: remove cmd_size from constant-sized calls",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "acfefc1f14792ae632c8b764b6ab99cf9cd36b30",
+        "description": "glthread: add no_error variants of glDrawArrays*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "138804fdfce719ccb1e1f5b0a448e4e19c414bdc",
+        "description": "glthread: add no_error variants of glDrawElements*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c52e1f916a7753ef4adc11a4c9232685803d9499",
+        "description": "glthread: use _mesa_glthread_fence_call() instead of duplicating that code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "47d589e7d4f63db5252f26b82bea3cbdd7d626ef",
+        "description": "glthread: re-enable thread scheduling in st/mesa when glthread is disabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3ceec6cd8533a5a5f3ccaf687308dee2f097a99",
+        "description": "vdpau: Refactor query for video surface formats.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "174b715391c4e571ff39174174f315bbec12738b",
+        "description": "gallium: Add Renesas rzg2l-du DRM entry point",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d096523af095f657b93ee66934f8cafe54abf228",
+        "description": "rusticl/kernel: make builds private",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14ccfb41bcfca28f854d760ad9eed4a4b0eec2c1",
+        "description": "rusticl/meson: remove -Aclippy::arc-with-non-send-sync flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ce06bdf91684c186654b8ded4ce5adce82d9b359",
+        "description": "rusticl/icd: verify all cl classes are Send and Sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2029030070392e103951c0bab032bf0b20663dc",
+        "description": "rusticl/kernel: make it Send and Sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59cba7075176ea482d667d90fbc5afb5829c4806",
+        "description": "rusticl/spirv: mark SPIRVBin as Send and Sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17e97a8f06a53ff4e16bd8592e55f83030a0b920",
+        "description": "rusticl/event: make EventSig Send + Sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a97108d3c7a7ebfa091efb8d236113d862794eca",
+        "description": "rusticl/memory: make closures Send and Sync",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa3b44c02ba1cf8ecc5ec1fed0c05dd4f432e213",
+        "description": "rusticl/memory: store host_ptr as usize",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1753b59cfd98c7bb69b952e17e53eccecf4c66aa",
+        "description": "rusticl/context: complete conversion of SVM pointers to usize",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ebde7d5e870d7d0d0386d553cf36854697e17824",
+        "description": "tu/a7xx: Write even more magic regs to fix rendering issues on Android",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "38ffdb883df97db7c916a8122ccf65b9ab261c41",
+        "description": "rusticl/device: Verify for PIPE_CAP_CL_GL_SHARING when enabling gl_sharing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d43f9f9c60c6a0ade147c5dcaad1a33ed5c6b9f7",
+        "description": "radeonsi: Set PIPE_CAP_CL_GL_SHARING to true",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6e7d1725a33a2a74cc7b9f267a21c54ed520bafa",
+        "description": "iris: Set PIPE_CAP_CL_GL_SHARING to true",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12f1a4c311ce45835409c20ce76f39d3dcf950ea",
+        "description": "gallium: Add new PIPE_CAP_CL_GL_SHARING",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "50f6478e3dab9e355fe65203bd486ae4cc5c6702",
+        "description": "rusticl/gl: Bump mesa_glinterop_device_info to version 4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7272a6f245b9c30d215d58ff948cdfb294f3e28",
+        "description": "mesa/st: Skip querying PCI values in interop_query_device_info if version >= 4",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "89622f5089bc62eb976a619f7640414568be00a8",
+        "description": "tu: Use common physical device properties infrastructure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4c40fc89c7e53a2c0f2f78578fe10b71a4e27f1",
+        "description": "tu: Add workaround for D3D11 games accessing UBO out of bounds",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a6836611e39cf00c32b6e189ca7eb2f370d68fe",
+        "description": "egl/wayland: Flush after blitting to linear copy",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "58f90fd03f4aaf2ee19010e9cbd9cee2deda9711",
+        "notes": null
+    },
+    {
+        "sha": "f890b515ef2a570e3d4a1f9466521e7bb0869bea",
+        "description": "nvk: Don't use WAIT_AVAILABLE in nvk_upload_queue_sync",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "2074e28a0d6aa65d2a979ba6bae9012797dd3352",
+        "notes": null
+    },
+    {
+        "sha": "6767ad9c86bde9bebbf43b3c4649f49cb4dae520",
+        "description": "meson: Enable d3d12 in gallium_drivers by default on Windows",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a6de45bd55eba358c8a983e44a146e4b437c623",
+        "description": "meson: Enable zink in gallium_drivers by default",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b9c0e376816e44f665473704128f293986a7ba1",
+        "description": "zink: lower unaligned memory accesses",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "0288cb0a0c471fbef07d1dfc1cae843c5396d8e1",
+        "notes": null
+    },
+    {
+        "sha": "944ef1771e19b2eb5b0ffc8017652a155a4838e4",
+        "description": "nvk: disable shaderResourceMinLod on pre-sm70",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a7166386db714e37df909f1c805cc950f4c77e9c",
+        "description": "nak: fix tex offset encoding on SM50",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59d6645c6bfe59abb819421f966270a3f1fc0b28",
+        "description": "nak: fix lod mode encoding for SM50 tld op",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "639a9a1c05e762cbb9a29a5ff291ce6df0e239a1",
+        "description": "amd, radeonsi: Lower minimum supported video dimensions for AV1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d95c30b6ec34c85ff8558db1515b186946811512",
+        "description": "ac/parese_ib: Handle more packets",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ebbbca005ea943744be460098d6bfc7dcbeccb0e",
+        "description": "ac/parse_ib: Handle 32bit PKT3_DISPATCH_INDIRECT addrs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fea21e5649642df21c9d35e5bde986a2c8372d61",
+        "description": "ac/parse_ib: Annotate addresses with UAF/OOB info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "badd2131b5e70dbd491ef1c8736c408800eb41ed",
+        "description": "ac/parse_ib: Dump the ADDR field of PKT3_SET_BASE",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "160d18b2735959dd957824c58ec62cf499805574",
+        "description": "ac/parse_ib: Add and use print_addr",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dfe331930c63a5a245b90740061d47a174eb10eb",
+        "description": "zink: don't destroy the current batch state on context destroy",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b06f6e00fba6e33c28a198a1bb14b89e9dfbb4ae",
+        "notes": null
+    },
+    {
+        "sha": "dd0f6d70bac1f7e0e188552e53b444086d6bddb7",
+        "description": "pan/va: Add missing valhall_enums dep to bifrost_tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "439fce0c176b1769436ff17ba6a15df177232ba9",
+        "description": "panfrost: Add AFBC packing support for RG formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3244135fa84802ff852ab3394364691f5e93bf2",
+        "description": "anv: Set timestampValidBits to 64bits",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3004923ae38fcd21b5d0f0289e84de90d32c3ce1",
+        "description": "radv: add support for conditional rendering on the compute queue with DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f843027c22c92aabdf4732047dcaea4373be7e94",
+        "description": "radv: store/reset conditional rendering user info in the helpers",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3fed272da7eb1895f726e369ef947f4394dde957",
+        "description": "ci: Update llvmpipe trace checksums",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "41b5ff46aadb8aa80d3d7956bac48a3bdd1fbf86",
+        "description": "lavapipe: Advertise VK_KHR_shader_maximal_reconvergence",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4d7beb22fae3fe10aed86066ee9d2d9536625a72",
+        "description": "gallivm: Consider the initial mask when terminating loops",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eb3c96d5ed4fe8e57d8d225fa6e740282b510a8f",
+        "description": "llvmpipe: Use full subgroups when possible",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "277a5856e204bcb8e7a2dc322d16a4072ebb4ba6",
+        "description": "v3d: Implement GL_ARB_texture_barrier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "51ccba82ce2e016a131186821409c5316c2299ec",
+        "description": "v3d: Early return if job is not writing the resource",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f138819f44f2a392163569be4b6cd2519ecd93a",
+        "description": "v3d: Only flush jobs that write texture from different job submission.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7cbb47a86ffee9d6c98e024ceeb6dc9bc00e8323",
+        "description": "v3d: Fix indentation at v3d_flush_jobs_writing_resource",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c41f6ad7649c8d1b8f4d6f5641bb439311f41538",
+        "description": "mesa: deal with vbo_save_vertex_list::modes being NULL",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "9aa205668bcbf701f8f694551c284cd8e4cc17a3",
+        "notes": null
+    },
+    {
+        "sha": "9a00a360ad8bf0e32d41a8d4b4610833d137bb59",
+        "description": "wsi/wl: flush connection on swapchain failure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f9787864e0e3f3fa206dd4b7b57ea75d15857c6c",
+        "description": "radv: remove a TODO about adding mesh/task queries on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35e0c88f490d3c50aff11e49a05b7438d4fcf398",
+        "description": "radv: add support for task shader invocations queries on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b24e07e9edf779ec80399f55c6e91f4825b3a7f6",
+        "description": "radv: add support for mesh primitives queries on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a6c18f503310933d07d7b3c8f3c437fbb338d27",
+        "description": "radv: only enable emulated mesh/task shader invocations on GFX10.3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "babb82d81a38c46c82a75d84081a3eee21d50e81",
+        "description": "ci: Adds /usr/local/bin to PATH at piglit-traces.sh",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c1418dcb3d6996029bdfb5a6e1e7f450183bc290",
+        "description": "radv: re-emit more states when a shader compiled separately is bound",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dc42ad4c6a089ec4d10fe7488f4fcd2a5514006f",
+        "description": "radv: simplify emitting VGT_ESGS_RING_ITEMSIZE for ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "78be19fc72f3c85aa54717d87c4a48b35fb917bf",
+        "description": "radv: rename radv_emit_shaders() to radv_emit_graphics_shaders()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "76ccf7158754aeab0f8a256f02da0f064d11753a",
+        "description": "radv: simplify binding the GS copy shader with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b23e9d89dd285f3bc33a44dc669aebf2fbc1f56",
+        "description": "mesa/main: allow GL_BGRA for FBOs",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1d595c7cd4aefc7baf1942626f53bec8f6699f7f",
+        "notes": null
+    },
+    {
+        "sha": "fa34241932998836d7fdf8b52b8f97a5fa5af8cb",
+        "description": "intel/ci: bump anv/tgl fraction to 6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da5a6d185cbeb7680d65322bf188b99acc9a440a",
+        "description": "ci/anv: add more testing for optimization paths",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "59b0f7b6b7aaa87cabbcad2f7501efeb86b7ad0f",
+        "description": "radv: free NIR shaders when creating linked shaders with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "77f036d574c04afcff60aa27f845aa95df32d4ba",
+        "description": "radv: fix a big memleak with VK_EXT_shader_object",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e88a5842b237e9ce95c7b8b6fd402c2ec037bf38",
+        "description": "radv: remove the union in radv_shader_object",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9ae8f0f9d7444cd54d817bb2bfff59b8fd6e543f",
+        "description": "radv: fix indirect dispatches on compute queue with conditional rendering on GFX7",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5c03cdbd02a69884ce759e0cbd0cf76dc212e2d3",
+        "notes": null
+    },
+    {
+        "sha": "776f4523f916a0acf55a0baa1e65dc52a6b08b89",
+        "description": "radv: fix binary shaders compatibility with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f123a04256d92d6a7d9cfc0cab9e1ef9f3e3cb72",
+        "description": "radv: introduce a per physical device cache key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c303d399ffd4a03b7a876f4a6b48128846edb76d",
+        "description": "radv: initialize disk cache slightly later when creating a physical device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0543394bfa7908e1c4d6bb97deedd6ee3a954ffb",
+        "description": "radv: move mesh_fast_launch_2 to radv_physical_device",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0f0fa64eed06966f2f30a605c200eec0e9a08242",
+        "description": "glsl: move some lowering to the compiler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "82d617e8b13dbc7e5467cea7ec4507a5f5daf35a",
+        "description": "glsl: fix potential crash in expression flattening",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac45d893d62eeae7525953d1b36c4f3f93a6b01e",
+        "description": "zink: handle stencil_fallback in zink_clear_depth_stencil",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e3d4897dfeed727990dbf4ca8a055204d8f5d1b1",
+        "description": "anv: flush query clears for all gens",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "f733215c12438c8902fdc819376072b4cc9fb48d",
+        "notes": null
+    },
+    {
+        "sha": "62f65f4bfdae169de7842f2577dca5f8160616f4",
+        "description": "egl/dri2: if zink is preferred from dri3 skip dri2 paths.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a590a8ef4596bc19390a27c742e6da325431102b",
+        "description": "anv+zink/ci: remove recently fixed tests from the crash list",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2526308dcd44605523cb5e1e74d9bd0af3598a0b",
+        "description": "anv/sparse: allow binding operations to match the resource size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a501a840a382daa5591673c96ec9451c977c1968",
+        "description": "anv/sparse: add an extra step before anv_sparse_bind_resource_memory()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c3aa7e42ba76478d9cc1550240eb9af45ece7184",
+        "description": "zink: fix bind size handling in buffer_bo_commit()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83895d4025d3c19941c9e5af810dea89a6840a6e",
+        "description": "intel: Only build shaders with anv and iris",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "b52e25d3a8eee702ff5d21e4cdb9a4dc0736282a",
+        "notes": null
+    },
+    {
+        "sha": "815a6647eb1383e9dc704ffcc266d85f3b13338a",
+        "description": "meson: do not pull in clc for clover",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "01d0d9431977ac25a191c860cb6711f48e6c173f",
+        "notes": null
+    },
+    {
+        "sha": "6474f8c2ce107c566090bdacea1eb74f58b088d6",
+        "description": "clc: include opencl-c.h for extensions needing it",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "37a13463478703e42e590b8d23a221604653b384",
+        "notes": null
+    },
+    {
+        "sha": "11dbdedf46575cf114244eedd283dc63fd9e99f0",
+        "description": "st/mesa: optimize st_update_arrays using lots of C++ template variants",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "045b1cda57d6e65f8cc15c3e77e1daf3e06e18ed",
+        "description": "st/mesa: add VAO fast path C++ template variants for st_update_array callback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a5ddd29c2e44ea8513f9c106f60e7d126c1afee",
+        "description": "mesa: don't use the slow VAO path except for drivers that want to use it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f8cd9604f97adba779290d66b7a1878e3159001b",
+        "description": "d3d12: make DrawTransformFeedback not depend on the vertex buffer offset",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "341d0fcbf6951e81e9acff7a25979a716662fa94",
+        "description": "intel/tools/error_decode: Detect and split error dump file parsing by KMD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b07bb12d35be38c827c1141e17594adfb0b3722",
+        "description": "intel/tools/error_decode: Add support to search for Xe KMD error dumps",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "77484ab6cf5ed15b76122bad0301919bfd214bba",
+        "description": "intel/tools/error_decode: Simply error message handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "70e2384f8f725b0bc67dbafda253179dd731b942",
+        "description": "intel/tools/error_decode: Add function to try to open error dump file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7cd677c491a8ec5c0d874abe3b37d5c549c3e1f2",
+        "description": "intel/common: Remove more i915_drm.h includes from common code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1b61786ac7b31c4c455df8676b8067f684a68348",
+        "description": "intel: Move intel_define.h to i915/intel_define.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a862b34b28ed2503e52b5652a702cb3e5ae7f097",
+        "description": "iris: Remove more i915_drm.h includes from common code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b48311adce76126d25ee851299dd4663ea6ff8a6",
+        "description": "iris: Move i915 set and get tiling uAPI calls to i915 specific code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c15ae2532d02c2bd7d1a663c4c9ccf9a5f73e9bd",
+        "description": "iris: Remove iris_bo::kflags",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af227794384afdc6ea1fc11a5f4165d8f2a54f22",
+        "description": "iris: Set (EXEC_OBJECT_SUPPORTS_48B_ADDRESS | EXEC_OBJECT_PINNED) in a single place",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f32e1a4899d489cfa54b458328879693b6b7baa",
+        "description": "anv/drirc: Add option to control implicit sync on external BOs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cfc8cf198ceb67f8f1745f3e1a8acb9a21ee740f",
+        "description": "intel/meson: Fix warning about broken str.format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f387570678d1fd0d1a9f0f8a3b7bddc935e1d78",
+        "description": "intel/meson: Remove usage of meson.source_root and meson.build_root",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3d7c71ac2374ccb1e3746996c22332e9f48cddd",
+        "description": "mesa: replace _mesa_HashTable::ht with util_sparse_array for faster lookups",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bccc983012758266a142ea29d9aaf6df43ca8092",
+        "description": "mesa: use util_idalloc_foreach for looping in _mesa_HashTable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19111ea8e6017215b4be120e133ec135dd9ef7ad",
+        "description": "mesa: remove isGenName parameter from _mesa_HashInsert",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1acfc0fc8ea5df559c1ebb3cdfa472f9a7a62993",
+        "description": "mesa: declare _mesa_HashTable inside structures instead of as a pointer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da0761f33321796a5c68b41ca39549fbd544b932",
+        "description": "mesa: declare _mesa_HashTable::id_alloc as non-pointer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0589dfe4e2a12f463df79f48b9b2ca5e1eb57eba",
+        "description": "util/idalloc: optimize foreach by tracking the greatest non-zero element",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1e84b0721312b5b5b085571d6a5e0504f01d4fb",
+        "description": "vdpau: Declare texture object as immutable using helper function.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d0595e48055b19c3dbdc340860dd900c0ea0e0a4",
+        "description": "aco/ra: fix GFX9- writelane",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "061b8bfd2980a5ed903febef42be288ab1eb4e40",
+        "notes": null
+    },
+    {
+        "sha": "53800191a3a7f38e2211768d7f75ebbf5508bf69",
+        "description": "aco/ra: don't initialize assigned in initializer list",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30b7771aa9a4acd69ef57806efdb6c672369c566",
+        "description": "ci: make clang-format job warn on failure instead of killing the pipeline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "137b7e874f22a9b4ce37b4cbe2a11576f7648109",
+        "description": "anv: disable Wa_16013994831",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e6e320fc7996db60231d277bc3e28fdd01018b33",
+        "notes": null
+    },
+    {
+        "sha": "78ea304a06cda5ddfed9cabb7c13ea2a82392ece",
+        "description": "spirv: only consider IO variables when adjusting patch locations for TES",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "dfbc03fa88478126607c69723a61280f6e9a011f",
+        "notes": null
+    },
+    {
+        "sha": "c12300844d3f084ca011a3f54f0cbaa9807418f0",
+        "description": "intel/fs: Don't rely on CSE for VARYING_PULL_CONSTANT_LOAD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1880e7cfed18eecc8acc2c48df86d92e72df9177",
+        "description": "v3d,v3dv: fix BO allocation for shared vars",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f47858b8375f5abfba031b1a5ea9b5dbf122dbf0",
+        "description": "nvk: fix dri options leak.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "edb52295387839b032d9c14bbf09994d4a3416d7",
+        "notes": null
+    },
+    {
+        "sha": "fd04c14306882693e5ba95fd7a128800c3069f5b",
+        "description": "nouveau/winsys: fix bda heap leak.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b4cfac64c8a98026d3698a2231c09a21bbe5a2f4",
+        "notes": null
+    },
+    {
+        "sha": "2ad01461797ecd249ceee691b673bb60bd727ec9",
+        "description": "zink: use KHR_dynamic_rendering_local_read",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19789aeeb17a8ea1d9ac77ec610dee0610248877",
+        "description": "zink: hook up KHR_dynamic_rendering_local_read",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b658028ddf2f1775a8698aae5082c2a222282e4",
+        "description": "nvk: Invalidate the texture cache before MSAA resolves",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "4bd2ba31fc952a5ef2e5e238752b9a3d0f750f9c",
+        "notes": null
+    },
+    {
+        "sha": "705e646e38323830789791762b5043a8936b241c",
+        "description": "microsoft/compiler: Fix SM6.6 non-bindless handle annotation for UAV counter",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ccbf9b0ea7aec6559f8eb872d2da2984c2115453",
+        "description": "zink: force host-visible allocations for MAP_COHERENT resources",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb2ae7736f90be7bc3cce3611cff461a5d14693d",
+        "description": "zink: add a second fence disambiguation case",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a688e65a048166a586e9655c2453fc49d785406",
+        "description": "loader: handle picking zink for nouveau for certain GPUs.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "caf99133ece234607a180dc4191ff68f30a8baf1",
+        "description": "glx/dri3: handle zink fallback if loader picks it.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b907eb475043a25d7d80f81a5d81ddebfa335399",
+        "description": "egl: don't bind zink under dri2/3",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ccbccfff918ecacfe680c91b636c4a08b9df0b6c",
+        "description": "iris: Include brw_compiler.h only when needed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "376296a8c914dcbc8e3b81968d02a44c955fb24b",
+        "description": "iris: Move iris_get_compiler_options to iris_program.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "880e452abf805a2954f97950c3d0747d06edb928",
+        "description": "iris: Add helper for indirect_ubos_use_sampler",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "947ef049dfb8150025340780e0ff0a95dfdd2ddf",
+        "description": "iris: Add helper to access use_tcs_multi_patch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "634a8ece675a819982f48d93566858fb71207af3",
+        "description": "iris: Add IRIS_MAX_* constants to replace BRW_MAX_* usage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "875aa527b8f6e4eab6af7634d3fbaa8a67de064b",
+        "description": "iris: Move compiler creation to iris_program.c",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19574a8156463df8e032cf64c4397546bc7cfe8b",
+        "description": "iris: Use uint32_t instead of brw_param_builtin",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b135c9f80b924e841a08568678336c9113277a6",
+        "description": "iris: Take ownership of prog_data when applying it",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "04364768f2a118c6f4833db094ed7ff4c15ad339",
+        "description": "iris: Reduce dependency on brw_*_prog_data structs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9fd4b7460f28cdaf2edc78f61972347802586ca0",
+        "description": "iris: Don't use prog_data to guard 3DSTATE_CONSTANT_* code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be13c3ef9ffe536273d590d32c59363aca5290a2",
+        "description": "iris: Add stage to iris_compiled_shader",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ae528331c5554e930d4f608c6c08cf8daa15336",
+        "description": "intel/compiler: Use \"intel\" prefix for walk_order enum",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "74534397ac079d3020b6bde1201e76ceca59a63a",
+        "description": "glsl: split var copies before lowering named interfaces",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c1111982572e9ff5031d675d1228a20cdd1df26",
+        "description": "glsl: support array wildcards in lower named interface blocks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec240e2cd842d4ba5c5c3a7e9315c0a0c4cf0def",
+        "description": "nir: allow gather info to handle nir_deref_type_array_wildcard",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1497f4e0c2c416db4c478390b98cdff8b141aa70",
+        "description": "intel/fs: Don't include sync.nop in instruction count statistics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "83d1241cf5be73027531c6c341e4d896b1441792",
+        "description": "zink: add checks/compat for low-spec descriptor buffer implementations",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b8b51d96b0146028ecb5c58703707fe994540119",
+        "notes": null
+    },
+    {
+        "sha": "60cf1ede4fa78da66bc7729a3e2bf0a6a980d337",
+        "description": "iris: Remove no-ops from storage image lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "078dbc4d334af11b47b8f5a6d66cd9cb6e6f1091",
+        "description": "anv: Remove lower_atomics from storage image lowering opts",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ab94ca17b974a4ae2ecd145a566e4ea4f2daaaf",
+        "description": "mesa: add more driver support checks for more format queries",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e849b12f53350e9e5c4a4dab5b89559da4aa97d",
+        "description": "vk/wsi/x11/sw: use swapchain depth for putimage",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "198719e80e93adee612bf8f165e08e44018fb72f",
+        "description": "drisw/egl: delete unused buffer age handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "81ecb21d50470c4d8697952b1deb40eb059167ad",
+        "description": "drisw: hook up EXT_buffer_age",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9eb4b86e764036430c39705c3d76514a786f62a6",
+        "description": "egl/x11/swrast: deduplicate ANGLE_sync_control_rate enablement",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0eb3c850c6e11f2134920805f54d629e8f39abe0",
+        "description": "intel/clc: workaround LLVM17 opaque pointers",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "b52e25d3a8eee702ff5d21e4cdb9a4dc0736282a",
+        "notes": null
+    },
+    {
+        "sha": "62baa4df5faa6f31cabe3c18d6f92caf823f4d79",
+        "description": "intel/clc: lower temp function/shader variables together",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "4fd7495c693818e0823b100df0e0607e448a29fe",
+        "notes": null
+    },
+    {
+        "sha": "19aeb274e6996e22e1f8c5b742f38ca914746a72",
+        "description": "genxml: generate opencl temporary variables with private qualifier",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "41b2ed65e2532fd3be9ee7b74c74401169e81acd",
+        "notes": null
+    },
+    {
+        "sha": "a95a2e4d3f53249de010adf510edc006329afbfd",
+        "description": "zink/nir_to_spirv: emit ViewportIndex cap also for inputs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "96ab1d65cc27975ffa8206c07e898d796da6816c",
+        "description": "anv: fix emission of Wa_14015055625",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "1e081bd68069d27ba6eb347a1344007131a6da93",
+        "notes": null
+    },
+    {
+        "sha": "68f80f9b0f71e2e72af52976ef1606b2081f289c",
+        "description": "vulkan/properties: Start looping from the next member in GPDP2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5bdc4b19a68c8d471748ed248320d305baebb77",
+        "description": "radv: fix a compilation warning in radv_bind_graphics_shaders()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "41cd32d10eeae282644c7dbf397e95724fe9f7ac",
+        "description": "ci/lava: Broader R8152 error handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6635c09d0d7808a959c8e1815516c203e38e7fb",
+        "description": "zink: avoid infinite recursion on (very) small BAR systems in bo alloc",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "817ca5147ed9c5a51311329b717ff51442802fd5",
+        "description": "zink: compute bo unique_id on use, not creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8c3adf749d7cbedfb9da70166e05911240115d18",
+        "description": "zink: add an assert for dummy fb surface creation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8bad4205c6f817da32b882ecd3cf5ee4fe73d125",
+        "description": "zink: validate sample count on image create",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "386450b10e9bfcc43fe4e1c51632f47abc30b1b2",
+        "description": "zink: pre-check formats for samplecount support",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f827055cb4eed8a81e30d9daaa7761658136f6a6",
+        "description": "zink: flag the use_img as unsync access with buf2img copies, not the swapchain",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b8b51d96b0146028ecb5c58703707fe994540119",
+        "description": "zink: delete maxDescriptorBufferBindings checks",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "13c6ad0038aa42f1c908ca1adecde9bebf9f2509",
+        "notes": null
+    },
+    {
+        "sha": "2deaf632e25ca2037029131fb7f02e5ae40d4cd7",
+        "description": "radv: use radv_shader_info for computing NGG LDS layout",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21577bfacb293dbb7baec6c7ad5053173734d79a",
+        "description": "radv: store the number of outputs for VS/TES as NGG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e1da1d10fd18ba05de48d0798b68a660ef4426b",
+        "description": "radv: determine the number of invocations only for VS/TES as NGG",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "12b5c3f00efbc2f3c4f74aee19621223934211fa",
+        "description": "radv: set radv_vgt_shader_key::ngg_streamout for ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9f660d8c7233d502135f12c24e2591183e15695e",
+        "description": "radv: prefix radv_vgt_shader_key::streamout with ngg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b98a7abcd69240a14fadedf96c016f1dac7eb2a9",
+        "description": "radv: determine the ES stage for merged NGG shaders compiled separately",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eea75777be1a09fe68eb3fe29cdbe7940f1f6964",
+        "description": "radv: pass the ES stage when emitting geometry shader with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9dcc20bccc7fafa54a9f4483866c5cfeb0b9cdbc",
+        "description": "meson/rusticl: import rust instead of unstable-rust",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fba34ae5f567a1112cb780a5fe8aaf0bf099e53f",
+        "description": "zink: add a750 baseline",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dd6decfabadea7b75c69ebc2ca5ea2295bf5351d",
+        "description": "zink: do not use undefined stage mask if on missing KHR_synchronization2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7cafe65ea17ca137655b508a571261fac0f12017",
+        "description": "zink: use symbolic values instead of 0",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b90c46bdf9b536e6856b1ead5f8d806080728f7",
+        "description": "r300: fix vertex_buffer related refcnt imbalance",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "8a963d122d4b67209214b0483084ba950814f42b",
+        "notes": null
+    },
+    {
+        "sha": "fb971411312cb7362c093564c7631dc6fb3cacc8",
+        "description": "zink: always enable glsl_correct_derivatives_after_discard",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "63676ed5023b45fa2e6a79debb047af69d2cd75f",
+        "description": "anv: fix Wa_16013994831 macros",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e6e320fc7996db60231d277bc3e28fdd01018b33",
+        "notes": null
+    },
+    {
+        "sha": "682c23aa06764eab6bab8efdd3b89ef14c56dc9a",
+        "description": "anv: remove unused definition",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27a7c5447ddd3cf344ace982ba9a1b8beb58fb0c",
+        "description": "anv: reenable ANV_ALWAYS_BINDLESS",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dbee85713f8834106dda1dc6e75f38df2797251b",
+        "description": "anv: factor out descriptor buffer flushing",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cf193af7626d70062f3814e3111d66959afc523f",
+        "description": "anv: fixup push descriptor shader analysis",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ff91c5ca42bc80aa411cb3fd8f550aa6fdd16bdc",
+        "notes": null
+    },
+    {
+        "sha": "735fe243a773cc3a13d0f4afedd0adb8f1bbd36f",
+        "description": "android: Use system = 'android' in crossfile",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "10b8e52780ebc8197ea4b2156c27fd7a49936eb9",
+        "description": "radv: disable conditional rendering if enabled when preprocessing DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5b0e4dd6e80224961a0341628bebe73fb40e5d80",
+        "description": "radv: stop using conditional rendering internally when preprocessing DGC",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "893780b36251616e967f12354fab5fc0d05d79d7",
+        "description": "mesa: check driver format support for certain GetInternalformativ queries",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7b2ac3377ae56df5e1990c2ed03360dac9519f6",
+        "description": "radv: Remove ray_launch_size_addr_amd system value.",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f933536517c98f7baf60d0fd5d8d0b0e49cb4592",
+        "description": "winsys/amdgpu: enable unlimited number of parallel queues for VCN",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3e118c6d2f7eb7aa138b96305d828bd9cc4e9e5b",
+        "description": "winsys/amdgpu: convert amdgpu_cs.c to .cpp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7475b105d2ca70772c0b1500ec9ab0225765bb83",
+        "description": "docs/anv: Add recommended GuC firmware version",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ec231cb51fd999fc7c41efad75730043c6ab502",
+        "description": "venus: simplify feedback types tracking during submission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c320203f4ca32cef98067ae918e412f1491a4fd0",
+        "description": "venus: misc cleanups for queue submission",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a6979f93794e50c140f51c9055a8e677ace0e59",
+        "description": "venus: use vn_cached_storage for vn_queue_submission allocs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e122861daa3bee283dcd0d8692508e54ce10b32",
+        "description": "venus: refactor to add vn_cached_storage",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "09735905798cffe26625056382c6a84e634ed15c",
+        "description": "venus: rewrite fence feedback interception to minimize batches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "55224006b784b38d9c85ac2d9022ba56240130f2",
+        "description": "venus: fix the cmd stride used for qfb recording",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d2a626787e559dad9105243be9e5043c9230853c",
+        "notes": null
+    },
+    {
+        "sha": "017818a8bf8acd7079ae5280edfee3f909783796",
+        "description": "nvk: Implement the VR-related display extensions",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5feb326d807b084e99aa109371e4aa05c586ed0b",
+        "description": "intel/isl: Include compiler generic header",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae50ac46d11fbcd876e48f5d4c7767cc34e218ef",
+        "description": "intel: Remove brw_ prefix from process debug function",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c773898f39e8dc6c26793231c0b0c4e5cff76144",
+        "description": "intel/compiler: Rename brw_gfx_ver_enum.h to intel_gfx_ver_enum.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d8f9a05f322503b46f71bda9dfe3ff1c6d00dbe7",
+        "description": "intel/compiler: Rename the passes and files related to intel_nir.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dc76cfc7814f213fc096cad5244e7b49cd0e0e68",
+        "description": "intel/compiler: Collect NIR-only passes in intel_nir.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24db040a49ec1fcf12a896b0ee4b8599b9c805fd",
+        "description": "anv: Drop warnings for engine initialization failure",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "876db9135048be34d84bd74b18411678e15c7c3f",
+        "description": "meson: rework intel-rt option to be a feature",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a126b75e0c93b9515258e7ae593b9670138e20f",
+        "description": "meson: drop intel-cl deprecation of 'false'",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19cd3bb7217671c5219b63cac08e40f993ee0fdc",
+        "description": "nvk: Implement VK_EXT_map_memory_placed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40926850573fd6e26e429098f48813b7fcf04f7d",
+        "description": "nouveau/winsys: Add a fixed_addr to nouveau_ws_bo_map",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "be9685e4e7109b2a7e022cc089d1da931afb6e0a",
+        "description": "nvk: Use nouveau_ws_bo_new_mapped() for descriptors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08d13a55e47764c253de5982c98caa1d217dd6d8",
+        "description": "vulkan: Update XML and headers to 1.3.278",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ec5d0ffb04fe8643f9e248bf8530aa89c46f3e02",
+        "description": "radv: fix pipeline stats mask",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "48aabaf225f3ebf0bada2fe820d2c0f6288a3ca5",
+        "notes": null
+    },
+    {
+        "sha": "805d45e9168563c892c84a42efddfce9ff5f633a",
+        "description": "intel/decoder: Move decoder to a separate module",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7009f00ae087a6336c7dd3e733f8616786a10e08",
+        "description": "radv: re-enable GS_FAST_LAUNCH=2 by default on GFX11",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3713f27260eaffe04a3ee7af3e9bf78203e6ee38",
+        "description": "radv: only configure {XYZ_DIM,DRAW_INDEX}_REG for mesh shaders if enabled",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0db2d13af1a7f04f8461691db062b9111efae6df",
+        "description": "radeonsi/vcn: only use multi slices reflist when available",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dce20690542c84ac00509a6db7902dcfc90b25bb",
+        "description": "radv/ci: switch vkcts-polaris10 from mupuf to KWS' farm",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19439624d9fac333bcd046683bf172a89ff16873",
+        "description": "anv: Use DRM_XE_VM_BIND_OP_UNMAP_ALL to unbind whole bos",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3acb00290dfc2ea895254275e0244c0a9c1250eb",
+        "description": "ci_run_n_monitor: allow detached heads as well",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ef744fa589e07bde4376707733163bf569f70b1e",
+        "description": "ci_run_n_monitor: explain why/when there might be no tracked remote",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a4f77ce2d417f0a7b445d51b7bfe33c5b6fe4322",
+        "description": "rusticl/program: fix CL_PROGRAM_BINARIES for devs with no builds",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e028baa1772eeaa55393b1d01d5e5fb217474f95",
+        "notes": null
+    },
+    {
+        "sha": "6894692d270f7c49b1e4cb2d15dad94de4e3acb0",
+        "description": "radv: enable GS_FAST_LAUNCH=2 by default for RDNA3 APUs (Phoenix)",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0c2213cbbd04865180bb3a70ef527239e4d3af05",
+        "description": "radv: fix setting the rasterized primitive for ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b199aa1bda883b35b198558a4f6b8033010e5027",
+        "description": "radv: fix selecting shader variants with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a47de04ff3900369cbc31c0206262d5255fc75f2",
+        "description": "radv: make sure to reset the GS copy shader with ESO",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b1d4a7a95ec0e578bbca00915056545d860ac900",
+        "description": "radv: fix re-emitting DB_RENDER_CONTROL when resetting gfx pipeline state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "64e18b04d9f78c6e2ad870d9e5903d1f2e99642e",
+        "description": "radv: clear the custom blend mode when resetting gfx pipeline state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b0a31a62e483af5b90a629ce542144dc07b6c0f9",
+        "description": "radv: clear RADV_CMD_DIRTY_SHADERS when resetting the shader object state",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e813a15f8428d9207ae59e6f2aae5f4d743682f",
+        "description": "zink: update vvl expectations",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c163a38a8e0e23eb96ab0a98b197464463553f08",
+        "description": "ci: bump VVL to snapshot-2024wk06",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7c1916b98f723b9f43a3a2fce92240584b89cf36",
+        "description": "zink: add a ci skip",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4c08db550183b085989468e0d6d1f97cc98e4c8e",
+        "description": "zink: don't add VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT for sparse textures",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e8ce53a33d5c4e2e5d007f0c9de05f113cc413df",
+        "description": "zink: promote gpl libs freeing during shader destroy out of prog loop",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d786f52f1ff10fba42e87530933a2a4c68de49a8",
+        "notes": null
+    },
+    {
+        "sha": "36e7350e0b86080bfcb3b6db481c89a97691dacb",
+        "description": "zink: clamp zink_gfx_lib_cache::stages_present for generated tcs",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d786f52f1ff10fba42e87530933a2a4c68de49a8",
+        "notes": null
+    },
+    {
+        "sha": "d2dafa3289848c623dac06033766fccb428a4ad7",
+        "description": "zink: promote a conditional on gfx shader destroy",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "08176d9d16ba495ee55bb148a0b71bd742c8973e",
+        "description": "intel/tools: add shader compiler hash key to json devinfo format",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aa649dfa5fff474114139313e517dcb3092c4700",
+        "description": "intel/tools: move intel_dev_info to intel/tools",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9b1ae760a819bdf37cef1ef5178f2190771837fc",
+        "description": "anv: use intel_device_info to set device UUID",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "48bf7ad3b8910f458f717b86fa5abb457bf4e7b6",
+        "description": "iris: use device info sha in device renderer string",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c4ce1ca8472d871ad65baa1ec6938e8c1ff2cb3a",
+        "description": "intel/compiler: generate a hash function to use with the shader cache",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5a882673667a788a84f2cbc207b455fe28d350e1",
+        "description": "intel: Add missing dependencies on blorp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b48b7df1fb640cdf20fe1a016dcbb0d91c6d46d",
+        "description": "intel/blorp: Use a Meson dependency for blorp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f55f9272e464c13118c0b5b27e1cdae80ea6b7ff",
+        "description": "intel/compiler: Fix disassembly of URB message descriptor on Xe2+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7a366c0de219516b9a041a383ae5d271598cb7f7",
+        "description": "docs: update calendar for 24.0.1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "daa3512048de452d09a5acb80a08f5e5c10bf2f7",
+        "description": "docs: add sha256sum for 23.3.6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cfffd3f744025209391d1588dadfb6890f778c22",
+        "description": "docs: update calendar for 23.3.6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b294e9aed169792621dfe44cfa75f461ac014741",
+        "description": "docs: add release notes for 23.3.6",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5c85cdd3786638ec6ad717ef82b54a0cd1886585",
+        "description": "d3d12: Support R16G16B16A16_FLOAT display targets",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6a602703367fb9f14ac1f94f85d8e496b2c4783e",
+        "description": "winsys/d3d12: Support single-buffered mode",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5879684a469e78219a9bdbb378df86d370960156",
+        "description": "wgl: Add HDR pixel formats",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f97060bc1438db9fd5237cde0d8e68c1ff093d28",
+        "description": "wgl: Enable WGL_ARB_pixel_format_float",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c432fbe534d1b1d3874b612b97d8ed3fe97c8945",
+        "description": "wgl: Add no-gdi-single-buffered and gdi-double-buffered PFDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "610dcc178a5d4da86726f8b25c2f3ffe6c0456f6",
+        "description": "wgl: Flush frontbuffer when calling swapbuffers on single-buffered fb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b6a2972455c93ff15fb27ee4732de254bd9cb5a7",
+        "description": "wgl: Support a single-buffered winsys framebuffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f733215c12438c8902fdc819376072b4cc9fb48d",
+        "description": "anv: enable query clear/copy using shaders on MTL/ARL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53df391d27c4d8410c148c490a03f72b39c20aa5",
+        "description": "rusticl/kernel: recalculate scratch and shared memory after opts",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ea023ff5cddf91521436b6d3f24021ae35774997",
+        "notes": null
+    },
+    {
+        "sha": "ad5fbc440767ee020ebf761bd7f3aaba0895c92d",
+        "description": "aco: use fmamk/ak instead of fma with inline constant for more VOPD",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62a8de99acb7399fd2bb68a2ada5106415ed02ad",
+        "description": "intel/blorp: Move brw_compiler.h include to where is needed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4df4be7e74af7beba06667133311d9dc540649d",
+        "description": "intel/blorp: Avoid brw types in blorp_priv.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b28cf9123bae4072a6c4404f6092f8cfedc1025a",
+        "description": "intel/blorp: Move brw_blorp_get_urb_length helper",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b34df9f801ebddde1d63b0683a80d28c5a559de3",
+        "description": "intel/blorp: Remove outdated reference in comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9377dc417dfc85cbf60b3e0b7ae113452814c1d4",
+        "description": "intel/blorp: Use a struct to return blorp_compile_*() results",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "82ecc219e049e7c5980a1add1f7fb62e2e86424f",
+        "description": "intel/blorp: Simplify blorp_compile_cs() interface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cfad85eed07be2789a1dc37916977ec842c085d4",
+        "description": "intel/blorp: Simplify blorp_compile_fs() interface",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "16ba2478faa6138e12e3816cf79e34061a8dedb5",
+        "description": "intel/blorp: Remove brw_ prefix when not applicable",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c8fda6337818b16acb2a6126bccf7ba68dcfd885",
+        "description": "intel/blorp: Don't require specific prog_data type in callback",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d78a913bda8cec60553c515cd106ff2a9b8b6d27",
+        "description": "r300: add explicit flrp lowering",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f8a5cba3b4265ccf088c05d9d44f36f42c961e0b",
+        "notes": null
+    },
+    {
+        "sha": "0b751a2134ff13c2e0192a94faddb20d6ff06002",
+        "description": "intel: Rename i965_{asm,disasm} tools to brw_{asm,disasm}",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5992185c8d1e955ff6a05a947e9f93ae61238306",
+        "description": "intel/compiler: Merge intel_disasm.[ch] into corresponding brw files",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "468a0ffe9c384d5474f0676510625ac33912d680",
+        "description": "intel/compiler: Include brw_disasm_info.h where its used",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff95f0088327633d8252ca432931551588fc5faf",
+        "description": "intel/compiler: Move disassemble functions to own header file",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "786c1b8322d96b9cf8d39403e9e868030a73323d",
+        "description": "radv: export multiview in VS/TES/GS for depth-only rendering",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62b72b6be9742c655d381348c6b161afc6b5396f",
+        "description": "intel/dev: Add 2 additional ADL-N PCI ids",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5732c9d26928283a9563924771f52b15102c062c",
+        "description": "intel/compiler: Rename brw_cs_dispatch_info to intel_cs_dispatch_info",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c5b80de583104ccdee7d5c2611d65c2799ba3bb9",
+        "description": "intel/compiler: Rename brw_vue_map to intel_vue_map",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7d85d2c7fd96e2081b84700e4333bed0aacd22d2",
+        "description": "intel/compiler: Rename DISPATCH_MODE_* enums to INTEL_DISPATCH_MODE_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aeda865b6d284c24de58c971e3c1abe48e75cc05",
+        "description": "intel/compiler: Rename BRW_TESS_* enums to INTEL_TESS_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "26dd1f0bbaa8b231b86d51113768ab725de862d0",
+        "description": "intel/compiler: Rename BRW_WM_MSAA_* enums to INTEL_MSAA_*",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a88084f8be4ab264058a8c46f34f3ee9571b9e10",
+        "description": "intel/compiler: Rename brw_image_param to isl_image_param",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1314c5b3571c75716bde0dd7ea1f3e9c6117f927",
+        "description": "microsoft/compiler: Fix wave size control for SM6.8+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e21774eb0aaefd150828fc8c21ff9f6c9ce380df",
+        "description": "microsoft/compiler: Fix wave size control for SM6.6+",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0daad70f9f01c78d4379d24c112d8c9de8b92db7",
+        "description": "microsoft/compiler: For emulating scan, ensure all threads are active when reading cross-lane",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "219be558076622a1085126b8b1cd4b38f524eb47",
+        "description": "glsl: add missing error check for half float varying",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "66f36a79efc880daad0a394a4af6d23c7c5df0e8",
+        "description": "docs: add sha256sum for 24.0.1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9bc04180dbf1d04dd8bca5bb50a0120332e4611",
+        "description": "docs: add release notes for 24.0.1",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ca256b76292ee681268b07939266a8f13599700",
+        "description": "docs: update for GL4.6 and ES3.2 on asahi",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c7bec0d3c8fb6f1a407ac3cfb7facba7dcfaac7e",
+        "description": "asahi: advertise GL4.6 and ES3.2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c116d1efbb6217e7d2bf3716f2c626aefb726606",
+        "description": "agx: add \"is helper program?\" key bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a3f647fde104ca5fdfabb2694de78bbde56093f3",
+        "description": "asahi: precompile helper program",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1644a2307fd6377f518b3332c8ab879c88190f3",
+        "description": "asahi: reorder compiler before clc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "020e2959d2029058ed7447880277423c6e2a893d",
+        "description": "agx: decouple from libagx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4a3b905bb89b9ae9091586d1c090b548cf5451f7",
+        "description": "agx: move texture lowering into lib",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0fa6901f32f2dca923d3d37605bd49198c69edd2",
+        "description": "agx: call texture lowering in the driver",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "beb8aca7a21fef9fef4f16326fa6d71d52523bb8",
+        "description": "agx: move SSBO lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f465d72ddeaeb33110c76619b327f043c00994c",
+        "description": "asahi: split out genxml/ directory",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "35c671ecefcc483ac6a3216180346cfb3424f6d5",
+        "description": "asahi: clean up format table renderability",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0ee0969f79efc891cf37deaeeb75864e1f638415",
+        "description": "asahi: use #pragma once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "951219a4fcc45a8060029ed28b6b28d44630644a",
+        "description": "ail: use #pragma once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3333c2cdeb758782448946fa5a65b465e91860f8",
+        "description": "asahi/lib: use #pragma once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a296e7ec3a66a32cec0551489cebb201b655fdba",
+        "description": "agx: use #pragma once",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af0417686067c9d5e0712ee80f384f554399ff3a",
+        "description": "agx: decouple compiler from genxml",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23b77d33292b93d1b70d966c16f797910f932331",
+        "description": "agx: rm ridiculous dependency",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4e8a42645bcf366bff1eb24e151b6463b77859b1",
+        "description": "asahi: quelch gcc warning",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b39de8bb4a1568eedfe31dacabfd145cc0dbbccb",
+        "description": "asahi: Implement ARB_texture_barrier by decompression",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "589338e8fcf097b19a3595b265823d0f7e3baabe",
+        "description": "agx: sink wait_pix",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6c5d3fe1b5e571021a20bbbd1b4919c0d75446d9",
+        "description": "agx: rm unused opt_ixor_bcsel",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2dc1189a9cb027be891381cf6712750a8469a818",
+        "description": "agx: rm unused backend nr_samples",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27ddcea2b3929a503c08ae8137b0377570f546e5",
+        "description": "agx: call agx_nir_lower_sample_mask earlier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9cb03ba5c73e86952507c28f831a0bdcc4c450d4",
+        "description": "agx: rm dead sample count argument",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fd0068612f2ab5aa46a9de437cb4fec8824003e5",
+        "description": "agx: remove discard -> zs_emit lower",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0eb9b62199f53317ae500eed91f5043c646cd3f7",
+        "description": "asahi: rm ia key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cb0b027c596f118d0f1f1aa8a36719e4287419f5",
+        "description": "asahi: make clip_halfz dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "beb7ddba2ba6d19e2fd1422c10995c5e3b66a65c",
+        "description": "asahi: always support ARB_clip_control",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9aa8bac229d7838777da2dc00a5732ad49a1d76f",
+        "description": "asahi: support GS in shaderdb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6673924b7e09c5381fcd886a73016c3ed4e3fad3",
+        "description": "asahi: make gs topology dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "049434f89cb5c90616b2f604e67c85caadc9ea5b",
+        "description": "asahi: make provoking vertex dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dbb2b25ef9fe50a0186a749ba551afb78305a41b",
+        "description": "asahi: eliminate tri fan %",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7ab1755b54f648b78e08c34f71efc7fbbc7ab3b8",
+        "description": "asahi: avoid silly psiz writes even with gs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "43dd8b87cb0da4cb990603126ad0fb295c9e515a",
+        "description": "asahi: simplify expressions involving xfb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b44630aa94b8dffbed87239e3608e594f76d8ca3",
+        "description": "asahi: rm dead",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "159d85d32cb7e1032e7c55c6dac0e318aaff44bf",
+        "description": "asahi: implement GS disk caching",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "86782156e72c1fd2e49fcbc7e301fce2b2b1f84b",
+        "description": "asahi: invert geometry shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ac3e48fcc51b0f42138e33f639b7bbb00130c89",
+        "description": "asahi: fix vertex out size calc",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "141e084f55cb05fd1d7eafd300a2752475f6e1fa",
+        "description": "asahi: use load_instance_id in gs lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3641a37e8f988b10a3593ab90650c3fb960a0cb5",
+        "description": "asahi: set gs_grid[0] even for direct draws",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "200ca690869f7e3e1b5dd6bb87cb52ff915bfd80",
+        "description": "asahi: support stage override in sysval lower",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3bd400a2b4e9924eb52aec758b0e62b787c38f8c",
+        "description": "asahi: collapse indirection with GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2da426afe0a6b0291f03e6f3cc33cdf0d8479f5f",
+        "description": "asahi: allow lowering bindings after lowering textures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "17896f169925689e24c90d159960305d1a0ca4c8",
+        "description": "nir: rm load_vert_id_in_prim_agx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b26409246c61efaac1db739ffe2303490824a384",
+        "description": "asahi: be a bit more methodical with shader stages",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6154d6571493a314f1efeca53d6aed38445a5668",
+        "description": "asahi: infer stage in descriptor update",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "37fa7bff5828e51b0785c22cd77d784f18612607",
+        "description": "asahi: shrink GS key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f4a187bc8948a181897787a2aa4e1314466ee911",
+        "description": "asahi: allow bindful GS textures",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e13d00116030c48b9388ae69e23f3bf3dd4206f4",
+        "description": "asahi: rm arrayed output lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d96fbd461817217bc91f6933784d47716c0bbf10",
+        "description": "asahi: separate GS from VS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "af7084efa7e8c4d930861f54125b469408285660",
+        "description": "asahi: rework shader stage handling a bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0b307770286177a9d7c4621fba805f9952e4d775",
+        "description": "asahi: add geometry parameters for separable GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b2d547b36142cc2f652e662dfcd81fd440087296",
+        "description": "asahi: add shader_info::outputs for gs lower",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "cdd1b012e97426b8af81211b3565145b510fd841",
+        "description": "asahi: simplify IA mode handling",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e1783fc083b830fa804a81206fea41e75a811353",
+        "description": "libagx: generalize vertex_id_for_topology",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c9f55166dccfd246e75ee5c813e235e5ebcb40f4",
+        "description": "libagx: static assert some sizes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "aaa609f03032c5761bca535bcd1a16e7dd78f3e2",
+        "description": "libagx: use real PACKED macro",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fc929d9318cf0e2cf4d2bd4adaf9ceecafbae725",
+        "description": "libagx: use native static_assert on host",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bfaa3691e1fb409b120a5dfe5c66dc1e78f12774",
+        "description": "asahi: make GS flatshade_first more dynamic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4036c710bdafe17f42f8c4c71fb1c9ae04709abd",
+        "description": "libagx: fix buggy align macro",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "784323cf0f1dc88a77cf01f98bade0d3de4752da",
+        "description": "asahi: rip out existing MDI+GS implementation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "21403278ac38b384e083989a7ad199c1d59d1241",
+        "description": "asahi: fix dirty tracking issue",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "beabd93c1306a01b6059c8b8bc53514f01f85f5e",
+        "description": "asahi,agx: use hw clip distance",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9aeaf9925984eaa3e01ec51eaf3abf04f38186ea",
+        "description": "agx: fix buffer overflow with varying slots",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de31b280531380a7dc035ce2c951935a607ccebc",
+        "description": "asahi: allow vertex/geom/tess side effects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "de786a1c5cba5a7e550d0d38b9bd84608c7ea10b",
+        "description": "asahi: drop xfb hack",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5361b1f331ea9f5e9a106f786433363fbb5d170e",
+        "description": "asahi: bump max threads per wg",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8a2c1d337ec717fd49ac12939d2b5aaf92ad0149",
+        "description": "agx: add =spill debug option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "42084d50e544ddbdd213e2c15b2d5f0369d6f59f",
+        "description": "agx: add parallel copy printing",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "871f3d3f7d4e455e1764a7e30e2ef2482aadf040",
+        "description": "agx: unit test spill/fill lowering",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5ff85e782fc534f681ea34fc4d5f32610af6c0a",
+        "description": "agx: unit test memory parallel copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "14e1bb78ae020e3095ba91710be61a53fa71fffe",
+        "description": "agx: add spill/fill lowering pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "40da539d01578ebb727c2cc00832cde97e4dab1d",
+        "description": "agx: introduce \"memory variables\"",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06eb552baae524cd65904fd023207eeb25a856cd",
+        "description": "agx: print register vectors",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "282f2ac1aa060c79e39df734e4474b15e3af52d7",
+        "description": "agx: allow 16-bit immediate on stack load/store",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "485e17e01e3a1ed7e96ada3c2b962a166eeaba12",
+        "description": "asahi: allocate preamble scratch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f97b041e87fc9a0d040b8f0fa037eb3717be8402",
+        "description": "agx: set nr_preamble_gprs for preamble scratch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "94b92000427280cc0cc1574f11bef53f51c961d0",
+        "description": "asahi: add has_scratch to shader key",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9445005c8765843a1920dd46e3502eb053774080",
+        "description": "agx: improve scratch size accounting",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a2328820f790cb42c1edc36a878f9b6bbefd4758",
+        "description": "agx: clamp register file based on workgroup size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb37b072a59406b8707eb9b101ee92922cc5b5f8",
+        "description": "asahi,agx: use intrinsics pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e34a707d78d70317a387d02847282824718ecb87",
+        "description": "asahi: optimize memory_barrier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "745c9d8bdc33dfe9d5414f098cb3aaa4a30be3c6",
+        "description": "asahi: track batches with incoherent writes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "98ffbf4cf64ecec79c9ff9b628188cf6285c53bc",
+        "description": "asahi: rm blank",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "53e820f20e54df5bde702a058b58cea5ac96bb29",
+        "description": "asahi: hoist layer id code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bbe6689108fa34f63e3e1de4097333e24bc13d74",
+        "description": "asahi: hoist xfb code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae6e1e3609bdd94bd504c93459c521ae9854729a",
+        "description": "asahi: collapse if",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "757fd8be563beaa878488a34b828ac8f77ccf3dd",
+        "description": "asahi: fix instance count with indirect draw",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "facc4b9a5ec1bc418bb9005ebeb707d73aa4d41b",
+        "description": "asahi: drop any_draws",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ae3544eccd6e2e47c640a5cedc048114451562aa",
+        "description": "asahi: move some code into dirty tracking",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c19325c2293d00e9db82d867ddaa9f6ea94af285",
+        "description": "asahi: optimize no changes descriptor case",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1362ae38d49b2007f2afcee3b1eeffcf2f69dfd9",
+        "description": "asahi: optimize \"no changes\" case",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8fc373370fcb852a1aab6adb4aca0dadf15022e3",
+        "description": "asahi: collapse stage uniform upload",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ba151aa16cdb6129a109eb8b8843d9b2b6d5e8a",
+        "description": "asahi: dirty track stage uniforms",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6be7c5f8893264d50f4f87f1d77c9d8eb32f1d19",
+        "description": "asahi: split up stage uniform upload",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "23b4503225ba07ad07f32f9af5e5dcb9480c9ee7",
+        "description": "asahi: rewrite queries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ca58bc239aa782309ab272bf856728189765f96e",
+        "description": "asahi: drop silly else",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6ffbf77983bb923d02ef62a6fe558ad1bb1be5de",
+        "description": "asahi: assert invariant",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "24b7fbca9d96b0a778df1c76c2ad7b055308ecf6",
+        "description": "asahi: allow disk cache with compblit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8ab443d54919fb55947ccb07e26cf59b4fcc8f6e",
+        "description": "asahi: enable compblit behind dbg flag",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "07a4ff581058f579b37895d20c2be29c860fe99b",
+        "description": "asahi: track bit count, not word count",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0aa3eaa9442f139b588760322c11b1b22387ade0",
+        "description": "asahi: rm dead",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "46c70b72ca14005e63eb43f86b9df7dd27c59ea0",
+        "description": "asahi: skip set if tested",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7eac18b1bcc423789c763722eea7c14dc5aaca71",
+        "description": "asahi: force inline ppp update logic",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5982ae902525e1585e692081167ef1777f2009ec",
+        "description": "asahi: fix vbo dirty track",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "668bf461b19d1f829aa6fa588d34b519fe0d1213",
+        "description": "asahi: don't use util_resource_size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d9c4fcce5f925c4f9f1bce08ff25bfae9f3ee081",
+        "description": "asahi: log geometry shaders separate from xfb",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6c8262ce1461af6b3b44cdd3a72e071086f5257",
+        "description": "asahi: implement pipeline stats as a checkbox",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "27d39bf544a5f4f3d9b8b531f228e8fd4e75a4a8",
+        "description": "agx: reassociate bcsel with ior/iand",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b45d54a388ca2aa0f8f27affd90b6ab6ed6e4dc2",
+        "description": "agx: optimize b2x(inot)",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "34ca925064eca160aacb3d793d46dbe911b32de1",
+        "description": "agx: don't inline imms into stack_store",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f6c17cbe48e5ab85bf338854a444d4162ddda857",
+        "description": "ail: use template for tiled memcpy",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "075e59505804711c517a00c110421e021b4a2abd",
+        "description": "ail: port tiling routines to c++",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "104ba72547dcb72d4df7e1f643ab99fbd2709679",
+        "description": "ail: add tests for linear<-->twiddled copies",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2c9189434f04ccededbe9f28b2402fd6960d13ee",
+        "description": "docs/asahi: fix strided linear note",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f836d573e48c6c72d301b1633c49f4b3a571d198",
+        "description": "agx: only run early tests if needed",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7825044c39d19327d80d248065c07c0ad92bd859",
+        "description": "asahi: honour discard_whole | persistent",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "793ac040770ed443da53d29515512665796f5f6b",
+        "description": "asahi: handle read-only SSBOs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "97a945246c65d8a94266b8781a1e6188e26439a9",
+        "description": "asahi: fix valid buffer tracking for SSBO/image/XFB",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6689b083d889f94b14073d1498d00478ee6331ba",
+        "description": "asahi: don't sync for uninitialized buffer",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9e8ce4550c033d9af66d1f3f694c628c3c220400",
+        "description": "asahi: enable tcs caching",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "19da2f6d306eb9b15ca4c8d35e81473de7571cd5",
+        "description": "asahi: sync with query mismatches",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3b927567ac927316eb11901f50ee1573ead44fd2",
+        "description": "Revert \"asahi: don't canonicalize nans/flush denorms when copying\"",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "ab7fb3d40072612ffe4d073ff2882102ffcb8a1c",
+        "notes": null
+    },
+    {
+        "sha": "74110ef21d0960b28fc175727a7446c5543cfc7e",
+        "description": "asahi: batch: Trace before waiting for syncobj",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ff900ceffec057cf7b3289a39e38fd39e1a108d8",
+        "description": "asahi: Enable scratch debugging",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8845702f8cee01d74212a817c49fb4ccfcf3a90f",
+        "description": "asahi: Allocate scratch for shaders",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "bb5277aa3de1aeeeb8d6a9f6b30825ed994e02e4",
+        "description": "asahi: Hook up scratch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fa475c1b5673a5adf1ac91ba8fc7578dc96ea179",
+        "description": "asahi: scratch: Add feature to debug core IDs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "494399c65c38627c75ad80ccdea9bafd330bc7ae",
+        "description": "asahi: Implement scratch allocation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da9677f14b413c16dec681e7d44be66f34b13acf",
+        "description": "asahi: cmdbuf: Fix scratch bucket offset/size",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "d6cc820d1a78bc9fbf01c51d6782e010268ad364",
+        "description": "asahi: libagx: Move PACKED and GLOBAL macros to libagx.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "eec7c4beb829a962e393ec3d6893ba6b0f929f90",
+        "description": "agx: compiler: Enable stack_adjust",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1f1751d25836b2bda36143b91f3b4fea3c10939a",
+        "description": "agx: compiler: Export scratch size to the driver",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b89da92a5e6b2c1f622f152114b280ba8371465a",
+        "description": "agx: compiler: Add fence_helper_exit_agx barrier",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c406ce793b9092b3d1e67a64687ad5db34845ef1",
+        "description": "agx: Add scaffolding to build the helper shader at device init",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "05c8b59f5bb14eb798db2321df05dde3617e88d4",
+        "description": "agx: Hook up helper intrinsics into CL",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "30862d718950509ae382eaafc8c88c0794ade4d2",
+        "description": "agx: Hook up AGX helper NIR intrinsics",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b07dbf7b0f155688b88df9d43a9493f72112074f",
+        "description": "nir: Add AGX-specific helper opcodes",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5d0f1ca77faecb36870a5b3f6e52c106cd8c93b1",
+        "description": "agx: Rename some SRs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "28d34f63527982d6fd931ab424a91d8fe0ede8f9",
+        "description": "asahi: libagx: introduce AGX_STATIC_ASSERT",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8661006ef041d4b39fa68a82d5f01e327cf7ad20",
+        "description": "agx: add some more bitop tests",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "923767a96888c8b65e9e0ff9dc1c1afd687da527",
+        "description": "agx: Add a bitop optimizer pass",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2b89eb979e219f0673366e85f2c7d23d51bd37bb",
+        "description": "agx: Fuse not into and/or/xor",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ba508fe85453737d4257a9d12b82ad050c9bf40a",
+        "description": "agx: Remove and/or/xor pseudo ops",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a5b6ff3ccc72204b2f11f017be9dbb13b501bdd7",
+        "description": "agx: Add more bitops in agx_bitop_table",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "62001e175f41bc544cbabaf4c139d01bfb6bbfee",
+        "description": "asahi: fix UB in qbo's",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "a06b51559b5381845c384c362f4600bbbe3252ad",
+        "description": "asahi: plug geometry heap leak",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "877c180677eee2c0d20491dc91c985fd77f43ae2",
+        "description": "asahi: plug glsl type leak",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "06cf222830b107d5c1c919e3ed91d275f6de23dd",
+        "description": "asahi: plug so target leak",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e2c5a9335829cf2854a1bf6f66b65407f59fbb61",
+        "description": "asahi: plug early_serialized_nir leak",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ffac4e71796ba1a11b4cee0f49ebe4fca78bcf9e",
+        "description": "asahi: plug pre-gs leak",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7b44d15e5f81c7fc612057be3f56d3b1436da332",
+        "description": "asahi: plug geometry shader leaks",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1e973dd5a95ad583b6e2377626dda0e6ed546236",
+        "description": "asahi: rework meta shader infra",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "7eda3da983a32f47862b69ff12beaf3336fbd867",
+        "description": "asahi: plug passthrough tcs leak",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e91c0b64230047412c940b7713b54b1e9ecc5a00",
+        "description": "asahi: delete bogus assertion",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "52619621869b966cb604242183ece1f4ed42ff9f",
+        "description": "asahi: fix prim restart unrolling with indirects",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c0d3bf3608fb41b595c60d18451494fb73d0aab8",
+        "description": "agx: optimize vote_eq",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0de7018879c2754f30b7b0454dfbae6a83932b0e",
+        "description": "agx: optimize first_invocation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fb81201a34fbc526ca49614d293f541fdb428452",
+        "description": "agx: implement active_subgroup_invocation_agx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "311070f7aff2912941427a415f88cd7766adba97",
+        "description": "nir: add active_subgroup_invocation_agx sysval",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "da924e2f0346935d791b45fbd71ffc0b80352915",
+        "description": "agx: fuse ballot+cmp",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "def00f7bf0fb1bff9c8d2436016059d530f2a8ef",
+        "description": "agx: introduce ballot pseudo",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "92dcf75fcd745ba6ad81a9a1ac49810abcb03c1c",
+        "description": "agx: lower more subgroups",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "f52e0bd70ba2b3031324fdc55d4ccd9d8d9919df",
+        "description": "agx: implement load_subgroup_invocation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6f7511b522d1e12467852e27180a3f3efe0caa30",
+        "description": "asahi: decode uniform_high records",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "1ee9b8b668ff227b7a7e8992323acacc03da540b",
+        "description": "asahi: optimize more when linking libagx",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9287bec8929da620b4d384b548e58f8145107f15",
+        "description": "asahi: fix unbound ssbos",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "3a6083dea3791bb3107dd3e3ed505f27117af055",
+        "description": "asahi: enable robustness",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "591ce607e0df4582f439a9de916787af669969b1",
+        "description": "asahi: implement reset queries",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5dc0f5ccba1f18d5bcff7eacf8e123122328a604",
+        "description": "asahi: implement VBO robustness",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4aadf6752370aea5e9737fd94b0586b853fc96fb",
+        "description": "asahi: fix metadata for images with VS lowered to GS",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "9753cd44f73f76d1e1807707a7dbadd5b72fad2c",
+        "description": "asahi: Implement skeleton for tessellation",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d37d1b7043acbaf087842b5e0c9c3c5f207be51",
+        "description": "asahi: lower poly stipple",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "2d913892b2983adbafb30074ec8249191b62b50e",
+        "description": "asahi: gut macOS related code",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5e8168f1b7c0b66bc8aacdbf30ad6cf4ed25a67e",
+        "description": "asahi: add more uapi stubs",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "db144685a9acd8f06adfab2e978bf2dde8bebac0",
+        "description": "compiler: add a vs.tes_agx bit",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "c6e855b64b9015235462959b2b7f3e9fc34b2f1f",
+        "description": "intel/compiler: Verify SIMD16 is used for xe2 BTD/RT dispatch",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "820e04ead4e3741c9ae93ff2f9197a4edc9af765",
+        "description": "intel/compiler: Implement nir_intrinsic_load_topology_id_intel for xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "8f880d0ad7e9227bf1e99628b611bc280c1782ba",
+        "description": "intel/dev: Update max_subslices_per_slice comment",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "b533bf7361f6bbdae235904972f036dcbf979055",
+        "description": "intel/compiler: Set branch shader required-width as 16 for xe2",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "5022e5f4bf80b6fb5134eb165dd3891561bf0fad",
+        "description": "iris: Fix iris_batch_is_banned() check",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "665d30b5448f606d7a79afe0596c3a2264ab3e15",
+        "notes": null
+    },
+    {
+        "sha": "460d2c46a903fed295a1528c8b6273dd6b0e0d19",
+        "description": "mesa: fix off-by-one for newblock allocation in dlist_alloc",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "4423454daa70b2ac01acc193a503fe4d02feb787",
+        "description": "intel/common: Implement xe_engines_is_guc_semaphore_functional()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ac941b13f147fe5c16c014e74f9fdec002645413",
+        "description": "intel: Sync xe_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "dff96257da6ea1e2eeae1852085b8c1bfa061ac5",
+        "description": "intel/common: Implement i915_engines_is_guc_semaphore_functional()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "731121c9824b234ee88800004b75318ba4bb5fb5",
+        "description": "intel: Sync i915_drm.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "0a129d8e1f3842ad566b13796b7e5f04fa9b1b34",
+        "description": "iris: Use intel_engines_supported_count()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "29ee85c2039a202d522051b987e129efb00d18bd",
+        "description": "anv: Use intel_engines_supported_count()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "fe2982278f46aa4a802839c193cd8afc7831108c",
+        "description": "intel/common: Add intel_engines_supported_count()",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "ffca423472ebab901d50ef63dc1f076bbc8303a5",
+        "description": "intel: Remove circular dependency between intel/dev and intel/common",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "6b5c446556b96d58d7741582872451bb355e6d48",
+        "description": "intel/common: Fix location of C++ support macro in intel_gem.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "398bdb46babcf6d9137ace76f1b58e35c43db60d",
+        "description": "anv: Drop include to common/i915/intel_gem.h",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
+    {
+        "sha": "e136a0629dfe7ecd7124934d3078351ba50617a9",
+        "description": "radv/gfx11+: add rtwave32 perftest option",
+        "nominated": false,
+        "nomination_type": 3,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null,
+        "notes": null
+    },
     {
         "sha": "90eae30bcb84d54dc871ddbb8355f729cf8fa900",
         "description": "rusticl/mem: move pipe_image_host_access into Image",
@@ -1524,7 +56094,7 @@
         "description": "Revert \"zink: always force flushes when originating from api frontend\"",
         "nominated": true,
         "nomination_type": 2,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "03f049f49730b8b1268f2975fc34ac2b1f9a4ef9",
         "notes": null
@@ -1534,7 +56104,7 @@
         "description": "zink: Always set mfence->submit_count to the fence submit_count",
         "nominated": true,
         "nomination_type": 0,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -1904,7 +56474,7 @@
         "description": "radv: fix RGP barrier reason for RP barriers inserted by the runtime",
         "nominated": true,
         "nomination_type": 0,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -2414,7 +56984,7 @@
         "description": "zink: adjust swizzled deref loads by the variable component offset",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "17a35412dcc77a3058107100d27f734796a9d0ca",
         "notes": null
@@ -2864,7 +57434,7 @@
         "description": "iris: Wait for drm_xe_exec_queue to be idle before destroying it",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -3734,7 +58304,7 @@
         "description": "venus: fix image reqs cache store locking",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "b51ff22fbe8c9786f968e102ef8d223f415fcaba",
         "notes": null
@@ -4534,7 +59104,7 @@
         "description": "zink: run sparse lowering after all optimization passes",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "0d652c0c8db33ff80d16f30b2d2e8f4413946338",
         "notes": null
@@ -4544,7 +59114,7 @@
         "description": "zink: move sparse lowering up in file",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "0d652c0c8db33ff80d16f30b2d2e8f4413946338",
         "notes": null
@@ -4554,7 +59124,7 @@
         "description": "zink: zero allocate resident_defs array in ntv",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "73ef54e34242fa59803a3a89b5a6eb92053e917e",
         "notes": null
@@ -4564,7 +59134,7 @@
         "description": "zink: fix sparse bo placement",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "c71287e70c2bf4aac96b24635e48ec13cd31fddf",
         "notes": null
@@ -4704,7 +59274,7 @@
         "description": "zink: prune dmabuf export tracking when adding resource binds",
         "nominated": true,
         "nomination_type": 0,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -4794,7 +59364,7 @@
         "description": "zink: add a tu flake",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -5294,7 +59864,7 @@
         "description": "radeonsi: try to disable dcc if compute_blit is the only option",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -6224,7 +60794,7 @@
         "description": "venus: force async pipeline create on threads creating descriptor pools",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "d17ddcc84773899ef8b022d94969ffc0909db0bc",
         "notes": null
@@ -6724,7 +61294,7 @@
         "description": "radv/rt: Use doubles inside intersect_ray_amd_software_tri",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -7744,7 +62314,7 @@
         "description": "vulkan/runtime: add helper to query attachment layout",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -8244,7 +62814,7 @@
         "description": "dzn: Don't set view instancing mask until after the PSO",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -8774,7 +63344,7 @@
         "description": "anv: Fix calculation of syncs required in Xe KMD",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -10504,7 +65074,7 @@
         "description": "intel/eu/xe2+: Translate brw_reg fields in REG_SIZE units to physical 512b GRF units during codegen.",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
@@ -12334,7 +66904,7 @@
         "description": "compiler/spirv: vtn_add_printf_string support for handling OpBitcast",
         "nominated": false,
         "nomination_type": 3,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null,
         "notes": null
diff --git a/VERSION b/VERSION
index 1b3e74f84e7..b57d498036e 100644
--- a/VERSION
+++ b/VERSION
@@ -1 +1 @@
-24.0.1
+24.0.9
diff --git a/docs/egl.rst b/docs/egl.rst
index 9d17ca266ae..6f4f75c8a76 100644
--- a/docs/egl.rst
+++ b/docs/egl.rst
@@ -1,7 +1,7 @@
 EGL
 ===
 
-The current version of EGL in Mesa implements EGL 1.4. More information
+The current version of EGL in Mesa implements EGL 1.5. More information
 about EGL can be found at https://www.khronos.org/egl/.
 
 The Mesa's implementation of EGL uses a driver architecture. The main
diff --git a/docs/envvars.rst b/docs/envvars.rst
index 300f2cd40e1..a6af0532467 100644
--- a/docs/envvars.rst
+++ b/docs/envvars.rst
@@ -1357,7 +1357,7 @@ RADV driver environment variables
    ``video_decode``
       enable experimental video decoding support
    ``gsfastlaunch2``
-      use GS_FAST_LAUNCH=2 for Mesh shaders (GFX11+)
+      use GS_FAST_LAUNCH=2 for Mesh shaders (GFX11+ dGPUs only)
 
 .. envvar:: RADV_TEX_ANISO
 
diff --git a/docs/relnotes.rst b/docs/relnotes.rst
index 40164bf1d42..1238954e1c3 100644
--- a/docs/relnotes.rst
+++ b/docs/relnotes.rst
@@ -3,6 +3,14 @@ Release Notes
 
 The release notes summarize what's new or changed in each Mesa release.
 
+-  :doc:`24.0.9 release notes <relnotes/24.0.9>`
+-  :doc:`24.0.8 release notes <relnotes/24.0.8>`
+-  :doc:`24.0.7 release notes <relnotes/24.0.7>`
+-  :doc:`24.0.6 release notes <relnotes/24.0.6>`
+-  :doc:`24.0.5 release notes <relnotes/24.0.5>`
+-  :doc:`24.0.4 release notes <relnotes/24.0.4>`
+-  :doc:`24.0.3 release notes <relnotes/24.0.3>`
+-  :doc:`24.0.2 release notes <relnotes/24.0.2>`
 -  :doc:`24.0.1 release notes <relnotes/24.0.1>`
 -  :doc:`24.0.0 release notes <relnotes/24.0.0>`
 -  :doc:`23.3.3 release notes <relnotes/23.3.3>`
@@ -409,6 +417,14 @@ The release notes summarize what's new or changed in each Mesa release.
    :maxdepth: 1
    :hidden:
 
+   24.0.9 <relnotes/24.0.9>
+   24.0.8 <relnotes/24.0.8>
+   24.0.7 <relnotes/24.0.7>
+   24.0.6 <relnotes/24.0.6>
+   24.0.5 <relnotes/24.0.5>
+   24.0.4 <relnotes/24.0.4>
+   24.0.3 <relnotes/24.0.3>
+   24.0.2 <relnotes/24.0.2>
    24.0.1 <relnotes/24.0.1>
    24.0.0 <relnotes/24.0.0>
    23.3.3 <relnotes/23.3.3>
diff --git a/docs/relnotes/24.0.1.rst b/docs/relnotes/24.0.1.rst
index 21478e67f51..b77cad62740 100644
--- a/docs/relnotes/24.0.1.rst
+++ b/docs/relnotes/24.0.1.rst
@@ -19,7 +19,7 @@ SHA256 checksum
 
 ::
 
-    TBD.
+    f387192b08c471c545590dd12230a2a343244804b5fe866fec6aea02eab57613  mesa-24.0.1.tar.xz
 
 
 New features
diff --git a/docs/relnotes/24.0.2.rst b/docs/relnotes/24.0.2.rst
new file mode 100644
index 00000000000..282fd331869
--- /dev/null
+++ b/docs/relnotes/24.0.2.rst
@@ -0,0 +1,230 @@
+Mesa 24.0.2 Release Notes / 2024-02-28
+======================================
+
+Mesa 24.0.2 is a bug fix release which fixes bugs found since the 24.0.1 release.
+
+Mesa 24.0.2 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.2 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    94e28a8edad06d8ed2b83eb53f253b9eb5aa62c3080f939702e1b3039b56c9e8  mesa-24.0.2.tar.xz
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- KHR-Single-GL46.arrays_of_arrays_gl.AtomicUsage fails on MTL
+- GTF-GL46.gtf42.GL3Tests.texture_storage.texture_storage_texture_as_framebuffer_attachment fails on MTL
+- [intel][anv][build][regression] - genX_grl.h:27:10: fatal error: grl/grl_cl_kernel.h: No such file or directory
+- RX 6600 VDPAU not recognizing HEVC_MAIN_10 correctly
+- Running an app on another AMD GPU (offload, DRI_PRIME) produces corrupted frames on Wayland.
+- VDPAU declares a texture as "immutable" without also setting its ImmutableLevels attribute.
+- RX6600 hardware HEVC video decode fails for VDPAU but works for VA-API. (Can lock up GPU!)
+- Rusticl panics when getting program build logs using opencl.hpp
+- ue5 game issues lighting Rog Ally 7080u (z1e)
+- Missing textures in RoboCop: Rogue City with mesh shaders enabled
+- radv: Multiview PSO forgets to export layer in some cases.
+- zink: flickering artifacts in Selaco
+
+
+Changes
+-------
+
+Boyuan Zhang (1):
+
+- radeonsi/vcn: only use multi slices reflist when available
+
+Chia-I Wu (1):
+
+- radv: fix pipeline stats mask
+
+Chris Rankin (2):
+
+- vdpau: Declare texture object as immutable using helper function.
+- vdpau: Refactor query for video surface formats.
+
+Connor Abbott (1):
+
+- tu: Follow pipeline compatibility rules for dynamic descriptors
+
+Daniel Schürmann (1):
+
+- spirv: Fix SpvOpExpectKHR
+
+Daniel Stone (2):
+
+- egl/wayland: Add opaque-equivalent FourCCs
+- egl/wayland: Fix EGL_EXT_present_opaque
+
+Dave Airlie (2):
+
+- nouveau/winsys: fix bda heap leak.
+- nvk: fix dri options leak.
+
+David Rosca (1):
+
+- frontends/va: Only set VP9 segmentation fields when segmentation is enabled
+
+Eric Engestrom (10):
+
+- docs: add sha256sum for 24.0.1
+- [24.0-only change] ci: increase the kernel+rootfs builds timeout to 2h
+- .pick_status.json: Update to c6e855b64b9015235462959b2b7f3e9fc34b2f1f
+- .pick_status.json: Update to dce20690542c84ac00509a6db7902dcfc90b25bb
+- .pick_status.json: Update to c12300844d3f084ca011a3f54f0cbaa9807418f0
+- .pick_status.json: Mark 3b927567ac927316eb11901f50ee1573ead44fd2 as denominated
+- .pick_status.json: Update to 423add61e2d5b6ab6b5505d1feec01b93609f8fc
+- .pick_status.json: Update to 4071c399a27932ea9253eb8a65d5725504bac6f3
+- .pick_status.json: Update to 82ff9204abab5267f82a9ce73f9dca1541ef5ee6
+- [24.0 only] disable clang-format
+
+Erik Faye-Lund (1):
+
+- mesa/main: allow GL_BGRA for FBOs
+
+Faith Ekstrand (1):
+
+- nvk: Invalidate the texture cache before MSAA resolves
+
+Hans-Kristian Arntzen (1):
+
+- radv: export multiview in VS/TES/GS for depth-only rendering
+
+Iago Toral Quiroga (1):
+
+- v3d,v3dv: fix BO allocation for shared vars
+
+Ian Romanick (1):
+
+- nir: Mark nir_intrinsic_load_global_block_intel as divergent
+
+Jesse Natalie (1):
+
+- dzn: Don't set view instancing mask until after the PSO
+
+Jordan Justen (1):
+
+- intel/dev: Add 2 additional ADL-N PCI ids
+
+Juston Li (1):
+
+- venus: fix image reqs cache store locking
+
+Karol Herbst (3):
+
+- zink: lower unaligned memory accesses
+- rusticl/program: fix CL_PROGRAM_BINARIES for devs with no builds
+- meson: do not pull in clc for clover
+
+Konstantin Seurer (5):
+
+- zink: Always set mfence->submit_count to the fence submit_count
+- Revert "zink: always force flushes when originating from api frontend"
+- llvmpipe: Use full subgroups when possible
+- gallivm: Consider the initial mask when terminating loops
+- ci: Update llvmpipe trace checksums
+
+Lionel Landwerlin (8):
+
+- vulkan/runtime: add helper to query attachment layout
+- anv: fixup push descriptor shader analysis
+- anv: reenable ANV_ALWAYS_BINDLESS
+- anv: fix Wa_16013994831 macros
+- anv: disable Wa_16013994831
+- intel/nir: only consider ray query variables in lowering
+- anv: limit depth flush on dynamic render pass suspend
+- anv: add missing generated file dep
+
+Martin Roukala (né Peres) (1):
+
+- radv/ci: switch vkcts-polaris10 from mupuf to KWS' farm
+
+Michel Dänzer (1):
+
+- egl/wayland: Flush after blitting to linear copy
+
+Mike Blumenkrantz (25):
+
+- zink: prune dmabuf export tracking when adding resource binds
+- zink: fix sparse bo placement
+- zink: zero allocate resident_defs array in ntv
+- zink: move sparse lowering up in file
+- zink: run sparse lowering after all optimization passes
+- zink: adjust swizzled deref loads by the variable component offset
+- zink: clamp zink_gfx_lib_cache::stages_present for generated tcs
+- zink: promote gpl libs freeing during shader destroy out of prog loop
+- zink: don't add VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT for sparse textures
+- zink: delete maxDescriptorBufferBindings checks
+- zink: avoid infinite recursion on (very) small BAR systems in bo alloc
+- zink: add checks/compat for low-spec descriptor buffer implementations
+- zink: add a second fence disambiguation case
+- zink: force host-visible allocations for MAP_COHERENT resources
+- zink: handle stencil_fallback in zink_clear_depth_stencil
+- zink: don't destroy the current batch state on context destroy
+- mesa: check driver format support for certain GetInternalformativ queries
+- vk/wsi/x11/sw: use swapchain depth for putimage
+- zink: only scan active batch states for free states if > 1 exist
+- zink: fix longstanding issue with active batch state recycling
+- zink: assert that batch_id is valid in zink_screen_check_last_finished()
+- zink: clamp in_rp clears to fb size
+- zink: fix (dynamic rendering) execution of scissored clears during flush
+- zink: lock buffer age when chundering swapchain for readback
+- zink: flag acquired swapchain image as readback target on acquire, not present
+
+Patrick Lerda (3):
+
+- r300: fix vertex_buffer related refcnt imbalance
+- r300: fix r300_destroy_context() related memory leaks
+- r300: fix memory leaks when register allocation fails
+
+Pavel Ondračka (1):
+
+- r300: add explicit flrp lowering
+
+Rhys Perry (2):
+
+- aco/ra: don't initialize assigned in initializer list
+- aco/ra: fix GFX9- writelane
+
+Sagar Ghuge (1):
+
+- nir: Allow nir_texop_tg4 in implicit derivative
+
+Samuel Pitoiset (4):
+
+- radv: fix RGP barrier reason for RP barriers inserted by the runtime
+- radv: enable GS_FAST_LAUNCH=2 by default for RDNA3 APUs (Phoenix)
+- spirv: only consider IO variables when adjusting patch locations for TES
+- radv: fix indirect dispatches on compute queue with conditional rendering on GFX7
+
+Tapani Pälli (2):
+
+- intel/blorp: disable use of REP16 independent of format
+- iris: make sure DS and TE are sent in pairs on >= gfx125
+
+Yiwei Zhang (2):
+
+- venus: force async pipeline create on threads creating descriptor pools
+- venus: fix the cmd stride used for qfb recording
+
+thfrwn (1):
+
+- mesa: fix off-by-one for newblock allocation in dlist_alloc
diff --git a/docs/relnotes/24.0.3.rst b/docs/relnotes/24.0.3.rst
new file mode 100644
index 00000000000..2ee29a6d002
--- /dev/null
+++ b/docs/relnotes/24.0.3.rst
@@ -0,0 +1,262 @@
+Mesa 24.0.3 Release Notes / 2024-03-13
+======================================
+
+Mesa 24.0.3 is a bug fix release which fixes bugs found since the 24.0.2 release.
+
+Mesa 24.0.3 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.3 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    77aec9a2a37b7d3596ea1640b3cc53d0b5d9b3b52abed89de07e3717e91bfdbe  mesa-24.0.3.tar.xz
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- v3d: Line rendering broken when smoothing is enabled
+- DR crashes with mesa 24 and rusticl (radeonsi)
+- RADV: GPU crash when setting 'RADV_DEBUG=allbos'
+- [intel] mesa ftbfs with time_t64
+- [radv] Crash when VkGraphicsPipelineCreateInfo::flags = ~0u
+- Gen4 assertion \`force_writemask_all' failed.
+- [radv] Holographic projection texture glitch in Rage 2
+- [build failure] [armhf] - error: #error "_TIME_BITS=64 is allowed only with _FILE_OFFSET_BITS=64"
+- RustiCL: Callbacks are not called upon errors
+- MTL: regressions in vulkancts due to BO CCS allocations
+- zink: spec\@ext_external_objects\@vk-image-overwrite fail
+
+
+Changes
+-------
+
+Boyuan Zhang (1):
+
+- meson: bump the minimal required vdpau version to 1.4
+
+Caio Oliveira (1):
+
+- intel/compiler: Fix SIMD lowering when instruction needs a larger SIMD
+
+Chia-I Wu (1):
+
+- aco: fix nir_op_pack_32_4x8 handling
+
+Christian Gmeiner (1):
+
+- etnaviv: Fix how we determine the max supported number of varyings
+
+Corentin Noël (1):
+
+- zink: Return early if the file descriptor could not have been duplicated/acquired
+
+Daniel Schürmann (1):
+
+- radv: fix initialization of radv_shader_layout->use_dynamic_descriptors
+
+Danylo Piliaiev (1):
+
+- tu: Fix dynamic state not always being emitted
+
+David Heidelberg (6):
+
+- drm-shim: Avoid invalid file and time bits combination
+- ci/intel: decompose anv-tgl-test so we can specify custom devices for TGL
+- ci/intel: add acer-cp514-2h-11{30,60}g7-volteer
+- ci/intel: move machine definition to the intel-tgl-skqp job
+- ci/intel: split asus-cx9400-volteer into acer-cp514-2h-11{30,60}g7-volteer
+- intel/tools: avoid invalid time and file bits combination
+
+David Rosca (1):
+
+- radeonsi/vcn: Use temporal_layer_index to select temporal layer
+
+Eric Engestrom (6):
+
+- docs: add sha256sum for 24.0.2
+- .pick_status.json: Update to 7792ee1c15379d95ccb20ce34352473f2bb2bfbd
+- .pick_status.json: Update to f3fe1f2f18d7ccc8a7cf85cd88c4bdf426445702
+- .pick_status.json: Update to e1afffe7fa7bd8e1cd1f7e58cfa2f33faf889628
+- .pick_status.json: Mark a367cd49314a993d09168e790d3090a2303a48d9 as denominated
+- .pick_status.json: Update to 9a57b1df5395bbcaa6f48ea851860bedc7ceefb9
+
+Eric R. Smith (1):
+
+- panfrost: protect alpha calculation from accessing non-existent component
+
+Faith Ekstrand (4):
+
+- nvk: Return os_page_size for minMemoryMapAlignment
+- nvk: Document the register name for the helper load workaround
+- nvk: Always wait for the FALCON in set_priv_reg
+- nvk: Disable the Out Of Range Address exception
+
+Felix DeGrood (1):
+
+- driconf: add SotTR DX12 to Intel XeSS workaround
+
+Friedrich Vock (3):
+
+- radv/rt: Handle monolithic pipelines in capture/replay
+- radv: Set SCRATCH_EN for RT pipelines based on dynamic stack size
+- radv/rt: Fix frontface culling with emulated RT
+
+Georg Lehmann (6):
+
+- aco: create pseudo instructions with correct struct
+- aco/post-ra: rename overwritten_subdword to allow additional uses
+- aco/post-ra: assume scc is going to be overwritten by phis at end of blocks
+- aco: store if pseudo instr needs scratch reg
+- aco/post-ra: track pseudo scratch sgpr/scc clobber
+- aco/ssa_elimination: check if pseudo scratch reg overwrittes regs used for v_cmpx opt
+
+Gert Wollny (2):
+
+- zink: use only ZINK_BIND_DESCRIPTOR
+- zink/nir-to-spirv: Make sure sampleid for InterpolateAtSample is int
+
+Ian Romanick (1):
+
+- i915: Fix value returned for PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS
+
+Jesse Natalie (3):
+
+- wgl: Check for stw_device->screen before trying to destroy it
+- wgl: Initialize DEVMODE struct
+- nir_lower_tex_shadow: For old-style shadows, use vec4(result, 0, 0, 1)
+
+Job Noorman (1):
+
+- ir3: fix alignment of spill slots
+
+Jonathan Gray (1):
+
+- intel/dev: update DG2 device names
+
+Jose Maria Casanova Crespo (1):
+
+- ci: Adds /usr/local/bin to PATH at piglit-traces.sh
+
+José Roberto de Souza (1):
+
+- iris/xe: Consider pat_index while unbinding the bo
+
+Juan A. Suarez Romero (2):
+
+- v3d: add load_fep_w_v3d intrinsic
+- v3d: fix line coords with perspective projection
+
+Karol Herbst (1):
+
+- rusticl/event: we need to call the CL_COMPLETE callback on errors as well
+
+Kenneth Graunke (2):
+
+- intel/brw: Allow CSE on TXF_CMS_W_GFX12_LOGICAL
+- iris: Fix tessellation evaluation shaders that use scratch
+
+Konstantin Seurer (2):
+
+- radv/rt: Use doubles inside intersect_ray_amd_software_tri
+- radv/rt: Fix raygen_imported condition
+
+Lionel Landwerlin (3):
+
+- anv: fix non matching image/view format attachment resolve
+- anv: fix incorrect ISL usage in buffer view creation
+- anv/iris/blorp: use the right MOCS values for each engine
+
+Mike Blumenkrantz (16):
+
+- zink: apply all storage memory masks to control barriers if no modes are specified
+- zink: emit SpvCapabilityImageMSArray for ms arrayed storage images
+- zink: null out bo usage when allocating from slab
+- zink: fix unsynchronized read-mapping of device-local buffers
+- zink: force max buffer alignment on return ptrs for mapped staging buffers
+- zink: fix stencil-only blitting with stencil fallback
+- vulkan/dispatch_table: add an uncompacted version of the table
+- zink: use uncompacted vk_dispatch_table
+- egl/dri2: use the right egl platform enum
+- zink: stop enabling EXT_conservative_rasterization
+- zink: fix PIPE_CAP_MAX_SHADER_PATCH_VARYINGS
+- zink: call CmdSetRasterizationStreamEXT when using shader objects
+- nvk: bump NVK_PUSH_MAX_SYNCS to 256
+- util/blitter: iterate samples in stencil_fallback
+- mesa: fix CopyTexImage format compatibility checks for ES
+- driconf: add radv_zero_vram for Crystal Project (1637730)
+
+Oskar Viljasaar (1):
+
+- compiler/types: Fix glsl_dvec*_type() helpers
+
+Patrick Lerda (2):
+
+- r300: fix constants_remap_table memory leak
+- radeonsi/gfx10: fix main_shader_part_ngg_es memory leak
+
+Pierre-Eric Pelloux-Prayer (1):
+
+- radeonsi: try to disable dcc if compute_blit is the only option
+
+Rhys Perry (1):
+
+- aco: don't combine linear and normal VGPR copies
+
+Robert Beckett (1):
+
+- vulkan/wsi: fix force_bgra8_unorm_first
+
+Rohan Garg (1):
+
+- anv, blorp: Set COMPUTE_WALKER Message SIMD field
+
+Samuel Pitoiset (5):
+
+- radv: fix conditional rendering with direct mesh+task draws and multiview
+- radv: fix conditional rendering on compute queue on GFX6
+- radv: add missing conditional rendering for indirect dispatches on GFX6
+- radv: enable radv_zero_vram for RAGE2
+- util/u_debug: fix parsing of "all" again
+
+Simon Ser (1):
+
+- egl/wayland: ensure wl_drm is available before use
+
+Tapani Pälli (4):
+
+- iris: make sure aux is disabled for external objects
+- anv: make sure aux is disabled for memory objects
+- hasvk: make sure aux is disabled for memory objects
+- crocus: make sure aux is disabled for memory objects
+
+Vasily Khoruzhick (4):
+
+- lima: ppir: always use vec4 for output register
+- lima: ppir: use dummy program if FS has empty body
+- lima: gpir: abort compilation if load_uniform instrinsic src isn't const
+- lima: update expected CI failures
+
+Yiwei Zhang (1):
+
+- venus: fix ffb batch prepare for a corner case and avoid a memcpy UB
+
+qbojj (1):
+
+- vulkan: Fix calculation of flags in vk_graphics_pipeline_state_fill
diff --git a/docs/relnotes/24.0.4.rst b/docs/relnotes/24.0.4.rst
new file mode 100644
index 00000000000..c3482ab86b5
--- /dev/null
+++ b/docs/relnotes/24.0.4.rst
@@ -0,0 +1,220 @@
+Mesa 24.0.4 Release Notes / 2024-03-27
+======================================
+
+Mesa 24.0.4 is a bug fix release which fixes bugs found since the 24.0.3 release.
+
+Mesa 24.0.4 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.4 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    90febd30a098cbcd97ff62ecc3dcf5c93d76f7fa314de944cfce81951ba745f0  mesa-24.0.4.tar.xz
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- nvk: dota 2 crashes after ~5 seconds in game
+- VAAPI: Incorrect HEVC block size reported with radeonsi
+- radv: WWE 2K24 has very quirky DCC issues on RDNA2
+- RUSTICL creating a shared reference to mutable static is discouraged and will become a hard error
+- KiCAD 3D Viewer - rounded pads rendered incorrectly (texture mapping or stencil test error)
+- OpenSCAD rendering incorrect and inconsistent on radeonsi
+- [radv] Half-Life Alyx renders solid black for reflective surfaces
+- [RX 7900 XTX] Helldivers 2 cause GPU reset
+- radeon: Crash in radeon_bo_can_reclaim_slab
+- RV530 renders improperly at non 4:3 resolutions.
+- anv: new cooperative matrix failures with CTS 1.3.8.0
+- \`[gfxhub0] no-retry page fault` triggered by \`AMD_TEST=testdmaperf` on gfx90c APU
+
+
+Changes
+-------
+
+Boris Brezillon (1):
+
+- panvk: Disable global offset on varying and non-VS attribute descriptors
+
+Caio Oliveira (2):
+
+- intel/brw: Use helper to create accumulator register
+- intel/brw: Fix validation of accumulator register
+
+Charlie Turner (1):
+
+- {vulkan,radv,anv}/video: fix issue in H264 scaling lists derivation
+
+Corentin Noël (2):
+
+- st_pbo/compute: Use the correct structure type when allocating a specialized key
+- zink: Make sure to initialize all the fields of VkMemoryBarrier
+
+Dave Airlie (1):
+
+- radv/video: fix h265 decode with unaligned w/h
+
+David Rosca (1):
+
+- radv/video: Set maxActiveReferencePictures to 16 for H264/5
+
+Eric Engestrom (5):
+
+- docs: add sha256sum for 24.0.3
+- .pick_status.json: Update to 9b6d6c1d2d0c8a517e974abbf7b75a47a607f6ec
+- .pick_status.json: Update to eac703f69128d5aa6879c9becbad627ce08a7920
+- .pick_status.json: Update to 912e203a534be8b70b3ef8bf00294e9c962e385a
+- .pick_status.json: Update to c0875d21563257442fd91aab5740248b0fd96a5c
+
+Faith Ekstrand (2):
+
+- nir/builder: Correctly handle decl_reg or undef as the first instruction
+- nir/gather_types: Support unstructured control-flow
+
+Francisco Jerez (1):
+
+- intel/eu/xe2+: Translate brw_reg fields in REG_SIZE units to physical 512b GRF units during codegen.
+
+Friedrich Vock (2):
+
+- radv: Only enable SEs that the device reports
+- radeonsi: Only enable SEs that the device reports
+
+Gert Wollny (2):
+
+- nir-to-spirv: Cast SSBO input pointer when needed
+- nir_to_spirv: Allow LOD for external images
+
+Hyunjun Ko (1):
+
+- anv/video: fix scan order for scaling lists on H265 decoding.
+
+Iván Briano (2):
+
+- compiler/types: fix serialization of cooperative matrix
+- intel/cmat: fix stride calculation in cmat load/store
+
+Jordan Justen (1):
+
+- intel/compiler/fs: Restore SIMD32 restriction for ray_queries on Xe2
+
+Karol Herbst (2):
+
+- rusticl/kernel: assign sampler locations before DCEing variables
+- nouveau: call glsl_type_singleton_init_or_ref earlier
+
+Kenneth Graunke (1):
+
+- intel/brw: Fix opt_split_sends() to allow for FIXED_GRF send sources
+
+Konstantin Seurer (1):
+
+- zink: Handle aoa derefs of images
+
+Lionel Landwerlin (6):
+
+- intel/fs: fixup sampler header message
+- anv: return unsupported for FSR images on Gfx12.0
+- anv: ignore descriptor alignment for inline uniforms
+- blorp: handle a few allocation failure cases
+- anv: fix block pool allocation failure
+- anv: fix bitfield checks in gfx runtime flushing
+
+Lucas Stach (1):
+
+- etnaviv: fix fixpoint conversion of negative values
+
+Marek Olšák (8):
+
+- amd/registers: add correct gfx11.x enums for BINNING_MODE
+- radeonsi: disable binning correctly on gfx11.5
+- radeonsi/gfx11: fix programming of PA_SC_BINNER_CNTL_1.MAX_ALLOC_COUNT
+- radeonsi/gfx10.3: add a GPU hang workaround for legacy tess+GS
+- radeonsi/gfx11: add missing DCC_RD_POLICY setting
+- ac/llvm: fix SSBO bounds checking by using raw instead of struct opcodes
+- radeonsi: fix the DMA compute shader
+- r300: port scanout pitch alignment from the DDX to fix DRI3
+
+Mary Guillemard (1):
+
+- nvk: Always copy conditional rendering value before compare
+
+Matthew Waters (1):
+
+- teximage: allow glCopyTex{Sub}Image[123]D into R/RG textures with OpenGL ES 2.0
+
+Mike Blumenkrantz (13):
+
+- zink: destroy batch states after copy context
+- mesa: force rendertarget usage on required-renderable formats
+- zink: try getting sparse page size again without storage bit on fail
+- zink: set the sparse format usage flags directly based on queried props
+- zink: rename optimal_key in update_gfx_program_optimal()
+- zink: use the sanitized key in update_gfx_program_optimal()
+- zink: always sync and replace separable progs even with ZINK_DEBUG=noopt
+- zink: add even more strict checks for separate shader usage
+- glx: only print zink failure-to-load messages if explicitly requested
+- zink: iterate all the modes when doing separate shader fixups
+- zink: do io fixup on patch variables too
+- zink: defer present barrier to flush if a clear is pending
+- zink: clamp swapchain renderarea instead of asserting
+
+Patrick Lerda (1):
+
+- ac/llvm,radeonsi: fix memory leaks triggered by ac_nir_translate() errors
+
+Paulo Zanoni (1):
+
+- anv: don't leak device->vma_samplers
+
+Philipp Zabel (1):
+
+- rusticl: work around reference-to-mutable-static warnings
+
+Pierre-Eric Pelloux-Prayer (2):
+
+- winsys/radeon: pass priv instead NULL to radeon_bo_can_reclaim
+- radeonsi: preserve alpha if needed in kill_ps_outputs_cb
+
+Rhys Perry (4):
+
+- aco: don't reuse misaligned attribute destination VGPRs in VS prologs
+- radv: use dual_color_blend_by_location with Half-Life Alyx
+- aco/cssa: reset equal_anc_out if merging fails
+- aco/gfx11: fix scratch ST mode assembly
+
+Ruijing Dong (3):
+
+- radeonsi/vcn: add enc surface alignment caps
+- frontends/va: add surface alignment attribute
+- radeonsi/vcn: update to use correct padding size.
+
+Samuel Pitoiset (7):
+
+- ac/nir: fix exporting NGG streamout outputs with implicit PrimId from VS/TES
+- radv: disable binning correctly on GFX11.5
+- radv: fix programming of PA_SC_BINNER_CNTL_1.MAX_ALLOC_COUNT on GFX11
+- radv: fix occlusion queries with MSAA and no attachments
+- radv: add radv_force_pstate_peak_gfx11_dgpu and enable it for Helldivers 2
+- radv: add a workaround for null IBO on GFX6
+- radv: invalidate L2 metadata for VK_ACCESS_2_MEMORY_READ_BIT
+
+Yusuf Khan (1):
+
+- nvk: fix valve segfault from setting a descriptor set from NULL
diff --git a/docs/relnotes/24.0.5.rst b/docs/relnotes/24.0.5.rst
new file mode 100644
index 00000000000..2670930e574
--- /dev/null
+++ b/docs/relnotes/24.0.5.rst
@@ -0,0 +1,212 @@
+Mesa 24.0.5 Release Notes / 2024-04-10
+======================================
+
+Mesa 24.0.5 is a bug fix release which fixes bugs found since the 24.0.4 release.
+
+Mesa 24.0.5 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.5 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    38cc245ca8faa3c69da6d2687f8906377001f63365348a62cc6f7fafb1e8c018  mesa-24.0.5.tar.xz
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- anv: vkd3d-proton test_stress_suballocation failure
+- d3d12: Zwift renders with bad textures/lighting
+- NVK: Misrendering with Civilization 6
+- radv: RDR2 might need zerovram
+- Issues rendering gtk4 window decorations on v3d on Fedora-40/mesa-24.0
+- clc: Failure when linking with llvm+clang 18.1 (-Dshared-llvm=disabled)
+- LLVM-18 build issue
+
+
+Changes
+-------
+
+Axel Davy (5):
+
+- frontend/nine: Fix ff ps key
+- frontend/nine: Fix programmable vs check
+- frontend/nine: Fix missing light flag check
+- frontend/nine: Fix destruction race
+- frontend/nine: Reset should EndScene
+
+Connor Abbott (2):
+
+- freedreno/a7xx: Add CP_CCHE_INVALIDATE
+- tu: Implement CCHE invalidation
+
+Dave Airlie (1):
+
+- mesa: reorder st context teardown
+
+David Heidelberg (7):
+
+- r300: add missing licence to the r300_public.h
+- r300: add missing copyright header
+- docs: we support EGL 1.5 for a long time
+- ci/amd: drop old PIGLIT_REPLAY_DESCRIPTION_FILE surpassed by PIGLIT_TRACES_FILE
+- r600: add license header to r600_formats.h
+- r600: add license info to the r600_opcodes.h
+- r600: add license information to the sfn_shader_gs.h
+
+David Stern (1):
+
+- vulkan/wsi/x11: Explicitly discard errors from xcb_present_pixmap.
+
+Eric Engestrom (5):
+
+- docs: add sha256sum for 24.0.4
+- .pick_status.json: Update to 3d68dd78d07b30cefe90d76af681075f4ed6b33d
+- .pick_status.json: Update to fcb568a5d5a52db75fa2f6d04579bb404ca7f597
+- .pick_status.json: Update to 078fe5454e97d073feb18bcdcf7ed1874e8b4835
+- .pick_status.json: Update to 2c1cb65949933a05eedb2eacc15cd893ecaef8aa
+
+Eric R. Smith (2):
+
+- panfrost: mark indirect compute buffer as read
+- gallium: handle copy_image of depth textures
+
+Faith Ekstrand (2):
+
+- nvk: Add a _pad field to nvk_cbuf
+- nvk: Add a _pad field to nvk_fs_key
+
+Georg Lehmann (2):
+
+- aco: don't combine mul+add_clamp to mad_clamp
+- aco/ra: use SDWA for 16bit instructions when the second byte is blocked
+
+Iago Toral Quiroga (2):
+
+- v3d: implement fix for GFXH-1602
+- broadcom/compiler: fix workaround for GFXH-1602
+
+Ian Romanick (3):
+
+- intel/brw: Clear write_accumulator flag when changing the destination
+- intel/brw: Use enums for DPAS source regioning
+- nir: intel/brw: Change the order of sources for nir_dpas_intel
+
+Jesse Natalie (1):
+
+- glsl: Use a stable attr sort for VS in / FS out
+
+Jordan Justen (1):
+
+- intel/dev: Add 0x56be and 0x56bf DG2 PCI IDs
+
+José Roberto de Souza (4):
+
+- anv: Fix calculation of syncs required in Xe KMD
+- iris: Wait for drm_xe_exec_queue to be idle before destroying it
+- anv: Create protected engine context when i915 supports vm control
+- intel: Enable Xe KMD support by default
+
+Juston Li (1):
+
+- Revert "zink: store last pipeline directly for zink_gfx_program::last_pipeline"
+
+Karol Herbst (1):
+
+- meson: fix link failure with llvm-18
+
+Kenneth Graunke (2):
+
+- intel/brw: Fix generate_mov_indirect to check has_64bit_int not float
+- intel/brw: Fix lower_regioning for BROADCAST, MOV_INDIRECT on Q types
+
+Konstantin Seurer (1):
+
+- nir/serialize: Encode data for temporaries
+
+Lionel Landwerlin (7):
+
+- anv: fix protected memory allocations
+- anv: disable protected content around surface state copies
+- anv: disable generated draws in protected command buffers
+- anv: update protection fault property
+- anv: add missing data flush out of L3 for transform feedback writes
+- anv: mark descriptors & pipeline dirty after blorp compute
+- isl: set NullPageCoherencyEnable for depth/stencil sparse surfaces
+
+Lucas Stach (2):
+
+- etnaviv: fix depth writes without testing
+- etnaviv: rs: take src dimensions into account when increasing height alignment
+
+Mike Blumenkrantz (12):
+
+- zink: only check that CUBE_COMPATIBLE for images doesn't subtract flags
+- zink: don't use set_foreach_remove with dmabuf_exports
+- zink: make descriptor pool creation more robust
+- zink: fix shaderdb pipeline compile
+- zink: don't clobber indirect array reads with missing components
+- zink: fix add_derefs case for compact arrays
+- llvmpipe: fix DRAW_USE_LLVM=0
+- glsl: handle xfb resources for spirv before running varying opts
+- mesa: clamp binary pointer in ShaderBinary if length==0
+- glsl: set PSIZ bit in outputs_written when injecting a 1.0 psiz write
+- nir/lower_clamp_color_outputs: fix use with lowered io
+- nir/texcoord_replace: fix scalarized io handling
+
+Nikita Popov (1):
+
+- Pass no-verify-fixpoint option to instcombine in LLVM 18
+
+Patrick Lerda (1):
+
+- r300: fix constants_remap_table memory leak related to the dummy shader path
+
+Paul Gofman (3):
+
+- glsl: allow out arrays in #110 with allow_glsl_120_subset_in_110
+- driconf: add a workaround for Joe Danger 2
+- driconf: add a workaround for Joe Danger
+
+Paulo Zanoni (2):
+
+- anv/xe: don't leak xe_syncs during trtt submission
+- anv, iris: add missing CS_STALL bit for GPGPU texture invalidation
+
+Samuel Pitoiset (3):
+
+- radv: fix conditional rendering with mesh+task and multiview (again)
+- radv: enable radv_zero_vram for Red Dead Redemption 2
+- radv: make sure the heap budget is less than or equal to the heap size
+
+Tapani Pälli (1):
+
+- anv: disable fcv optimization on >= gfx125
+
+Yonggang Luo (1):
+
+- util: Fixes futex_wait on win32
+
+Zack Rusin (1):
+
+- svga: Fix instanced draw detection
+
+Zan Dobersek (1):
+
+- tu: fix memory leaks in tu_shader
diff --git a/docs/relnotes/24.0.6.rst b/docs/relnotes/24.0.6.rst
new file mode 100644
index 00000000000..3f2aec76c08
--- /dev/null
+++ b/docs/relnotes/24.0.6.rst
@@ -0,0 +1,159 @@
+Mesa 24.0.6 Release Notes / 2024-04-24
+======================================
+
+Mesa 24.0.6 is a bug fix release which fixes bugs found since the 24.0.5 release.
+
+Mesa 24.0.6 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.6 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    8b7a92dbe6468c18f2383700135b5fe9de836cdf0cc8fd7dbae3c7110237d604  mesa-24.0.6.tar.xz
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- radv: mesa-9999/src/amd/vulkan/radv_image_view.c:147: radv_set_mutable_tex_desc_fields: Assertion \`(plane->surface.u.gfx9.surf_pitch * plane->surface.bpe) % 256 == 0' failed.
+- r600: Valheim hangs CAYMAN gpu (regression/bisected)
+- r600: Artifacts in Oxygen Not Included around air ducts and pipes (regression, bisected)
+- RADV, regression : Objects randomly appear/disappear on Unreal Engine 4 titles using D3D12 backend on Polaris
+- mesa 23.1.0-rc3 flickering textures/lighting in Unreal 4 games Polaris10
+- anv: flaky vkd3d-proton test_buffer_feedback_instructions_sm51
+
+
+Changes
+-------
+
+Bas Nieuwenhuizen (1):
+
+- radv: Fix differing aspect masks for multiplane image copies.
+
+Boris Brezillon (1):
+
+- nir/lower_blend: Fix nir_blend_logicop() for 8/16-bit integer formats
+
+Dave Airlie (1):
+
+- egl/dri2: don't bind dri2 for zink
+
+Eric Engestrom (5):
+
+- docs: add sha256sum for 24.0.5
+- .pick_status.json: Update to 2bb102f020b3a5834d219ab474c6bcdd02f88d09
+- .pick_status.json: Update to 7a1779edc7fb82c891e584074b95d1a4801c1782
+- .pick_status.json: Mark 3c673919c348b0611595b32fcc8a3d376868c830 as denominated
+- .pick_status.json: Update to cd5c9870ea1d7e73d05f125b229f34e5749c8345
+
+Eric R. Smith (3):
+
+- panfrost: fix a GPU/CPU synchronization problem
+- panfrost: mark separate_stencil as valid when surface is valid
+- panfrost: fix an incorrect stencil clear optimization
+
+Georg Lehmann (1):
+
+- aco: use v1 definition for v_interp_p1lv_f16
+
+Gert Wollny (4):
+
+- r600/sfn: Add array element parent also to array
+- r600/sfn: Use dependecies to order barriers and LDS/RAT instructions
+- r600/sfn: when emitting fp64 op2 groups pre-load values
+- r600/sfn: Don't put b2f64 conversion into ALU group
+
+Iago Toral Quiroga (1):
+
+- broadcom/compiler: enable perquad with uses_wide_subgroup_intrinsics
+
+Ian Romanick (1):
+
+- intel/brw: Fix handling of cmat_signed_mask
+
+Jonathan Gray (3):
+
+- intel/dev: update DG2 device names
+- intel/dev: update DG2 device names
+- intel/dev: 0x7d45 is mtl-u not mtl-h
+
+Jose Maria Casanova Crespo (1):
+
+- broadcom/compiler: needs_quad_helper_invocation enable PER_QUAD TMU access
+
+Karol Herbst (1):
+
+- rusticl/program: handle -cl-no-subgroup-ifp
+
+Konstantin Seurer (1):
+
+- lavapipe: Handle multiple planes in GetDescriptorEXT
+
+M Henning (1):
+
+- nvk: Don't use a descriptor cbuf if it's too large
+
+Mike Blumenkrantz (13):
+
+- lavapipe: don't clamp index buffer size for null index buffer draws
+- zink: block LA formats with srgb
+- llvmpipe: clamp 32bit query results to low 32 bits rather than MIN
+- lavapipe: clamp 32bit query results to low 32 bits rather than MIN
+- nir/remove_unused_io_vars: check all components to determine variable liveness
+- lavapipe: disable stencil test if no stencil attachment
+- egl: fix defines for zink's dri3 check
+- egl/android: fix zink loading
+- zink: disable buffer reordering correctly on shader image binds
+- zink: destroy shaderdb pipelines
+- zink: add VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR for shaderdb
+- brw/lower_a2c: fix for scalarized fs outputs
+- zink: copy shader name when copying shader info
+
+Patrick Lerda (2):
+
+- r300: fix r300_draw_elements() behavior
+- panfrost: remove panfrost_create_shader_state() related dead code
+
+Paulo Zanoni (1):
+
+- anv/sparse: replace device->using_sparse with device->num_sparse_resources
+
+Sagar Ghuge (3):
+
+- anv: Fix typo in DestinationAlphaBlendFactor value
+- anv: Use appropriate argument format for indirect draw
+- isl: Update isl_swizzle_supports_rendering comment
+
+Samuel Pitoiset (3):
+
+- radv: add missing SQTT markers when an indirect indexed draw is used with DGC
+- radv: use canonicalized VA for VM fault reports
+- radv: fix waiting for occlusion queries on GFX6-8
+
+Stéphane Cerveau (1):
+
+- vulkan/video: hevc: b-frames can be reference or not
+
+Yonggang Luo (1):
+
+- compiler/spirv: vtn_add_printf_string support for handling OpBitcast
+
+nyanmisaka (1):
+
+- radeonsi/uvd_enc: update to use correct padding size
diff --git a/docs/relnotes/24.0.7.rst b/docs/relnotes/24.0.7.rst
new file mode 100644
index 00000000000..0eaecdec76f
--- /dev/null
+++ b/docs/relnotes/24.0.7.rst
@@ -0,0 +1,155 @@
+Mesa 24.0.7 Release Notes / 2024-05-08
+======================================
+
+Mesa 24.0.7 is a bug fix release which fixes bugs found since the 24.0.6 release.
+
+Mesa 24.0.7 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.7 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    7454425f1ed4a6f1b5b107e1672b30c88b22ea0efea000ae2c7d96db93f6c26a  mesa-24.0.7.tar.xz
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- mesa 24 intel A770 KOTOR black shadow smoke scenes
+- Graphical glitches in RPCS3 after updating Vulkan Intel drivers
+- [R600] OpenGL and VDPAU regression in Mesa 23.3.0 - some bitmaps get distorted.
+- VAAPI radeonsi: VBAQ broken with HEVC
+- radv: vkCmdWaitEvents2 is broken
+- Zink: enabled extensions and features may not match
+
+
+Changes
+-------
+
+Boris Brezillon (3):
+
+- panfrost: do not write outside num_wg_sysval
+- panfrost: Add the BO containing fragment program descriptor to the batch
+- pan/kmod: Make default allocator thread-safe
+
+Constantine Shablia (2):
+
+- pan/bi: fix 1D array tex coord lowering
+- panfrost: report correct MAX_VARYINGS
+
+Daniel Schürmann (1):
+
+- aco/ra: fix kill flags after renaming fixed Operands
+
+David Rosca (5):
+
+- radeonsi/vcn: Allocate session buffer in VRAM
+- radeonsi/vcn: Fix 10bit HEVC VPS general_profile_compatibility_flags
+- radeonsi/vcn: Only enable VBAQ with rate control mode
+- frontends/va: Fix AV1 slice_data_offset with multiple slice data buffers
+- Revert "radeonsi/vcn: AV1 skip the redundant bs resize"
+
+Eric Engestrom (6):
+
+- docs: add sha256sum for 24.0.6
+- .pick_status.json: Update to 86281ef15fca378ef48bcb072a762168e537820d
+- .pick_status.json: Mark 0666a715c7210558017ce717f6b0b947c679a68e as denominated
+- .pick_status.json: Update to 603982ea802b3846e91a943b413a7baf430e875d
+- .pick_status.json: Update to 9666756f603f0285d8a93ef93db1c7ec702b671f
+- .pick_status.json: Update to b8e79d2769b4a4aed7e2103cf0405acc5bdadb86
+
+Erik Faye-Lund (2):
+
+- panfrost: correct first-tracking for signature
+- panvk: avoid dereferencing a null-pointer
+
+Georg Lehmann (1):
+
+- radv, radeonsi: don't use D16 for f2f16_rtz
+
+Gert Wollny (1):
+
+- zink/kopper: Wait for last QueuePresentKHR to finish before acquiring for readback
+
+Ian Romanick (1):
+
+- intel/brw: Fix optimize_extract_to_float for i2f of unsigned extract
+
+Iván Briano (2):
+
+- anv: check requirements for VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE
+- anv: fix casting to graphics_pipeline_base
+
+Karol Herbst (2):
+
+- nir: fix nir_shader_get_function_for_name for functions without names.
+- rusticl: use stream uploader for cb0 if prefered
+
+Kenneth Graunke (1):
+
+- isl: Set MOCS to uncached for Gfx12.0 blitter sources/destinations
+
+Konstantin Seurer (1):
+
+- radv: Handle all dependencies of CmdWaitEvents2
+
+Lionel Landwerlin (2):
+
+- anv: disable dual source blending state if not used in shader
+- intel/brw: fixup wm_prog_data_barycentric_modes()
+
+Mike Blumenkrantz (8):
+
+- zink: reconstruct features pnext after determining extension support
+- glthread: check for invalid primitive modes in DrawElementsBaseVertex
+- zink: prune zink_shader::programs under lock
+- zink: fully wait on all program fences during ctx destroy
+- kopper: fix bufferage/swapinterval handling for non-window swapchains
+- zink: slightly better swapinterval failure handling
+- zink: clean up accidental debug print
+- zink: add a tu flake
+
+Patrick Lerda (1):
+
+- gallium/auxiliary/vl: fix typo which negatively impacts the src_stride initialization
+
+Rohan Garg (1):
+
+- anv: formatting fix when printing pipe controls
+
+Samuel Pitoiset (1):
+
+- radv: fix image format properties with fragment shading rate usage
+
+Sviatoslav Peleshko (1):
+
+- anv: Fix descriptor sampler offsets assignment
+
+Tapani Pälli (1):
+
+- iris: change stream uploader default size to 2MB
+
+Yiwei Zhang (2):
+
+- venus: avoid client allocators for ring internals
+- venus: fix to destroy all pipeline handles on early error paths
+
+Yusuf Khan (1):
+
+- nouveau: Fix crash when destination or source screen fences are null
diff --git a/docs/relnotes/24.0.8.rst b/docs/relnotes/24.0.8.rst
new file mode 100644
index 00000000000..a90b0e7a6e5
--- /dev/null
+++ b/docs/relnotes/24.0.8.rst
@@ -0,0 +1,155 @@
+Mesa 24.0.8 Release Notes / 2024-05-22
+======================================
+
+Mesa 24.0.8 is a bug fix release which fixes bugs found since the 24.0.7 release.
+
+Mesa 24.0.8 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.8 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    d1ed86a266d5b7b8c136ae587ef5618ed1a9837a43440f3713622bf0123bf5c1  mesa-24.0.8.tar.xz
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- [24.1-rc4] fatal error: intel/dev/intel_wa.h: No such file or directory
+- vcn: rewinding attached video in Totem cause [mmhub] page fault
+- When using amd gpu deinterlace, tv bt709 properties mapping to 2 chroma
+- VCN decoding freezes the whole system
+- [RDNA2 [AV1] [VAAPI] hw decoding glitches in Thorium 123.0.6312.133 after https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28960
+- WSI: Support VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT for DRM Modifiers in Vulkan
+- radv: Enshrouded GPU hang on RX 6800
+- NVK Zink: Wrong color in Unigine Valley benchmark
+- [anv] FINISHME: support YUV colorspace with DRM format modifiers
+- 24.0.6: build fails
+
+
+Changes
+-------
+
+Antoine Coutant (1):
+
+- drisw: fix build without dri3
+
+Bas Nieuwenhuizen (1):
+
+- radv: Use zerovram for Enshrouded.
+
+David Heidelberg (2):
+
+- freedreno/ci: move the disabled jobs from include to the main file
+- winsys/i915: depends on intel_wa.h
+
+David Rosca (6):
+
+- frontends/va: Only increment slice offset after first slice parameters
+- radeonsi: Update buffer for other planes in si_alloc_resource
+- frontends/va: Store slice types for H264 decode
+- radeonsi/vcn: Ensure DPB has as many buffers as references
+- radeonsi/vcn: Allow duplicate buffers in DPB
+- radeonsi/vcn: Ensure at least one reference for H264 P/B frames
+
+Eric Engestrom (5):
+
+- docs: add sha256sum for 24.0.7
+- .pick_status.json: Update to 18c53157318d6c8e572062f6bb768dfb621a55fd
+- .pick_status.json: Update to e154f90aa9e71cc98375866c3ab24c4e08e66cb7
+- .pick_status.json: Mark ae8fbe220ae67ffdce662c26bc4a634d475c0389 as denominated
+- .pick_status.json: Update to a31996ce5a6b7eb3b324b71eb9e9c45173953c50
+
+Faith Ekstrand (6):
+
+- nvk: Re-emit sample locations when rasterization samples changes
+- nvk/meta: Restore set_sizes[0]
+- nouveau/winsys: Take a reference to BOs found in the cache
+- drm-uapi: Sync nouveau_drm.h
+- nouveau/winsys: Add back nouveau_ws_bo_new_tiled()
+- vulkan/wsi: Bind memory planes, not YCbCr planes.
+
+Friedrich Vock (2):
+
+- aco/tests: Insert p_logical_start/end in reduce_temp tests
+- aco/spill: Insert p_start_linear_vgpr right after p_logical_end
+
+Georg Lehmann (1):
+
+- zink: use bitcasts instead of pack/unpack double opcodes
+
+José Expósito (1):
+
+- meson: Update proc_macro2 meson.build patch
+
+Karol Herbst (5):
+
+- rusticl/event: use Weak refs for dependencies
+- Revert "rusticl/event: use Weak refs for dependencies"
+- event: break long dependency chains on drop
+- rusticl/mesa/context: flush context before destruction
+- nir/lower_cl_images: set binding also for samplers
+
+Konstantin Seurer (3):
+
+- radv: Fix radv_shader_arena_block list corruption
+- radv: Remove arenas from capture_replay_arena_vas
+- radv: Zero initialize capture replay group handles
+
+Lionel Landwerlin (3):
+
+- anv: fix ycbcr plane indexing with indirect descriptors
+- anv: fix push constant subgroup_id location
+- nir/divergence: add missing load_printf_buffer_address
+
+Marek Olšák (1):
+
+- util: shift the mask in BITSET_TEST_RANGE_INSIDE_WORD to be relative to b
+
+Mike Blumenkrantz (8):
+
+- egl/x11: disable dri3 with LIBGL_KOPPER_DRI2=1 as expected
+- zink: add a batch ref for committed sparse resources
+- u_blitter: stop leaking saved blitter states on no-op blits
+- frontends/dri: only release pipe when screen init fails
+- frontends/dri: always init opencl_func_mutex in InitScreen hooks
+- zink: clean up semaphore arrays on batch state destroy
+- nir/lower_aaline: fix for scalarized outputs
+- nir/linking: fix nir_assign_io_var_locations for scalarized dual blend
+
+Patrick Lerda (2):
+
+- clover: fix memory leak related to optimize
+- r600: fix vertex state update clover regression
+
+Rhys Perry (1):
+
+- aco/waitcnt: fix DS/VMEM ordered writes when mixed
+
+Romain Naour (1):
+
+- glxext: don't try zink if not enabled in mesa
+
+Yiwei Zhang (5):
+
+- turnip: msm: clean up iova on error path
+- turnip: msm: fix racy gem close for re-imported dma-buf
+- turnip: virtio: fix error path in virtio_bo_init
+- turnip: virtio: fix iova leak upon found already imported dmabuf
+- turnip: virtio: fix racy gem close for re-imported dma-buf
diff --git a/docs/relnotes/24.0.9.rst b/docs/relnotes/24.0.9.rst
new file mode 100644
index 00000000000..fe635e833db
--- /dev/null
+++ b/docs/relnotes/24.0.9.rst
@@ -0,0 +1,155 @@
+Mesa 24.0.9 Release Notes / 2024-06-06
+======================================
+
+Mesa 24.0.9 is a bug fix release which fixes bugs found since the 24.0.8 release.
+
+Mesa 24.0.9 implements the OpenGL 4.6 API, but the version reported by
+glGetString(GL_VERSION) or glGetIntegerv(GL_MAJOR_VERSION) /
+glGetIntegerv(GL_MINOR_VERSION) depends on the particular driver being used.
+Some drivers don't support all the features required in OpenGL 4.6. OpenGL
+4.6 is **only** available if requested at context creation.
+Compatibility contexts may report a lower version depending on each driver.
+
+Mesa 24.0.9 implements the Vulkan 1.3 API, but the version reported by
+the apiVersion property of the VkPhysicalDeviceProperties struct
+depends on the particular driver being used.
+
+SHA256 checksum
+---------------
+
+::
+
+    TBD.
+
+
+New features
+------------
+
+- None
+
+
+Bug fixes
+---------
+
+- RustiCL: deadlock when calling clGetProfilingInfo() on callbacks
+- dEQP-VK.pipeline.pipeline_library.shader_module_identifier.pipeline_from_id.graphics regression
+- anv: unbounded shader cache
+- radv: Crash due to nir validation fail in Enshrouded
+- radv: Crash due to nir validation fail in Enshrouded
+- panforst: T604 issue with using u32 for flat varyings
+
+
+Changes
+-------
+
+Alexandre Marquet (1):
+
+- pan/mdg: quirk to disable auto32
+
+David Heidelberg (2):
+
+- subprojects: uprev perfetto to v45.0
+- ci/nouveau: move disabled jobs back from include into main gitlab-ci.yml
+
+David Rosca (1):
+
+- frontends/va: Fix leak when destroying VAEncCodedBufferType
+
+Eric Engestrom (11):
+
+- docs: add sha256sum for 24.0.8
+- .pick_status.json: Update to 18c736bcfc55b8fa309ede02332b9c7a2ca22e78
+- .pick_status.json: Mark 01bac643f6c088f7537edf18f2d4094881c1ecda as denominated
+- .pick_status.json: Update to 4b6f7613c0bd161548f1bd45d42b65b4841a278a
+- .pick_status.json: Mark eefe34127f8e8ae2ba91a7837b9dfef999dc3f87 as denominated
+- .pick_status.json: Update to a1ea0956b46778d0331e4ef60ebd2be057fd0e9f
+- .pick_status.json: Mark 410ca6a3e99c5c1c9c91f0f79bf43a35103cbd98 as denominated
+- freedreno/a6xx: fix kernel -> compute handling
+- panfrost: mark tests as fixed
+- panfrost/ci: add missing genxml trigger path
+- .pick_status.json: Update to 6f713a764fb412567caaabd9ae574822e79da383
+
+Eric R. Smith (4):
+
+- get_color_read_type: make sure format/type combo is legal for gles
+- glsl: test both inputs when sorting varyings for xfb
+- panfrost: fix some omissions in valhall flow control
+- panfrost: change default rounding mode for samplers
+
+Friedrich Vock (2):
+
+- radv: Use max_se instead of num_se where appropriate
+- radeonsi: Use max_se instead of num_se where appropriate
+
+Iago Toral Quiroga (4):
+
+- broadcom/compiler: make add_node return the node index
+- broadcom/compiler: don't assign payload registers to spilling setup temps
+- broadcom/compiler: apply payload conflict to spill setup before RA
+- v3dv: fix incorrect index buffer size
+
+Iván Briano (1):
+
+- anv: check cmd_buffer is on a transfer queue more properly
+
+Jose Maria Casanova Crespo (8):
+
+- v3d: fix CLE MMU errors avoiding using last bytes of CL BOs.
+- v3dv: fix CLE MMU errors avoiding using last bytes of CL BOs.
+- v3d: Increase alignment to 16k on CL BO on RPi5
+- v3dv: Increase alignment to 16k on CL BO on RPi5
+- v3dv: V3D_CL_MAX_INSTR_SIZE bytes in last CL instruction not needed
+- v3dv: Emit stencil draw clear if needed for GFXH-1461
+- v3dv: really fix CLE MMU errors on 7.1HW Rpi5
+- v3d: really fix CLE MMU errors on 7.1HW Rpi5
+
+Juan A. Suarez Romero (1):
+
+- ci: define SNMP base interface on runner
+
+Karol Herbst (5):
+
+- gallium/vl: stub vl_video_buffer_create_as_resource
+- gallium/vl: remove stubs which are defined in mesa_util
+- meson: centralize galliumvl_stub handling
+- rusticl: link against libgalliumvl_stub
+- rusticl/event: fix deadlock when calling clGetEventProfilingInfo inside callbacks
+
+Kevin Chuang (1):
+
+- anv: Properly fetch partial results in vkGetQueryPoolResults
+
+Lionel Landwerlin (5):
+
+- anv: use weak_ref mode for global pipeline caches
+- anv: fix shader identifier handling
+- intel/brw: ensure find_live_channel don't access arch register without sync
+- anv: fix utrace compute walker timestamp captures
+- anv: fix timestamp copies from secondary buffers
+
+Renato Pereyra (1):
+
+- anv: Attempt to compile all pipelines even after errors
+
+Rhys Perry (3):
+
+- aco: create lcssa phis for continue_or_break loops when necessary
+- aco: create lcssa phis for continue_or_break loops when necessary
+- radv: malloc graphics pipeline stages
+
+Samuel Pitoiset (6):
+
+- radv: allow 3d views with VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT
+- radv: set image view descriptors as buffer for non-graphics GPU
+- radv: mark some formats as unsupported on GFX8/CARRIZO
+- radv: only set ALPHA_IS_ON_MSB if the image has DCC on GFX6-9
+- radv: fix setting a custom pitch for CB on GFX10_3+
+- radv: fix flushing DB meta cache on GFX11.5
+
+Tapani Pälli (1):
+
+- anv/android: enable emulated astc for applications
+
+Yusuf Khan (1):
+
+- zink/query: begin time elapsed queries even if we arent in a rp
diff --git a/include/drm-uapi/nouveau_drm.h b/include/drm-uapi/nouveau_drm.h
index 0bade1592f3..dd87f8f3079 100644
--- a/include/drm-uapi/nouveau_drm.h
+++ b/include/drm-uapi/nouveau_drm.h
@@ -54,11 +54,42 @@ extern "C" {
  */
 #define NOUVEAU_GETPARAM_EXEC_PUSH_MAX   17
 
+/*
+ * NOUVEAU_GETPARAM_VRAM_BAR_SIZE - query bar size
+ *
+ * Query the VRAM BAR size.
+ */
+#define NOUVEAU_GETPARAM_VRAM_BAR_SIZE 18
+
+/*
+ * NOUVEAU_GETPARAM_VRAM_USED
+ *
+ * Get remaining VRAM size.
+ */
+#define NOUVEAU_GETPARAM_VRAM_USED 19
+
+/*
+ * NOUVEAU_GETPARAM_HAS_VMA_TILEMODE
+ *
+ * Query whether tile mode and PTE kind are accepted with VM allocs or not.
+ */
+#define NOUVEAU_GETPARAM_HAS_VMA_TILEMODE 20
+
 struct drm_nouveau_getparam {
 	__u64 param;
 	__u64 value;
 };
 
+/*
+ * Those are used to support selecting the main engine used on Kepler.
+ * This goes into drm_nouveau_channel_alloc::tt_ctxdma_handle
+ */
+#define NOUVEAU_FIFO_ENGINE_GR  0x01
+#define NOUVEAU_FIFO_ENGINE_VP  0x02
+#define NOUVEAU_FIFO_ENGINE_PPP 0x04
+#define NOUVEAU_FIFO_ENGINE_BSP 0x08
+#define NOUVEAU_FIFO_ENGINE_CE  0x30
+
 struct drm_nouveau_channel_alloc {
 	__u32     fb_ctxdma_handle;
 	__u32     tt_ctxdma_handle;
@@ -81,6 +112,18 @@ struct drm_nouveau_channel_free {
 	__s32 channel;
 };
 
+struct drm_nouveau_notifierobj_alloc {
+	__u32 channel;
+	__u32 handle;
+	__u32 size;
+	__u32 offset;
+};
+
+struct drm_nouveau_gpuobj_free {
+	__s32 channel;
+	__u32 handle;
+};
+
 #define NOUVEAU_GEM_DOMAIN_CPU       (1 << 0)
 #define NOUVEAU_GEM_DOMAIN_VRAM      (1 << 1)
 #define NOUVEAU_GEM_DOMAIN_GART      (1 << 2)
@@ -238,34 +281,32 @@ struct drm_nouveau_vm_init {
 struct drm_nouveau_vm_bind_op {
 	/**
 	 * @op: the operation type
+	 *
+	 * Supported values:
+	 *
+	 * %DRM_NOUVEAU_VM_BIND_OP_MAP - Map a GEM object to the GPU's VA
+	 * space. Optionally, the &DRM_NOUVEAU_VM_BIND_SPARSE flag can be
+	 * passed to instruct the kernel to create sparse mappings for the
+	 * given range.
+	 *
+	 * %DRM_NOUVEAU_VM_BIND_OP_UNMAP - Unmap an existing mapping in the
+	 * GPU's VA space. If the region the mapping is located in is a
+	 * sparse region, new sparse mappings are created where the unmapped
+	 * (memory backed) mapping was mapped previously. To remove a sparse
+	 * region the &DRM_NOUVEAU_VM_BIND_SPARSE must be set.
 	 */
 	__u32 op;
-/**
- * @DRM_NOUVEAU_VM_BIND_OP_MAP:
- *
- * Map a GEM object to the GPU's VA space. Optionally, the
- * &DRM_NOUVEAU_VM_BIND_SPARSE flag can be passed to instruct the kernel to
- * create sparse mappings for the given range.
- */
 #define DRM_NOUVEAU_VM_BIND_OP_MAP 0x0
-/**
- * @DRM_NOUVEAU_VM_BIND_OP_UNMAP:
- *
- * Unmap an existing mapping in the GPU's VA space. If the region the mapping
- * is located in is a sparse region, new sparse mappings are created where the
- * unmapped (memory backed) mapping was mapped previously. To remove a sparse
- * region the &DRM_NOUVEAU_VM_BIND_SPARSE must be set.
- */
 #define DRM_NOUVEAU_VM_BIND_OP_UNMAP 0x1
 	/**
 	 * @flags: the flags for a &drm_nouveau_vm_bind_op
+	 *
+	 * Supported values:
+	 *
+	 * %DRM_NOUVEAU_VM_BIND_SPARSE - Indicates that an allocated VA
+	 * space region should be sparse.
 	 */
 	__u32 flags;
-/**
- * @DRM_NOUVEAU_VM_BIND_SPARSE:
- *
- * Indicates that an allocated VA space region should be sparse.
- */
 #define DRM_NOUVEAU_VM_BIND_SPARSE (1 << 8)
 	/**
 	 * @handle: the handle of the DRM GEM object to map
@@ -301,17 +342,17 @@ struct drm_nouveau_vm_bind {
 	__u32 op_count;
 	/**
 	 * @flags: the flags for a &drm_nouveau_vm_bind ioctl
+	 *
+	 * Supported values:
+	 *
+	 * %DRM_NOUVEAU_VM_BIND_RUN_ASYNC - Indicates that the given VM_BIND
+	 * operation should be executed asynchronously by the kernel.
+	 *
+	 * If this flag is not supplied the kernel executes the associated
+	 * operations synchronously and doesn't accept any &drm_nouveau_sync
+	 * objects.
 	 */
 	__u32 flags;
-/**
- * @DRM_NOUVEAU_VM_BIND_RUN_ASYNC:
- *
- * Indicates that the given VM_BIND operation should be executed asynchronously
- * by the kernel.
- *
- * If this flag is not supplied the kernel executes the associated operations
- * synchronously and doesn't accept any &drm_nouveau_sync objects.
- */
 #define DRM_NOUVEAU_VM_BIND_RUN_ASYNC 0x1
 	/**
 	 * @wait_count: the number of wait &drm_nouveau_syncs
diff --git a/include/pci_ids/iris_pci_ids.h b/include/pci_ids/iris_pci_ids.h
index 46bbe20f6e8..58ab85b2fb6 100644
--- a/include/pci_ids/iris_pci_ids.h
+++ b/include/pci_ids/iris_pci_ids.h
@@ -187,6 +187,8 @@ CHIPSET(0x46c3, adl_gt2, "ADL GT2", "Intel(R) Graphics")
 CHIPSET(0x46d0, adl_n, "ADL-N", "Intel(R) Graphics")
 CHIPSET(0x46d1, adl_n, "ADL-N", "Intel(R) Graphics")
 CHIPSET(0x46d2, adl_n, "ADL-N", "Intel(R) Graphics")
+CHIPSET(0x46d3, adl_n, "ADL-N", "Intel(R) Graphics")
+CHIPSET(0x46d4, adl_n, "ADL-N", "Intel(R) Graphics")
 
 CHIPSET(0x9a40, tgl_gt2, "TGL GT2", "Intel(R) Xe Graphics")
 CHIPSET(0x9a49, tgl_gt2, "TGL GT2", "Intel(R) Xe Graphics")
@@ -232,8 +234,8 @@ CHIPSET(0x5692, dg2_g10, "DG2", "Intel(R) Arc(tm) A550M Graphics")
 CHIPSET(0x5693, dg2_g11, "DG2", "Intel(R) Arc(tm) A370M Graphics")
 CHIPSET(0x5694, dg2_g11, "DG2", "Intel(R) Arc(tm) A350M Graphics")
 CHIPSET(0x5695, dg2_g11, "DG2", "Intel(R) Graphics")
-CHIPSET(0x5696, dg2_g12, "DG2", "Intel(R) Graphics")
-CHIPSET(0x5697, dg2_g12, "DG2", "Intel(R) Graphics")
+CHIPSET(0x5696, dg2_g12, "DG2", "Intel(R) Arc(tm) A570M Graphics")
+CHIPSET(0x5697, dg2_g12, "DG2", "Intel(R) Arc(tm) A530M Graphics")
 CHIPSET(0x56a0, dg2_g10, "DG2", "Intel(R) Arc(tm) A770 Graphics")
 CHIPSET(0x56a1, dg2_g10, "DG2", "Intel(R) Arc(tm) A750 Graphics")
 CHIPSET(0x56a2, dg2_g10, "DG2", "Intel(R) Arc(tm) A580 Graphics")
@@ -243,17 +245,19 @@ CHIPSET(0x56a5, dg2_g11, "DG2", "Intel(R) Arc(tm) A380 Graphics")
 CHIPSET(0x56a6, dg2_g11, "DG2", "Intel(R) Arc(tm) A310 Graphics")
 CHIPSET(0x56b0, dg2_g11, "DG2", "Intel(R) Arc(tm) Pro A30M Graphics")
 CHIPSET(0x56b1, dg2_g11, "DG2", "Intel(R) Arc(tm) Pro A40/A50 Graphics")
-CHIPSET(0x56b2, dg2_g12, "DG2", "Intel(R) Graphics")
-CHIPSET(0x56b3, dg2_g12, "DG2", "Intel(R) Graphics")
-CHIPSET(0x56ba, dg2_g11, "DG2", "Intel(R) Graphics")
-CHIPSET(0x56bb, dg2_g11, "DG2", "Intel(R) Graphics")
-CHIPSET(0x56bc, dg2_g11, "DG2", "Intel(R) Graphics")
-CHIPSET(0x56bd, dg2_g11, "DG2", "Intel(R) Graphics")
+CHIPSET(0x56b2, dg2_g12, "DG2", "Intel(R) Arc(tm) Pro A60M Graphics")
+CHIPSET(0x56b3, dg2_g12, "DG2", "Intel(R) Arc(tm) Pro A60 Graphics")
+CHIPSET(0x56ba, dg2_g11, "DG2", "Intel(R) Arc(tm) A380E Graphics")
+CHIPSET(0x56bb, dg2_g11, "DG2", "Intel(R) Arc(tm) A310E Graphics")
+CHIPSET(0x56bc, dg2_g11, "DG2", "Intel(R) Arc(tm) A370E Graphics")
+CHIPSET(0x56bd, dg2_g11, "DG2", "Intel(R) Arc(tm) A350E Graphics")
+CHIPSET(0x56be, dg2_g10, "DG2", "Intel(R) Arc(tm) A750E Graphics")
+CHIPSET(0x56bf, dg2_g10, "DG2", "Intel(R) Arc(tm) A580E Graphics")
 CHIPSET(0x56c0, atsm_g10, "ATS-M", "Intel(R) Data Center GPU Flex Series 170 Graphics")
 CHIPSET(0x56c1, atsm_g11, "ATS-M", "Intel(R) Data Center GPU Flex Series 140 Graphics")
 
 CHIPSET(0x7d40, mtl_u, "MTL", "Intel(R) Graphics")
-CHIPSET(0x7d45, mtl_h, "MTL", "Intel(R) Graphics")
+CHIPSET(0x7d45, mtl_u, "MTL", "Intel(R) Graphics")
 CHIPSET(0x7d55, mtl_h, "MTL", "Intel(R) Arc(tm) Graphics")
 CHIPSET(0x7d60, mtl_u, "MTL", "Intel(R) Graphics")
 CHIPSET(0x7dd5, mtl_h, "MTL", "Intel(R) Graphics")
diff --git a/meson.build b/meson.build
index 2f04f423d99..d61f09cbe0f 100644
--- a/meson.build
+++ b/meson.build
@@ -672,7 +672,7 @@ vdpau = get_option('gallium-vdpau') \
   .require(with_platform_x11, error_message : 'VDPAU state tracker requires X11 support.') \
   .require(_vdpau_drivers.contains(true), error_message : 'VDPAU state tracker requires at least one of the following gallium drivers: r600, radeonsi, nouveau, d3d12 (with option gallium-d3d12-video, virgl).') 
 
-dep_vdpau = dependency('vdpau', version : '>= 1.1', required : vdpau)
+dep_vdpau = dependency('vdpau', version : '>= 1.4', required : vdpau)
 if dep_vdpau.found()
   dep_vdpau = dep_vdpau.partial_dependency(compile_args : true)
   pre_args += '-DHAVE_ST_VDPAU'
@@ -882,7 +882,6 @@ if _opencl != 'disabled'
     error('The Clover OpenCL state tracker requires rtti')
   endif
 
-  with_clc = true
   with_gallium_opencl = true
   with_opencl_icd = _opencl == 'icd'
 else
@@ -907,7 +906,7 @@ if with_gallium_rusticl
 endif
 
 dep_clc = null_dep
-if with_clc
+if with_gallium_opencl or with_clc
   dep_clc = dependency('libclc')
 endif
 
@@ -1597,11 +1596,6 @@ if with_any_intel and ['x86', 'x86_64'].contains(host_machine.cpu_family())
   pre_args += '-DSUPPORT_INTEL_INTEGRATED_GPUS'
 endif
 
-if get_option('intel-xe-kmd').enabled()
-  pre_args += '-DINTEL_XE_KMD_SUPPORTED'
-endif
-
-
 if with_gallium_i915 and host_machine.cpu_family().startswith('x86') == false
   error('Intel "i915" Gallium driver requires x86 or x86_64 CPU family')
 endif
@@ -1797,7 +1791,7 @@ if with_clc
   # all-targets is needed to support static linking LLVM build with multiple targets.
   # windowsdriver is needded with LLVM>=15 and frontendhlsl is needed with LLVM>=16,
   # but we don't know what LLVM version we are using yet
-  llvm_optional_modules += ['all-targets', 'windowsdriver', 'frontendhlsl']
+  llvm_optional_modules += ['all-targets', 'windowsdriver', 'frontendhlsl', 'frontenddriver']
 endif
 draw_with_llvm = get_option('draw-use-llvm')
 if draw_with_llvm
@@ -1941,6 +1935,9 @@ if with_clc
     if dep_llvm.version().version_compare('>= 16.0')
       clang_modules += 'clangASTMatchers'
     endif
+    if dep_llvm.version().version_compare('>= 18.0')
+      clang_modules += 'clangAPINotes'
+    endif
 
     dep_clang = []
     foreach m : clang_modules
diff --git a/meson_options.txt b/meson_options.txt
index 1a2b959a3aa..52a5052053b 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -711,11 +711,4 @@ option(
   description : 'Build custom xmlconfig (driconf) support. If disabled, ' +
                 'the default driconf file is hardcoded into Mesa. ' +
                 'Requires expat.'
-)
-
-option (
-  'intel-xe-kmd',
-  type : 'feature',
-  value : 'disabled',
-  description: 'Enable Intel Xe KMD support.'
-)
+)
\ No newline at end of file
diff --git a/src/amd/ci/gitlab-ci.yml b/src/amd/ci/gitlab-ci.yml
index 5ee36998612..bec735a0aa3 100644
--- a/src/amd/ci/gitlab-ci.yml
+++ b/src/amd/ci/gitlab-ci.yml
@@ -46,7 +46,6 @@ radeonsi-stoney-traces:x86_64:
   variables:
     EGL_PLATFORM: surfaceless
     PIGLIT_TRACES_FILE: traces-amd.yml
-    PIGLIT_REPLAY_DESCRIPTION_FILE: "/install/traces-amd.yml"
     PIGLIT_REPLAY_EXTRA_ARGS: --keep-image
 
 radv-raven-vkcts:x86_64:
@@ -163,7 +162,7 @@ radeonsi-raven-va-full:x86_64:
 vkcts-polaris10-valve:
   extends:
     - .vkcts-test-valve
-    - .polaris10-test-valve-mupuf
+    - .polaris10-test-valve-kws
     - .radv-valve-manual-rules
   timeout: 1h 15m
   variables:
diff --git a/src/amd/ci/radv-navi21-aco-flakes.txt b/src/amd/ci/radv-navi21-aco-flakes.txt
index 9e2e41634c1..2ff57de65bf 100644
--- a/src/amd/ci/radv-navi21-aco-flakes.txt
+++ b/src/amd/ci/radv-navi21-aco-flakes.txt
@@ -10,7 +10,4 @@ dEQP-VK.draw.renderpass.multi_draw.mosaic.indexed_mixed.max_draws.stride_extra_1
 dEQP-VK.pipeline.*line_stipple_enable
 dEQP-VK.pipeline.*line_stipple_params
 
-# New CTS flakes in 1.3.6.3
-dEQP-VK.ray_tracing_pipeline.pipeline_library.configurations.(single|multi)threaded_compilation.*_check_(all|capture_replay)_handles
-
 dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_invocations.secondary.32bits_triangle_list_clear_depth
diff --git a/src/amd/ci/radv-navi31-aco-flakes.txt b/src/amd/ci/radv-navi31-aco-flakes.txt
index d1a8efcf746..e69de29bb2d 100644
--- a/src/amd/ci/radv-navi31-aco-flakes.txt
+++ b/src/amd/ci/radv-navi31-aco-flakes.txt
@@ -1,5 +0,0 @@
-# New CTS flakes in 1.3.6.3
-dEQP-VK.ray_tracing_pipeline.pipeline_library.configurations.multithreaded_compilation.*_check_all_handles
-dEQP-VK.ray_tracing_pipeline.pipeline_library.configurations.multithreaded_compilation.*_check_capture_replay_handles
-dEQP-VK.ray_tracing_pipeline.pipeline_library.configurations.singlethreaded_compilation.*_check_all_handles
-dEQP-VK.ray_tracing_pipeline.pipeline_library.configurations.singlethreaded_compilation.*_check_capture_replay_handles
diff --git a/src/amd/common/ac_gpu_info.c b/src/amd/common/ac_gpu_info.c
index 2e12a74f854..e90348f29ba 100644
--- a/src/amd/common/ac_gpu_info.c
+++ b/src/amd/common/ac_gpu_info.c
@@ -1210,6 +1210,11 @@ bool ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
     */
    info->has_pops_missed_overlap_bug = info->family == CHIP_VEGA10 || info->family == CHIP_RAVEN;
 
+   /* GFX6 hw bug when the IBO addr is 0 which causes invalid clamping (underflow).
+    * Setting the IB addr to 2 or higher solves this issue.
+    */
+   info->has_null_index_buffer_clamping_bug = info->gfx_level == GFX6;
+
    /* Drawing from 0-sized index buffers causes hangs on gfx10. */
    info->has_zero_index_buffer_bug = info->gfx_level == GFX10;
 
diff --git a/src/amd/common/ac_gpu_info.h b/src/amd/common/ac_gpu_info.h
index f390e144f69..bc9cd46c941 100644
--- a/src/amd/common/ac_gpu_info.h
+++ b/src/amd/common/ac_gpu_info.h
@@ -96,6 +96,7 @@ struct radeon_info {
    bool has_small_prim_filter_sample_loc_bug;
    bool has_ls_vgpr_init_bug;
    bool has_pops_missed_overlap_bug;
+   bool has_null_index_buffer_clamping_bug;
    bool has_zero_index_buffer_bug;
    bool has_image_load_dcc_bug;
    bool has_two_planes_iterate256_bug;
diff --git a/src/amd/common/ac_nir_lower_ngg.c b/src/amd/common/ac_nir_lower_ngg.c
index 987f5b8fed8..2a9937fe151 100644
--- a/src/amd/common/ac_nir_lower_ngg.c
+++ b/src/amd/common/ac_nir_lower_ngg.c
@@ -71,6 +71,7 @@ typedef struct
    bool early_prim_export;
    bool streamout_enabled;
    bool has_user_edgeflags;
+   bool skip_primitive_id;
    unsigned max_num_waves;
 
    /* LDS params */
@@ -1760,8 +1761,11 @@ ngg_nogs_store_xfb_outputs_to_lds(nir_builder *b, lower_ngg_nogs_state *s)
    nir_def *addr = pervertex_lds_addr(b, tid, s->pervertex_lds_bytes);
 
    u_foreach_bit64(slot, xfb_outputs) {
+      uint64_t outputs_written = b->shader->info.outputs_written;
+      if (s->skip_primitive_id)
+         outputs_written &= ~VARYING_BIT_PRIMITIVE_ID;
       unsigned packed_location =
-         util_bitcount64(b->shader->info.outputs_written & BITFIELD64_MASK(slot));
+         util_bitcount64(outputs_written & BITFIELD64_MASK(slot));
 
       unsigned mask = xfb_mask[slot];
 
@@ -1986,7 +1990,8 @@ ngg_build_streamout_vertex(nir_builder *b, nir_xfb_info *info,
                            unsigned stream, nir_def *so_buffer[4],
                            nir_def *buffer_offsets[4],
                            nir_def *vtx_buffer_idx, nir_def *vtx_lds_addr,
-                           shader_output_types *output_types)
+                           shader_output_types *output_types,
+                           bool skip_primitive_id)
 {
    nir_def *vtx_buffer_offsets[4];
    for (unsigned buffer = 0; buffer < 4; buffer++) {
@@ -2009,8 +2014,12 @@ ngg_build_streamout_vertex(nir_builder *b, nir_xfb_info *info,
             util_bitcount(b->shader->info.outputs_written_16bit &
                           BITFIELD_MASK(out->location - VARYING_SLOT_VAR0_16BIT));
       } else {
+         uint64_t outputs_written = b->shader->info.outputs_written;
+         if (skip_primitive_id)
+            outputs_written &= ~VARYING_BIT_PRIMITIVE_ID;
+
          base =
-            util_bitcount64(b->shader->info.outputs_written &
+            util_bitcount64(outputs_written &
                             BITFIELD64_MASK(out->location));
       }
 
@@ -2099,7 +2108,7 @@ ngg_nogs_build_streamout(nir_builder *b, lower_ngg_nogs_state *s)
             nir_def *vtx_lds_addr = pervertex_lds_addr(b, vtx_lds_idx, vtx_lds_stride);
             ngg_build_streamout_vertex(b, info, 0, so_buffer, buffer_offsets,
                                        nir_iadd_imm(b, vtx_buffer_idx, i),
-                                       vtx_lds_addr, &s->output_types);
+                                       vtx_lds_addr, &s->output_types, s->skip_primitive_id);
          }
          nir_pop_if(b, if_valid_vertex);
       }
@@ -2455,6 +2464,7 @@ ac_nir_lower_ngg_nogs(nir_shader *shader, const ac_nir_lower_ngg_options *option
       .gs_exported_var = gs_exported_var,
       .max_num_waves = DIV_ROUND_UP(options->max_workgroup_size, options->wave_size),
       .has_user_edgeflags = has_user_edgeflags,
+      .skip_primitive_id = streamout_enabled && options->export_primitive_id,
    };
 
    const bool need_prim_id_store_shared =
@@ -3415,7 +3425,7 @@ ngg_gs_build_streamout(nir_builder *b, lower_ngg_gs_state *s)
                                        buffer_offsets,
                                        nir_iadd_imm(b, vtx_buffer_idx, i),
                                        exported_vtx_lds_addr[i],
-                                       &s->output_types);
+                                       &s->output_types, false);
          }
       }
       nir_pop_if(b, if_emit);
diff --git a/src/amd/common/ac_shader_util.c b/src/amd/common/ac_shader_util.c
index 24e53098843..5b062640634 100644
--- a/src/amd/common/ac_shader_util.c
+++ b/src/amd/common/ac_shader_util.c
@@ -1001,7 +1001,7 @@ void ac_get_scratch_tmpring_size(const struct radeon_info *info,
 
    unsigned max_scratch_waves = info->max_scratch_waves;
    if (info->gfx_level >= GFX11)
-      max_scratch_waves /= info->num_se; /* WAVES is per SE */
+      max_scratch_waves /= info->max_se; /* WAVES is per SE */
 
    /* TODO: We could decrease WAVES to make the whole buffer fit into the infinity cache. */
    *tmpring_size = S_0286E8_WAVES(max_scratch_waves) |
diff --git a/src/amd/common/ac_surface.h b/src/amd/common/ac_surface.h
index 11808f79bf1..83338f34134 100644
--- a/src/amd/common/ac_surface.h
+++ b/src/amd/common/ac_surface.h
@@ -76,6 +76,12 @@ enum radeon_micro_mode
 #define RADEON_SURF_NO_TEXTURE            (1ull << 34)
 #define RADEON_SURF_NO_STENCIL_ADJUST     (1ull << 35)
 
+enum radeon_enc_hevc_surface_alignment
+{
+   RADEON_ENC_HEVC_SURFACE_LOG2_WIDTH_ALIGNMENT = 6,
+   RADEON_ENC_HEVC_SURFACE_LOG2_HEIGHT_ALIGNMENT = 4,
+};
+
 struct legacy_surf_level {
    uint32_t offset_256B;   /* divided by 256, the hw can only do 40-bit addresses */
    uint32_t slice_size_dw; /* in dwords; max = 4GB / 4. */
diff --git a/src/amd/compiler/aco_assembler.cpp b/src/amd/compiler/aco_assembler.cpp
index 49508e96137..7cc5178dc34 100644
--- a/src/amd/compiler/aco_assembler.cpp
+++ b/src/amd/compiler/aco_assembler.cpp
@@ -733,10 +733,10 @@ emit_instruction(asm_context& ctx, std::vector<uint32_t>& out, Instruction* inst
       } else if (instr->format != Format::FLAT ||
                  ctx.gfx_level >= GFX10) { /* SADDR is actually used with FLAT on GFX10 */
          /* For GFX10.3 scratch, 0x7F disables both ADDR and SADDR, unlike sgpr_null, which only
-          * disables SADDR.
+          * disables SADDR. On GFX11, this was replaced with SVE.
           */
          if (ctx.gfx_level <= GFX9 ||
-             (instr->format == Format::SCRATCH && instr->operands[0].isUndefined()))
+             (instr->isScratch() && instr->operands[0].isUndefined() && ctx.gfx_level < GFX11))
             encoding |= 0x7F << 16;
          else
             encoding |= reg(ctx, sgpr_null) << 16;
diff --git a/src/amd/compiler/aco_insert_waitcnt.cpp b/src/amd/compiler/aco_insert_waitcnt.cpp
index 0209f44c377..784d992363c 100644
--- a/src/amd/compiler/aco_insert_waitcnt.cpp
+++ b/src/amd/compiler/aco_insert_waitcnt.cpp
@@ -428,18 +428,20 @@ check_instr(wait_ctx& ctx, wait_imm& wait, alu_delay_info& delay, Instruction* i
          if (it == ctx.gpr_map.end())
             continue;
 
+         wait_imm reg_imm = it->second.imm;
+
          /* Vector Memory reads and writes return in the order they were issued */
          uint8_t vmem_type = get_vmem_type(instr);
          if (vmem_type && ((it->second.events & vm_events) == event_vmem) &&
              it->second.vmem_types == vmem_type)
-            continue;
+            reg_imm.vm = wait_imm::unset_counter;
 
          /* LDS reads and writes return in the order they were issued. same for GDS */
          if (instr->isDS() &&
              (it->second.events & lgkm_events) == (instr->ds().gds ? event_gds : event_lds))
-            continue;
+            reg_imm.lgkm = wait_imm::unset_counter;
 
-         wait.combine(it->second.imm);
+         wait.combine(reg_imm);
       }
    }
 }
diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index 1fe6918aa51..3203b5ecdee 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -759,7 +759,7 @@ get_alu_src(struct isel_context* ctx, nir_alu_src src, unsigned size = 1)
       vec_instr->definitions[0] = Definition(dst);
       ctx->block->instructions.emplace_back(std::move(vec_instr));
       ctx->allocated_vec.emplace(dst.id(), elems);
-      return vec.type() == RegType::sgpr ? Builder(ctx->program, ctx->block).as_uniform(dst) : dst;
+      return as_uniform ? Builder(ctx->program, ctx->block).as_uniform(dst) : dst;
    }
 }
 
@@ -5490,7 +5490,7 @@ emit_interp_instr(isel_context* ctx, unsigned idx, unsigned component, Temp src,
          Builder::Result interp_p1 =
             bld.vintrp(aco_opcode::v_interp_mov_f32, bld.def(v1), Operand::c32(2u) /* P0 */,
                        bld.m0(prim_mask), idx, component);
-         interp_p1 = bld.vintrp(aco_opcode::v_interp_p1lv_f16, bld.def(v2b), coord1,
+         interp_p1 = bld.vintrp(aco_opcode::v_interp_p1lv_f16, bld.def(v1), coord1,
                                 bld.m0(prim_mask), interp_p1, idx, component);
          bld.vintrp(aco_opcode::v_interp_p2_legacy_f16, Definition(dst), coord2, bld.m0(prim_mask),
                     interp_p1, idx, component);
@@ -10205,6 +10205,29 @@ visit_block(isel_context* ctx, nir_block* block)
       ctx->cf_info.nir_to_aco[block->index] = ctx->block->index;
 }
 
+static bool
+all_uses_inside_loop(nir_def* def, nir_block* block_before_loop, nir_block* block_after_loop)
+{
+   nir_foreach_use_including_if (use, def) {
+      if (nir_src_is_if(use)) {
+         nir_block* branch_block =
+            nir_cf_node_as_block(nir_cf_node_prev(&nir_src_parent_if(use)->cf_node));
+         if (branch_block->index <= block_before_loop->index ||
+             branch_block->index >= block_after_loop->index)
+            return false;
+      } else {
+         nir_instr* instr = nir_src_parent_instr(use);
+         if ((instr->block->index <= block_before_loop->index ||
+              instr->block->index >= block_after_loop->index) &&
+             !(instr->type == nir_instr_type_phi && instr->block == block_after_loop)) {
+            return false;
+         }
+      }
+   }
+
+   return true;
+}
+
 static Operand
 create_continue_phis(isel_context* ctx, unsigned first, unsigned last,
                      aco_ptr<Instruction>& header_phi, Operand* vals)
@@ -10251,6 +10274,65 @@ create_continue_phis(isel_context* ctx, unsigned first, unsigned last,
    return vals[last - first];
 }
 
+Temp
+rename_temp(const std::map<unsigned, unsigned>& renames, Temp tmp)
+{
+   auto it = renames.find(tmp.id());
+   if (it != renames.end())
+      return Temp(it->second, tmp.regClass());
+   return tmp;
+}
+
+static void
+lcssa_workaround(isel_context* ctx, nir_loop* loop)
+{
+   assert(ctx->block->linear_preds.size() == ctx->block->logical_preds.size() + 1);
+
+   nir_block* block_before_loop = nir_cf_node_as_block(nir_cf_node_prev(&loop->cf_node));
+   nir_block* block_after_loop = nir_cf_node_as_block(nir_cf_node_next(&loop->cf_node));
+
+   std::map<unsigned, unsigned> renames;
+   nir_foreach_block_in_cf_node (block, &loop->cf_node) {
+      nir_foreach_instr (instr, block) {
+         nir_def* def = nir_instr_def(instr);
+         if (!def)
+            continue;
+
+         Temp tmp = get_ssa_temp(ctx, def);
+         if (!tmp.is_linear() || all_uses_inside_loop(def, block_before_loop, block_after_loop))
+            continue;
+
+         Temp new_tmp = ctx->program->allocateTmp(tmp.regClass());
+         aco_ptr<Instruction> phi(create_instruction<Pseudo_instruction>(
+            aco_opcode::p_linear_phi, Format::PSEUDO, ctx->block->linear_preds.size(), 1));
+         for (unsigned i = 0; i < ctx->block->logical_preds.size(); i++)
+            phi->operands[i] = Operand(new_tmp);
+         phi->operands.back() = Operand(tmp.regClass());
+         phi->definitions[0] = Definition(tmp);
+         ctx->block->instructions.emplace(ctx->block->instructions.begin(), std::move(phi));
+
+         renames.emplace(tmp.id(), new_tmp.id());
+      }
+   }
+
+   if (renames.empty())
+      return;
+
+   for (unsigned i = ctx->block->index - 1;
+        ctx->program->blocks[i].loop_nest_depth > ctx->block->loop_nest_depth; i--) {
+      for (aco_ptr<Instruction>& instr : ctx->program->blocks[i].instructions) {
+         for (Definition& def : instr->definitions) {
+            if (def.isTemp())
+               def.setTemp(rename_temp(renames, def.getTemp()));
+         }
+         for (Operand& op : instr->operands) {
+            if (op.isTemp())
+               op.setTemp(rename_temp(renames, op.getTemp()));
+         }
+      }
+   }
+}
+
 static void begin_uniform_if_then(isel_context* ctx, if_context* ic, Temp cond);
 static void begin_uniform_if_else(isel_context* ctx, if_context* ic);
 static void end_uniform_if(isel_context* ctx, if_context* ic);
@@ -10317,6 +10399,10 @@ visit_loop(isel_context* ctx, nir_loop* loop)
    }
 
    end_loop(ctx, &lc);
+
+   /* Create extra LCSSA phis for continue_or_break */
+   if (ctx->block->linear_preds.size() > ctx->block->logical_preds.size())
+      lcssa_workaround(ctx, loop);
 }
 
 static void
@@ -12661,6 +12747,20 @@ select_rt_prolog(Program* program, ac_shader_config* config,
    program->config->num_sgprs = get_sgpr_alloc(program, num_sgprs);
 }
 
+PhysReg
+get_next_vgpr(unsigned size, unsigned* num, int *offset = NULL)
+{
+   unsigned reg = *num + (offset ? *offset : 0);
+   if (reg + size >= *num) {
+      *num = reg + size;
+      if (offset)
+         *offset = 0;
+   } else if (offset) {
+      *offset += size;
+   }
+   return PhysReg(256 + reg);
+}
+
 void
 select_vs_prolog(Program* program, const struct aco_vs_prolog_info* pinfo, ac_shader_config* config,
                  const struct aco_compiler_options* options, const struct aco_shader_info* info,
@@ -12702,13 +12802,30 @@ select_vs_prolog(Program* program, const struct aco_vs_prolog_info* pinfo, ac_sh
    Operand start_instance = get_arg_fixed(args, args->start_instance);
    Operand instance_id = get_arg_fixed(args, args->instance_id);
 
-   PhysReg attributes_start(256 + args->num_vgprs_used);
-   /* choose vgprs that won't be used for anything else until the last attribute load */
-   PhysReg vertex_index(attributes_start.reg() + pinfo->num_attributes * 4 - 1);
-   PhysReg instance_index(attributes_start.reg() + pinfo->num_attributes * 4 - 2);
-   PhysReg start_instance_vgpr(attributes_start.reg() + pinfo->num_attributes * 4 - 3);
-   PhysReg nontrivial_tmp_vgpr0(attributes_start.reg() + pinfo->num_attributes * 4 - 4);
-   PhysReg nontrivial_tmp_vgpr1(attributes_start.reg() + pinfo->num_attributes * 4);
+   bool needs_instance_index =
+      pinfo->instance_rate_inputs &
+      ~(pinfo->zero_divisors | pinfo->nontrivial_divisors); /* divisor is 1 */
+   bool needs_start_instance = pinfo->instance_rate_inputs & pinfo->zero_divisors;
+   bool needs_vertex_index = ~pinfo->instance_rate_inputs & attrib_mask;
+   bool needs_tmp_vgpr0 = has_nontrivial_divisors;
+   bool needs_tmp_vgpr1 = has_nontrivial_divisors &&
+                          (program->gfx_level <= GFX8 || program->gfx_level >= GFX11);
+
+   int vgpr_offset = pinfo->misaligned_mask & (1u << (pinfo->num_attributes - 1)) ? 0 : -4;
+
+   unsigned num_vgprs = args->num_vgprs_used;
+   PhysReg attributes_start = get_next_vgpr(pinfo->num_attributes * 4, &num_vgprs);
+   PhysReg vertex_index, instance_index, start_instance_vgpr, nontrivial_tmp_vgpr0, nontrivial_tmp_vgpr1;
+   if (needs_vertex_index)
+      vertex_index = get_next_vgpr(1, &num_vgprs, &vgpr_offset);
+   if (needs_instance_index)
+      instance_index = get_next_vgpr(1, &num_vgprs, &vgpr_offset);
+   if (needs_start_instance)
+      start_instance_vgpr = get_next_vgpr(1, &num_vgprs, &vgpr_offset);
+   if (needs_tmp_vgpr0)
+      nontrivial_tmp_vgpr0 = get_next_vgpr(1, &num_vgprs, &vgpr_offset);
+   if (needs_tmp_vgpr1)
+      nontrivial_tmp_vgpr1 = get_next_vgpr(1, &num_vgprs, &vgpr_offset);
 
    bld.sop1(aco_opcode::s_mov_b32, Definition(vertex_buffers, s1),
             get_arg_fixed(args, args->vertex_buffers));
@@ -12720,16 +12837,10 @@ select_vs_prolog(Program* program, const struct aco_vs_prolog_info* pinfo, ac_sh
                Operand::c32((unsigned)options->address32_hi));
    }
 
-   /* calculate vgpr requirements */
-   unsigned num_vgprs = attributes_start.reg() - 256;
-   num_vgprs += pinfo->num_attributes * 4;
-   if (has_nontrivial_divisors && program->gfx_level <= GFX8)
-      num_vgprs++; /* make space for nontrivial_tmp_vgpr1 */
-   unsigned num_sgprs = 0;
-
    const struct ac_vtx_format_info* vtx_info_table =
       ac_get_vtx_format_info_table(GFX8, CHIP_POLARIS10);
 
+   unsigned num_sgprs = 0;
    for (unsigned loc = 0; loc < pinfo->num_attributes;) {
       unsigned num_descs =
          load_vb_descs(bld, desc, Operand(vertex_buffers, s2), loc, pinfo->num_attributes - loc);
@@ -12769,11 +12880,6 @@ select_vs_prolog(Program* program, const struct aco_vs_prolog_info* pinfo, ac_sh
             }
          }
 
-         bool needs_instance_index =
-            pinfo->instance_rate_inputs &
-            ~(pinfo->zero_divisors | pinfo->nontrivial_divisors); /* divisor is 1 */
-         bool needs_start_instance = pinfo->instance_rate_inputs & pinfo->zero_divisors;
-         bool needs_vertex_index = ~pinfo->instance_rate_inputs & attrib_mask;
          if (needs_vertex_index)
             bld.vadd32(Definition(vertex_index, v1), get_arg_fixed(args, args->base_vertex),
                        get_arg_fixed(args, args->vertex_id), false, Operand(s2), true);
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index cd4ceb221ce..1d48fbf4a8a 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -1613,7 +1613,7 @@ static_assert(sizeof(Export_instruction) == sizeof(Instruction) + 4, "Unexpected
 struct Pseudo_instruction : public Instruction {
    PhysReg scratch_sgpr; /* might not be valid if it's not needed */
    bool tmp_in_scc;
-   uint8_t padding;
+   bool needs_scratch_reg; /* if scratch_sgpr/scc can be written, initialized by RA. */
 };
 static_assert(sizeof(Pseudo_instruction) == sizeof(Instruction) + 4, "Unexpected padding");
 
diff --git a/src/amd/compiler/aco_lower_to_cssa.cpp b/src/amd/compiler/aco_lower_to_cssa.cpp
index 3c509ee2f81..f62c2816e09 100644
--- a/src/amd/compiler/aco_lower_to_cssa.cpp
+++ b/src/amd/compiler/aco_lower_to_cssa.cpp
@@ -305,8 +305,11 @@ try_merge_merge_set(cssa_ctx& ctx, Temp dst, merge_set& set_b)
       while (!dom.empty() && !dominates(ctx, dom.back(), current))
          dom.pop_back(); /* not the desired parent, remove */
 
-      if (!dom.empty() && interference(ctx, current, dom.back()))
+      if (!dom.empty() && interference(ctx, current, dom.back())) {
+         for (Temp t : union_set)
+            ctx.merge_node_table[t.id()].equal_anc_out = Temp();
          return false; /* intersection detected */
+      }
 
       dom.emplace_back(current); /* otherwise, keep checking */
       if (current != dst)
diff --git a/src/amd/compiler/aco_lower_to_hw_instr.cpp b/src/amd/compiler/aco_lower_to_hw_instr.cpp
index 27787c7322f..03282ea2857 100644
--- a/src/amd/compiler/aco_lower_to_hw_instr.cpp
+++ b/src/amd/compiler/aco_lower_to_hw_instr.cpp
@@ -1767,6 +1767,9 @@ try_coalesce_copies(lower_context* ctx, std::map<PhysReg, copy_operation>& copy_
        copy.op.isConstant() != other->second.op.isConstant())
       return;
 
+   if (other->second.def.regClass().is_linear_vgpr() != copy.def.regClass().is_linear_vgpr())
+      return;
+
    /* don't create 64-bit copies before GFX10 */
    if (copy.bytes >= 4 && copy.def.regClass().type() == RegType::vgpr &&
        ctx->program->gfx_level < GFX10)
diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index 1ca0fd95dd1..2fcbf4a5406 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -3851,6 +3851,8 @@ combine_vop3p(opt_ctx& ctx, aco_ptr<Instruction>& instr)
       bool fadd = instr->opcode == aco_opcode::v_pk_add_f16;
       if (fadd && instr->definitions[0].isPrecise())
          return;
+      if (!fadd && instr->valu().clamp)
+         return;
 
       Instruction* mul_instr = nullptr;
       unsigned add_op_idx = 0;
@@ -4506,20 +4508,20 @@ combine_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
       }
    } else if (instr->opcode == aco_opcode::v_not_b32 && ctx.program->gfx_level >= GFX10) {
       combine_not_xor(ctx, instr);
-   } else if (instr->opcode == aco_opcode::v_add_u16) {
+   } else if (instr->opcode == aco_opcode::v_add_u16 && !instr->valu().clamp) {
       combine_three_valu_op(
          ctx, instr, aco_opcode::v_mul_lo_u16,
          ctx.program->gfx_level == GFX8 ? aco_opcode::v_mad_legacy_u16 : aco_opcode::v_mad_u16,
          "120", 1 | 2);
-   } else if (instr->opcode == aco_opcode::v_add_u16_e64) {
+   } else if (instr->opcode == aco_opcode::v_add_u16_e64 && !instr->valu().clamp) {
       combine_three_valu_op(ctx, instr, aco_opcode::v_mul_lo_u16_e64, aco_opcode::v_mad_u16, "120",
                             1 | 2);
-   } else if (instr->opcode == aco_opcode::v_add_u32) {
+   } else if (instr->opcode == aco_opcode::v_add_u32 && !instr->usesModifiers()) {
       if (combine_add_sub_b2i(ctx, instr, aco_opcode::v_addc_co_u32, 1 | 2)) {
       } else if (combine_add_bcnt(ctx, instr)) {
       } else if (combine_three_valu_op(ctx, instr, aco_opcode::v_mul_u32_u24,
                                        aco_opcode::v_mad_u32_u24, "120", 1 | 2)) {
-      } else if (ctx.program->gfx_level >= GFX9 && !instr->usesModifiers()) {
+      } else if (ctx.program->gfx_level >= GFX9) {
          if (combine_three_valu_op(ctx, instr, aco_opcode::s_xor_b32, aco_opcode::v_xad_u32, "120",
                                    1 | 2)) {
          } else if (combine_three_valu_op(ctx, instr, aco_opcode::v_xor_b32, aco_opcode::v_xad_u32,
@@ -4533,8 +4535,9 @@ combine_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
          } else if (combine_add_or_then_and_lshl(ctx, instr)) {
          }
       }
-   } else if (instr->opcode == aco_opcode::v_add_co_u32 ||
-              instr->opcode == aco_opcode::v_add_co_u32_e64) {
+   } else if ((instr->opcode == aco_opcode::v_add_co_u32 ||
+               instr->opcode == aco_opcode::v_add_co_u32_e64) &&
+              !instr->usesModifiers()) {
       bool carry_out = ctx.uses[instr->definitions[1].tempId()] > 0;
       if (combine_add_sub_b2i(ctx, instr, aco_opcode::v_addc_co_u32, 1 | 2)) {
       } else if (!carry_out && combine_add_bcnt(ctx, instr)) {
diff --git a/src/amd/compiler/aco_optimizer_postRA.cpp b/src/amd/compiler/aco_optimizer_postRA.cpp
index 5978e7c4b46..93fc261a259 100644
--- a/src/amd/compiler/aco_optimizer_postRA.cpp
+++ b/src/amd/compiler/aco_optimizer_postRA.cpp
@@ -57,8 +57,8 @@ Idx const_or_undef{UINT32_MAX, 2};
 /** Indicates that a register was overwritten by different instructions in previous blocks. */
 Idx overwritten_untrackable{UINT32_MAX, 3};
 
-/** Indicates that a register was written by subdword operations. */
-Idx overwritten_subdword{UINT32_MAX, 4};
+/** Indicates that there isn't a clear single writer, for example due to subdword operations. */
+Idx overwritten_unknown_instr{UINT32_MAX, 4};
 
 struct pr_opt_ctx {
    using Idx_array = std::array<Idx, max_reg_cnt>;
@@ -150,13 +150,19 @@ save_reg_writes(pr_opt_ctx& ctx, aco_ptr<Instruction>& instr)
       Idx idx{ctx.current_block->index, ctx.current_instr_idx};
 
       if (def.regClass().is_subdword())
-         idx = overwritten_subdword;
+         idx = overwritten_unknown_instr;
 
       assert((r + dw_size) <= max_reg_cnt);
       assert(def.size() == dw_size || def.regClass().is_subdword());
       std::fill(ctx.instr_idx_by_regs[ctx.current_block->index].begin() + r,
                 ctx.instr_idx_by_regs[ctx.current_block->index].begin() + r + dw_size, idx);
    }
+   if (instr->isPseudo() && instr->pseudo().needs_scratch_reg) {
+      if (!instr->pseudo().tmp_in_scc)
+         ctx.instr_idx_by_regs[ctx.current_block->index][scc] = overwritten_unknown_instr;
+      ctx.instr_idx_by_regs[ctx.current_block->index][instr->pseudo().scratch_sgpr] =
+         overwritten_unknown_instr;
+   }
 }
 
 Idx
@@ -211,7 +217,7 @@ is_overwritten_since(pr_opt_ctx& ctx, PhysReg reg, RegClass rc, const Idx& since
          return true;
       else if (i == overwritten_untrackable || i == not_written_yet)
          continue;
-      else if (i == overwritten_subdword)
+      else if (i == overwritten_unknown_instr)
          return true;
 
       assert(i.found());
@@ -748,6 +754,12 @@ optimize_postRA(Program* program)
 
       for (aco_ptr<Instruction>& instr : block.instructions)
          process_instruction(ctx, instr);
+
+      /* SCC might get overwritten by copies or swaps from parallelcopies
+       * inserted by SSA-elimination for linear phis.
+       */
+      if (!block.scc_live_out)
+         ctx.instr_idx_by_regs[block.index][scc] = overwritten_unknown_instr;
    }
 
    /* Cleanup pass
diff --git a/src/amd/compiler/aco_reduce_assign.cpp b/src/amd/compiler/aco_reduce_assign.cpp
index 83514206d46..2bc5add45ae 100644
--- a/src/amd/compiler/aco_reduce_assign.cpp
+++ b/src/amd/compiler/aco_reduce_assign.cpp
@@ -79,7 +79,7 @@ setup_reduce_temp(Program* program)
           * Here, the linear vgpr is used before any phi copies, so this isn't necessary.
           */
          if (inserted_at >= 0) {
-            aco_ptr<Instruction> end{create_instruction<Instruction>(
+            aco_ptr<Instruction> end{create_instruction<Pseudo_instruction>(
                aco_opcode::p_end_linear_vgpr, Format::PSEUDO, vtmp_inserted_at >= 0 ? 2 : 1, 0)};
             end->operands[0] = Operand(reduceTmp);
             if (vtmp_inserted_at >= 0)
@@ -118,11 +118,16 @@ setup_reduce_temp(Program* program)
                 * would insert at the end instead of using this one. */
             } else {
                assert(last_top_level_block_idx < block.index);
-               /* insert before the branch at last top level block */
+               /* insert after p_logical_end of the last top-level block */
                std::vector<aco_ptr<Instruction>>& instructions =
                   program->blocks[last_top_level_block_idx].instructions;
-               instructions.insert(std::next(instructions.begin(), instructions.size() - 1),
-                                   std::move(create));
+               auto insert_point =
+                  std::find_if(instructions.rbegin(), instructions.rend(),
+                               [](const auto& iter) {
+                                  return iter->opcode == aco_opcode::p_logical_end;
+                               })
+                     .base();
+               instructions.insert(insert_point, std::move(create));
                inserted_at = last_top_level_block_idx;
             }
          }
@@ -161,8 +166,13 @@ setup_reduce_temp(Program* program)
                assert(last_top_level_block_idx < block.index);
                std::vector<aco_ptr<Instruction>>& instructions =
                   program->blocks[last_top_level_block_idx].instructions;
-               instructions.insert(std::next(instructions.begin(), instructions.size() - 1),
-                                   std::move(create));
+               auto insert_point =
+                  std::find_if(instructions.rbegin(), instructions.rend(),
+                               [](const auto& iter) {
+                                  return iter->opcode == aco_opcode::p_logical_end;
+                               })
+                     .base();
+               instructions.insert(insert_point, std::move(create));
                vtmp_inserted_at = last_top_level_block_idx;
             }
          }
diff --git a/src/amd/compiler/aco_register_allocation.cpp b/src/amd/compiler/aco_register_allocation.cpp
index 83960cd5d77..4596dddf253 100644
--- a/src/amd/compiler/aco_register_allocation.cpp
+++ b/src/amd/compiler/aco_register_allocation.cpp
@@ -47,7 +47,8 @@ void add_subdword_operand(ra_ctx& ctx, aco_ptr<Instruction>& instr, unsigned idx
                           RegClass rc);
 std::pair<unsigned, unsigned>
 get_subdword_definition_info(Program* program, const aco_ptr<Instruction>& instr, RegClass rc);
-void add_subdword_definition(Program* program, aco_ptr<Instruction>& instr, PhysReg reg);
+void add_subdword_definition(Program* program, aco_ptr<Instruction>& instr, PhysReg reg,
+                             bool allow_16bit_write);
 
 struct assignment {
    PhysReg reg;
@@ -62,7 +63,7 @@ struct assignment {
    };
    uint32_t affinity = 0;
    assignment() = default;
-   assignment(PhysReg reg_, RegClass rc_) : reg(reg_), rc(rc_), assigned(-1) {}
+   assignment(PhysReg reg_, RegClass rc_) : reg(reg_), rc(rc_) { assigned = true; }
    void set(const Definition& def)
    {
       assigned = true;
@@ -96,9 +97,9 @@ struct ra_ctx {
          renames(program->blocks.size()), policy(policy_)
    {
       pseudo_dummy.reset(
-         create_instruction<Instruction>(aco_opcode::p_parallelcopy, Format::PSEUDO, 0, 0));
+         create_instruction<Pseudo_instruction>(aco_opcode::p_parallelcopy, Format::PSEUDO, 0, 0));
       phi_dummy.reset(
-         create_instruction<Instruction>(aco_opcode::p_linear_phi, Format::PSEUDO, 0, 0));
+         create_instruction<Pseudo_instruction>(aco_opcode::p_linear_phi, Format::PSEUDO, 0, 0));
       sgpr_limit = get_addr_sgpr_from_waves(program, program->min_waves);
       vgpr_limit = get_addr_vgpr_from_waves(program, program->min_waves);
    }
@@ -678,7 +679,8 @@ get_subdword_definition_info(Program* program, const aco_ptr<Instruction>& instr
 }
 
 void
-add_subdword_definition(Program* program, aco_ptr<Instruction>& instr, PhysReg reg)
+add_subdword_definition(Program* program, aco_ptr<Instruction>& instr, PhysReg reg,
+                        bool allow_16bit_write)
 {
    if (instr->isPseudo())
       return;
@@ -687,7 +689,7 @@ add_subdword_definition(Program* program, aco_ptr<Instruction>& instr, PhysReg r
       amd_gfx_level gfx_level = program->gfx_level;
       assert(instr->definitions[0].bytes() <= 2);
 
-      if (reg.byte() == 0 && instr_is_16bit(gfx_level, instr->opcode))
+      if (reg.byte() == 0 && allow_16bit_write && instr_is_16bit(gfx_level, instr->opcode))
          return;
 
       /* use SDWA */
@@ -696,6 +698,8 @@ add_subdword_definition(Program* program, aco_ptr<Instruction>& instr, PhysReg r
          return;
       }
 
+      assert(allow_16bit_write);
+
       if (instr->opcode == aco_opcode::v_fma_mixlo_f16) {
          instr->opcode = aco_opcode::v_fma_mixhi_f16;
          return;
@@ -838,7 +842,7 @@ update_renames(ra_ctx& ctx, RegisterFile& reg_file,
       assert(ctx.assignments.size() == ctx.program->peekAllocationId());
 
       /* check if we moved an operand */
-      bool first = true;
+      bool first[2] = {true, true};
       bool fill = true;
       for (unsigned i = 0; i < instr->operands.size(); i++) {
          Operand& op = instr->operands[i];
@@ -846,25 +850,31 @@ update_renames(ra_ctx& ctx, RegisterFile& reg_file,
             continue;
          if (op.tempId() == copy.first.tempId()) {
             /* only rename precolored operands if the copy-location matches */
-            if ((flags & rename_precolored_ops) && op.isFixed() &&
-                op.physReg() != copy.second.physReg())
-               continue;
-
-            bool omit_renaming = !(flags & rename_not_killed_ops) && !op.isKillBeforeDef();
-            for (std::pair<Operand, Definition>& pc : parallelcopies) {
-               PhysReg def_reg = pc.second.physReg();
-               omit_renaming &= def_reg > copy.first.physReg()
-                                   ? (copy.first.physReg() + copy.first.size() <= def_reg.reg())
-                                   : (def_reg + pc.second.size() <= copy.first.physReg().reg());
+            bool omit_renaming = (flags & rename_precolored_ops) && op.isFixed() &&
+                                 op.physReg() != copy.second.physReg();
+
+            /* Omit renaming in some cases for p_create_vector in order to avoid
+             * unnecessary shuffle code. */
+            if (!(flags & rename_not_killed_ops) && !op.isKillBeforeDef()) {
+               omit_renaming = true;
+               for (std::pair<Operand, Definition>& pc : parallelcopies) {
+                  PhysReg def_reg = pc.second.physReg();
+                  omit_renaming &= def_reg > copy.first.physReg()
+                                      ? (copy.first.physReg() + copy.first.size() <= def_reg.reg())
+                                      : (def_reg + pc.second.size() <= copy.first.physReg().reg());
+               }
             }
-            if (omit_renaming) {
-               if (first)
-                  op.setFirstKill(true);
-               else
-                  op.setKill(true);
-               first = false;
+
+            /* Fix the kill flags */
+            if (first[omit_renaming])
+               op.setFirstKill(omit_renaming || op.isKill());
+            else
+               op.setKill(omit_renaming || op.isKill());
+            first[omit_renaming] = false;
+
+            if (omit_renaming)
                continue;
-            }
+
             op.setTemp(copy.second.getTemp());
             op.setFixed(copy.second.physReg());
 
@@ -1913,6 +1923,7 @@ handle_pseudo(ra_ctx& ctx, const RegisterFile& reg_file, Instruction* instr)
    if (!needs_scratch_reg)
       return;
 
+   instr->pseudo().needs_scratch_reg = true;
    instr->pseudo().tmp_in_scc = reg_file[scc];
 
    int reg = ctx.max_used_sgpr;
@@ -1936,19 +1947,6 @@ bool
 operand_can_use_reg(amd_gfx_level gfx_level, aco_ptr<Instruction>& instr, unsigned idx, PhysReg reg,
                     RegClass rc)
 {
-   bool is_writelane = instr->opcode == aco_opcode::v_writelane_b32 ||
-                       instr->opcode == aco_opcode::v_writelane_b32_e64;
-   if (gfx_level <= GFX9 && is_writelane && idx <= 1) {
-      /* v_writelane_b32 can take two sgprs but only if one is m0. */
-      bool is_other_sgpr =
-         instr->operands[!idx].isTemp() &&
-         (!instr->operands[!idx].isFixed() || instr->operands[!idx].physReg() != m0);
-      if (is_other_sgpr && instr->operands[!idx].tempId() != instr->operands[idx].tempId()) {
-         instr->operands[idx].setFixed(m0);
-         return reg == m0;
-      }
-   }
-
    if (reg.byte()) {
       unsigned stride = get_subdword_operand_stride(gfx_level, instr, idx, rc);
       if (reg.byte() % stride)
@@ -2844,6 +2842,18 @@ register_allocation(Program* program, std::vector<IDSet>& live_out_per_block, ra
                operand.isFixed() && ctx.assignments[operand.tempId()].reg != operand.physReg();
          }
 
+         bool is_writelane = instr->opcode == aco_opcode::v_writelane_b32 ||
+                             instr->opcode == aco_opcode::v_writelane_b32_e64;
+         if (program->gfx_level <= GFX9 && is_writelane && instr->operands[0].isTemp() &&
+             instr->operands[1].isTemp()) {
+            /* v_writelane_b32 can take two sgprs but only if one is m0. */
+            if (ctx.assignments[instr->operands[0].tempId()].reg != m0 &&
+                ctx.assignments[instr->operands[1].tempId()].reg != m0) {
+               instr->operands[0].setFixed(m0);
+               fixed = true;
+            }
+         }
+
          if (fixed)
             handle_fixed_operands(ctx, register_file, parallelcopy, instr);
 
@@ -2979,7 +2989,8 @@ register_allocation(Program* program, std::vector<IDSet>& live_out_per_block, ra
                   PhysReg reg = get_reg(ctx, register_file, tmp, parallelcopy, instr);
                   definition->setFixed(reg);
                   if (reg.byte() || register_file.test(reg, 4)) {
-                     add_subdword_definition(program, instr, reg);
+                     bool allow_16bit_write = reg.byte() % 2 == 0 && !register_file.test(reg, 2);
+                     add_subdword_definition(program, instr, reg, allow_16bit_write);
                      definition = &instr->definitions[i]; /* add_subdword_definition can invalidate
                                                              the reference */
                   }
@@ -3068,6 +3079,7 @@ register_allocation(Program* program, std::vector<IDSet>& live_out_per_block, ra
 
                handle_pseudo(ctx, tmp_file, pc.get());
             } else {
+               pc->needs_scratch_reg = sgpr_operands_alias_defs || linear_vgpr;
                pc->tmp_in_scc = false;
             }
 
diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index 8da3d49202b..47c4f803834 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -1845,10 +1845,16 @@ assign_spill_slots(spill_ctx& ctx, unsigned spills_to_vgpr)
                      instructions.emplace_back(std::move(create));
                   } else {
                      assert(last_top_level_block_idx < block.index);
-                     /* insert before the branch at last top level block */
+                     /* insert after p_logical_end of the last top-level block */
                      std::vector<aco_ptr<Instruction>>& block_instrs =
                         ctx.program->blocks[last_top_level_block_idx].instructions;
-                     block_instrs.insert(std::prev(block_instrs.end()), std::move(create));
+                     auto insert_point =
+                        std::find_if(block_instrs.rbegin(), block_instrs.rend(),
+                                     [](const auto& iter) {
+                                        return iter->opcode == aco_opcode::p_logical_end;
+                                     })
+                           .base();
+                     block_instrs.insert(insert_point, std::move(create));
                   }
                }
 
@@ -1885,10 +1891,16 @@ assign_spill_slots(spill_ctx& ctx, unsigned spills_to_vgpr)
                      instructions.emplace_back(std::move(create));
                   } else {
                      assert(last_top_level_block_idx < block.index);
-                     /* insert before the branch at last top level block */
+                     /* insert after p_logical_end of the last top-level block */
                      std::vector<aco_ptr<Instruction>>& block_instrs =
                         ctx.program->blocks[last_top_level_block_idx].instructions;
-                     block_instrs.insert(std::prev(block_instrs.end()), std::move(create));
+                     auto insert_point =
+                        std::find_if(block_instrs.rbegin(), block_instrs.rend(),
+                                     [](const auto& iter) {
+                                        return iter->opcode == aco_opcode::p_logical_end;
+                                     })
+                           .base();
+                     block_instrs.insert(insert_point, std::move(create));
                   }
                }
 
diff --git a/src/amd/compiler/aco_ssa_elimination.cpp b/src/amd/compiler/aco_ssa_elimination.cpp
index 729449fcf7f..477b59ba6be 100644
--- a/src/amd/compiler/aco_ssa_elimination.cpp
+++ b/src/amd/compiler/aco_ssa_elimination.cpp
@@ -133,6 +133,7 @@ insert_parallelcopies(ssa_elimination_ctx& ctx)
       }
       pc->tmp_in_scc = block.scc_live_out;
       pc->scratch_sgpr = scratch_sgpr;
+      pc->needs_scratch_reg = true;
       block.instructions.insert(it, std::move(pc));
    }
 }
@@ -397,6 +398,10 @@ try_optimize_branching_sequence(ssa_elimination_ctx& ctx, Block& block, const in
                                    regs_intersect(Definition(exec, ctx.program->lane_mask), def);
                          }))
             break;
+
+         if (instr->isPseudo() && instr->pseudo().needs_scratch_reg &&
+             regs_intersect(exec_copy_def, Definition(instr->pseudo().scratch_sgpr, s1)))
+            break;
       }
    }
 
@@ -436,6 +441,9 @@ try_optimize_branching_sequence(ssa_elimination_ctx& ctx, Block& block, const in
          for (const Definition& def : instr->definitions)
             if (regs_intersect(exec_copy_def, def))
                return;
+         if (instr->isPseudo() && instr->pseudo().needs_scratch_reg &&
+             regs_intersect(exec_copy_def, Definition(instr->pseudo().scratch_sgpr, s1)))
+            return;
       }
 
       /* Check if the instruction may implicitly read VCC, eg. v_cndmask or add with carry.
diff --git a/src/amd/compiler/tests/test_assembler.cpp b/src/amd/compiler/tests/test_assembler.cpp
index a7106e98686..14a3594829c 100644
--- a/src/amd/compiler/tests/test_assembler.cpp
+++ b/src/amd/compiler/tests/test_assembler.cpp
@@ -741,6 +741,9 @@ BEGIN_TEST(assembler.gfx11.flat)
    //! scratch_load_b32 v42, v10, s32                              ; dc510000 2aa0000a
    bld.scratch(aco_opcode::scratch_load_dword, dst_v1, op_v1, op_s1);
 
+   //! scratch_load_b32 v42, off, off                              ; dc510000 2a7c0080
+   bld.scratch(aco_opcode::scratch_load_dword, dst_v1, Operand(v1), Operand(s1));
+
    //! global_load_b32 v42, v[20:21], off offset:-42               ; dc521fd6 2a7c0014
    bld.global(aco_opcode::global_load_dword, dst_v1, op_v2, Operand(s1), -42);
 
diff --git a/src/amd/compiler/tests/test_insert_waitcnt.cpp b/src/amd/compiler/tests/test_insert_waitcnt.cpp
index 86d81845173..e17a39be195 100644
--- a/src/amd/compiler/tests/test_insert_waitcnt.cpp
+++ b/src/amd/compiler/tests/test_insert_waitcnt.cpp
@@ -53,3 +53,71 @@ BEGIN_TEST(insert_waitcnt.ds_ordered_count)
 
    finish_waitcnt_test();
 END_TEST
+
+BEGIN_TEST(insert_waitcnt.waw.mixed_vmem_lds.vmem)
+   if (!setup_cs(NULL, GFX10))
+      return;
+
+   Definition def_v4(PhysReg(260), v1);
+   Operand op_v0(PhysReg(256), v1);
+   Operand desc0(PhysReg(0), s4);
+
+   //>> BB0
+   //! /* logical preds: / linear preds: / kind: top-level, */
+   //! v1: %0:v[4] = buffer_load_dword %0:s[0-3], %0:v[0], 0
+   bld.mubuf(aco_opcode::buffer_load_dword, def_v4, desc0, op_v0, Operand::zero(), 0, false);
+
+   //>> BB1
+   //! /* logical preds: / linear preds: / kind: */
+   //! v1: %0:v[4] = ds_read_b32 %0:v[0]
+   bld.reset(program->create_and_insert_block());
+   bld.ds(aco_opcode::ds_read_b32, def_v4, op_v0);
+
+   bld.reset(program->create_and_insert_block());
+   program->blocks[2].linear_preds.push_back(0);
+   program->blocks[2].linear_preds.push_back(1);
+   program->blocks[2].logical_preds.push_back(0);
+   program->blocks[2].logical_preds.push_back(1);
+
+   //>> BB2
+   //! /* logical preds: BB0, BB1, / linear preds: BB0, BB1, / kind: uniform, */
+   //! s_waitcnt lgkmcnt(0)
+   //! v1: %0:v[4] = buffer_load_dword %0:s[0-3], %0:v[0], 0
+   bld.mubuf(aco_opcode::buffer_load_dword, def_v4, desc0, op_v0, Operand::zero(), 0, false);
+
+   finish_waitcnt_test();
+END_TEST
+
+BEGIN_TEST(insert_waitcnt.waw.mixed_vmem_lds.lds)
+   if (!setup_cs(NULL, GFX10))
+      return;
+
+   Definition def_v4(PhysReg(260), v1);
+   Operand op_v0(PhysReg(256), v1);
+   Operand desc0(PhysReg(0), s4);
+
+   //>> BB0
+   //! /* logical preds: / linear preds: / kind: top-level, */
+   //! v1: %0:v[4] = buffer_load_dword %0:s[0-3], %0:v[0], 0
+   bld.mubuf(aco_opcode::buffer_load_dword, def_v4, desc0, op_v0, Operand::zero(), 0, false);
+
+   //>> BB1
+   //! /* logical preds: / linear preds: / kind: */
+   //! v1: %0:v[4] = ds_read_b32 %0:v[0]
+   bld.reset(program->create_and_insert_block());
+   bld.ds(aco_opcode::ds_read_b32, def_v4, op_v0);
+
+   bld.reset(program->create_and_insert_block());
+   program->blocks[2].linear_preds.push_back(0);
+   program->blocks[2].linear_preds.push_back(1);
+   program->blocks[2].logical_preds.push_back(0);
+   program->blocks[2].logical_preds.push_back(1);
+
+   //>> BB2
+   //! /* logical preds: BB0, BB1, / linear preds: BB0, BB1, / kind: uniform, */
+   //! s_waitcnt vmcnt(0)
+   //! v1: %0:v[4] = ds_read_b32 %0:v[0]
+   bld.ds(aco_opcode::ds_read_b32, def_v4, op_v0);
+
+   finish_waitcnt_test();
+END_TEST
diff --git a/src/amd/compiler/tests/test_reduce_assign.cpp b/src/amd/compiler/tests/test_reduce_assign.cpp
index 7f44e55486f..8aae778bd98 100644
--- a/src/amd/compiler/tests/test_reduce_assign.cpp
+++ b/src/amd/compiler/tests/test_reduce_assign.cpp
@@ -41,6 +41,11 @@ BEGIN_TEST(setup_reduce_temp.divergent_if_phi)
    if (!setup_cs("s2 v1", GFX9))
       return;
 
+   //>> p_logical_start
+   //>> p_logical_end
+   bld.pseudo(aco_opcode::p_logical_start);
+   bld.pseudo(aco_opcode::p_logical_end);
+
    //>> lv1: %lv = p_start_linear_vgpr
    emit_divergent_if_else(
       program.get(), bld, Operand(inputs[0]),
diff --git a/src/amd/compiler/tests/test_regalloc.cpp b/src/amd/compiler/tests/test_regalloc.cpp
index 456c42359d4..2a8ac922fc6 100644
--- a/src/amd/compiler/tests/test_regalloc.cpp
+++ b/src/amd/compiler/tests/test_regalloc.cpp
@@ -410,3 +410,21 @@ BEGIN_TEST(regalloc.vinterp_fp16)
 
    finish_ra_test(ra_test_policy());
 END_TEST
+
+BEGIN_TEST(regalloc.writelane)
+   //>> v1: %in0:v[0], s1: %in1:s[0], s1: %in2:s[1], s1: %in3:s[2] = p_startpgm
+   if (!setup_cs("v1 s1 s1 s1", GFX8))
+      return;
+
+   //! s1: %tmp:m0 = p_parallelcopy %int3:s[2]
+   Temp tmp = bld.copy(bld.def(s1, m0), inputs[3]);
+
+   //! s1: %in1_2:m0,  s1: %tmp_2:s[0] = p_parallelcopy %in1:s[0], %tmp:m0
+   //! v1: %tmp2:v[0] = v_writelane_b32_e64 %in1_2:m0, %in2:s[1], %in0:v[0]
+   Temp tmp2 = bld.writelane(bld.def(v1), inputs[1], inputs[2], inputs[0]);
+
+   //! p_unit_test %tmp_2:s[0], %tmp2:v[0]
+   bld.pseudo(aco_opcode::p_unit_test, tmp, tmp2);
+
+   finish_ra_test(ra_test_policy());
+END_TEST
diff --git a/src/amd/compiler/tests/test_to_hw_instr.cpp b/src/amd/compiler/tests/test_to_hw_instr.cpp
index 73084fa6652..f16993f9aaf 100644
--- a/src/amd/compiler/tests/test_to_hw_instr.cpp
+++ b/src/amd/compiler/tests/test_to_hw_instr.cpp
@@ -835,6 +835,56 @@ BEGIN_TEST(to_hw_instr.copy_linear_vgpr_v3)
    finish_to_hw_instr_test();
 END_TEST
 
+BEGIN_TEST(to_hw_instr.copy_linear_vgpr_coalesce)
+   if (!setup_cs(NULL, GFX10))
+      return;
+
+   PhysReg reg_v0{256};
+   PhysReg reg_v1{256 + 1};
+   PhysReg reg_v4{256 + 4};
+   PhysReg reg_v5{256 + 5};
+   RegClass v1_linear = v1.as_linear();
+
+   //>> p_unit_test 0
+   //! lv2: %0:v[0-1] = v_lshrrev_b64 0, %0:v[4-5]
+   //! s2: %0:exec,  s1: %0:scc = s_not_b64 %0:exec
+   //! lv2: %0:v[0-1] = v_lshrrev_b64 0, %0:v[4-5]
+   //! s2: %0:exec,  s1: %0:scc = s_not_b64 %0:exec
+   bld.pseudo(aco_opcode::p_unit_test, Operand::zero());
+
+   Instruction* instr = bld.pseudo(aco_opcode::p_parallelcopy, Definition(reg_v0, v1_linear),
+                                   Definition(reg_v1, v1_linear), Operand(reg_v4, v1_linear),
+                                   Operand(reg_v5, v1_linear));
+   instr->pseudo().scratch_sgpr = m0;
+
+   //! p_unit_test 1
+   //! lv1: %0:v[0] = v_mov_b32 %0:v[4]
+   //! s2: %0:exec,  s1: %0:scc = s_not_b64 %0:exec
+   //! lv1: %0:v[0] = v_mov_b32 %0:v[4]
+   //! s2: %0:exec,  s1: %0:scc = s_not_b64 %0:exec
+   //! v1: %0:v[1] = v_mov_b32 %0:v[5]
+   bld.pseudo(aco_opcode::p_unit_test, Operand::c32(1));
+
+   instr = bld.pseudo(aco_opcode::p_parallelcopy, Definition(reg_v0, v1_linear),
+                      Definition(reg_v1, v1), Operand(reg_v4, v1_linear), Operand(reg_v5, v1));
+   instr->pseudo().scratch_sgpr = m0;
+
+   //! p_unit_test 2
+   //! v1: %0:v[0] = v_mov_b32 %0:v[4]
+   //! lv1: %0:v[1] = v_mov_b32 %0:v[5]
+   //! s2: %0:exec,  s1: %0:scc = s_not_b64 %0:exec
+   //! lv1: %0:v[1] = v_mov_b32 %0:v[5]
+   //! s2: %0:exec,  s1: %0:scc = s_not_b64 %0:exec
+   bld.pseudo(aco_opcode::p_unit_test, Operand::c32(2));
+
+   instr =
+      bld.pseudo(aco_opcode::p_parallelcopy, Definition(reg_v0, v1), Definition(reg_v1, v1_linear),
+                 Operand(reg_v4, v1), Operand(reg_v5, v1_linear));
+   instr->pseudo().scratch_sgpr = m0;
+
+   finish_to_hw_instr_test();
+END_TEST
+
 BEGIN_TEST(to_hw_instr.pack2x16_constant)
    PhysReg v0_lo{256};
    PhysReg v0_hi{256};
diff --git a/src/amd/llvm/ac_llvm_build.c b/src/amd/llvm/ac_llvm_build.c
index 25013b7667c..5d8da90b6f1 100644
--- a/src/amd/llvm/ac_llvm_build.c
+++ b/src/amd/llvm/ac_llvm_build.c
@@ -119,6 +119,8 @@ void ac_llvm_context_dispose(struct ac_llvm_context *ctx)
    free(ctx->flow->stack);
    free(ctx->flow);
    ctx->flow = NULL;
+
+   LLVMDisposeBuilder(ctx->builder);
 }
 
 int ac_get_llvm_num_components(LLVMValueRef value)
diff --git a/src/amd/llvm/ac_nir_to_llvm.c b/src/amd/llvm/ac_nir_to_llvm.c
index 1d7db8580b0..5dd3ddabe40 100644
--- a/src/amd/llvm/ac_nir_to_llvm.c
+++ b/src/amd/llvm/ac_nir_to_llvm.c
@@ -1935,7 +1935,6 @@ static LLVMValueRef visit_load_buffer(struct ac_nir_context *ctx, nir_intrinsic_
    LLVMValueRef offset = get_src(ctx, instr->src[1]);
    LLVMValueRef rsrc = ctx->abi->load_ssbo ?
       ctx->abi->load_ssbo(ctx->abi, rsrc_base, false, false) : rsrc_base;
-   LLVMValueRef vindex = ctx->ac.i32_0;
 
    LLVMTypeRef def_type = get_def_type(ctx, &instr->def);
    LLVMTypeRef def_elem_type = num_components > 1 ? LLVMGetElementType(def_type) : def_type;
@@ -1964,7 +1963,7 @@ static LLVMValueRef visit_load_buffer(struct ac_nir_context *ctx, nir_intrinsic_
          int num_channels = util_next_power_of_two(load_bytes) / 4;
          bool can_speculate = access & ACCESS_CAN_REORDER;
 
-         ret = ac_build_buffer_load(&ctx->ac, rsrc, num_channels, vindex, voffset, ctx->ac.i32_0,
+         ret = ac_build_buffer_load(&ctx->ac, rsrc, num_channels, NULL, voffset, ctx->ac.i32_0,
                                     ctx->ac.f32, access, can_speculate, false);
       }
 
@@ -4366,6 +4365,7 @@ bool ac_nir_translate(struct ac_llvm_context *ac, struct ac_shader_abi *abi,
 {
    struct ac_nir_context ctx = {0};
    struct nir_function *func;
+   bool ret;
 
    ctx.ac = *ac;
    ctx.abi = abi;
@@ -4395,10 +4395,8 @@ bool ac_nir_translate(struct ac_llvm_context *ac, struct ac_shader_abi *abi,
    if (gl_shader_stage_is_compute(nir->info.stage))
       setup_shared(&ctx, nir);
 
-   if (!visit_cf_list(&ctx, &func->impl->body))
-      return false;
-
-   phi_post_pass(&ctx);
+   if ((ret = visit_cf_list(&ctx, &func->impl->body)))
+      phi_post_pass(&ctx);
 
    free(ctx.ssa_defs);
    ralloc_free(ctx.defs);
@@ -4406,7 +4404,7 @@ bool ac_nir_translate(struct ac_llvm_context *ac, struct ac_shader_abi *abi,
    if (ctx.abi->kill_ps_if_inf_interp)
       ralloc_free(ctx.verified_interp);
 
-   return true;
+   return ret;
 }
 
 /* Fixup the HW not emitting the TCS regs if there are no HS threads. */
diff --git a/src/amd/registers/gfx11.json b/src/amd/registers/gfx11.json
index 5f8fc95d029..23d5d82d007 100644
--- a/src/amd/registers/gfx11.json
+++ b/src/amd/registers/gfx11.json
@@ -20,8 +20,8 @@
    "entries": [
     {"name": "BINNING_ALLOWED", "value": 0},
     {"name": "FORCE_BINNING_ON", "value": 1},
-    {"name": "DISABLE_BINNING_USE_NEW_SC", "value": 2},
-    {"name": "DISABLE_BINNING_USE_LEGACY_SC", "value": 3}
+    {"name": "BINNING_ONE_PRIM_PER_BATCH", "value": 2},
+    {"name": "BINNING_DISABLED", "value": 3}
    ]
   },
   "BlendOp": {
diff --git a/src/amd/registers/gfx115.json b/src/amd/registers/gfx115.json
index 03f320a7fa6..20e0f2c64f2 100644
--- a/src/amd/registers/gfx115.json
+++ b/src/amd/registers/gfx115.json
@@ -20,8 +20,7 @@
    "entries": [
     {"name": "BINNING_ALLOWED", "value": 0},
     {"name": "FORCE_BINNING_ON", "value": 1},
-    {"name": "DISABLE_BINNING_USE_NEW_SC", "value": 2},
-    {"name": "DISABLE_BINNING_USE_LEGACY_SC", "value": 3}
+    {"name": "BINNING_DISABLED", "value": 3}
    ]
   },
   "BlendOp": {
diff --git a/src/amd/registers/parse_kernel_headers.py b/src/amd/registers/parse_kernel_headers.py
index 79e0f00fd0f..2da746c8589 100644
--- a/src/amd/registers/parse_kernel_headers.py
+++ b/src/amd/registers/parse_kernel_headers.py
@@ -444,6 +444,23 @@ VRSHtileEncoding = {
  ]
 }
 
+BinningModeGfx11 = {
+ "entries": [
+  {"name": "BINNING_ALLOWED", "value": 0},
+  {"name": "FORCE_BINNING_ON", "value": 1},
+  {"name": "BINNING_ONE_PRIM_PER_BATCH", "value": 2},
+  {"name": "BINNING_DISABLED", "value": 3}
+ ]
+}
+
+BinningModeGfx115Plus = {
+ "entries": [
+  {"name": "BINNING_ALLOWED", "value": 0},
+  {"name": "FORCE_BINNING_ON", "value": 1},
+  {"name": "BINNING_DISABLED", "value": 3}
+ ]
+}
+
 missing_enums_all = {
   'FLOAT_MODE': {
     "entries": [
@@ -669,6 +686,11 @@ missing_enums_gfx11plus = {
   },
 }
 
+missing_enums_gfx115plus = {
+  **missing_enums_gfx11plus,
+  "BinningMode": BinningModeGfx115Plus,
+}
+
 enums_missing = {
   'gfx6': {
     **missing_enums_all,
@@ -704,9 +726,10 @@ enums_missing = {
   },
   'gfx11': {
     **missing_enums_gfx11plus,
+    "BinningMode": BinningModeGfx11,
   },
   'gfx115': {
-    **missing_enums_gfx11plus,
+    **missing_enums_gfx115plus,
   },
 }
 
diff --git a/src/amd/vulkan/meta/radv_meta_bufimage.c b/src/amd/vulkan/meta/radv_meta_bufimage.c
index 743b405507b..c581440806c 100644
--- a/src/amd/vulkan/meta/radv_meta_bufimage.c
+++ b/src/amd/vulkan/meta/radv_meta_bufimage.c
@@ -1585,15 +1585,26 @@ radv_meta_image_to_image_cs(struct radv_cmd_buffer *cmd_buffer, struct radv_meta
    }
 
    u_foreach_bit (i, dst->aspect_mask) {
-      unsigned aspect_mask = 1u << i;
+      unsigned dst_aspect_mask = 1u << i;
+      unsigned src_aspect_mask = dst_aspect_mask;
       VkFormat depth_format = 0;
-      if (aspect_mask == VK_IMAGE_ASPECT_STENCIL_BIT)
+      if (dst_aspect_mask == VK_IMAGE_ASPECT_STENCIL_BIT)
          depth_format = vk_format_stencil_only(dst->image->vk.format);
-      else if (aspect_mask == VK_IMAGE_ASPECT_DEPTH_BIT)
+      else if (dst_aspect_mask == VK_IMAGE_ASPECT_DEPTH_BIT)
          depth_format = vk_format_depth_only(dst->image->vk.format);
+      else {
+         /*
+          * "Multi-planar images can only be copied on a per-plane basis, and the subresources used in each region when
+          * copying to or from such images must specify only one plane, though different regions can specify different
+          * planes."
+          */
+         assert((dst->aspect_mask & (dst->aspect_mask - 1)) == 0);
+         assert((src->aspect_mask & (src->aspect_mask - 1)) == 0);
+         src_aspect_mask = src->aspect_mask;
+      }
 
-      create_iview(cmd_buffer, src, &src_view, depth_format, aspect_mask);
-      create_iview(cmd_buffer, dst, &dst_view, depth_format, aspect_mask);
+      create_iview(cmd_buffer, src, &src_view, depth_format, src_aspect_mask);
+      create_iview(cmd_buffer, dst, &dst_view, depth_format, dst_aspect_mask);
 
       itoi_bind_descriptors(cmd_buffer, &src_view, &dst_view);
 
diff --git a/src/amd/vulkan/nir/radv_nir_rt_common.c b/src/amd/vulkan/nir/radv_nir_rt_common.c
index 9ae88c44ca2..9c681b7e103 100644
--- a/src/amd/vulkan/nir/radv_nir_rt_common.c
+++ b/src/amd/vulkan/nir/radv_nir_rt_common.c
@@ -227,6 +227,13 @@ intersect_ray_amd_software_tri(struct radv_device *device, nir_builder *b, nir_d
    nir_def *cx = nir_fsub(b, nir_vector_extract(b, v_c, kx), nir_fmul(b, sx, nir_vector_extract(b, v_c, kz)));
    nir_def *cy = nir_fsub(b, nir_vector_extract(b, v_c, ky), nir_fmul(b, sy, nir_vector_extract(b, v_c, kz)));
 
+   ax = nir_f2f64(b, ax);
+   ay = nir_f2f64(b, ay);
+   bx = nir_f2f64(b, bx);
+   by = nir_f2f64(b, by);
+   cx = nir_f2f64(b, cx);
+   cy = nir_f2f64(b, cy);
+
    nir_def *u = nir_fsub(b, nir_fmul(b, cx, by), nir_fmul(b, cy, bx));
    nir_def *v = nir_fsub(b, nir_fmul(b, ax, cy), nir_fmul(b, ay, cx));
    nir_def *w = nir_fsub(b, nir_fmul(b, bx, ay), nir_fmul(b, by, ax));
@@ -244,6 +251,12 @@ intersect_ray_amd_software_tri(struct radv_device *device, nir_builder *b, nir_d
    {
       nir_def *det = nir_fadd(b, u, nir_fadd(b, v, w));
 
+      sz = nir_f2f64(b, sz);
+
+      v_a = nir_f2f64(b, v_a);
+      v_b = nir_f2f64(b, v_b);
+      v_c = nir_f2f64(b, v_c);
+
       nir_def *az = nir_fmul(b, sz, nir_vector_extract(b, v_a, kz));
       nir_def *bz = nir_fmul(b, sz, nir_vector_extract(b, v_b, kz));
       nir_def *cz = nir_fmul(b, sz, nir_vector_extract(b, v_c, kz));
@@ -256,7 +269,13 @@ intersect_ray_amd_software_tri(struct radv_device *device, nir_builder *b, nir_d
 
       nir_push_if(b, det_cond_front);
       {
-         nir_def *indices[4] = {t, det, v, w};
+         nir_def *det_abs = nir_fabs(b, det);
+
+         t = nir_f2f32(b, nir_fdiv(b, t, det_abs));
+         v = nir_f2f32(b, nir_fdiv(b, v, det_abs));
+         w = nir_f2f32(b, nir_fdiv(b, w, det_abs));
+
+         nir_def *indices[4] = {t, nir_f2f32(b, nir_fsign(b, det)), v, w};
          nir_store_var(b, result, nir_vec(b, indices, 4), 0xf);
       }
       nir_pop_if(b, NULL);
@@ -399,20 +418,6 @@ insert_traversal_triangle_case(struct radv_device *device, nir_builder *b, const
             nir_def *divs[2] = {div, div};
             intersection.barycentrics = nir_fdiv(b, nir_channels(b, result, 0xc), nir_vec(b, divs, 2));
 
-            nir_def *hit_t = intersection.t;
-            /* t values within 10 ULP of the current hit t are most likely duplicate hits along shared edges, which
-             * might occur with emulated RT. The Vulkan spec discourages double-hits along shared-edges, so reject them
-             * here by subtracting 10 ULP from t.
-             */
-            if (radv_emulate_rt(device->physical_device)) {
-               nir_def *abs_t = nir_fabs(b, hit_t);
-               nir_def *sign_t = nir_fsign(b, hit_t);
-
-               nir_def *tm1 = nir_iadd(b, hit_t, nir_imul_imm(b, nir_f2i32(b, sign_t), -10));
-               nir_def *tm2 = nir_fmul(b, nir_isub_imm(b, 10, abs_t), nir_fneg(b, sign_t));
-               intersection.t = nir_bcsel(b, nir_ige_imm(b, abs_t, 10), tm1, tm2);
-            }
-
             args->triangle_cb(b, &intersection, args, ray_flags);
          }
          nir_pop_if(b, NULL);
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 5c6cb7f76d7..fce095af99b 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -1551,6 +1551,8 @@ radv_get_disabled_binning_state(struct radv_cmd_buffer *cmd_buffer)
    uint32_t pa_sc_binner_cntl_0;
 
    if (pdevice->rad_info.gfx_level >= GFX10) {
+      const unsigned binning_disabled =
+         pdevice->rad_info.gfx_level >= GFX11_5 ? V_028C44_BINNING_DISABLED : V_028C44_DISABLE_BINNING_USE_NEW_SC;
       unsigned min_bytes_per_pixel = 0;
 
       for (unsigned i = 0; i < render->color_att_count; ++i) {
@@ -1567,8 +1569,8 @@ radv_get_disabled_binning_state(struct radv_cmd_buffer *cmd_buffer)
             min_bytes_per_pixel = bytes;
       }
 
-      pa_sc_binner_cntl_0 = S_028C44_BINNING_MODE(V_028C44_DISABLE_BINNING_USE_NEW_SC) | S_028C44_BIN_SIZE_X(0) |
-                            S_028C44_BIN_SIZE_Y(0) | S_028C44_BIN_SIZE_X_EXTEND(2) |       /* 128 */
+      pa_sc_binner_cntl_0 = S_028C44_BINNING_MODE(binning_disabled) | S_028C44_BIN_SIZE_X(0) | S_028C44_BIN_SIZE_Y(0) |
+                            S_028C44_BIN_SIZE_X_EXTEND(2) |                                /* 128 */
                             S_028C44_BIN_SIZE_Y_EXTEND(min_bytes_per_pixel <= 4 ? 2 : 1) | /* 128 or 64 */
                             S_028C44_DISABLE_START_OF_PRIM(1) | S_028C44_FLUSH_ON_BINNING_TRANSITION(1);
    } else {
@@ -3743,7 +3745,8 @@ radv_flush_occlusion_query_state(struct radv_cmd_buffer *cmd_buffer)
    if (!enable_occlusion_queries) {
       db_count_control = S_028004_ZPASS_INCREMENT_DISABLE(gfx_level < GFX11);
    } else {
-      uint32_t sample_rate = util_logbase2(cmd_buffer->state.render.max_samples);
+      const uint32_t rasterization_samples = radv_get_rasterization_samples(cmd_buffer);
+      const uint32_t sample_rate = util_logbase2(rasterization_samples);
       bool gfx10_perfect =
          gfx_level >= GFX10 && (cmd_buffer->state.perfect_occlusion_queries_enabled ||
                                 cmd_buffer->state.inherited_query_control_flags & VK_QUERY_CONTROL_PRECISE_BIT);
@@ -5609,6 +5612,9 @@ radv_dst_access_flush(struct radv_cmd_buffer *cmd_buffer, VkAccessFlags2 dst_fla
             flush_bits |= RADV_CMD_FLAG_FLUSH_AND_INV_DB_META;
          break;
       case VK_ACCESS_2_MEMORY_READ_BIT:
+         if (has_CB_meta || has_DB_meta)
+            flush_bits |= RADV_CMD_FLAG_INV_L2_METADATA;
+         FALLTHROUGH;
       case VK_ACCESS_2_MEMORY_WRITE_BIT:
          flush_bits |= RADV_CMD_FLAG_INV_VCACHE | RADV_CMD_FLAG_INV_SCACHE;
          if (!image_is_coherent)
@@ -5758,7 +5764,7 @@ radv_BeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBegi
    cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_ALL | RADV_CMD_DIRTY_GUARDBAND | RADV_CMD_DIRTY_OCCLUSION_QUERY |
                               RADV_CMD_DIRTY_DB_SHADER_CONTROL;
 
-   if (cmd_buffer->device->physical_device->rad_info.gfx_level >= GFX7) {
+   if (cmd_buffer->qf == RADV_QUEUE_COMPUTE || cmd_buffer->device->vk.enabled_features.taskShader) {
       uint32_t pred_value = 0;
       uint32_t pred_offset;
       if (!radv_cmd_buffer_upload_data(cmd_buffer, 4, &pred_value, &pred_offset))
@@ -5955,6 +5961,9 @@ radv_CmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDe
    } else {
       cmd_buffer->state.index_va = 0;
       cmd_buffer->state.max_index_count = 0;
+
+      if (cmd_buffer->device->physical_device->rad_info.has_null_index_buffer_clamping_bug)
+         cmd_buffer->state.index_va = 0x2;
    }
 
    cmd_buffer->state.dirty |= RADV_CMD_DIRTY_INDEX_BUFFER;
@@ -7937,8 +7946,8 @@ radv_emit_view_index(struct radv_cmd_buffer *cmd_buffer, unsigned index)
  * space in the upload BO and emit some packets to invert the condition.
  */
 static void
-radv_cs_emit_compute_predication(struct radv_cmd_state *state, struct radeon_cmdbuf *cs, uint64_t inv_va,
-                                 bool *inv_emitted, unsigned dwords)
+radv_cs_emit_compute_predication(const struct radv_device *device, struct radv_cmd_state *state,
+                                 struct radeon_cmdbuf *cs, uint64_t inv_va, bool *inv_emitted, unsigned dwords)
 {
    if (!state->predicating)
       return;
@@ -7948,28 +7957,37 @@ radv_cs_emit_compute_predication(struct radv_cmd_state *state, struct radeon_cmd
    if (!state->predication_type) {
       /* Invert the condition the first time it is needed. */
       if (!*inv_emitted) {
+         const enum amd_gfx_level gfx_level = device->physical_device->rad_info.gfx_level;
+
          *inv_emitted = true;
 
          /* Write 1 to the inverted predication VA. */
          radeon_emit(cs, PKT3(PKT3_COPY_DATA, 4, 0));
-         radeon_emit(cs,
-                     COPY_DATA_SRC_SEL(COPY_DATA_IMM) | COPY_DATA_DST_SEL(COPY_DATA_DST_MEM) | COPY_DATA_WR_CONFIRM);
+         radeon_emit(cs, COPY_DATA_SRC_SEL(COPY_DATA_IMM) | COPY_DATA_DST_SEL(COPY_DATA_DST_MEM) |
+                            COPY_DATA_WR_CONFIRM | (gfx_level == GFX6 ? COPY_DATA_ENGINE_PFP : 0));
          radeon_emit(cs, 1);
          radeon_emit(cs, 0);
          radeon_emit(cs, inv_va);
          radeon_emit(cs, inv_va >> 32);
 
          /* If the API predication VA == 0, skip next command. */
-         radeon_emit(cs, PKT3(PKT3_COND_EXEC, 3, 0));
-         radeon_emit(cs, va);
-         radeon_emit(cs, va >> 32);
-         radeon_emit(cs, 0);
-         radeon_emit(cs, 6); /* 1x COPY_DATA size */
+         if (device->physical_device->rad_info.gfx_level >= GFX7) {
+            radeon_emit(cs, PKT3(PKT3_COND_EXEC, 3, 0));
+            radeon_emit(cs, va);
+            radeon_emit(cs, va >> 32);
+            radeon_emit(cs, 0);
+            radeon_emit(cs, 6); /* 1x COPY_DATA size */
+         } else {
+            radeon_emit(cs, PKT3(PKT3_COND_EXEC, 2, 0));
+            radeon_emit(cs, va);
+            radeon_emit(cs, va >> 32);
+            radeon_emit(cs, 6); /* 1x COPY_DATA size */
+         }
 
          /* Write 0 to the new predication VA (when the API condition != 0) */
          radeon_emit(cs, PKT3(PKT3_COPY_DATA, 4, 0));
-         radeon_emit(cs,
-                     COPY_DATA_SRC_SEL(COPY_DATA_IMM) | COPY_DATA_DST_SEL(COPY_DATA_DST_MEM) | COPY_DATA_WR_CONFIRM);
+         radeon_emit(cs, COPY_DATA_SRC_SEL(COPY_DATA_IMM) | COPY_DATA_DST_SEL(COPY_DATA_DST_MEM) |
+                            COPY_DATA_WR_CONFIRM | (gfx_level == GFX6 ? COPY_DATA_ENGINE_PFP : 0));
          radeon_emit(cs, 0);
          radeon_emit(cs, 0);
          radeon_emit(cs, inv_va);
@@ -7979,11 +7997,18 @@ radv_cs_emit_compute_predication(struct radv_cmd_state *state, struct radeon_cmd
       va = inv_va;
    }
 
-   radeon_emit(cs, PKT3(PKT3_COND_EXEC, 3, 0));
-   radeon_emit(cs, va);
-   radeon_emit(cs, va >> 32);
-   radeon_emit(cs, 0);      /* Cache policy */
-   radeon_emit(cs, dwords); /* Size of the predicated packet(s) in DWORDs. */
+   if (device->physical_device->rad_info.gfx_level >= GFX7) {
+      radeon_emit(cs, PKT3(PKT3_COND_EXEC, 3, 0));
+      radeon_emit(cs, va);
+      radeon_emit(cs, va >> 32);
+      radeon_emit(cs, 0);      /* Cache policy */
+      radeon_emit(cs, dwords); /* Size of the predicated packet(s) in DWORDs. */
+   } else {
+      radeon_emit(cs, PKT3(PKT3_COND_EXEC, 2, 0));
+      radeon_emit(cs, va);
+      radeon_emit(cs, va >> 32);
+      radeon_emit(cs, dwords); /* Size of the predicated packet(s) in DWORDs. */
+   }
 }
 
 static void
@@ -8555,11 +8580,12 @@ radv_emit_direct_taskmesh_draw_packets(struct radv_cmd_buffer *cmd_buffer, uint3
 {
    const uint32_t view_mask = cmd_buffer->state.render.view_mask;
    const unsigned num_views = MAX2(1, util_bitcount(view_mask));
-   unsigned ace_predication_size = num_views * 6; /* DISPATCH_TASKMESH_DIRECT_ACE size */
+   const unsigned ace_predication_size = num_views * 6; /* DISPATCH_TASKMESH_DIRECT_ACE size */
 
    radv_emit_userdata_task(cmd_buffer, x, y, z, 0);
-   radv_cs_emit_compute_predication(&cmd_buffer->state, cmd_buffer->gang.cs, cmd_buffer->mec_inv_pred_va,
-                                    &cmd_buffer->mec_inv_pred_emitted, ace_predication_size);
+   radv_cs_emit_compute_predication(cmd_buffer->device, &cmd_buffer->state, cmd_buffer->gang.cs,
+                                    cmd_buffer->mec_inv_pred_va, &cmd_buffer->mec_inv_pred_emitted,
+                                    ace_predication_size);
 
    if (!view_mask) {
       radv_cs_emit_dispatch_taskmesh_direct_ace_packet(cmd_buffer, x, y, z);
@@ -8588,9 +8614,6 @@ radv_emit_indirect_taskmesh_draw_packets(struct radv_cmd_buffer *cmd_buffer, con
                                                       info->count_buffer->offset + info->count_buffer_offset;
    uint64_t workaround_cond_va = 0;
 
-   if (num_views > 1)
-      ace_predication_size += num_views * 3; /* SET_SH_REG size (view index SGPR) */
-
    if (count_va)
       radv_cs_add_buffer(ws, cmd_buffer->gang.cs, info->count_buffer->bo);
 
@@ -8628,8 +8651,9 @@ radv_emit_indirect_taskmesh_draw_packets(struct radv_cmd_buffer *cmd_buffer, con
    }
 
    radv_cs_add_buffer(ws, cmd_buffer->gang.cs, info->indirect->bo);
-   radv_cs_emit_compute_predication(&cmd_buffer->state, cmd_buffer->gang.cs, cmd_buffer->mec_inv_pred_va,
-                                    &cmd_buffer->mec_inv_pred_emitted, ace_predication_size);
+   radv_cs_emit_compute_predication(cmd_buffer->device, &cmd_buffer->state, cmd_buffer->gang.cs,
+                                    cmd_buffer->mec_inv_pred_va, &cmd_buffer->mec_inv_pred_emitted,
+                                    ace_predication_size);
 
    if (workaround_cond_va) {
       radeon_emit(ace_cs, PKT3(PKT3_COND_EXEC, 3, 0));
@@ -8985,7 +9009,8 @@ radv_emit_all_graphics_states(struct radv_cmd_buffer *cmd_buffer, const struct r
    if (cmd_buffer->state.dirty & RADV_CMD_DIRTY_SHADER_QUERY)
       radv_flush_shader_query_state(cmd_buffer);
 
-   if (cmd_buffer->state.dirty & RADV_CMD_DIRTY_OCCLUSION_QUERY)
+   if (cmd_buffer->state.dirty & (RADV_CMD_DIRTY_OCCLUSION_QUERY | RADV_CMD_DIRTY_DYNAMIC_RASTERIZATION_SAMPLES |
+                                  RADV_CMD_DIRTY_DYNAMIC_PRIMITIVE_TOPOLOGY))
       radv_flush_occlusion_query_state(cmd_buffer);
 
    if ((cmd_buffer->state.dirty &
@@ -9665,12 +9690,16 @@ radv_emit_dispatch_packets(struct radv_cmd_buffer *cmd_buffer, const struct radv
 
       if (radv_cmd_buffer_uses_mec(cmd_buffer)) {
          uint64_t indirect_va = info->va;
+         const bool needs_align32_workaround =
+            cmd_buffer->device->physical_device->rad_info.has_async_compute_align32_bug &&
+            cmd_buffer->qf == RADV_QUEUE_COMPUTE && !radv_is_aligned(indirect_va, 32);
+         const unsigned ace_predication_size =
+            4 /* DISPATCH_INDIRECT */ + (needs_align32_workaround ? 6 * 3 /* 3x COPY_DATA */ : 0);
 
-         radv_cs_emit_compute_predication(&cmd_buffer->state, cs, cmd_buffer->mec_inv_pred_va,
-                                          &cmd_buffer->mec_inv_pred_emitted, 4 /* DISPATCH_INDIRECT size */);
+         radv_cs_emit_compute_predication(cmd_buffer->device, &cmd_buffer->state, cs, cmd_buffer->mec_inv_pred_va,
+                                          &cmd_buffer->mec_inv_pred_emitted, ace_predication_size);
 
-         if (cmd_buffer->device->physical_device->rad_info.has_async_compute_align32_bug &&
-             cmd_buffer->qf == RADV_QUEUE_COMPUTE && !radv_is_aligned(indirect_va, 32)) {
+         if (needs_align32_workaround) {
             const uint64_t unaligned_va = indirect_va;
             UNUSED void *ptr;
             uint32_t offset;
@@ -9704,6 +9733,13 @@ radv_emit_dispatch_packets(struct radv_cmd_buffer *cmd_buffer, const struct radv
          radeon_emit(cs, info->va);
          radeon_emit(cs, info->va >> 32);
 
+         if (cmd_buffer->qf == RADV_QUEUE_COMPUTE) {
+            radv_cs_emit_compute_predication(cmd_buffer->device, &cmd_buffer->state, cs,
+                                             cmd_buffer->mec_inv_pred_va, &cmd_buffer->mec_inv_pred_emitted,
+                                             3 /* PKT3_DISPATCH_INDIRECT */);
+            predicating = false;
+         }
+
          radeon_emit(cs, PKT3(PKT3_DISPATCH_INDIRECT, 1, predicating) | PKT3_SHADER_TYPE_S(1));
          radeon_emit(cs, 0);
          radeon_emit(cs, dispatch_initiator);
@@ -9772,8 +9808,8 @@ radv_emit_dispatch_packets(struct radv_cmd_buffer *cmd_buffer, const struct radv
          dispatch_initiator |= S_00B800_FORCE_START_AT_000(1);
       }
 
-      if (radv_cmd_buffer_uses_mec(cmd_buffer)) {
-         radv_cs_emit_compute_predication(&cmd_buffer->state, cs, cmd_buffer->mec_inv_pred_va,
+      if (cmd_buffer->qf == RADV_QUEUE_COMPUTE) {
+         radv_cs_emit_compute_predication(cmd_buffer->device, &cmd_buffer->state, cs, cmd_buffer->mec_inv_pred_va,
                                           &cmd_buffer->mec_inv_pred_emitted, 5 /* DISPATCH_DIRECT size */);
          predicating = false;
       }
@@ -9814,6 +9850,17 @@ radv_upload_compute_shader_descriptors(struct radv_cmd_buffer *cmd_buffer, VkPip
       radv_flush_constants(cmd_buffer, pc_stages, bind_point);
 }
 
+static void
+radv_emit_rt_stack_size(struct radv_cmd_buffer *cmd_buffer)
+{
+   unsigned rsrc2 = cmd_buffer->state.rt_prolog->config.rsrc2;
+   if (cmd_buffer->state.rt_stack_size)
+      rsrc2 |= S_00B12C_SCRATCH_EN(1);
+
+   radeon_check_space(cmd_buffer->device->ws, cmd_buffer->cs, 3);
+   radeon_set_sh_reg(cmd_buffer->cs, R_00B84C_COMPUTE_PGM_RSRC2, rsrc2);
+}
+
 static void
 radv_dispatch(struct radv_cmd_buffer *cmd_buffer, const struct radv_dispatch_info *info,
               struct radv_compute_pipeline *pipeline, struct radv_shader *compute_shader,
@@ -9835,6 +9882,8 @@ radv_dispatch(struct radv_cmd_buffer *cmd_buffer, const struct radv_dispatch_inf
        * packets between the wait and the draw)
        */
       radv_emit_compute_pipeline(cmd_buffer, pipeline);
+      if (bind_point == VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR)
+         radv_emit_rt_stack_size(cmd_buffer);
       radv_emit_cache_flush(cmd_buffer);
       /* <-- CUs are idle here --> */
 
@@ -9863,6 +9912,8 @@ radv_dispatch(struct radv_cmd_buffer *cmd_buffer, const struct radv_dispatch_inf
       radv_upload_compute_shader_descriptors(cmd_buffer, bind_point);
 
       radv_emit_compute_pipeline(cmd_buffer, pipeline);
+      if (bind_point == VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR)
+         radv_emit_rt_stack_size(cmd_buffer);
       radv_emit_dispatch_packets(cmd_buffer, compute_shader, info);
    }
 
@@ -10544,7 +10595,8 @@ radv_cp_dma_wait_for_stages(struct radv_cmd_buffer *cmd_buffer, VkPipelineStageF
 }
 
 static void
-radv_barrier(struct radv_cmd_buffer *cmd_buffer, const VkDependencyInfo *dep_info, enum rgp_barrier_reason reason)
+radv_barrier(struct radv_cmd_buffer *cmd_buffer, uint32_t dep_count, const VkDependencyInfo *dep_infos,
+             enum rgp_barrier_reason reason)
 {
    enum radv_cmd_flush_bits src_flush_bits = 0;
    enum radv_cmd_flush_bits dst_flush_bits = 0;
@@ -10556,27 +10608,31 @@ radv_barrier(struct radv_cmd_buffer *cmd_buffer, const VkDependencyInfo *dep_inf
 
    radv_describe_barrier_start(cmd_buffer, reason);
 
-   for (uint32_t i = 0; i < dep_info->memoryBarrierCount; i++) {
-      src_stage_mask |= dep_info->pMemoryBarriers[i].srcStageMask;
-      src_flush_bits |= radv_src_access_flush(cmd_buffer, dep_info->pMemoryBarriers[i].srcAccessMask, NULL);
-      dst_stage_mask |= dep_info->pMemoryBarriers[i].dstStageMask;
-      dst_flush_bits |= radv_dst_access_flush(cmd_buffer, dep_info->pMemoryBarriers[i].dstAccessMask, NULL);
-   }
+   for (uint32_t dep_idx = 0; dep_idx < dep_count; dep_idx++) {
+      const VkDependencyInfo *dep_info = &dep_infos[dep_idx];
 
-   for (uint32_t i = 0; i < dep_info->bufferMemoryBarrierCount; i++) {
-      src_stage_mask |= dep_info->pBufferMemoryBarriers[i].srcStageMask;
-      src_flush_bits |= radv_src_access_flush(cmd_buffer, dep_info->pBufferMemoryBarriers[i].srcAccessMask, NULL);
-      dst_stage_mask |= dep_info->pBufferMemoryBarriers[i].dstStageMask;
-      dst_flush_bits |= radv_dst_access_flush(cmd_buffer, dep_info->pBufferMemoryBarriers[i].dstAccessMask, NULL);
-   }
+      for (uint32_t i = 0; i < dep_info->memoryBarrierCount; i++) {
+         src_stage_mask |= dep_info->pMemoryBarriers[i].srcStageMask;
+         src_flush_bits |= radv_src_access_flush(cmd_buffer, dep_info->pMemoryBarriers[i].srcAccessMask, NULL);
+         dst_stage_mask |= dep_info->pMemoryBarriers[i].dstStageMask;
+         dst_flush_bits |= radv_dst_access_flush(cmd_buffer, dep_info->pMemoryBarriers[i].dstAccessMask, NULL);
+      }
 
-   for (uint32_t i = 0; i < dep_info->imageMemoryBarrierCount; i++) {
-      RADV_FROM_HANDLE(radv_image, image, dep_info->pImageMemoryBarriers[i].image);
+      for (uint32_t i = 0; i < dep_info->bufferMemoryBarrierCount; i++) {
+         src_stage_mask |= dep_info->pBufferMemoryBarriers[i].srcStageMask;
+         src_flush_bits |= radv_src_access_flush(cmd_buffer, dep_info->pBufferMemoryBarriers[i].srcAccessMask, NULL);
+         dst_stage_mask |= dep_info->pBufferMemoryBarriers[i].dstStageMask;
+         dst_flush_bits |= radv_dst_access_flush(cmd_buffer, dep_info->pBufferMemoryBarriers[i].dstAccessMask, NULL);
+      }
 
-      src_stage_mask |= dep_info->pImageMemoryBarriers[i].srcStageMask;
-      src_flush_bits |= radv_src_access_flush(cmd_buffer, dep_info->pImageMemoryBarriers[i].srcAccessMask, image);
-      dst_stage_mask |= dep_info->pImageMemoryBarriers[i].dstStageMask;
-      dst_flush_bits |= radv_dst_access_flush(cmd_buffer, dep_info->pImageMemoryBarriers[i].dstAccessMask, image);
+      for (uint32_t i = 0; i < dep_info->imageMemoryBarrierCount; i++) {
+         VK_FROM_HANDLE(radv_image, image, dep_info->pImageMemoryBarriers[i].image);
+
+         src_stage_mask |= dep_info->pImageMemoryBarriers[i].srcStageMask;
+         src_flush_bits |= radv_src_access_flush(cmd_buffer, dep_info->pImageMemoryBarriers[i].srcAccessMask, image);
+         dst_stage_mask |= dep_info->pImageMemoryBarriers[i].dstStageMask;
+         dst_flush_bits |= radv_dst_access_flush(cmd_buffer, dep_info->pImageMemoryBarriers[i].dstAccessMask, image);
+      }
    }
 
    /* The Vulkan spec 1.1.98 says:
@@ -10596,26 +10652,31 @@ radv_barrier(struct radv_cmd_buffer *cmd_buffer, const VkDependencyInfo *dep_inf
 
    radv_gang_barrier(cmd_buffer, src_stage_mask, 0);
 
-   for (uint32_t i = 0; i < dep_info->imageMemoryBarrierCount; i++) {
-      RADV_FROM_HANDLE(radv_image, image, dep_info->pImageMemoryBarriers[i].image);
+   for (uint32_t dep_idx = 0; dep_idx < dep_count; dep_idx++) {
+      const VkDependencyInfo *dep_info = &dep_infos[dep_idx];
 
-      const struct VkSampleLocationsInfoEXT *sample_locs_info =
-         vk_find_struct_const(dep_info->pImageMemoryBarriers[i].pNext, SAMPLE_LOCATIONS_INFO_EXT);
-      struct radv_sample_locations_state sample_locations;
+      for (uint32_t i = 0; i < dep_info->imageMemoryBarrierCount; i++) {
+         VK_FROM_HANDLE(radv_image, image, dep_info->pImageMemoryBarriers[i].image);
 
-      if (sample_locs_info) {
-         assert(image->vk.create_flags & VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT);
-         sample_locations.per_pixel = sample_locs_info->sampleLocationsPerPixel;
-         sample_locations.grid_size = sample_locs_info->sampleLocationGridSize;
-         sample_locations.count = sample_locs_info->sampleLocationsCount;
-         typed_memcpy(&sample_locations.locations[0], sample_locs_info->pSampleLocations,
-                      sample_locs_info->sampleLocationsCount);
-      }
+         const struct VkSampleLocationsInfoEXT *sample_locs_info =
+            vk_find_struct_const(dep_info->pImageMemoryBarriers[i].pNext, SAMPLE_LOCATIONS_INFO_EXT);
+         struct radv_sample_locations_state sample_locations;
+
+         if (sample_locs_info) {
+            assert(image->vk.create_flags & VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT);
+            sample_locations.per_pixel = sample_locs_info->sampleLocationsPerPixel;
+            sample_locations.grid_size = sample_locs_info->sampleLocationGridSize;
+            sample_locations.count = sample_locs_info->sampleLocationsCount;
+            typed_memcpy(&sample_locations.locations[0], sample_locs_info->pSampleLocations,
+                         sample_locs_info->sampleLocationsCount);
+         }
 
-      radv_handle_image_transition(
-         cmd_buffer, image, dep_info->pImageMemoryBarriers[i].oldLayout, dep_info->pImageMemoryBarriers[i].newLayout,
-         dep_info->pImageMemoryBarriers[i].srcQueueFamilyIndex, dep_info->pImageMemoryBarriers[i].dstQueueFamilyIndex,
-         &dep_info->pImageMemoryBarriers[i].subresourceRange, sample_locs_info ? &sample_locations : NULL);
+         radv_handle_image_transition(
+            cmd_buffer, image, dep_info->pImageMemoryBarriers[i].oldLayout, dep_info->pImageMemoryBarriers[i].newLayout,
+            dep_info->pImageMemoryBarriers[i].srcQueueFamilyIndex,
+            dep_info->pImageMemoryBarriers[i].dstQueueFamilyIndex, &dep_info->pImageMemoryBarriers[i].subresourceRange,
+            sample_locs_info ? &sample_locations : NULL);
+      }
    }
 
    radv_gang_barrier(cmd_buffer, 0, dst_stage_mask);
@@ -10642,8 +10703,15 @@ VKAPI_ATTR void VKAPI_CALL
 radv_CmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
 {
    RADV_FROM_HANDLE(radv_cmd_buffer, cmd_buffer, commandBuffer);
+   enum rgp_barrier_reason barrier_reason;
 
-   radv_barrier(cmd_buffer, pDependencyInfo, RGP_BARRIER_EXTERNAL_CMD_PIPELINE_BARRIER);
+   if (cmd_buffer->vk.runtime_rp_barrier) {
+      barrier_reason = RGP_BARRIER_EXTERNAL_RENDER_PASS_SYNC;
+   } else {
+      barrier_reason = RGP_BARRIER_EXTERNAL_CMD_PIPELINE_BARRIER;
+   }
+
+   radv_barrier(cmd_buffer, 1, pDependencyInfo, barrier_reason);
 }
 
 static void
@@ -10765,7 +10833,7 @@ radv_CmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const Vk
       assert(cmd_buffer->cs->cdw <= cdw_max);
    }
 
-   radv_barrier(cmd_buffer, pDependencyInfos, RGP_BARRIER_EXTERNAL_CMD_WAIT_EVENTS);
+   radv_barrier(cmd_buffer, eventCount, pDependencyInfos, RGP_BARRIER_EXTERNAL_CMD_WAIT_EVENTS);
 }
 
 void
@@ -10776,69 +10844,71 @@ radv_begin_conditional_rendering(struct radv_cmd_buffer *cmd_buffer, uint64_t va
 
    radv_emit_cache_flush(cmd_buffer);
 
-   if (cmd_buffer->qf == RADV_QUEUE_GENERAL && !cmd_buffer->device->physical_device->rad_info.has_32bit_predication) {
-      uint64_t pred_value = 0, pred_va;
-      unsigned pred_offset;
-
-      /* From the Vulkan spec 1.1.107:
-       *
-       * "If the 32-bit value at offset in buffer memory is zero,
-       *  then the rendering commands are discarded, otherwise they
-       *  are executed as normal. If the value of the predicate in
-       *  buffer memory changes while conditional rendering is
-       *  active, the rendering commands may be discarded in an
-       *  implementation-dependent way. Some implementations may
-       *  latch the value of the predicate upon beginning conditional
-       *  rendering while others may read it before every rendering
-       *  command."
-       *
-       * But, the AMD hardware treats the predicate as a 64-bit
-       * value which means we need a workaround in the driver.
-       * Luckily, it's not required to support if the value changes
-       * when predication is active.
-       *
-       * The workaround is as follows:
-       * 1) allocate a 64-value in the upload BO and initialize it
-       *    to 0
-       * 2) copy the 32-bit predicate value to the upload BO
-       * 3) use the new allocated VA address for predication
-       *
-       * Based on the conditionalrender demo, it's faster to do the
-       * COPY_DATA in ME  (+ sync PFP) instead of PFP.
-       */
-      radv_cmd_buffer_upload_data(cmd_buffer, 8, &pred_value, &pred_offset);
+   if (cmd_buffer->qf == RADV_QUEUE_GENERAL) {
+      if (!cmd_buffer->device->physical_device->rad_info.has_32bit_predication) {
+         uint64_t pred_value = 0, pred_va;
+         unsigned pred_offset;
+
+         /* From the Vulkan spec 1.1.107:
+          *
+          * "If the 32-bit value at offset in buffer memory is zero,
+          *  then the rendering commands are discarded, otherwise they
+          *  are executed as normal. If the value of the predicate in
+          *  buffer memory changes while conditional rendering is
+          *  active, the rendering commands may be discarded in an
+          *  implementation-dependent way. Some implementations may
+          *  latch the value of the predicate upon beginning conditional
+          *  rendering while others may read it before every rendering
+          *  command."
+          *
+          * But, the AMD hardware treats the predicate as a 64-bit
+          * value which means we need a workaround in the driver.
+          * Luckily, it's not required to support if the value changes
+          * when predication is active.
+          *
+          * The workaround is as follows:
+          * 1) allocate a 64-value in the upload BO and initialize it
+          *    to 0
+          * 2) copy the 32-bit predicate value to the upload BO
+          * 3) use the new allocated VA address for predication
+          *
+          * Based on the conditionalrender demo, it's faster to do the
+          * COPY_DATA in ME  (+ sync PFP) instead of PFP.
+          */
+         radv_cmd_buffer_upload_data(cmd_buffer, 8, &pred_value, &pred_offset);
 
-      pred_va = radv_buffer_get_va(cmd_buffer->upload.upload_bo) + pred_offset;
+         pred_va = radv_buffer_get_va(cmd_buffer->upload.upload_bo) + pred_offset;
 
-      radeon_check_space(cmd_buffer->device->ws, cmd_buffer->cs, 8);
+         radeon_check_space(cmd_buffer->device->ws, cmd_buffer->cs, 8);
 
-      radeon_emit(cs, PKT3(PKT3_COPY_DATA, 4, 0));
-      radeon_emit(cs,
-                  COPY_DATA_SRC_SEL(COPY_DATA_SRC_MEM) | COPY_DATA_DST_SEL(COPY_DATA_DST_MEM) | COPY_DATA_WR_CONFIRM);
-      radeon_emit(cs, va);
-      radeon_emit(cs, va >> 32);
-      radeon_emit(cs, pred_va);
-      radeon_emit(cs, pred_va >> 32);
+         radeon_emit(cs, PKT3(PKT3_COPY_DATA, 4, 0));
+         radeon_emit(
+            cs, COPY_DATA_SRC_SEL(COPY_DATA_SRC_MEM) | COPY_DATA_DST_SEL(COPY_DATA_DST_MEM) | COPY_DATA_WR_CONFIRM);
+         radeon_emit(cs, va);
+         radeon_emit(cs, va >> 32);
+         radeon_emit(cs, pred_va);
+         radeon_emit(cs, pred_va >> 32);
 
-      radeon_emit(cs, PKT3(PKT3_PFP_SYNC_ME, 0, 0));
-      radeon_emit(cs, 0);
+         radeon_emit(cs, PKT3(PKT3_PFP_SYNC_ME, 0, 0));
+         radeon_emit(cs, 0);
 
-      va = pred_va;
-      pred_op = PREDICATION_OP_BOOL64;
-   }
+         va = pred_va;
+         pred_op = PREDICATION_OP_BOOL64;
+      }
 
-   /* MEC doesn't support predication, we emulate it elsewhere. */
-   if (!radv_cmd_buffer_uses_mec(cmd_buffer)) {
       radv_emit_set_predication_state(cmd_buffer, draw_visible, pred_op, va);
+   } else {
+      /* Compute queue doesn't support predication and it's emulated elsewhere. */
    }
 }
 
 void
 radv_end_conditional_rendering(struct radv_cmd_buffer *cmd_buffer)
 {
-   /* MEC doesn't support predication, no need to emit anything here. */
-   if (!radv_cmd_buffer_uses_mec(cmd_buffer)) {
+   if (cmd_buffer->qf == RADV_QUEUE_GENERAL) {
       radv_emit_set_predication_state(cmd_buffer, false, 0, 0);
+   } else {
+      /* Compute queue doesn't support predication, no need to emit anything here. */
    }
 }
 
diff --git a/src/amd/vulkan/radv_debug.c b/src/amd/vulkan/radv_debug.c
index 34433384062..97322bbd5e9 100644
--- a/src/amd/vulkan/radv_debug.c
+++ b/src/amd/vulkan/radv_debug.c
@@ -1081,7 +1081,7 @@ radv_GetDeviceFaultInfoEXT(VkDevice _device, VkDeviceFaultCountsEXT *pFaultCount
 
    if (vm_fault_occurred) {
       VkDeviceFaultAddressInfoEXT addr_fault_info = {
-         .reportedAddress = fault_info.addr,
+         .reportedAddress = ((int64_t)fault_info.addr << 16) >> 16,
          .addressPrecision = 4096, /* 4K page granularity */
       };
 
diff --git a/src/amd/vulkan/radv_device.c b/src/amd/vulkan/radv_device.c
index 261cf4f6856..5c3b12bb3c1 100644
--- a/src/amd/vulkan/radv_device.c
+++ b/src/amd/vulkan/radv_device.c
@@ -1001,8 +1001,17 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
    device->pbb_allowed =
       device->physical_device->rad_info.gfx_level >= GFX9 && !(device->instance->debug_flags & RADV_DEBUG_NOBINNING);
 
-   device->mesh_fast_launch_2 = (device->instance->perftest_flags & RADV_PERFTEST_GS_FAST_LAUNCH_2) &&
-                                device->physical_device->rad_info.gfx_level >= GFX11;
+   /* GS_FAST_LAUNCH=2 mode is supposed to be used on GFX11 but it turns
+    * out it has severe impact on performance for unknown reasons (tested on
+    * NAVI31 dGPU). It's disabled by default.
+    *
+    * On RDNA3 APUs (Phoenix) it turns GS_FAST_LAUNCH=1 doesn't work at all,
+    * and using mode2 fixes everything without any performance impact.
+    */
+   device->mesh_fast_launch_2 = ((device->instance->perftest_flags & RADV_PERFTEST_GS_FAST_LAUNCH_2) &&
+                                 device->physical_device->rad_info.gfx_level >= GFX11) ||
+                                device->physical_device->rad_info.family == CHIP_GFX1103_R1 ||
+                                device->physical_device->rad_info.family == CHIP_GFX1103_R2;
 
    device->disable_trunc_coord = device->instance->drirc.disable_trunc_coord;
 
@@ -1239,6 +1248,12 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
       device->capture_replay_arena_vas = _mesa_hash_table_u64_create(NULL);
    }
 
+   if (device->physical_device->rad_info.gfx_level == GFX11 && device->physical_device->rad_info.has_dedicated_vram &&
+       device->instance->drirc.force_pstate_peak_gfx11_dgpu) {
+      if (!radv_device_acquire_performance_counters(device))
+         fprintf(stderr, "radv: failed to set pstate to profile_peak.\n");
+   }
+
    *pDevice = radv_device_to_handle(device);
    return VK_SUCCESS;
 
@@ -1305,9 +1320,6 @@ radv_DestroyDevice(VkDevice _device, const VkAllocationCallbacks *pAllocator)
    if (!device)
       return;
 
-   if (device->capture_replay_arena_vas)
-      _mesa_hash_table_u64_destroy(device->capture_replay_arena_vas);
-
    radv_device_finish_perf_counter_lock_cs(device);
    if (device->perf_counter_bo)
       device->ws->buffer_destroy(device->ws, device->perf_counter_bo);
@@ -1357,6 +1369,8 @@ radv_DestroyDevice(VkDevice _device, const VkAllocationCallbacks *pAllocator)
    radv_finish_trace(device);
 
    radv_destroy_shader_arenas(device);
+   if (device->capture_replay_arena_vas)
+      _mesa_hash_table_u64_destroy(device->capture_replay_arena_vas);
 
    radv_sqtt_finish(device);
 
@@ -1763,7 +1777,7 @@ radv_initialise_color_surface(struct radv_device *device, struct radv_color_buff
        *
        * We set the pitch in MIP0_WIDTH.
        */
-      if (device->physical_device->rad_info.gfx_level && iview->image->vk.image_type == VK_IMAGE_TYPE_2D &&
+      if (device->physical_device->rad_info.gfx_level >= GFX10_3 && iview->image->vk.image_type == VK_IMAGE_TYPE_2D &&
           iview->image->vk.array_layers == 1 && plane->surface.is_linear) {
          assert((plane->surface.u.gfx9.surf_pitch * plane->surface.bpe) % 256 == 0);
 
diff --git a/src/amd/vulkan/radv_device_generated_commands.c b/src/amd/vulkan/radv_device_generated_commands.c
index 486be831fa8..4b8b3d11d68 100644
--- a/src/amd/vulkan/radv_device_generated_commands.c
+++ b/src/amd/vulkan/radv_device_generated_commands.c
@@ -589,7 +589,7 @@ dgc_emit_pkt3_draw_indirect(nir_builder *b, struct dgc_cmdbuf *cs, nir_def *vtx_
 
 static void
 dgc_emit_draw_indirect(nir_builder *b, struct dgc_cmdbuf *cs, nir_def *stream_base, nir_def *draw_params_offset,
-                       bool indexed)
+                       nir_def *sequence_id, bool indexed)
 {
    nir_def *vtx_base_sgpr = load_param16(b, vtx_base_sgpr);
    nir_def *stream_offset = nir_iadd(b, draw_params_offset, stream_base);
@@ -597,8 +597,14 @@ dgc_emit_draw_indirect(nir_builder *b, struct dgc_cmdbuf *cs, nir_def *stream_ba
    nir_def *stream_addr = load_param64(b, stream_addr);
    nir_def *va = nir_iadd(b, stream_addr, nir_u2u64(b, stream_offset));
 
+   dgc_emit_sqtt_begin_api_marker(b, cs, indexed ? ApiCmdDrawIndexedIndirect : ApiCmdDrawIndirect);
+   dgc_emit_sqtt_marker_event(b, cs, sequence_id, indexed ? EventCmdDrawIndexedIndirect : EventCmdDrawIndirect);
+
    dgc_emit_pkt3_set_base(b, cs, va);
    dgc_emit_pkt3_draw_indirect(b, cs, vtx_base_sgpr, indexed);
+
+   dgc_emit_sqtt_thread_trace_marker(b, cs);
+   dgc_emit_sqtt_end_api_marker(b, cs, indexed ? ApiCmdDrawIndexedIndirect : ApiCmdDrawIndirect);
 }
 
 static nir_def *
@@ -1307,7 +1313,8 @@ build_dgc_prepare_shader(struct radv_device *dev)
             }
             nir_push_else(&b, NULL);
             {
-               dgc_emit_draw_indirect(&b, &cmd_buf, stream_base, load_param16(&b, draw_params_offset), true);
+               dgc_emit_draw_indirect(&b, &cmd_buf, stream_base, load_param16(&b, draw_params_offset), sequence_id,
+                                      true);
             }
 
             nir_pop_if(&b, NULL);
diff --git a/src/amd/vulkan/radv_formats.c b/src/amd/vulkan/radv_formats.c
index 7ed01f2aae0..d0ebd5dd2f4 100644
--- a/src/amd/vulkan/radv_formats.c
+++ b/src/amd/vulkan/radv_formats.c
@@ -181,7 +181,8 @@ radv_is_vertex_buffer_format_supported(VkFormat format)
 }
 
 uint32_t
-radv_translate_tex_dataformat(VkFormat format, const struct util_format_description *desc, int first_non_void)
+radv_translate_tex_dataformat(const struct radv_physical_device *pdev, VkFormat format,
+                              const struct util_format_description *desc, int first_non_void)
 {
    bool uniform = true;
    int i;
@@ -311,6 +312,9 @@ radv_translate_tex_dataformat(VkFormat format, const struct util_format_descript
       uniform = uniform && desc->channel[0].size == desc->channel[i].size;
    }
 
+   if (first_non_void < 0 || first_non_void > 3)
+      goto out_unknown;
+
    /* Non-uniform formats. */
    if (!uniform) {
       switch (desc->nr_channels) {
@@ -320,6 +324,12 @@ radv_translate_tex_dataformat(VkFormat format, const struct util_format_descript
          }
          goto out_unknown;
       case 4:
+         /* 5551 and 1555 UINT formats fail on Gfx8/Carrizo´. */
+         if (pdev->rad_info.family == CHIP_CARRIZO && desc->channel[1].size == 5 && desc->channel[2].size == 5 &&
+             desc->channel[first_non_void].type == UTIL_FORMAT_TYPE_UNSIGNED &&
+             desc->channel[first_non_void].pure_integer)
+            goto out_unknown;
+
          if (desc->channel[0].size == 5 && desc->channel[1].size == 5 && desc->channel[2].size == 5 &&
              desc->channel[3].size == 1) {
             return V_008F14_IMG_DATA_FORMAT_1_5_5_5;
@@ -340,9 +350,6 @@ radv_translate_tex_dataformat(VkFormat format, const struct util_format_descript
       goto out_unknown;
    }
 
-   if (first_non_void < 0 || first_non_void > 3)
-      goto out_unknown;
-
    /* uniform formats */
    switch (desc->channel[first_non_void].size) {
    case 4:
@@ -352,6 +359,11 @@ radv_translate_tex_dataformat(VkFormat format, const struct util_format_descript
 			return V_008F14_IMG_DATA_FORMAT_4_4;
 #endif
       case 4:
+         /* 4444 UINT formats fail on Gfx8/Carrizo´. */
+         if (pdev->rad_info.family == CHIP_CARRIZO && desc->channel[first_non_void].type == UTIL_FORMAT_TYPE_UNSIGNED &&
+             desc->channel[first_non_void].pure_integer)
+            goto out_unknown;
+
          return V_008F14_IMG_DATA_FORMAT_4_4_4_4;
       }
       break;
@@ -461,7 +473,7 @@ radv_translate_tex_numformat(VkFormat format, const struct util_format_descripti
 }
 
 static bool
-radv_is_sampler_format_supported(VkFormat format, bool *linear_sampling)
+radv_is_sampler_format_supported(const struct radv_physical_device *pdev, VkFormat format, bool *linear_sampling)
 {
    const struct util_format_description *desc = vk_format_description(format);
    uint32_t num_format;
@@ -477,7 +489,7 @@ radv_is_sampler_format_supported(VkFormat format, bool *linear_sampling)
       *linear_sampling = true;
    else
       *linear_sampling = false;
-   return radv_translate_tex_dataformat(format, vk_format_description(format),
+   return radv_translate_tex_dataformat(pdev, format, vk_format_description(format),
                                         vk_format_get_first_non_void_channel(format)) != ~0U;
 }
 
@@ -499,7 +511,7 @@ radv_is_storage_image_format_supported(const struct radv_physical_device *physic
    if (vk_format_is_depth_or_stencil(format))
       return false;
 
-   data_format = radv_translate_tex_dataformat(format, desc, vk_format_get_first_non_void_channel(format));
+   data_format = radv_translate_tex_dataformat(physical_device, format, desc, vk_format_get_first_non_void_channel(format));
    num_format = radv_translate_tex_numformat(format, desc, vk_format_get_first_non_void_channel(format));
 
    if (data_format == ~0 || num_format == ~0)
@@ -736,7 +748,7 @@ radv_physical_device_get_format_properties(struct radv_physical_device *physical
       }
    } else {
       bool linear_sampling;
-      if (radv_is_sampler_format_supported(format, &linear_sampling)) {
+      if (radv_is_sampler_format_supported(physical_device, format, &linear_sampling)) {
          linear |= VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT;
          tiled |= VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT;
 
@@ -1480,6 +1492,11 @@ radv_get_image_format_properties(struct radv_physical_device *physical_device,
       }
    }
 
+   if (image_usage & VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) {
+      if (!(format_feature_flags & VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR))
+         goto unsupported;
+   }
+
    /* Sparse resources with multi-planar formats are unsupported. */
    if (info->flags & VK_IMAGE_CREATE_SPARSE_BINDING_BIT) {
       if (vk_format_get_plane_count(format) > 1)
diff --git a/src/amd/vulkan/radv_image_view.c b/src/amd/vulkan/radv_image_view.c
index a8e67016ec8..5ec9a92d0af 100644
--- a/src/amd/vulkan/radv_image_view.c
+++ b/src/amd/vulkan/radv_image_view.c
@@ -119,6 +119,13 @@ radv_set_mutable_tex_desc_fields(struct radv_device *device, struct radv_image *
    } else
       va += (uint64_t)base_level_info->offset_256B * 256;
 
+   if (!device->physical_device->rad_info.has_image_opcodes) {
+      /* Set it as a buffer descriptor. */
+      state[0] = va;
+      state[1] |= S_008F04_BASE_ADDRESS_HI(va >> 32);
+      return;
+   }
+
    state[0] = va >> 8;
    if (gfx_level >= GFX9 || base_level_info->mode == RADEON_SURF_MODE_2D)
       state[0] |= swizzle;
@@ -244,6 +251,8 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
                               uint32_t *fmask_state, VkImageCreateFlags img_create_flags,
                               const struct ac_surf_nbc_view *nbc_view, const VkImageViewSlicedCreateInfoEXT *sliced_3d)
 {
+   const bool create_2d_view_of_3d =
+      (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) && view_type == VK_IMAGE_VIEW_TYPE_2D;
    const struct util_format_description *desc;
    enum pipe_swizzle swizzle[4];
    unsigned img_format;
@@ -265,7 +274,7 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
 
    radv_compose_swizzle(desc, mapping, swizzle);
 
-   if (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
+   if (create_2d_view_of_3d) {
       assert(image->vk.image_type == VK_IMAGE_TYPE_3D);
       type = V_008F1C_SQ_RSRC_IMG_3D;
    } else {
@@ -300,7 +309,7 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
    state[6] = 0;
    state[7] = 0;
 
-   if (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
+   if (create_2d_view_of_3d) {
       assert(type == V_008F1C_SQ_RSRC_IMG_3D);
 
       /* ARRAY_PITCH is only meaningful for 3D images, 0 means SRV, 1 means UAV.
@@ -412,6 +421,8 @@ gfx6_make_texture_descriptor(struct radv_device *device, struct radv_image *imag
                              unsigned width, unsigned height, unsigned depth, float min_lod, uint32_t *state,
                              uint32_t *fmask_state, VkImageCreateFlags img_create_flags)
 {
+   const bool create_2d_view_of_3d =
+      (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) && view_type == VK_IMAGE_VIEW_TYPE_2D;
    const struct util_format_description *desc;
    enum pipe_swizzle swizzle[4];
    int first_non_void;
@@ -437,7 +448,7 @@ gfx6_make_texture_descriptor(struct radv_device *device, struct radv_image *imag
       num_format = 0;
    }
 
-   data_format = radv_translate_tex_dataformat(vk_format, desc, first_non_void);
+   data_format = radv_translate_tex_dataformat(device->physical_device, vk_format, desc, first_non_void);
    if (data_format == ~0) {
       data_format = 0;
    }
@@ -451,8 +462,7 @@ gfx6_make_texture_descriptor(struct radv_device *device, struct radv_image *imag
          data_format = V_008F14_IMG_DATA_FORMAT_S8_16;
    }
 
-   if (device->physical_device->rad_info.gfx_level == GFX9 &&
-       img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
+   if (device->physical_device->rad_info.gfx_level == GFX9 && create_2d_view_of_3d) {
       assert(image->vk.image_type == VK_IMAGE_TYPE_3D);
       type = V_008F1C_SQ_RSRC_IMG_3D;
    } else {
@@ -501,7 +511,8 @@ gfx6_make_texture_descriptor(struct radv_device *device, struct radv_image *imag
       state[4] |= S_008F20_DEPTH(depth - 1);
       state[5] |= S_008F24_LAST_ARRAY(last_layer);
    }
-   if (!(image->planes[0].surface.flags & RADEON_SURF_Z_OR_SBUFFER) && image->planes[0].surface.meta_offset) {
+
+   if (radv_dcc_enabled(image, first_level)) {
       state[6] = S_008F28_ALPHA_IS_ON_MSB(vi_alpha_is_on_msb(device, vk_format));
    } else {
       if (device->instance->drirc.disable_aniso_single_level) {
diff --git a/src/amd/vulkan/radv_instance.c b/src/amd/vulkan/radv_instance.c
index 6d0ba625385..652013bd250 100644
--- a/src/amd/vulkan/radv_instance.c
+++ b/src/amd/vulkan/radv_instance.c
@@ -155,6 +155,7 @@ static const driOptionDescription radv_dri_options[] = {
       DRI_CONF_RADV_FLUSH_BEFORE_TIMESTAMP_WRITE(false)
       DRI_CONF_RADV_RT_WAVE64(false)
       DRI_CONF_RADV_LEGACY_SPARSE_BINDING(false)
+      DRI_CONF_RADV_FORCE_PSTATE_PEAK_GFX11_DGPU(false)
       DRI_CONF_DUAL_COLOR_BLEND_BY_LOCATION(false)
       DRI_CONF_RADV_OVERRIDE_GRAPHICS_SHADER_VERSION(0)
       DRI_CONF_RADV_OVERRIDE_COMPUTE_SHADER_VERSION(0)
@@ -231,6 +232,9 @@ radv_init_dri_options(struct radv_instance *instance)
 
    instance->drirc.legacy_sparse_binding = driQueryOptionb(&instance->drirc.options, "radv_legacy_sparse_binding");
 
+   instance->drirc.force_pstate_peak_gfx11_dgpu =
+      driQueryOptionb(&instance->drirc.options, "radv_force_pstate_peak_gfx11_dgpu");
+
    instance->drirc.override_graphics_shader_version =
       driQueryOptioni(&instance->drirc.options, "radv_override_graphics_shader_version");
    instance->drirc.override_compute_shader_version =
diff --git a/src/amd/vulkan/radv_nir_to_llvm.c b/src/amd/vulkan/radv_nir_to_llvm.c
index 155fd45a0a7..9422dae3840 100644
--- a/src/amd/vulkan/radv_nir_to_llvm.c
+++ b/src/amd/vulkan/radv_nir_to_llvm.c
@@ -262,7 +262,6 @@ static void
 ac_llvm_finalize_module(struct radv_shader_context *ctx, LLVMPassManagerRef passmgr)
 {
    LLVMRunPassManager(passmgr, ctx->ac.module);
-   LLVMDisposeBuilder(ctx->ac.builder);
 
    ac_llvm_context_dispose(&ctx->ac);
 }
diff --git a/src/amd/vulkan/radv_physical_device.c b/src/amd/vulkan/radv_physical_device.c
index c9e276efa71..793bb09bb30 100644
--- a/src/amd/vulkan/radv_physical_device.c
+++ b/src/amd/vulkan/radv_physical_device.c
@@ -2380,6 +2380,11 @@ radv_get_memory_budget_properties(VkPhysicalDevice physicalDevice,
       assert(heap == memory_properties->memoryHeapCount);
    }
 
+   /* The heapBudget value must be less than or equal to VkMemoryHeap::size for each heap. */
+   for (uint32_t i = 0; i < memory_properties->memoryHeapCount; i++) {
+      memoryBudget->heapBudget[i] = MIN2(memory_properties->memoryHeaps[i].size, memoryBudget->heapBudget[i]);
+   }
+
    /* The heapBudget and heapUsage values must be zero for array elements
     * greater than or equal to
     * VkPhysicalDeviceMemoryProperties::memoryHeapCount.
diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 2699eaa792f..027e73c44aa 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -265,11 +265,8 @@ radv_shader_layout_init(const struct radv_pipeline_layout *pipeline_layout, gl_s
    }
 
    layout->push_constant_size = pipeline_layout->push_constant_size;
-
-   if (pipeline_layout->dynamic_offset_count &&
-       (pipeline_layout->dynamic_shader_stages & mesa_to_vk_shader_stage(stage))) {
-      layout->use_dynamic_descriptors = true;
-   }
+   layout->use_dynamic_descriptors = pipeline_layout->dynamic_offset_count &&
+                                     (pipeline_layout->dynamic_shader_stages & mesa_to_vk_shader_stage(stage));
 }
 
 static const struct vk_ycbcr_conversion_state *
@@ -704,7 +701,7 @@ radv_postprocess_nir(struct radv_device *device, const struct radv_pipeline_key
          },
       };
       struct nir_fold_16bit_tex_image_options fold_16bit_options = {
-         .rounding_mode = nir_rounding_mode_rtz,
+         .rounding_mode = nir_rounding_mode_undef,
          .fold_tex_dest_types = nir_type_float,
          .fold_image_dest_types = nir_type_float,
          .fold_image_store_data = true,
diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index bdb02754d46..205ec375b1c 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -1178,11 +1178,12 @@ get_vs_output_info(const struct radv_graphics_pipeline *pipeline)
 static bool
 radv_should_export_multiview(const struct radv_shader_stage *stage, const struct radv_pipeline_key *pipeline_key)
 {
-   /* Export the layer in the last VGT stage if multiview is used. When the next stage is unknown
-    * (with graphics pipeline library), the layer is exported unconditionally.
+   /* Export the layer in the last VGT stage if multiview is used.
+    * Also checks for NONE stage, which happens when we have depth-only rendering.
+    * When the next stage is unknown (with graphics pipeline library), the layer is exported unconditionally.
     */
    return pipeline_key->has_multiview_view_index &&
-          (stage->info.next_stage == MESA_SHADER_FRAGMENT ||
+          (stage->info.next_stage == MESA_SHADER_FRAGMENT || stage->info.next_stage == MESA_SHADER_NONE ||
            !(pipeline_key->lib_flags & VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT)) &&
           !(stage->nir->info.outputs_written & VARYING_BIT_LAYER);
 }
@@ -2596,7 +2597,7 @@ radv_graphics_pipeline_compile(struct radv_graphics_pipeline *pipeline, const Vk
    unsigned char hash[20];
    bool keep_executable_info = radv_pipeline_capture_shaders(device, pipeline->base.create_flags);
    bool keep_statistic_info = radv_pipeline_capture_shader_stats(device, pipeline->base.create_flags);
-   struct radv_shader_stage stages[MESA_VULKAN_SHADER_STAGES];
+   struct radv_shader_stage *stages = malloc(sizeof(struct radv_shader_stage) * MESA_VULKAN_SHADER_STAGES);
    const VkPipelineCreationFeedbackCreateInfo *creation_feedback =
       vk_find_struct_const(pCreateInfo->pNext, PIPELINE_CREATION_FEEDBACK_CREATE_INFO);
    VkPipelineCreationFeedback pipeline_feedback = {
@@ -2608,6 +2609,9 @@ radv_graphics_pipeline_compile(struct radv_graphics_pipeline *pipeline, const Vk
       !!(pipeline->base.create_flags & VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT);
    struct radv_retained_shaders *retained_shaders = NULL;
 
+   if (!stages)
+      return VK_ERROR_OUT_OF_HOST_MEMORY;
+
    int64_t pipeline_start = os_time_get_nano();
 
    for (unsigned i = 0; i < MESA_VULKAN_SHADER_STAGES; i++) {
@@ -2668,8 +2672,10 @@ radv_graphics_pipeline_compile(struct radv_graphics_pipeline *pipeline, const Vk
 
          gfx_pipeline_lib->stages = radv_copy_shader_stage_create_info(device, pCreateInfo->stageCount,
                                                                        pCreateInfo->pStages, gfx_pipeline_lib->mem_ctx);
-         if (!gfx_pipeline_lib->stages)
+         if (!gfx_pipeline_lib->stages) {
+            free(stages);
             return VK_ERROR_OUT_OF_HOST_MEMORY;
+         }
 
          gfx_pipeline_lib->stage_count = pCreateInfo->stageCount;
       }
@@ -2678,8 +2684,10 @@ radv_graphics_pipeline_compile(struct radv_graphics_pipeline *pipeline, const Vk
       goto done;
    }
 
-   if (pipeline->base.create_flags & VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR)
+   if (pipeline->base.create_flags & VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR) {
+      free(stages);
       return VK_PIPELINE_COMPILE_REQUIRED;
+   }
 
    if (retain_shaders) {
       struct radv_graphics_lib_pipeline *gfx_pipeline_lib = radv_pipeline_to_graphics_lib(&pipeline->base);
@@ -2747,6 +2755,7 @@ done:
       }
    }
 
+   free(stages);
    return result;
 }
 
diff --git a/src/amd/vulkan/radv_pipeline_rt.c b/src/amd/vulkan/radv_pipeline_rt.c
index b2f6ccf2a54..36fce6d53b3 100644
--- a/src/amd/vulkan/radv_pipeline_rt.c
+++ b/src/amd/vulkan/radv_pipeline_rt.c
@@ -193,7 +193,8 @@ radv_rt_fill_group_info(struct radv_device *device, const struct radv_ray_tracin
          } else if (groups[idx].recursive_shader != VK_SHADER_UNUSED_KHR) {
             struct radv_shader *library_shader = stages[groups[idx].recursive_shader].shader;
             simple_mtx_lock(&library_shader->replay_mtx);
-            if (!library_shader->has_replay_alloc) {
+            /* If arena_va is 0, the pipeline is monolithic and the shader was inlined into raygen */
+            if (!library_shader->has_replay_alloc && handle->recursive_shader_alloc.arena_va) {
                union radv_shader_arena_block *new_block =
                   radv_replay_shader_arena_block(device, &handle->recursive_shader_alloc, library_shader);
                if (!new_block) {
@@ -535,7 +536,7 @@ radv_rt_compile_shaders(struct radv_device *device, struct vk_pipeline_cache *ca
       has_callable |= rt_stages[i].stage == MESA_SHADER_CALLABLE;
       monolithic &= rt_stages[i].can_inline;
 
-      if (i > pCreateInfo->stageCount)
+      if (i >= pCreateInfo->stageCount)
          raygen_imported |= rt_stages[i].stage == MESA_SHADER_RAYGEN;
    }
 
@@ -942,7 +943,12 @@ radv_GetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline
       uint32_t recursive_shader = rt_pipeline->groups[firstGroup + i].recursive_shader;
       if (recursive_shader != VK_SHADER_UNUSED_KHR) {
          struct radv_shader *shader = rt_pipeline->stages[recursive_shader].shader;
-         data[i].recursive_shader_alloc = radv_serialize_shader_arena_block(shader->alloc);
+         if (shader) {
+            data[i].recursive_shader_alloc.offset = shader->alloc->offset;
+            data[i].recursive_shader_alloc.size = shader->alloc->size;
+            data[i].recursive_shader_alloc.arena_va = shader->alloc->arena->bo->va;
+            data[i].recursive_shader_alloc.arena_size = shader->alloc->arena->size;
+         }
       }
       data[i].non_recursive_idx = rt_pipeline->groups[firstGroup + i].handle.any_hit_index;
    }
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 3e31701abc2..310091406b9 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -380,6 +380,7 @@ struct radv_instance {
       bool force_rt_wave64;
       bool dual_color_blend_by_location;
       bool legacy_sparse_binding;
+      bool force_pstate_peak_gfx11_dgpu;
       bool clear_lds;
       bool enable_dgc;
       bool enable_khr_present_wait;
@@ -2353,7 +2354,8 @@ bool radv_is_buffer_format_supported(VkFormat format, bool *scaled);
 uint32_t radv_colorformat_endian_swap(uint32_t colorformat);
 unsigned radv_translate_colorswap(VkFormat format, bool do_endian_swap);
 uint32_t radv_translate_dbformat(VkFormat format);
-uint32_t radv_translate_tex_dataformat(VkFormat format, const struct util_format_description *desc, int first_non_void);
+uint32_t radv_translate_tex_dataformat(const struct radv_physical_device *pdev, VkFormat format,
+                                       const struct util_format_description *desc, int first_non_void);
 uint32_t radv_translate_tex_numformat(VkFormat format, const struct util_format_description *desc, int first_non_void);
 bool radv_format_pack_clear_color(VkFormat format, uint32_t clear_vals[2], VkClearColorValue *value);
 bool radv_is_storage_image_format_supported(const struct radv_physical_device *physical_device, VkFormat format);
diff --git a/src/amd/vulkan/radv_query.c b/src/amd/vulkan/radv_query.c
index 0a215ba761d..bbd3ba6dbce 100644
--- a/src/amd/vulkan/radv_query.c
+++ b/src/amd/vulkan/radv_query.c
@@ -61,6 +61,16 @@ radv_get_pipelinestat_query_size(struct radv_device *device)
    return num_results * 8;
 }
 
+static bool
+radv_occlusion_query_use_l2(const struct radv_physical_device *pdev)
+{
+   /* Occlusion query writes don't go through L2 on GFX6-8 which means the driver would need to
+    * flush caches before every read in shaders or use MTYPE=3 (ie. uncached) in the buffer
+    * descriptor to bypass L2. Use the WAIT_REG_MEM logic instead which is easier to implement.
+    */
+   return pdev->rad_info.gfx_level >= GFX9;
+}
+
 static void
 radv_store_availability(nir_builder *b, nir_def *flags, nir_def *dst_buf, nir_def *offset, nir_def *value32)
 {
@@ -148,29 +158,31 @@ build_occlusion_query_shader(struct radv_device *device)
    nir_store_var(&b, outer_counter, nir_imm_int(&b, 0), 0x1);
    nir_store_var(&b, available, nir_imm_true(&b), 0x1);
 
-   nir_def *query_result_wait = nir_test_mask(&b, flags, VK_QUERY_RESULT_WAIT_BIT);
-   nir_push_if(&b, query_result_wait);
-   {
-      /* Wait on the upper word of the last DB entry. */
-      nir_push_loop(&b);
+   if (radv_occlusion_query_use_l2(device->physical_device)) {
+      nir_def *query_result_wait = nir_test_mask(&b, flags, VK_QUERY_RESULT_WAIT_BIT);
+      nir_push_if(&b, query_result_wait);
       {
-         const uint32_t rb_avail_offset = 16 * util_last_bit64(enabled_rb_mask) - 4;
+         /* Wait on the upper word of the last DB entry. */
+         nir_push_loop(&b);
+         {
+            const uint32_t rb_avail_offset = 16 * util_last_bit64(enabled_rb_mask) - 4;
 
-         /* Prevent the SSBO load to be moved out of the loop. */
-         nir_scoped_memory_barrier(&b, SCOPE_INVOCATION, NIR_MEMORY_ACQUIRE, nir_var_mem_ssbo);
+            /* Prevent the SSBO load to be moved out of the loop. */
+            nir_scoped_memory_barrier(&b, SCOPE_INVOCATION, NIR_MEMORY_ACQUIRE, nir_var_mem_ssbo);
 
-         nir_def *load_offset = nir_iadd_imm(&b, input_base, rb_avail_offset);
-         nir_def *load = nir_load_ssbo(&b, 1, 32, src_buf, load_offset, .align_mul = 4, .access = ACCESS_COHERENT);
+            nir_def *load_offset = nir_iadd_imm(&b, input_base, rb_avail_offset);
+            nir_def *load = nir_load_ssbo(&b, 1, 32, src_buf, load_offset, .align_mul = 4, .access = ACCESS_COHERENT);
 
-         nir_push_if(&b, nir_ige_imm(&b, load, 0x80000000));
-         {
-            nir_jump(&b, nir_jump_break);
+            nir_push_if(&b, nir_ige_imm(&b, load, 0x80000000));
+            {
+               nir_jump(&b, nir_jump_break);
+            }
+            nir_pop_if(&b, NULL);
          }
-         nir_pop_if(&b, NULL);
+         nir_pop_loop(&b, NULL);
       }
-      nir_pop_loop(&b, NULL);
+      nir_pop_if(&b, NULL);
    }
-   nir_pop_if(&b, NULL);
 
    nir_push_loop(&b);
 
@@ -1155,7 +1167,7 @@ radv_query_shader(struct radv_cmd_buffer *cmd_buffer, VkPipeline *pipeline, stru
                                                                          .range = VK_WHOLE_SIZE}}});
 
    /* Encode the number of elements for easy access by the shader. */
-   pipeline_stats_mask &= (1 << radv_get_pipelinestat_query_size(device)) - 1;
+   pipeline_stats_mask &= (1 << (radv_get_pipelinestat_query_size(device) / 8)) - 1;
    pipeline_stats_mask |= util_bitcount(pipeline_stats_mask) << 16;
 
    avail_offset -= src_offset;
@@ -1667,6 +1679,8 @@ radv_CmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPoo
    RADV_FROM_HANDLE(radv_cmd_buffer, cmd_buffer, commandBuffer);
    RADV_FROM_HANDLE(radv_query_pool, pool, queryPool);
    RADV_FROM_HANDLE(radv_buffer, dst_buffer, dstBuffer);
+   struct radv_device *device = cmd_buffer->device;
+   struct radv_physical_device *pdev = device->physical_device;
    struct radeon_cmdbuf *cs = cmd_buffer->cs;
    uint64_t va = radv_buffer_get_va(pool->bo);
    uint64_t dest_va = radv_buffer_get_va(dst_buffer->bo);
@@ -1697,6 +1711,22 @@ radv_CmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPoo
 
    switch (pool->vk.query_type) {
    case VK_QUERY_TYPE_OCCLUSION:
+      if (!radv_occlusion_query_use_l2(pdev)) {
+         if (flags & VK_QUERY_RESULT_WAIT_BIT) {
+            uint64_t enabled_rb_mask = pdev->rad_info.enabled_rb_mask;
+            uint32_t rb_avail_offset = 16 * util_last_bit64(enabled_rb_mask) - 4;
+            for (unsigned i = 0; i < queryCount; ++i, dest_va += stride) {
+               unsigned query = firstQuery + i;
+               uint64_t src_va = va + query * pool->stride + rb_avail_offset;
+
+               radeon_check_space(device->ws, cs, 7);
+
+               /* Waits on the upper word of the last DB entry */
+               radv_cp_wait_mem(cs, cmd_buffer->qf, WAIT_REG_MEM_GREATER_OR_EQUAL, src_va, 0x80000000, 0xffffffff);
+            }
+         }
+      }
+
       radv_query_shader(cmd_buffer, &cmd_buffer->device->meta_state.query.occlusion_query_pipeline, pool->bo,
                         dst_buffer->bo, firstQuery * pool->stride, dst_buffer->offset + dstOffset, pool->stride, stride,
                         dst_size, queryCount, flags, 0, 0, false);
diff --git a/src/amd/vulkan/radv_queue.c b/src/amd/vulkan/radv_queue.c
index 129b611a7fb..b143ca13d4d 100644
--- a/src/amd/vulkan/radv_queue.c
+++ b/src/amd/vulkan/radv_queue.c
@@ -637,7 +637,7 @@ radv_emit_graphics_scratch(struct radv_device *device, struct radeon_cmdbuf *cs,
       uint64_t va = radv_buffer_get_va(scratch_bo);
 
       /* WAVES is per SE for SPI_TMPRING_SIZE. */
-      waves /= info->num_se;
+      waves /= info->max_se;
 
       radeon_set_context_reg_seq(cs, R_0286E8_SPI_TMPRING_SIZE, 3);
       radeon_emit(cs, S_0286E8_WAVES(waves) | S_0286E8_WAVESIZE(DIV_ROUND_UP(size_per_wave, 256)));
@@ -675,7 +675,7 @@ radv_emit_compute_scratch(struct radv_device *device, struct radeon_cmdbuf *cs,
       radeon_emit(cs, scratch_va >> 8);
       radeon_emit(cs, scratch_va >> 40);
 
-      waves /= info->num_se;
+      waves /= info->max_se;
    }
 
    radeon_set_sh_reg_seq(cs, R_00B900_COMPUTE_USER_DATA_0, 2);
diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 0798b73b3dc..09b45ac715a 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -982,6 +982,7 @@ alloc_block_obj(struct radv_device *device)
 static void
 free_block_obj(struct radv_device *device, union radv_shader_arena_block *block)
 {
+   list_del(&block->pool);
    list_add(&block->pool, &device->shader_block_obj_pool);
 }
 
@@ -1267,7 +1268,6 @@ radv_free_shader_memory(struct radv_device *device, union radv_shader_arena_bloc
          remove_hole(free_list, hole_prev);
 
       hole_prev->size += hole->size;
-      list_del(&hole->list);
       free_block_obj(device, hole);
 
       hole = hole_prev;
@@ -1280,7 +1280,6 @@ radv_free_shader_memory(struct radv_device *device, union radv_shader_arena_bloc
 
       hole_next->offset -= hole->size;
       hole_next->size += hole->size;
-      list_del(&hole->list);
       free_block_obj(device, hole);
 
       hole = hole_next;
@@ -1293,6 +1292,18 @@ radv_free_shader_memory(struct radv_device *device, union radv_shader_arena_bloc
       radv_rmv_log_bo_destroy(device, arena->bo);
       device->ws->buffer_destroy(device->ws, arena->bo);
       list_del(&arena->list);
+
+      if (device->capture_replay_arena_vas) {
+         struct hash_entry *arena_entry = NULL;
+         hash_table_foreach (device->capture_replay_arena_vas->table, entry) {
+            if (entry->data == arena) {
+               arena_entry = entry;
+               break;
+            }
+         }
+         _mesa_hash_table_remove(device->capture_replay_arena_vas->table, arena_entry);
+      }
+
       free(arena);
    } else if (free_list) {
       add_hole(free_list, hole);
@@ -1301,18 +1312,6 @@ radv_free_shader_memory(struct radv_device *device, union radv_shader_arena_bloc
    mtx_unlock(&device->shader_arena_mutex);
 }
 
-struct radv_serialized_shader_arena_block
-radv_serialize_shader_arena_block(union radv_shader_arena_block *block)
-{
-   struct radv_serialized_shader_arena_block serialized_block = {
-      .offset = block->offset,
-      .size = block->size,
-      .arena_va = block->arena->bo->va,
-      .arena_size = block->arena->size,
-   };
-   return serialized_block;
-}
-
 union radv_shader_arena_block *
 radv_replay_shader_arena_block(struct radv_device *device, const struct radv_serialized_shader_arena_block *src,
                                void *ptr)
@@ -1571,7 +1570,7 @@ radv_postprocess_binary_config(struct radv_device *device, struct radv_shader_bi
    const struct radv_shader_info *info = &binary->info;
    gl_shader_stage stage = binary->info.stage;
    const struct radv_physical_device *pdevice = device->physical_device;
-   bool scratch_enabled = config->scratch_bytes_per_wave > 0 || info->cs.is_rt_shader;
+   bool scratch_enabled = config->scratch_bytes_per_wave > 0;
    bool trap_enabled = !!device->trap_handler_shader;
    unsigned vgpr_comp_cnt = 0;
    unsigned num_input_vgprs = args->ac.num_vgprs_used;
@@ -1717,8 +1716,6 @@ radv_postprocess_binary_config(struct radv_device *device, struct radv_shader_bi
    case MESA_SHADER_CALLABLE:
    case MESA_SHADER_INTERSECTION:
    case MESA_SHADER_ANY_HIT:
-      config->rsrc2 |= S_00B12C_SCRATCH_EN(1);
-      FALLTHROUGH;
    case MESA_SHADER_COMPUTE:
    case MESA_SHADER_TASK:
       config->rsrc1 |= S_00B848_MEM_ORDERED(pdevice->rad_info.gfx_level >= GFX10) | S_00B848_WGP_MODE(wgp_mode);
diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index c4ceed01d1d..dbf942e28c3 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -775,8 +775,6 @@ union radv_shader_arena_block *radv_replay_shader_arena_block(struct radv_device
                                                               const struct radv_serialized_shader_arena_block *src,
                                                               void *ptr);
 
-struct radv_serialized_shader_arena_block radv_serialize_shader_arena_block(union radv_shader_arena_block *block);
-
 void radv_free_shader_memory(struct radv_device *device, union radv_shader_arena_block *alloc);
 
 struct radv_shader *radv_create_trap_handler_shader(struct radv_device *device);
diff --git a/src/amd/vulkan/radv_video.c b/src/amd/vulkan/radv_video.c
index 04d6d538a29..c9728ccec41 100644
--- a/src/amd/vulkan/radv_video.c
+++ b/src/amd/vulkan/radv_video.c
@@ -39,8 +39,7 @@
 #include "radv_cs.h"
 #include "radv_debug.h"
 
-#define NUM_H264_REFS                17
-#define NUM_H265_REFS                8
+#define NUM_H2645_REFS               16
 #define FB_BUFFER_OFFSET             0x1000
 #define FB_BUFFER_SIZE               2048
 #define FB_BUFFER_SIZE_TONGA         (2048 * 64)
@@ -444,8 +443,8 @@ radv_GetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, cons
       if (pVideoProfile->lumaBitDepth != VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR)
          return VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
 
-      pCapabilities->maxDpbSlots = NUM_H264_REFS;
-      pCapabilities->maxActiveReferencePictures = NUM_H264_REFS;
+      pCapabilities->maxDpbSlots = NUM_H2645_REFS + 1;
+      pCapabilities->maxActiveReferencePictures = NUM_H2645_REFS;
 
       /* for h264 on navi21+ separate dpb images should work */
       if (radv_enable_tier2(pdevice))
@@ -473,8 +472,8 @@ radv_GetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, cons
           pVideoProfile->lumaBitDepth != VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR)
          return VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
 
-      pCapabilities->maxDpbSlots = NUM_H264_REFS;
-      pCapabilities->maxActiveReferencePictures = NUM_H265_REFS;
+      pCapabilities->maxDpbSlots = NUM_H2645_REFS + 1;
+      pCapabilities->maxActiveReferencePictures = NUM_H2645_REFS;
       /* for h265 on navi21+ separate dpb images should work */
       if (radv_enable_tier2(pdevice))
          pCapabilities->flags |= VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR;
@@ -935,7 +934,10 @@ update_h265_scaling(void *it_ptr, const StdVideoH265ScalingLists *scaling_lists)
 
 static rvcn_dec_message_hevc_t
 get_h265_msg(struct radv_device *device, struct radv_video_session *vid, struct radv_video_session_params *params,
-             const struct VkVideoDecodeInfoKHR *frame_info, void *it_ptr)
+             const struct VkVideoDecodeInfoKHR *frame_info,
+             uint32_t *width_in_samples,
+             uint32_t *height_in_samples,
+             void *it_ptr)
 {
    rvcn_dec_message_hevc_t result;
    int i, j;
@@ -967,6 +969,8 @@ get_h265_msg(struct radv_device *device, struct radv_video_session *vid, struct
    }
    result.st_rps_bits = h265_pic_info->pStdPictureInfo->NumBitsForSTRefPicSetInSlice;
 
+   *width_in_samples = sps->pic_width_in_luma_samples;
+   *height_in_samples = sps->pic_height_in_luma_samples;
    result.chroma_format = sps->chroma_format_idc;
    result.bit_depth_luma_minus8 = sps->bit_depth_luma_minus8;
    result.bit_depth_chroma_minus8 = sps->bit_depth_chroma_minus8;
@@ -1221,7 +1225,8 @@ rvcn_dec_message_decode(struct radv_cmd_buffer *cmd_buffer, struct radv_video_se
       break;
    }
    case VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR: {
-      rvcn_dec_message_hevc_t hevc = get_h265_msg(device, vid, params, frame_info, it_ptr);
+      rvcn_dec_message_hevc_t hevc =
+         get_h265_msg(device, vid, params, frame_info, &decode->width_in_samples, &decode->height_in_samples, it_ptr);
       memcpy(codec, (void *)&hevc, sizeof(rvcn_dec_message_hevc_t));
       index_codec->message_id = RDECODE_MESSAGE_HEVC;
       break;
@@ -1378,7 +1383,8 @@ get_uvd_h264_msg(struct radv_video_session *vid, struct radv_video_session_param
 
 static struct ruvd_h265
 get_uvd_h265_msg(struct radv_device *device, struct radv_video_session *vid, struct radv_video_session_params *params,
-                 const struct VkVideoDecodeInfoKHR *frame_info, void *it_ptr)
+                 const struct VkVideoDecodeInfoKHR *frame_info, uint32_t *width_in_samples,
+                 uint32_t *height_in_samples, void *it_ptr)
 {
    struct ruvd_h265 result;
    int i, j;
@@ -1406,6 +1412,8 @@ get_uvd_h265_msg(struct radv_device *device, struct radv_video_session *vid, str
    if (device->physical_device->rad_info.family == CHIP_CARRIZO)
       result.sps_info_flags |= 1 << 9;
 
+   *width_in_samples = sps->pic_width_in_luma_samples;
+   *height_in_samples = sps->pic_height_in_luma_samples;
    result.chroma_format = sps->chroma_format_idc;
    result.bit_depth_luma_minus8 = sps->bit_depth_luma_minus8;
    result.bit_depth_chroma_minus8 = sps->bit_depth_chroma_minus8;
@@ -1579,7 +1587,10 @@ ruvd_dec_message_decode(struct radv_device *device, struct radv_video_session *v
       break;
    }
    case VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR: {
-      msg->body.decode.codec.h265 = get_uvd_h265_msg(device, vid, params, frame_info, it_ptr);
+      msg->body.decode.codec.h265 = get_uvd_h265_msg(device, vid, params, frame_info,
+                                                     &msg->body.decode.width_in_samples,
+                                                     &msg->body.decode.height_in_samples,
+                                                     it_ptr);
 
       if (vid->ctx.mem)
          msg->body.decode.dpb_reserved = vid->ctx.size;
diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 73a8b847a5c..2ca766340a6 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -84,14 +84,18 @@ radv_emit_compute(struct radv_device *device, struct radeon_cmdbuf *cs)
    radeon_set_sh_reg_seq(cs, R_00B858_COMPUTE_STATIC_THREAD_MGMT_SE0, 2);
    /* R_00B858_COMPUTE_STATIC_THREAD_MGMT_SE0 / SE1,
     * renamed COMPUTE_DESTINATION_EN_SEn on gfx10. */
-   radeon_emit(cs, S_00B858_SH0_CU_EN(info->spi_cu_en) | S_00B858_SH1_CU_EN(info->spi_cu_en));
-   radeon_emit(cs, S_00B858_SH0_CU_EN(info->spi_cu_en) | S_00B858_SH1_CU_EN(info->spi_cu_en));
+   for (unsigned i = 0; i < 2; ++i) {
+      unsigned cu_mask = i < info->num_se ? info->spi_cu_en : 0x0;
+      radeon_emit(cs, S_00B8AC_SA0_CU_EN(cu_mask) | S_00B8AC_SA1_CU_EN(cu_mask));
+   }
 
    if (device->physical_device->rad_info.gfx_level >= GFX7) {
       /* Also set R_00B858_COMPUTE_STATIC_THREAD_MGMT_SE2 / SE3 */
       radeon_set_sh_reg_seq(cs, R_00B864_COMPUTE_STATIC_THREAD_MGMT_SE2, 2);
-      radeon_emit(cs, S_00B858_SH0_CU_EN(info->spi_cu_en) | S_00B858_SH1_CU_EN(info->spi_cu_en));
-      radeon_emit(cs, S_00B858_SH0_CU_EN(info->spi_cu_en) | S_00B858_SH1_CU_EN(info->spi_cu_en));
+      for (unsigned i = 2; i < 4; ++i) {
+         unsigned cu_mask = i < info->num_se ? info->spi_cu_en : 0x0;
+         radeon_emit(cs, S_00B8AC_SA0_CU_EN(cu_mask) | S_00B8AC_SA1_CU_EN(cu_mask));
+      }
 
       if (device->border_color_data.bo) {
          uint64_t bc_va = radv_buffer_get_va(device->border_color_data.bo);
@@ -140,13 +144,12 @@ radv_emit_compute(struct radv_device *device, struct radeon_cmdbuf *cs)
    }
 
    if (device->physical_device->rad_info.gfx_level >= GFX11) {
-      uint32_t spi_cu_en = device->physical_device->rad_info.spi_cu_en;
-
       radeon_set_sh_reg_seq(cs, R_00B8AC_COMPUTE_STATIC_THREAD_MGMT_SE4, 4);
-      radeon_emit(cs, S_00B8AC_SA0_CU_EN(spi_cu_en) | S_00B8AC_SA1_CU_EN(spi_cu_en)); /* SE4 */
-      radeon_emit(cs, S_00B8AC_SA0_CU_EN(spi_cu_en) | S_00B8AC_SA1_CU_EN(spi_cu_en)); /* SE5 */
-      radeon_emit(cs, S_00B8AC_SA0_CU_EN(spi_cu_en) | S_00B8AC_SA1_CU_EN(spi_cu_en)); /* SE6 */
-      radeon_emit(cs, S_00B8AC_SA0_CU_EN(spi_cu_en) | S_00B8AC_SA1_CU_EN(spi_cu_en)); /* SE7 */
+      /* SE4-SE7 */
+      for (unsigned i = 4; i < 8; ++i) {
+         unsigned cu_mask = i < info->num_se ? info->spi_cu_en : 0x0;
+         radeon_emit(cs, S_00B8AC_SA0_CU_EN(cu_mask) | S_00B8AC_SA1_CU_EN(cu_mask));
+      }
 
       radeon_set_sh_reg(cs, R_00B8BC_COMPUTE_DISPATCH_INTERLEAVE, 64);
    }
@@ -511,9 +514,14 @@ radv_emit_graphics(struct radv_device *device, struct radeon_cmdbuf *cs)
    }
 
    if (physical_device->rad_info.gfx_level >= GFX9) {
+      unsigned max_alloc_count = physical_device->rad_info.pbb_max_alloc_count;
+
+      /* GFX11+ shouldn't subtract 1 from pbb_max_alloc_count.  */
+      if (physical_device->rad_info.gfx_level < GFX11)
+         max_alloc_count -= 1;
+
       radeon_set_context_reg(cs, R_028C48_PA_SC_BINNER_CNTL_1,
-                             S_028C48_MAX_ALLOC_COUNT(physical_device->rad_info.pbb_max_alloc_count - 1) |
-                                S_028C48_MAX_PRIM_PER_BATCH(1023));
+                             S_028C48_MAX_ALLOC_COUNT(max_alloc_count) | S_028C48_MAX_PRIM_PER_BATCH(1023));
       radeon_set_context_reg(cs, R_028C4C_PA_SC_CONSERVATIVE_RASTERIZATION_CNTL, S_028C4C_NULL_SQUAD_AA_MASK_ENABLE(1));
       radeon_set_uconfig_reg(cs, R_030968_VGT_INSTANCE_BASE_ID, 0);
    }
@@ -1109,8 +1117,9 @@ gfx10_cs_emit_cache_flush(struct radeon_cmdbuf *cs, enum amd_gfx_level gfx_level
          *sqtt_flush_bits |= RGP_FLUSH_FLUSH_CB | RGP_FLUSH_INVAL_CB;
       }
 
+      /* GFX11 can't flush DB_META and should use a TS event instead. */
       /* TODO: trigger on RADV_CMD_FLAG_FLUSH_AND_INV_DB_META ? */
-      if (gfx_level < GFX11 && (flush_bits & RADV_CMD_FLAG_FLUSH_AND_INV_DB)) {
+      if (gfx_level != GFX11 && (flush_bits & RADV_CMD_FLAG_FLUSH_AND_INV_DB)) {
          /* Flush HTILE. Will wait for idle later. */
          radeon_emit(cs, PKT3(PKT3_EVENT_WRITE, 0, 0));
          radeon_emit(cs, EVENT_TYPE(V_028A90_FLUSH_AND_INV_DB_META) | EVENT_INDEX(0));
diff --git a/src/broadcom/common/v3d_limits.h b/src/broadcom/common/v3d_limits.h
index 354c8784914..da3e3b8a834 100644
--- a/src/broadcom/common/v3d_limits.h
+++ b/src/broadcom/common/v3d_limits.h
@@ -24,8 +24,6 @@
 #ifndef V3D_LIMITS_H
 #define V3D_LIMITS_H
 
-#define V3D_CL_MAX_INSTR_SIZE 25
-
 /* Number of channels a QPU thread executes in parallel.  Also known as
  * gl_SubGroupSizeARB.
  */
diff --git a/src/broadcom/compiler/nir_to_vir.c b/src/broadcom/compiler/nir_to_vir.c
index 966adbbdc48..0d886017774 100644
--- a/src/broadcom/compiler/nir_to_vir.c
+++ b/src/broadcom/compiler/nir_to_vir.c
@@ -656,7 +656,10 @@ ntq_emit_tmu_general(struct v3d_compile *c, nir_intrinsic_instr *instr,
                          */
                         uint32_t perquad =
                                 is_load && !vir_in_nonuniform_control_flow(c) &&
-                                !c->emitted_discard ?
+                                ((c->s->info.stage == MESA_SHADER_FRAGMENT &&
+                                  c->s->info.fs.needs_quad_helper_invocations &&
+                                  !c->emitted_discard) ||
+                                 c->s->info.uses_wide_subgroup_intrinsics) ?
                                 GENERAL_TMU_LOOKUP_PER_QUAD :
                                 GENERAL_TMU_LOOKUP_PER_PIXEL;
                         config = 0xffffff00 | tmu_op << 3 | perquad;
@@ -2745,8 +2748,21 @@ ntq_emit_load_input(struct v3d_compile *c, nir_intrinsic_instr *instr)
                                SYSTEM_VALUE_VERTEX_ID)) {
                       index++;
                }
-               for (int i = 0; i < offset; i++)
-                      index += c->vattr_sizes[i];
+
+               for (int i = 0; i < offset; i++) {
+                      /* GFXH-1602: if any builtins (vid, iid, etc) are read then
+                       * attribute 0 must be active (size > 0). When we hit this,
+                       * the driver is expected to program attribute 0 to have a
+                       * size of 1, so here we need to add that.
+                       */
+                      if (i == 0 && c->vs_key->is_coord &&
+                          c->vattr_sizes[i] == 0 && index > 0) {
+                         index++;
+                      } else {
+                         index += c->vattr_sizes[i];
+                      }
+               }
+
                index += nir_intrinsic_component(instr);
                for (int i = 0; i < instr->num_components; i++) {
                       struct qreg vpm_offset = vir_uniform_ui(c, index++);
@@ -3444,6 +3460,10 @@ ntq_emit_intrinsic(struct v3d_compile *c, nir_intrinsic_instr *instr)
                 vir_emit_tlb_color_read(c, instr);
                 break;
 
+        case nir_intrinsic_load_fep_w_v3d:
+                ntq_store_def(c, &instr->def, 0, vir_MOV(c, c->payload_w));
+                break;
+
         case nir_intrinsic_load_input:
                 ntq_emit_load_input(c, instr);
                 break;
diff --git a/src/broadcom/compiler/v3d_compiler.h b/src/broadcom/compiler/v3d_compiler.h
index 18281e42b12..8ba341bf635 100644
--- a/src/broadcom/compiler/v3d_compiler.h
+++ b/src/broadcom/compiler/v3d_compiler.h
@@ -603,6 +603,11 @@ struct v3d_ra_node_info {
                 bool is_program_end;
                 bool unused;
 
+                /* If this node may have an allocation conflict with a
+                 * payload register.
+                 */
+                bool payload_conflict;
+
                 /* V3D 7.x */
                 bool is_ldunif_dst;
         } *info;
diff --git a/src/broadcom/compiler/v3d_nir_lower_line_smooth.c b/src/broadcom/compiler/v3d_nir_lower_line_smooth.c
index 12602486cce..05b5224bc52 100644
--- a/src/broadcom/compiler/v3d_nir_lower_line_smooth.c
+++ b/src/broadcom/compiler/v3d_nir_lower_line_smooth.c
@@ -91,13 +91,23 @@ initialise_coverage_var(struct lower_line_smooth_state *state,
 
         nir_def *real_line_width = nir_load_aa_line_width(&b);
 
-        /* The line coord varies from 0.0 to 1.0 across the width of the line */
+        /* According to the PRM, the line coord varies from 0.0 to 1.0 across
+         * the width of the line. But actually, when a perspective projection
+         * is used, it is also applied to the line coords, so the values end
+         * up being between [min_coord, 1], based on the Wc coordinate.  We
+         * need to re-map the values to be between [0.0, 1.0].
+         */
         nir_def *line_coord = nir_load_line_coord(&b);
+        nir_def *wc = nir_load_fep_w_v3d(&b, 32);
+        nir_def *min_coord_val = nir_fsub(&b, nir_imm_float(&b, 1.0f), wc);
+        nir_def *normalized_line_coord = nir_fdiv(&b,
+                                                  nir_fsub(&b, line_coord, min_coord_val),
+                                                  nir_fsub_imm(&b, 1.0, min_coord_val));;
 
         /* fabs(line_coord - 0.5) * real_line_width */
         nir_def *pixels_from_center =
                 nir_fmul(&b, real_line_width,
-                         nir_fabs(&b, nir_fsub(&b, line_coord,
+                         nir_fabs(&b, nir_fsub(&b, normalized_line_coord,
                                                nir_imm_float(&b, 0.5f))));
 
         /* 0.5 - 1/√2 * (pixels_from_center - line_width * 0.5) */
diff --git a/src/broadcom/compiler/vir_register_allocate.c b/src/broadcom/compiler/vir_register_allocate.c
index 53e84840899..f407eff8b3e 100644
--- a/src/broadcom/compiler/vir_register_allocate.c
+++ b/src/broadcom/compiler/vir_register_allocate.c
@@ -48,6 +48,13 @@ get_phys_index(const struct v3d_device_info *devinfo)
 #define CLASS_BITS_ACC    (1 << 1)
 #define CLASS_BITS_R5     (1 << 4)
 
+static inline bool
+stage_has_payload(struct v3d_compile *c)
+{
+        return c->s->info.stage == MESA_SHADER_FRAGMENT ||
+               c->s->info.stage == MESA_SHADER_COMPUTE;
+}
+
 static uint8_t
 get_class_bit_any(const struct v3d_device_info *devinfo)
 {
@@ -372,7 +379,7 @@ ensure_nodes(struct v3d_compile *c)
 /* Creates the interference node for a new temp. We use this to keep the node
  * list updated during the spilling process, which generates new temps/nodes.
  */
-static void
+static int
 add_node(struct v3d_compile *c, uint32_t temp, uint8_t class_bits)
 {
         ensure_nodes(c);
@@ -387,6 +394,9 @@ add_node(struct v3d_compile *c, uint32_t temp, uint8_t class_bits)
         c->nodes.info[node].is_ldunif_dst = false;
         c->nodes.info[node].is_program_end = false;
         c->nodes.info[node].unused = false;
+        c->nodes.info[node].payload_conflict = false;
+
+        return node;
 }
 
 /* The spill offset for this thread takes a bit of setup, so do it once at
@@ -438,7 +448,9 @@ v3d_setup_spill_base(struct v3d_compile *c)
                             i != c->spill_base.index) {
                                 temp_class |= CLASS_BITS_ACC;
                         }
-                        add_node(c, i, temp_class);
+                        int node = add_node(c, i, temp_class);
+                        c->nodes.info[node].payload_conflict =
+                                stage_has_payload(c);
                 }
         }
 
@@ -940,10 +952,12 @@ v3d_ra_select_rf(struct v3d_ra_select_callback_data *v3d_ra,
         /* The last 3 instructions in a shader can't use some specific registers
          * (usually early rf registers, depends on v3d version) so try to
          * avoid allocating these to registers used by the last instructions
-         * in the shader.
+         * in the shader. Do the same for spilling setup instructions that
+         * may conflict with payload registers.
          */
         const uint32_t safe_rf_start = v3d_ra->devinfo->ver == 42 ? 3 : 4;
-        if (v3d_ra->nodes->info[node].is_program_end &&
+        if ((v3d_ra->nodes->info[node].is_program_end ||
+             v3d_ra->nodes->info[node].payload_conflict) &&
             v3d_ra->next_phys < safe_rf_start) {
                 v3d_ra->next_phys = safe_rf_start;
         }
@@ -1060,11 +1074,52 @@ tmu_spilling_allowed(struct v3d_compile *c)
         return c->spills + c->fills < c->max_tmu_spills;
 }
 
+static bool
+reg_is_payload(struct v3d_compile *c, struct qreg reg)
+{
+   if (reg.file != QFILE_REG)
+      return false;
+
+   if (c->devinfo->ver >= 71) {
+           if (c->s->info.stage == MESA_SHADER_FRAGMENT)
+                   return reg.index >= 1 && reg.index <= 3;
+           if (c->s->info.stage == MESA_SHADER_COMPUTE)
+                   return reg.index == 2 || reg.index == 3;
+           return false;
+   }
+
+   assert(c->devinfo->ver == 42);
+   if (c->s->info.stage == MESA_SHADER_FRAGMENT)
+           return reg.index <= 2;
+   if (c->s->info.stage == MESA_SHADER_COMPUTE)
+           return reg.index == 0 || reg.index == 2;
+   return false;
+}
+
+static bool
+inst_reads_payload(struct v3d_compile *c, struct qinst *inst)
+{
+        if (inst->qpu.type != V3D_QPU_INSTR_TYPE_ALU)
+                return false;
+
+        if (reg_is_payload(c, inst->dst))
+                return true;
+
+        if (reg_is_payload(c, inst->src[0]))
+                return true;
+
+        if (vir_get_nsrc(inst) > 1 && reg_is_payload(c, inst->src[1]))
+                return true;
+
+        return false;
+}
+
 static void
 update_graph_and_reg_classes_for_inst(struct v3d_compile *c,
                                       int *acc_nodes,
                                       int *implicit_rf_nodes,
                                       int last_ldvary_ip,
+                                      bool has_payload,
                                       struct qinst *inst)
 {
         int32_t ip = inst->ip;
@@ -1180,6 +1235,33 @@ update_graph_and_reg_classes_for_inst(struct v3d_compile *c,
                 }
         }
 
+        /* Spill setup instructions are the only ones that we emit before
+         * reading payload registers so we want to flag their temps so we
+         * don't assign them to payload registers and stomp them before we
+         * can read them. For the case where we may have emitted spill setup
+         * before RA (i.e. for scratch), we need to do this now.
+         */
+        if (c->spill_size > 0 && has_payload && inst_reads_payload(c, inst)) {
+                struct qblock *first_block = vir_entry_block(c);
+                list_for_each_entry_from_rev(struct qinst, _i, inst->link.prev,
+                                             &first_block->instructions, link) {
+                        if (_i->qpu.type != V3D_QPU_INSTR_TYPE_ALU)
+                                continue;
+                        if (_i->dst.file == QFILE_TEMP) {
+                                int node = temp_to_node(c, _i->dst.index);
+                                c->nodes.info[node].payload_conflict = true;
+                        }
+                        if (_i->src[0].file == QFILE_TEMP) {
+                                int node = temp_to_node(c, _i->src[0].index);
+                                c->nodes.info[node].payload_conflict = true;
+                        }
+                        if (vir_get_nsrc(_i) > 1 && _i->src[1].file == QFILE_TEMP) {
+                                int node = temp_to_node(c, _i->src[1].index);
+                                c->nodes.info[node].payload_conflict = true;
+                        }
+                }
+        }
+
         if (inst->dst.file == QFILE_TEMP) {
                 /* Only a ldunif gets to write to R5, which only has a
                  * single 32-bit channel of storage.
@@ -1354,6 +1436,7 @@ v3d_register_allocate(struct v3d_compile *c)
          */
         int ip = 0;
         int last_ldvary_ip = -1;
+        bool has_payload = stage_has_payload(c);
         vir_for_each_inst_inorder(inst, c) {
                 inst->ip = ip++;
 
@@ -1373,7 +1456,9 @@ v3d_register_allocate(struct v3d_compile *c)
 
                 update_graph_and_reg_classes_for_inst(c, acc_nodes,
                                                       implicit_rf_nodes,
-                                                      last_ldvary_ip, inst);
+                                                      last_ldvary_ip,
+                                                      has_payload,
+                                                      inst);
         }
 
         /* Flag the nodes that are used in the last instructions of the program
diff --git a/src/broadcom/vulkan/v3dv_cl.c b/src/broadcom/vulkan/v3dv_cl.c
index 851e1388a8d..af4066c7849 100644
--- a/src/broadcom/vulkan/v3dv_cl.c
+++ b/src/broadcom/vulkan/v3dv_cl.c
@@ -31,6 +31,16 @@
 #include "broadcom/common/v3d_macros.h"
 #include "broadcom/cle/v3dx_pack.h"
 
+/* The Control List Executor (CLE) pre-fetches V3D_CLE_READAHEAD bytes from
+ * the Control List buffer. The usage of these last bytes should be avoided or
+ * the CLE would pre-fetch the data after the end of the CL buffer, reporting
+ * the kernel "MMU error from client CLE".
+ */
+#define V3D42_CLE_READAHEAD 256u
+#define V3D42_CLE_BUFFER_MIN_SIZE 4096u
+#define V3D71_CLE_READAHEAD 1024u
+#define V3D71_CLE_BUFFER_MIN_SIZE 16384u
+
 void
 v3dv_cl_init(struct v3dv_job *job, struct v3dv_cl *cl)
 {
@@ -55,14 +65,42 @@ v3dv_cl_destroy(struct v3dv_cl *cl)
    v3dv_cl_init(NULL, cl);
 }
 
+enum v3dv_cl_chain_type {
+   V3D_CL_BO_CHAIN_NONE = 0,
+   V3D_CL_BO_CHAIN_WITH_BRANCH,
+   V3D_CL_BO_CHAIN_WITH_RETURN_FROM_SUB_LIST,
+};
+
 static bool
-cl_alloc_bo(struct v3dv_cl *cl, uint32_t space, bool use_branch)
+cl_alloc_bo(struct v3dv_cl *cl, uint32_t space, enum
+            v3dv_cl_chain_type chain_type)
 {
+   /* The last bytes of a CLE buffer are unusable because of readahead
+    * prefetch, so we need to take it into account when allocating a new BO
+    * for the CL. We also reserve space for the BRANCH/RETURN_FROM_SUB_LIST
+    * packet so we can always emit these last packets to the BO when
+    * needed. We will need to increase cl->size by the packet length before
+    * calling cl_submit to use this reserved space.
+    */
+   uint32_t unusable_space = 0;
+   uint32_t cle_readahead = V3DV_X(cl->job->device, CLE_READAHEAD);
+   uint32_t cle_buffer_min_size = V3DV_X(cl->job->device, CLE_BUFFER_MIN_SIZE);
+   switch (chain_type) {
+   case V3D_CL_BO_CHAIN_WITH_BRANCH:
+      unusable_space = cle_readahead + cl_packet_length(BRANCH);
+      break;
+   case V3D_CL_BO_CHAIN_WITH_RETURN_FROM_SUB_LIST:
+      unusable_space = cle_readahead + cl_packet_length(RETURN_FROM_SUB_LIST);
+      break;
+   case V3D_CL_BO_CHAIN_NONE:
+      break;
+   }
+
    /* If we are growing, double the BO allocation size to reduce the number
     * of allocations with large command buffers. This has a very significant
     * impact on the number of draw calls per second reported by vkoverhead.
     */
-   space = align(space, 4096);
+   space = align(space + unusable_space, cle_buffer_min_size);
    if (cl->bo)
       space = MAX2(cl->bo->size * 2, space);
 
@@ -83,9 +121,28 @@ cl_alloc_bo(struct v3dv_cl *cl, uint32_t space, bool use_branch)
    }
 
    /* Chain to the new BO from the old one if requested */
-   if (use_branch && cl->bo) {
-      cl_emit(cl, BRANCH, branch) {
-         branch.address = v3dv_cl_address(bo, 0);
+   if (cl->bo) {
+      switch (chain_type) {
+      case V3D_CL_BO_CHAIN_WITH_BRANCH:
+         cl->size += cl_packet_length(BRANCH);
+         assert(cl->size + cle_readahead <= cl->bo->size);
+         cl_emit(cl, BRANCH, branch) {
+            branch.address = v3dv_cl_address(bo, 0);
+         }
+         break;
+      case V3D_CL_BO_CHAIN_WITH_RETURN_FROM_SUB_LIST:
+         /* We do not want to emit branches from secondary command lists, instead,
+          * we will branch to them when we execute them in a primary using
+          * 'branch to sub list' commands, expecting each linked secondary to
+          * end with a 'return from sub list' command.
+          */
+         cl->size += cl_packet_length(RETURN_FROM_SUB_LIST);
+         assert(cl->size + cle_readahead <= cl->bo->size);
+         cl_emit(cl, RETURN_FROM_SUB_LIST, ret);
+         FALLTHROUGH;
+      case V3D_CL_BO_CHAIN_NONE:
+         v3dv_job_add_bo_unchecked(cl->job, bo);
+         break;
       }
    } else {
       v3dv_job_add_bo_unchecked(cl->job, bo);
@@ -93,7 +150,11 @@ cl_alloc_bo(struct v3dv_cl *cl, uint32_t space, bool use_branch)
 
    cl->bo = bo;
    cl->base = cl->bo->map;
-   cl->size = cl->bo->size;
+   /* Take only into account the usable size of the BO to guarantee that
+    * we never write in the last bytes of the CL buffer because of the
+    * readahead of the CLE
+    */
+   cl->size = cl->bo->size - unusable_space;
    cl->next = cl->base;
 
    return true;
@@ -109,37 +170,20 @@ v3dv_cl_ensure_space(struct v3dv_cl *cl, uint32_t space, uint32_t alignment)
       return offset;
    }
 
-   cl_alloc_bo(cl, space, false);
+   cl_alloc_bo(cl, space, V3D_CL_BO_CHAIN_NONE);
+
    return 0;
 }
 
 void
 v3dv_cl_ensure_space_with_branch(struct v3dv_cl *cl, uint32_t space)
 {
-   /* We do not want to emit branches from secondary command lists, instead,
-    * we will branch to them when we execute them in a primary using
-    * 'branch to sub list' commands, expecting each linked secondary to
-    * end with a 'return from sub list' command.
-    */
-   bool needs_return_from_sub_list = false;
-   if (cl->job->type == V3DV_JOB_TYPE_GPU_CL_SECONDARY && cl->size > 0)
-         needs_return_from_sub_list = true;
-
-   /*
-    * The CLE processor in the simulator tries to read V3D_CL_MAX_INSTR_SIZE
-    * bytes form the CL for each new instruction. If the last instruction in our
-    * CL is smaller than that, and there are not at least V3D_CL_MAX_INSTR_SIZE
-    * bytes until the end of the BO, it will read out of bounds and possibly
-    * cause a GMP violation interrupt to trigger. Ensure we always have at
-    * least that many bytes available to read with the last instruction.
-    */
-   space += V3D_CL_MAX_INSTR_SIZE;
-
    if (v3dv_cl_offset(cl) + space <= cl->size)
       return;
 
-   if (needs_return_from_sub_list)
-      cl_emit(cl, RETURN_FROM_SUB_LIST, ret);
+   enum v3dv_cl_chain_type  chain_type = V3D_CL_BO_CHAIN_WITH_BRANCH;
+   if (cl->job->type == V3DV_JOB_TYPE_GPU_CL_SECONDARY)
+      chain_type = V3D_CL_BO_CHAIN_WITH_RETURN_FROM_SUB_LIST;
 
-   cl_alloc_bo(cl, space, !needs_return_from_sub_list);
+   cl_alloc_bo(cl, space, chain_type);
 }
diff --git a/src/broadcom/vulkan/v3dv_cl.h b/src/broadcom/vulkan/v3dv_cl.h
index 7e17ac395c4..96721530f77 100644
--- a/src/broadcom/vulkan/v3dv_cl.h
+++ b/src/broadcom/vulkan/v3dv_cl.h
@@ -182,6 +182,7 @@ void v3dv_cl_ensure_space_with_branch(struct v3dv_cl *cl, uint32_t space);
                 cl_packet_pack(packet)(cl, (uint8_t *)cl_out, &name); \
                 cl_advance_and_end(cl, cl_packet_length(packet)); \
                 _loop_terminate = NULL;                          \
+                assert(v3dv_cl_offset(cl) <= (cl)->size);        \
         }))                                                      \
 
 #define cl_emit_with_prepacked(cl, packet, prepacked, name)      \
@@ -215,9 +216,10 @@ cl_pack_emit_reloc(struct v3dv_cl *cl, const struct v3dv_cl_reloc *reloc)
                 v3dv_job_add_bo(cl->job, reloc->bo);
 }
 
-#define cl_emit_prepacked_sized(cl, packet, size) do {                \
-        memcpy((cl)->next, packet, size);             \
-        cl_advance(&(cl)->next, size);                \
+#define cl_emit_prepacked_sized(cl, packet, psize) do {          \
+        memcpy((cl)->next, packet, psize);                       \
+        cl_advance(&(cl)->next, psize);                          \
+        assert(v3dv_cl_offset(cl) <= (cl)->size);                \
 } while (0)
 
 #define cl_emit_prepacked(cl, packet) \
diff --git a/src/broadcom/vulkan/v3dv_cmd_buffer.c b/src/broadcom/vulkan/v3dv_cmd_buffer.c
index da4518de100..4b317ff21e7 100644
--- a/src/broadcom/vulkan/v3dv_cmd_buffer.c
+++ b/src/broadcom/vulkan/v3dv_cmd_buffer.c
@@ -1377,7 +1377,7 @@ cmd_buffer_emit_subpass_clears(struct v3dv_cmd_buffer *cmd_buffer)
     */
    if (cmd_buffer->state.tile_aligned_render_area &&
        !subpass->do_depth_clear_with_draw &&
-       !subpass->do_depth_clear_with_draw) {
+       !subpass->do_stencil_clear_with_draw) {
       return;
    }
 
@@ -4327,7 +4327,7 @@ cmd_buffer_create_csd_job(struct v3dv_cmd_buffer *cmd_buffer,
    if (cs_variant->prog_data.cs->shared_size > 0) {
       job->csd.shared_memory =
          v3dv_bo_alloc(cmd_buffer->device,
-                       cs_variant->prog_data.cs->shared_size * wgs_per_sg,
+                       cs_variant->prog_data.cs->shared_size * num_wgs,
                        "shared_vars", true);
       if (!job->csd.shared_memory) {
          v3dv_flag_oom(cmd_buffer, NULL);
diff --git a/src/broadcom/vulkan/v3dvx_cmd_buffer.c b/src/broadcom/vulkan/v3dvx_cmd_buffer.c
index 011f5c8e101..65b18ae639c 100644
--- a/src/broadcom/vulkan/v3dvx_cmd_buffer.c
+++ b/src/broadcom/vulkan/v3dvx_cmd_buffer.c
@@ -2596,11 +2596,12 @@ v3dX(cmd_buffer_emit_index_buffer)(struct v3dv_cmd_buffer *cmd_buffer)
          &job->bcl, cl_packet_length(INDEX_BUFFER_SETUP));
       v3dv_return_if_oom(cmd_buffer, NULL);
 
-      const uint32_t offset = cmd_buffer->state.index_buffer.offset;
+      const uint32_t offset = ibuffer->mem_offset +
+                              cmd_buffer->state.index_buffer.offset;
+      assert(ibuffer->mem->bo->size >= offset);
       cl_emit(&job->bcl, INDEX_BUFFER_SETUP, ib) {
-         ib.address = v3dv_cl_address(ibuffer->mem->bo,
-                                      ibuffer->mem_offset + offset);
-         ib.size = ibuffer->mem->bo->size;
+         ib.address = v3dv_cl_address(ibuffer->mem->bo, offset);
+         ib.size = ibuffer->mem->bo->size - offset;
       }
    }
 
diff --git a/src/compiler/glsl/ast_to_hir.cpp b/src/compiler/glsl/ast_to_hir.cpp
index 8b5cdd5cb35..3fe5195dcf4 100644
--- a/src/compiler/glsl/ast_to_hir.cpp
+++ b/src/compiler/glsl/ast_to_hir.cpp
@@ -6058,7 +6058,7 @@ ast_parameter_declarator::hir(exec_list *instructions,
     */
    if ((var->data.mode == ir_var_function_inout || var->data.mode == ir_var_function_out)
        && glsl_type_is_array(type)
-       && !state->check_version(120, 100, &loc,
+       && !state->check_version(state->allow_glsl_120_subset_in_110 ? 110 : 120, 100, &loc,
                                 "arrays cannot be out or inout parameters")) {
       type = &glsl_type_builtin_error;
    }
diff --git a/src/compiler/glsl/gl_nir_link_varyings.c b/src/compiler/glsl/gl_nir_link_varyings.c
index ffcccfe9fc1..6ca198da3f2 100644
--- a/src/compiler/glsl/gl_nir_link_varyings.c
+++ b/src/compiler/glsl/gl_nir_link_varyings.c
@@ -50,6 +50,7 @@
 /* Temporary storage for the set of attributes that need locations assigned. */
 struct temp_attr {
    unsigned slots;
+   unsigned original_idx;
    nir_variable *var;
 };
 
@@ -61,7 +62,10 @@ compare_attr(const void *a, const void *b)
    const struct temp_attr *const r = (const struct temp_attr *) b;
 
    /* Reversed because we want a descending order sort below. */
-   return r->slots - l->slots;
+   if (r->slots != l->slots)
+      return r->slots - l->slots;
+
+   return l->original_idx - r->original_idx;
 }
 
 /**
@@ -1238,6 +1242,7 @@ assign_attribute_or_color_locations(void *mem_ctx,
       }
       to_assign[num_attr].slots = slots;
       to_assign[num_attr].var = var;
+      to_assign[num_attr].original_idx = num_attr;
       num_attr++;
    }
 
@@ -2315,9 +2320,17 @@ static int
 varying_matches_xfb_comparator(const void *x_generic, const void *y_generic)
 {
    const struct match *x = (const struct match *) x_generic;
-
-   if (x->producer_var != NULL && x->producer_var->data.is_xfb_only)
-      return varying_matches_match_comparator(x_generic, y_generic);
+   const struct match *y = (const struct match *) y_generic;
+   /* if both varying are used by transform feedback, sort them */
+   if (x->producer_var != NULL && x->producer_var->data.is_xfb_only) {
+      if (y->producer_var != NULL && y->producer_var->data.is_xfb_only)
+         return 0;
+      /* if x is varying and y is not, put y first */
+      return +1;
+   } else if (y->producer_var != NULL && y->producer_var->data.is_xfb_only) {
+      /* if y is varying and x is not, leave x first */
+      return -1;
+   }
 
    /* FIXME: When the comparator returns 0 it means the elements being
     * compared are equivalent. However the qsort documentation says:
@@ -2340,8 +2353,11 @@ static int
 varying_matches_not_xfb_comparator(const void *x_generic, const void *y_generic)
 {
    const struct match *x = (const struct match *) x_generic;
+   const struct match *y = (const struct match *) y_generic;
 
-   if (x->producer_var != NULL && !x->producer_var->data.is_xfb)
+   if ( (x->producer_var != NULL && !x->producer_var->data.is_xfb)
+        && (y->producer_var != NULL && !y->producer_var->data.is_xfb) )
+      /* if both are non-xfb, then sort them */
       return varying_matches_match_comparator(x_generic, y_generic);
 
    /* FIXME: When the comparator returns 0 it means the elements being
diff --git a/src/compiler/glsl/gl_nir_linker.c b/src/compiler/glsl/gl_nir_linker.c
index 0c1344b683d..f40127f3621 100644
--- a/src/compiler/glsl/gl_nir_linker.c
+++ b/src/compiler/glsl/gl_nir_linker.c
@@ -921,6 +921,8 @@ gl_nir_add_point_size(nir_shader *nir)
       nir_deref_instr *deref = nir_build_deref_var(&b, psiz);
       nir_store_deref(&b, deref, nir_imm_float(&b, 1.0), BITFIELD_BIT(0));
    }
+
+   nir->info.outputs_written |= VARYING_BIT_PSIZ;
 }
 
 static void
@@ -1162,6 +1164,8 @@ gl_nir_link_spirv(const struct gl_constants *consts,
    if (!prelink_lowering(consts, exts, prog, linked_shader, num_shaders))
       return false;
 
+   gl_nir_link_assign_xfb_resources(consts, prog);
+
    /* Linking the stages in the opposite order (from fragment to vertex)
     * ensures that inter-shader outputs written to in an earlier stage
     * are eliminated if they are (transitively) not used in a later
@@ -1191,7 +1195,6 @@ gl_nir_link_spirv(const struct gl_constants *consts,
       return false;
 
    gl_nir_link_assign_atomic_counter_resources(consts, prog);
-   gl_nir_link_assign_xfb_resources(consts, prog);
 
    return true;
 }
diff --git a/src/compiler/glsl_types.c b/src/compiler/glsl_types.c
index 71edd9e98b5..88eeeae5c41 100644
--- a/src/compiler/glsl_types.c
+++ b/src/compiler/glsl_types.c
@@ -3145,6 +3145,11 @@ encode_type_to_blob(struct blob *blob, const glsl_type *type)
       encode_type_to_blob(blob, type->fields.array);
       return;
    case GLSL_TYPE_COOPERATIVE_MATRIX:
+      /* The first 5 bits of encoded/decoded are used to identify the
+       * actual type, but cmat_desc already is 32-bit without that tag, so
+       * encode just the cmat base type first, then the actual cmat desc.
+       */
+      blob_write_uint32(blob, encoded.u32);
       encoded.cmat_desc = type->cmat_desc;
       blob_write_uint32(blob, encoded.u32);
       return;
@@ -3255,6 +3260,7 @@ decode_type_from_blob(struct blob_reader *blob)
                              explicit_stride);
    }
    case GLSL_TYPE_COOPERATIVE_MATRIX: {
+      encoded.u32 = blob_read_uint32(blob);
       return glsl_cmat_type(&encoded.cmat_desc);
    }
    case GLSL_TYPE_STRUCT:
diff --git a/src/compiler/glsl_types.h b/src/compiler/glsl_types.h
index 15740f6087d..8af11e71745 100644
--- a/src/compiler/glsl_types.h
+++ b/src/compiler/glsl_types.h
@@ -924,12 +924,12 @@ static inline const glsl_type *glsl_float_type(void) { return &glsl_type_builtin
 static inline const glsl_type *glsl_float16_t_type(void) { return &glsl_type_builtin_float16_t; }
 static inline const glsl_type *glsl_double_type(void) { return &glsl_type_builtin_double; }
 static inline const glsl_type *glsl_vec2_type(void) { return &glsl_type_builtin_vec2; }
-static inline const glsl_type *glsl_dvec2_type(void) { return &glsl_type_builtin_ivec2; }
+static inline const glsl_type *glsl_dvec2_type(void) { return &glsl_type_builtin_dvec2; }
 static inline const glsl_type *glsl_uvec2_type(void) { return &glsl_type_builtin_uvec2; }
 static inline const glsl_type *glsl_ivec2_type(void) { return &glsl_type_builtin_ivec2; }
 static inline const glsl_type *glsl_bvec2_type(void) { return &glsl_type_builtin_bvec2; }
 static inline const glsl_type *glsl_vec4_type(void) { return &glsl_type_builtin_vec4; }
-static inline const glsl_type *glsl_dvec4_type(void) { return &glsl_type_builtin_ivec4; }
+static inline const glsl_type *glsl_dvec4_type(void) { return &glsl_type_builtin_dvec4; }
 static inline const glsl_type *glsl_uvec4_type(void) { return &glsl_type_builtin_uvec4; }
 static inline const glsl_type *glsl_ivec4_type(void) { return &glsl_type_builtin_ivec4; }
 static inline const glsl_type *glsl_bvec4_type(void) { return &glsl_type_builtin_bvec4; }
diff --git a/src/compiler/meson.build b/src/compiler/meson.build
index 1dae56d1b2b..8d73544c6d8 100644
--- a/src/compiler/meson.build
+++ b/src/compiler/meson.build
@@ -79,7 +79,7 @@ subdir('nir')
 
 subdir('spirv')
 
-if with_opencl_spirv
+if with_clc
   subdir('clc')
 endif
 if with_gallium
diff --git a/src/compiler/nir/nir.c b/src/compiler/nir/nir.c
index 70d5a8a2279..00981d4a1c4 100644
--- a/src/compiler/nir/nir.c
+++ b/src/compiler/nir/nir.c
@@ -3133,6 +3133,8 @@ nir_tex_instr_has_implicit_derivative(const nir_tex_instr *instr)
    case nir_texop_txb:
    case nir_texop_lod:
       return true;
+   case nir_texop_tg4:
+      return instr->is_gather_implicit_lod;
    default:
       return false;
    }
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 58b602e8a8b..62286b56b03 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -4185,7 +4185,7 @@ static inline nir_function *
 nir_shader_get_function_for_name(const nir_shader *shader, const char *name)
 {
    nir_foreach_function(func, shader) {
-      if (strcmp(func->name, name) == 0)
+      if (func->name && strcmp(func->name, name) == 0)
          return func;
    }
 
diff --git a/src/compiler/nir/nir_builder.c b/src/compiler/nir/nir_builder.c
index 8a93394730f..3e2a64ec976 100644
--- a/src/compiler/nir/nir_builder.c
+++ b/src/compiler/nir/nir_builder.c
@@ -379,6 +379,22 @@ nir_builder_instr_insert(nir_builder *build, nir_instr *instr)
    build->cursor = nir_after_instr(instr);
 }
 
+void
+nir_builder_instr_insert_at_top(nir_builder *build, nir_instr *instr)
+{
+   nir_cursor top = nir_before_impl(build->impl);
+   const bool at_top = build->cursor.block != NULL &&
+                       nir_cursors_equal(build->cursor, top);
+
+   nir_instr_insert(top, instr);
+
+   if (build->update_divergence)
+      nir_update_instr_divergence(build->shader, instr);
+
+   if (at_top)
+      build->cursor = nir_after_instr(instr);
+}
+
 void
 nir_builder_cf_insert(nir_builder *build, nir_cf_node *cf)
 {
diff --git a/src/compiler/nir/nir_builder.h b/src/compiler/nir/nir_builder.h
index 9e88b78b9fb..030ce0b7759 100644
--- a/src/compiler/nir/nir_builder.h
+++ b/src/compiler/nir/nir_builder.h
@@ -182,6 +182,7 @@ nir_shader_intrinsics_pass(nir_shader *shader,
 }
 
 void nir_builder_instr_insert(nir_builder *build, nir_instr *instr);
+void nir_builder_instr_insert_at_top(nir_builder *build, nir_instr *instr);
 
 static inline nir_instr *
 nir_builder_last_instr(nir_builder *build)
@@ -250,9 +251,7 @@ nir_undef(nir_builder *build, unsigned num_components, unsigned bit_size)
    if (!undef)
       return NULL;
 
-   nir_instr_insert(nir_before_impl(build->impl), &undef->instr);
-   if (build->update_divergence)
-      nir_update_instr_divergence(build->shader, &undef->instr);
+   nir_builder_instr_insert_at_top(build, &undef->instr);
 
    return &undef->def;
 }
@@ -1832,7 +1831,7 @@ nir_decl_reg(nir_builder *b, unsigned num_components, unsigned bit_size,
    nir_intrinsic_set_divergent(decl, true);
    nir_def_init(&decl->instr, &decl->def, 1, 32);
 
-   nir_instr_insert(nir_before_impl(b->impl), &decl->instr);
+   nir_builder_instr_insert_at_top(b, &decl->instr);
 
    return &decl->def;
 }
diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index 4cb456bc747..216c092d281 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -143,6 +143,7 @@ visit_intrinsic(nir_shader *shader, nir_intrinsic_instr *instr)
    case nir_intrinsic_load_xfb_address:
    case nir_intrinsic_load_num_vertices:
    case nir_intrinsic_load_fb_layers_v3d:
+   case nir_intrinsic_load_fep_w_v3d:
    case nir_intrinsic_load_tcs_num_patches_amd:
    case nir_intrinsic_load_ring_tess_factors_amd:
    case nir_intrinsic_load_ring_tess_offchip_amd:
@@ -189,7 +190,6 @@ visit_intrinsic(nir_shader *shader, nir_intrinsic_instr *instr)
    case nir_intrinsic_load_resume_shader_address_amd:
    case nir_intrinsic_load_global_const_block_intel:
    case nir_intrinsic_load_reloc_const_intel:
-   case nir_intrinsic_load_global_block_intel:
    case nir_intrinsic_load_btd_global_arg_addr_intel:
    case nir_intrinsic_load_btd_local_arg_addr_intel:
    case nir_intrinsic_load_mesh_inline_data_intel:
@@ -216,9 +216,17 @@ visit_intrinsic(nir_shader *shader, nir_intrinsic_instr *instr)
    case nir_intrinsic_load_rasterization_primitive_amd:
    case nir_intrinsic_load_global_constant_uniform_block_intel:
    case nir_intrinsic_cmat_length:
+   case nir_intrinsic_load_printf_buffer_address:
       is_divergent = false;
       break;
 
+   /* This is divergent because it specifically loads sequential values into
+    * successive SIMD lanes.
+    */
+   case nir_intrinsic_load_global_block_intel:
+      is_divergent = true;
+      break;
+
    case nir_intrinsic_decl_reg:
       is_divergent = nir_intrinsic_divergent(instr);
       break;
diff --git a/src/compiler/nir/nir_gather_types.c b/src/compiler/nir/nir_gather_types.c
index 1516640a9a7..69acc23b91a 100644
--- a/src/compiler/nir/nir_gather_types.c
+++ b/src/compiler/nir/nir_gather_types.c
@@ -103,7 +103,7 @@ nir_gather_types(nir_function_impl *impl,
    do {
       progress = false;
 
-      nir_foreach_block(block, impl) {
+      nir_foreach_block_unstructured(block, impl) {
          nir_foreach_instr(instr, block) {
             switch (instr->type) {
             case nir_instr_type_alu: {
diff --git a/src/compiler/nir/nir_intrinsics.py b/src/compiler/nir/nir_intrinsics.py
index 60a7fa3732b..afa47d3dcac 100644
--- a/src/compiler/nir/nir_intrinsics.py
+++ b/src/compiler/nir/nir_intrinsics.py
@@ -1714,6 +1714,9 @@ store("tlb_sample_color_v3d", [1], [BASE, COMPONENT, SRC_TYPE], [])
 # the target framebuffer
 intrinsic("load_fb_layers_v3d", dest_comp=1, flags=[CAN_ELIMINATE, CAN_REORDER])
 
+# V3D-specific intrinsic to load W coordinate from the fragment shader payload
+intrinsic("load_fep_w_v3d", dest_comp=1, flags=[CAN_ELIMINATE, CAN_REORDER])
+
 # Load a bindless sampler handle mapping a binding table sampler.
 intrinsic("load_sampler_handle_agx", [1], 1, [],
           flags=[CAN_ELIMINATE, CAN_REORDER],
@@ -2022,11 +2025,15 @@ system_value("leaf_procedural_intel", 1, bit_sizes=[1])
 system_value("btd_shader_type_intel", 1)
 system_value("ray_query_global_intel", 1, bit_sizes=[64])
 
-# Source 0: A matrix (type specified by SRC_TYPE)
-# Source 1: B matrix (type specified by SRC_TYPE)
-# Source 2: Accumulator matrix (type specified by DEST_TYPE)
+# Source 0: Accumulator matrix (type specified by DEST_TYPE)
+# Source 1: A matrix (type specified by SRC_TYPE)
+# Source 2: B matrix (type specified by SRC_TYPE)
 #
 # The matrix parameters are the slices owned by the invocation.
+#
+# The accumulator is source 0 because that is the source the intrinsic
+# infrastructure in NIR uses to determine the number of components in the
+# result.
 intrinsic("dpas_intel", dest_comp=0, src_comp=[0, 0, 0],
           indices=[DEST_TYPE, SRC_TYPE, SATURATE, CMAT_SIGNED_MASK, SYSTOLIC_DEPTH, REPEAT_COUNT],
           flags=[CAN_ELIMINATE])
diff --git a/src/compiler/nir/nir_linking_helpers.c b/src/compiler/nir/nir_linking_helpers.c
index f3be6b1c6f6..f3c85791d54 100644
--- a/src/compiler/nir/nir_linking_helpers.c
+++ b/src/compiler/nir/nir_linking_helpers.c
@@ -120,11 +120,6 @@ tcs_add_output_reads(nir_shader *shader, uint64_t *read, uint64_t *patches_read)
  * progress = nir_remove_unused_io_vars(producer, nir_var_shader_out,
  *                                      read, patches_read) ||
  *                                      progress;
- *
- * The "used" should be an array of 4 uint64_ts (probably of VARYING_BIT_*)
- * representing each .location_frac used.  Note that for vector variables,
- * only the first channel (.location_frac) is examined for deciding if the
- * variable is used!
  */
 bool
 nir_remove_unused_io_vars(nir_shader *shader,
@@ -153,7 +148,9 @@ nir_remove_unused_io_vars(nir_shader *shader,
       if (var->data.explicit_xfb_buffer)
          continue;
 
-      uint64_t other_stage = used[var->data.location_frac];
+      uint64_t other_stage = 0;
+      for (unsigned i = 0; i < get_num_components(var); i++)
+         other_stage |= used[var->data.location_frac + i];
 
       if (!(other_stage & get_variable_io_mask(var, shader->info.stage))) {
          /* This one is invalid, make it a global variable instead */
@@ -1495,7 +1492,7 @@ nir_assign_io_var_locations(nir_shader *shader, nir_variable_mode mode,
                             unsigned *size, gl_shader_stage stage)
 {
    unsigned location = 0;
-   unsigned assigned_locations[VARYING_SLOT_TESS_MAX];
+   unsigned assigned_locations[VARYING_SLOT_TESS_MAX][2];
    uint64_t processed_locs[2] = { 0 };
 
    struct exec_list io_vars;
@@ -1587,7 +1584,7 @@ nir_assign_io_var_locations(nir_shader *shader, nir_variable_mode mode,
       if (processed) {
          /* TODO handle overlapping per-view variables */
          assert(!var->data.per_view);
-         unsigned driver_location = assigned_locations[var->data.location];
+         unsigned driver_location = assigned_locations[var->data.location][var->data.index];
          var->data.driver_location = driver_location;
 
          /* An array may be packed such that is crosses multiple other arrays
@@ -1608,7 +1605,7 @@ nir_assign_io_var_locations(nir_shader *shader, nir_variable_mode mode,
             unsigned num_unallocated_slots = last_slot_location - location;
             unsigned first_unallocated_slot = var_size - num_unallocated_slots;
             for (unsigned i = first_unallocated_slot; i < var_size; i++) {
-               assigned_locations[var->data.location + i] = location;
+               assigned_locations[var->data.location + i][var->data.index] = location;
                location++;
             }
          }
@@ -1616,7 +1613,7 @@ nir_assign_io_var_locations(nir_shader *shader, nir_variable_mode mode,
       }
 
       for (unsigned i = 0; i < var_size; i++) {
-         assigned_locations[var->data.location + i] = location + i;
+         assigned_locations[var->data.location + i][var->data.index] = location + i;
       }
 
       var->data.driver_location = location;
diff --git a/src/compiler/nir/nir_lower_blend.c b/src/compiler/nir/nir_lower_blend.c
index c35d33817a7..b38f3c330f5 100644
--- a/src/compiler/nir/nir_lower_blend.c
+++ b/src/compiler/nir/nir_lower_blend.c
@@ -319,9 +319,12 @@ nir_blend_logicop(
    if (util_format_is_float(format) || util_format_is_srgb(format))
       return src;
 
+   nir_alu_type type =
+      util_format_is_pure_integer(format) ? nir_type_uint : nir_type_float;
+
    if (bit_size != 32) {
-      src = nir_f2f32(b, src);
-      dst = nir_f2f32(b, dst);
+      src = nir_convert_to_bit_size(b, src, type, 32);
+      dst = nir_convert_to_bit_size(b, dst, type, 32);
    }
 
    assert(src->num_components <= 4);
@@ -358,8 +361,8 @@ nir_blend_logicop(
       assert(util_format_is_pure_integer(format));
    }
 
-   if (bit_size == 16)
-      out = nir_f2f16(b, out);
+   if (bit_size != 32)
+      out = nir_convert_to_bit_size(b, out, type, bit_size);
 
    return out;
 }
diff --git a/src/compiler/nir/nir_lower_cl_images.c b/src/compiler/nir/nir_lower_cl_images.c
index c172128b650..13063593aad 100644
--- a/src/compiler/nir/nir_lower_cl_images.c
+++ b/src/compiler/nir/nir_lower_cl_images.c
@@ -161,6 +161,7 @@ nir_lower_cl_images(nir_shader *shader, bool lower_image_derefs, bool lower_samp
          assert(var->data.location > last_loc);
          last_loc = var->data.location;
          var->data.driver_location = num_samplers++;
+         var->data.binding = var->data.driver_location;
       } else {
          /* CL shouldn't have any sampled images */
          assert(!glsl_type_is_sampler(var->type));
diff --git a/src/compiler/nir/nir_lower_clamp_color_outputs.c b/src/compiler/nir/nir_lower_clamp_color_outputs.c
index c13e90705d7..37e40f89a28 100644
--- a/src/compiler/nir/nir_lower_clamp_color_outputs.c
+++ b/src/compiler/nir/nir_lower_clamp_color_outputs.c
@@ -25,13 +25,13 @@
 #include "nir_builder.h"
 
 static bool
-is_color_output(nir_shader *shader, nir_variable *out)
+is_color_output(nir_shader *shader, int location)
 {
    switch (shader->info.stage) {
    case MESA_SHADER_VERTEX:
    case MESA_SHADER_GEOMETRY:
    case MESA_SHADER_TESS_EVAL:
-      switch (out->data.location) {
+      switch (location) {
       case VARYING_SLOT_COL0:
       case VARYING_SLOT_COL1:
       case VARYING_SLOT_BFC0:
@@ -42,8 +42,8 @@ is_color_output(nir_shader *shader, nir_variable *out)
       }
       break;
    case MESA_SHADER_FRAGMENT:
-      return (out->data.location == FRAG_RESULT_COLOR ||
-              out->data.location >= FRAG_RESULT_DATA0);
+      return (location == FRAG_RESULT_COLOR ||
+              location >= FRAG_RESULT_DATA0);
    default:
       return false;
    }
@@ -54,30 +54,23 @@ lower_intrinsic(nir_builder *b, nir_intrinsic_instr *intr, nir_shader *shader)
 {
    nir_variable *out = NULL;
    nir_def *s;
+   int loc = -1;
 
    switch (intr->intrinsic) {
    case nir_intrinsic_store_deref:
       out = nir_intrinsic_get_var(intr, 0);
+      if (out->data.mode != nir_var_shader_out)
+         return false;
+      loc = out->data.location;
       break;
    case nir_intrinsic_store_output:
-      /* already had i/o lowered.. lookup the matching output var: */
-      nir_foreach_shader_out_variable(var, shader) {
-         int drvloc = var->data.driver_location;
-         if (nir_intrinsic_base(intr) == drvloc) {
-            out = var;
-            break;
-         }
-      }
-      assume(out);
+      loc = nir_intrinsic_io_semantics(intr).location;
       break;
    default:
       return false;
    }
 
-   if (out->data.mode != nir_var_shader_out)
-      return false;
-
-   if (is_color_output(shader, out)) {
+   if (is_color_output(shader, loc)) {
       b->cursor = nir_before_instr(&intr->instr);
       int src = intr->intrinsic == nir_intrinsic_store_deref ? 1 : 0;
       s = intr->src[src].ssa;
diff --git a/src/compiler/nir/nir_lower_tex_shadow.c b/src/compiler/nir/nir_lower_tex_shadow.c
index 882a5cc2003..ec077a60d97 100644
--- a/src/compiler/nir/nir_lower_tex_shadow.c
+++ b/src/compiler/nir/nir_lower_tex_shadow.c
@@ -115,7 +115,7 @@ nir_lower_tex_shadow_impl(nir_builder *b, nir_instr *instr, void *options)
    nir_def *one = nir_imm_float(b, 1.0);
    nir_def *zero = nir_imm_float(b, 0.0);
 
-   nir_def *lookup[6] = { result, NULL, NULL, NULL, zero, one };
+   nir_def *lookup[6] = { result, zero, zero, one, zero, one };
    nir_def *r[4] = { result, result, result, result };
 
    if (sampler_binding < state->n_states) {
diff --git a/src/compiler/nir/nir_lower_texcoord_replace.c b/src/compiler/nir/nir_lower_texcoord_replace.c
index 17991f3df41..6695ccf8022 100644
--- a/src/compiler/nir/nir_lower_texcoord_replace.c
+++ b/src/compiler/nir/nir_lower_texcoord_replace.c
@@ -107,6 +107,7 @@ nir_lower_texcoord_replace_impl(nir_function_impl *impl,
          unsigned base = var->data.location - VARYING_SLOT_TEX0;
 
          b.cursor = nir_after_instr(instr);
+         uint32_t component_mask = BITFIELD_MASK(glsl_get_vector_elements(var->type)) << var->data.location_frac;
          nir_deref_instr *deref = nir_src_as_deref(intrin->src[0]);
          nir_def *index = get_io_index(&b, deref);
          nir_def *mask =
@@ -114,7 +115,7 @@ nir_lower_texcoord_replace_impl(nir_function_impl *impl,
                      nir_iadd_imm(&b, index, base));
 
          nir_def *cond = nir_test_mask(&b, mask, coord_replace);
-         nir_def *result = nir_bcsel(&b, cond, new_coord,
+         nir_def *result = nir_bcsel(&b, cond, nir_channels(&b, new_coord, component_mask),
                                      &intrin->def);
 
          nir_def_rewrite_uses_after(&intrin->def,
diff --git a/src/compiler/nir/nir_opt_preamble.c b/src/compiler/nir/nir_opt_preamble.c
index 29c0af232b2..3561839eb81 100644
--- a/src/compiler/nir/nir_opt_preamble.c
+++ b/src/compiler/nir/nir_opt_preamble.c
@@ -173,6 +173,7 @@ can_move_intrinsic(nir_intrinsic_instr *instr, opt_preamble_ctx *ctx)
    case nir_intrinsic_load_line_width:
    case nir_intrinsic_load_aa_line_width:
    case nir_intrinsic_load_fb_layers_v3d:
+   case nir_intrinsic_load_fep_w_v3d:
    case nir_intrinsic_load_tcs_num_patches_amd:
    case nir_intrinsic_load_sample_positions_pan:
    case nir_intrinsic_load_pipeline_stat_query_enabled_amd:
diff --git a/src/compiler/nir/nir_serialize.c b/src/compiler/nir/nir_serialize.c
index 64965b847ec..0930f0e7aeb 100644
--- a/src/compiler/nir/nir_serialize.c
+++ b/src/compiler/nir/nir_serialize.c
@@ -202,8 +202,6 @@ read_constant(read_ctx *ctx, nir_variable *nvar)
 
 enum var_data_encoding {
    var_encode_full,
-   var_encode_shader_temp,
-   var_encode_function_temp,
    var_encode_location_diff,
 };
 
@@ -264,30 +262,23 @@ write_variable(write_ctx *ctx, const nir_variable *var)
        data.mode != nir_var_shader_out)
       data.location = 0;
 
-   /* Temporary variables don't serialize var->data. */
-   if (data.mode == nir_var_shader_temp)
-      flags.u.data_encoding = var_encode_shader_temp;
-   else if (data.mode == nir_var_function_temp)
-      flags.u.data_encoding = var_encode_function_temp;
-   else {
-      struct nir_variable_data tmp = data;
+   struct nir_variable_data tmp = data;
 
-      tmp.location = ctx->last_var_data.location;
-      tmp.location_frac = ctx->last_var_data.location_frac;
-      tmp.driver_location = ctx->last_var_data.driver_location;
+   tmp.location = ctx->last_var_data.location;
+   tmp.location_frac = ctx->last_var_data.location_frac;
+   tmp.driver_location = ctx->last_var_data.driver_location;
 
-      /* See if we can encode only the difference in locations from the last
-       * variable.
-       */
-      if (memcmp(&ctx->last_var_data, &tmp, sizeof(tmp)) == 0 &&
-          abs((int)data.location -
-              (int)ctx->last_var_data.location) < (1 << 12) &&
-          abs((int)data.driver_location -
-              (int)ctx->last_var_data.driver_location) < (1 << 15))
-         flags.u.data_encoding = var_encode_location_diff;
-      else
-         flags.u.data_encoding = var_encode_full;
-   }
+   /* See if we can encode only the difference in locations from the last
+    * variable.
+    */
+   if (memcmp(&ctx->last_var_data, &tmp, sizeof(tmp)) == 0 &&
+       abs((int)data.location -
+           (int)ctx->last_var_data.location) < (1 << 12) &&
+       abs((int)data.driver_location -
+           (int)ctx->last_var_data.driver_location) < (1 << 15))
+      flags.u.data_encoding = var_encode_location_diff;
+   else
+      flags.u.data_encoding = var_encode_full;
 
    flags.u.ray_query = var->data.ray_query;
 
@@ -306,27 +297,24 @@ write_variable(write_ctx *ctx, const nir_variable *var)
    if (flags.u.has_name)
       blob_write_string(ctx->blob, var->name);
 
-   if (flags.u.data_encoding == var_encode_full ||
-       flags.u.data_encoding == var_encode_location_diff) {
-      if (flags.u.data_encoding == var_encode_full) {
-         blob_write_bytes(ctx->blob, &data, sizeof(data));
-      } else {
-         /* Serialize only the difference in locations from the last variable.
-          */
-         union packed_var_data_diff diff;
-
-         diff.u.location = data.location - ctx->last_var_data.location;
-         diff.u.location_frac = data.location_frac -
-                                ctx->last_var_data.location_frac;
-         diff.u.driver_location = data.driver_location -
-                                  ctx->last_var_data.driver_location;
+   if (flags.u.data_encoding == var_encode_full) {
+      blob_write_bytes(ctx->blob, &data, sizeof(data));
+   } else {
+      /* Serialize only the difference in locations from the last variable.
+       */
+      union packed_var_data_diff diff;
 
-         blob_write_uint32(ctx->blob, diff.u32);
-      }
+      diff.u.location = data.location - ctx->last_var_data.location;
+      diff.u.location_frac = data.location_frac -
+                             ctx->last_var_data.location_frac;
+      diff.u.driver_location = data.driver_location -
+                               ctx->last_var_data.driver_location;
 
-      ctx->last_var_data = data;
+      blob_write_uint32(ctx->blob, diff.u32);
    }
 
+   ctx->last_var_data = data;
+
    for (unsigned i = 0; i < var->num_state_slots; i++) {
       blob_write_bytes(ctx->blob, &var->state_slots[i],
                        sizeof(var->state_slots[i]));
@@ -374,11 +362,7 @@ read_variable(read_ctx *ctx)
       var->name = NULL;
    }
 
-   if (flags.u.data_encoding == var_encode_shader_temp)
-      var->data.mode = nir_var_shader_temp;
-   else if (flags.u.data_encoding == var_encode_function_temp)
-      var->data.mode = nir_var_function_temp;
-   else if (flags.u.data_encoding == var_encode_full) {
+   if (flags.u.data_encoding == var_encode_full) {
       blob_copy_bytes(ctx->blob, (uint8_t *)&var->data, sizeof(var->data));
       ctx->last_var_data = var->data;
    } else { /* var_encode_location_diff */
diff --git a/src/compiler/spirv/spirv_to_nir.c b/src/compiler/spirv/spirv_to_nir.c
index ed2a003d722..f57c9ba42a2 100644
--- a/src/compiler/spirv/spirv_to_nir.c
+++ b/src/compiler/spirv/spirv_to_nir.c
@@ -4383,6 +4383,7 @@ vtn_handle_composite(struct vtn_builder *b, SpvOp opcode,
       break;
    }
    case SpvOpCopyObject:
+   case SpvOpExpectKHR:
       vtn_copy_value(b, w[3], w[2]);
       return;
 
@@ -6458,18 +6459,18 @@ vtn_handle_body_instruction(struct vtn_builder *b, SpvOp opcode,
       vtn_handle_integer_dot(b, opcode, w, count);
       break;
 
+   case SpvOpBitcast:
+      vtn_handle_bitcast(b, w, count);
+      break;
+
    /* TODO: One day, we should probably do something with this information
     * For now, though, it's safe to implement them as no-ops.
     * Needed for Rusticl sycl support.
     */
    case SpvOpAssumeTrueKHR:
-   case SpvOpExpectKHR:
-      break;
-
-   case SpvOpBitcast:
-      vtn_handle_bitcast(b, w, count);
       break;
 
+   case SpvOpExpectKHR:
    case SpvOpVectorExtractDynamic:
    case SpvOpVectorInsertDynamic:
    case SpvOpVectorShuffle:
diff --git a/src/compiler/spirv/vtn_opencl.c b/src/compiler/spirv/vtn_opencl.c
index 59ec75da885..5785057da1d 100644
--- a/src/compiler/spirv/vtn_opencl.c
+++ b/src/compiler/spirv/vtn_opencl.c
@@ -743,8 +743,15 @@ vtn_add_printf_string(struct vtn_builder *b, uint32_t id, u_printf_info *info)
 {
    nir_deref_instr *deref = vtn_nir_deref(b, id);
 
-   while (deref && deref->deref_type != nir_deref_type_var)
-      deref = nir_deref_instr_parent(deref);
+   while (deref->deref_type != nir_deref_type_var) {
+      nir_scalar parent = nir_scalar_resolved(deref->parent.ssa, 0);
+      if (parent.def->parent_instr->type != nir_instr_type_deref) {
+         deref = NULL;
+         break;
+      }
+      vtn_assert(parent.comp == 0);
+      deref = nir_instr_as_deref(parent.def->parent_instr);
+   }
 
    vtn_fail_if(deref == NULL || !nir_deref_mode_is(deref, nir_var_mem_constant),
                "Printf string argument must be a pointer to a constant variable");
diff --git a/src/compiler/spirv/vtn_variables.c b/src/compiler/spirv/vtn_variables.c
index ce4b19134ab..49c07b950c9 100644
--- a/src/compiler/spirv/vtn_variables.c
+++ b/src/compiler/spirv/vtn_variables.c
@@ -2024,7 +2024,9 @@ adjust_patch_locations(struct vtn_builder *b, struct vtn_variable *var)
 
    for (uint16_t i = 0; i < num_data; i++) {
       vtn_assert(data[i].location < VARYING_SLOT_PATCH0);
-      if (data[i].patch && data[i].location >= VARYING_SLOT_VAR0)
+      if (data[i].patch &&
+          (data[i].mode == nir_var_shader_in || data[i].mode == nir_var_shader_out) &&
+          data[i].location >= VARYING_SLOT_VAR0)
          data[i].location += VARYING_SLOT_PATCH0 - VARYING_SLOT_VAR0;
    }
 }
diff --git a/src/drm-shim/drm_shim.c b/src/drm-shim/drm_shim.c
index f7481aa293b..3597fec2e97 100644
--- a/src/drm-shim/drm_shim.c
+++ b/src/drm-shim/drm_shim.c
@@ -30,6 +30,7 @@
 
 /* Prevent glibc from defining open64 when we want to alias it. */
 #undef _FILE_OFFSET_BITS
+#undef _TIME_BITS
 #define _LARGEFILE64_SOURCE
 
 #include <stdbool.h>
diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index f98bc0308f5..cd23a796a67 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -1239,7 +1239,7 @@ dri2_setup_extensions(_EGLDisplay *disp)
 
    extensions = dri2_dpy->core->getExtensions(dri2_dpy->dri_screen_render_gpu);
 
-   if (dri2_dpy->image_driver || dri2_dpy->dri2 || disp->Options.Zink) {
+   if (dri2_dpy->image_driver || dri2_dpy->dri2) {
       if (!loader_bind_extensions(dri2_dpy, dri2_core_extensions,
                                   ARRAY_SIZE(dri2_core_extensions), extensions))
          return EGL_FALSE;
@@ -1259,16 +1259,15 @@ dri2_setup_extensions(_EGLDisplay *disp)
        (dri2_dpy->present_major_version == 1 &&
         dri2_dpy->present_minor_version >= 2)) &&
       (dri2_dpy->image && dri2_dpy->image->base.version >= 15);
-#endif
    if (disp->Options.Zink && !disp->Options.ForceSoftware &&
-#ifdef HAVE_DRI3_MODIFIERS
        dri2_dpy->dri3_major_version != -1 &&
        !dri2_dpy->multibuffers_available &&
-#endif
-       (disp->Platform == EGL_PLATFORM_X11_KHR ||
-        disp->Platform == EGL_PLATFORM_XCB_EXT) &&
+       /* this is enum _egl_platform_type */
+       (disp->Platform == _EGL_PLATFORM_X11 ||
+        disp->Platform == _EGL_PLATFORM_XCB) &&
        !debug_get_bool_option("LIBGL_KOPPER_DRI2", false))
       return EGL_FALSE;
+#endif
 
    loader_bind_extensions(dri2_dpy, optional_core_extensions,
                           ARRAY_SIZE(optional_core_extensions), extensions);
diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index 76fbef104de..8e2b705ea9b 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -977,11 +977,14 @@ droid_load_driver(_EGLDisplay *disp, bool swrast)
 {
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
 
-   dri2_dpy->driver_name = loader_get_driver_for_fd(dri2_dpy->fd_render_gpu);
+   if (disp->Options.Zink)
+      dri2_dpy->driver_name = strdup("zink");
+   else
+      dri2_dpy->driver_name = loader_get_driver_for_fd(dri2_dpy->fd_render_gpu);
    if (dri2_dpy->driver_name == NULL)
       return false;
 
-   if (swrast) {
+   if (swrast && !disp->Options.Zink) {
       /* Use kms swrast only with vgem / virtio_gpu.
        * virtio-gpu fallbacks to software rendering when 3D features
        * are unavailable since 6c5ab.
diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index bd432a8195f..1f718ef8a74 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -73,6 +73,7 @@ static const struct dri2_wl_visual {
     */
    int alt_dri_image_format;
    int bpp;
+   int opaque_wl_drm_format;
    int rgba_shifts[4];
    unsigned int rgba_sizes[4];
 } dri2_wl_visuals[] = {
@@ -83,6 +84,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_ABGR16161616F,
       0,
       64,
+      WL_DRM_FORMAT_XBGR16F,
       {0, 16, 32, 48},
       {16, 16, 16, 16},
    },
@@ -93,6 +95,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_XBGR16161616F,
       0,
       64,
+      WL_DRM_FORMAT_XBGR16F,
       {0, 16, 32, -1},
       {16, 16, 16, 0},
    },
@@ -103,6 +106,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_XRGB2101010,
       __DRI_IMAGE_FORMAT_XBGR2101010,
       32,
+      WL_DRM_FORMAT_XRGB2101010,
       {20, 10, 0, -1},
       {10, 10, 10, 0},
    },
@@ -113,6 +117,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_ARGB2101010,
       __DRI_IMAGE_FORMAT_ABGR2101010,
       32,
+      WL_DRM_FORMAT_XRGB2101010,
       {20, 10, 0, 30},
       {10, 10, 10, 2},
    },
@@ -123,6 +128,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_XBGR2101010,
       __DRI_IMAGE_FORMAT_XRGB2101010,
       32,
+      WL_DRM_FORMAT_XBGR2101010,
       {0, 10, 20, -1},
       {10, 10, 10, 0},
    },
@@ -133,6 +139,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_ABGR2101010,
       __DRI_IMAGE_FORMAT_ARGB2101010,
       32,
+      WL_DRM_FORMAT_XBGR2101010,
       {0, 10, 20, 30},
       {10, 10, 10, 2},
    },
@@ -143,6 +150,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_XRGB8888,
       __DRI_IMAGE_FORMAT_NONE,
       32,
+      WL_DRM_FORMAT_XRGB8888,
       {16, 8, 0, -1},
       {8, 8, 8, 0},
    },
@@ -153,6 +161,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_ARGB8888,
       __DRI_IMAGE_FORMAT_NONE,
       32,
+      WL_DRM_FORMAT_XRGB8888,
       {16, 8, 0, 24},
       {8, 8, 8, 8},
    },
@@ -163,6 +172,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_ABGR8888,
       __DRI_IMAGE_FORMAT_NONE,
       32,
+      WL_DRM_FORMAT_XBGR8888,
       {0, 8, 16, 24},
       {8, 8, 8, 8},
    },
@@ -173,6 +183,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_XBGR8888,
       __DRI_IMAGE_FORMAT_NONE,
       32,
+      WL_DRM_FORMAT_XBGR8888,
       {0, 8, 16, -1},
       {8, 8, 8, 0},
    },
@@ -183,6 +194,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_RGB565,
       __DRI_IMAGE_FORMAT_NONE,
       16,
+      WL_DRM_FORMAT_RGB565,
       {11, 5, 0, -1},
       {5, 6, 5, 0},
    },
@@ -193,6 +205,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_ARGB1555,
       __DRI_IMAGE_FORMAT_ABGR1555,
       16,
+      WL_DRM_FORMAT_XRGB1555,
       {10, 5, 0, 15},
       {5, 5, 5, 1},
    },
@@ -203,6 +216,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_XRGB1555,
       __DRI_IMAGE_FORMAT_XBGR1555,
       16,
+      WL_DRM_FORMAT_XRGB1555,
       {10, 5, 0, -1},
       {5, 5, 5, 0},
    },
@@ -213,6 +227,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_ARGB4444,
       __DRI_IMAGE_FORMAT_XBGR4444,
       16,
+      WL_DRM_FORMAT_XRGB4444,
       {8, 4, 0, 12},
       {4, 4, 4, 4},
    },
@@ -223,6 +238,7 @@ static const struct dri2_wl_visual {
       __DRI_IMAGE_FORMAT_XRGB4444,
       __DRI_IMAGE_FORMAT_XBGR4444,
       16,
+      WL_DRM_FORMAT_XRGB4444,
       {8, 4, 0, -1},
       {4, 4, 4, 0},
    },
@@ -240,7 +256,7 @@ static const struct dri2_wl_visual {
 
 static int
 dri2_wl_visual_idx_from_config(struct dri2_egl_display *dri2_dpy,
-                               const __DRIconfig *config, bool force_opaque)
+                               const __DRIconfig *config)
 {
    int shifts[4];
    unsigned int sizes[4];
@@ -250,16 +266,13 @@ dri2_wl_visual_idx_from_config(struct dri2_egl_display *dri2_dpy,
    for (unsigned int i = 0; i < ARRAY_SIZE(dri2_wl_visuals); i++) {
       const struct dri2_wl_visual *wl_visual = &dri2_wl_visuals[i];
 
-      int cmp_rgb_shifts =
-         memcmp(shifts, wl_visual->rgba_shifts, 3 * sizeof(shifts[0]));
-      int cmp_rgb_sizes =
-         memcmp(sizes, wl_visual->rgba_sizes, 3 * sizeof(sizes[0]));
+      int cmp_rgba_shifts =
+         memcmp(shifts, wl_visual->rgba_shifts, 4 * sizeof(shifts[0]));
+      int cmp_rgba_sizes =
+         memcmp(sizes, wl_visual->rgba_sizes, 4 * sizeof(sizes[0]));
 
-      if (cmp_rgb_shifts == 0 && cmp_rgb_sizes == 0 &&
-          wl_visual->rgba_shifts[3] == (force_opaque ? -1 : shifts[3]) &&
-          wl_visual->rgba_sizes[3] == (force_opaque ? 0 : sizes[3])) {
+      if (cmp_rgba_shifts == 0 && cmp_rgba_sizes == 0)
          return i;
-      }
    }
 
    return -1;
@@ -312,7 +325,7 @@ dri2_wl_is_format_supported(void *user_data, uint32_t format)
 
    for (int i = 0; dri2_dpy->driver_configs[i]; i++)
       if (j == dri2_wl_visual_idx_from_config(
-                  dri2_dpy, dri2_dpy->driver_configs[i], false))
+                  dri2_dpy, dri2_dpy->driver_configs[i]))
          return true;
 
    return false;
@@ -724,43 +737,10 @@ dri2_wl_create_window_surface(_EGLDisplay *disp, _EGLConfig *conf,
    dri2_surf->base.Width = window->width;
    dri2_surf->base.Height = window->height;
 
-#ifndef NDEBUG
-   /* Enforce that every visual has an opaque variant (requirement to support
-    * EGL_EXT_present_opaque)
-    */
-   for (unsigned int i = 0; i < ARRAY_SIZE(dri2_wl_visuals); i++) {
-      const struct dri2_wl_visual *transparent_visual = &dri2_wl_visuals[i];
-      if (transparent_visual->rgba_sizes[3] == 0) {
-         continue;
-      }
-
-      bool found_opaque_equivalent = false;
-      for (unsigned int j = 0; j < ARRAY_SIZE(dri2_wl_visuals); j++) {
-         const struct dri2_wl_visual *opaque_visual = &dri2_wl_visuals[j];
-         if (opaque_visual->rgba_sizes[3] != 0) {
-            continue;
-         }
-
-         int cmp_rgb_shifts =
-            memcmp(transparent_visual->rgba_shifts, opaque_visual->rgba_shifts,
-                   3 * sizeof(opaque_visual->rgba_shifts[0]));
-         int cmp_rgb_sizes =
-            memcmp(transparent_visual->rgba_sizes, opaque_visual->rgba_sizes,
-                   3 * sizeof(opaque_visual->rgba_sizes[0]));
-
-         if (cmp_rgb_shifts == 0 && cmp_rgb_sizes == 0) {
-            found_opaque_equivalent = true;
-            break;
-         }
-      }
-
-      assert(found_opaque_equivalent);
-   }
-#endif
-
-   visual_idx = dri2_wl_visual_idx_from_config(dri2_dpy, config,
-                                               dri2_surf->base.PresentOpaque);
+   visual_idx = dri2_wl_visual_idx_from_config(dri2_dpy, config);
    assert(visual_idx != -1);
+   assert(dri2_wl_visuals[visual_idx].dri_image_format !=
+          __DRI_IMAGE_FORMAT_NONE);
 
    if (dri2_dpy->wl_dmabuf || dri2_dpy->wl_drm) {
       dri2_surf->format = dri2_wl_visuals[visual_idx].wl_drm_format;
@@ -1724,10 +1704,13 @@ create_wl_buffer(struct dri2_egl_display *dri2_dpy,
          close(fd);
       }
 
+      if (dri2_surf && dri2_surf->base.PresentOpaque)
+         fourcc = dri2_wl_visuals[visual_idx].opaque_wl_drm_format;
+
       ret = zwp_linux_buffer_params_v1_create_immed(params, width, height,
                                                     fourcc, 0);
       zwp_linux_buffer_params_v1_destroy(params);
-   } else {
+   } else if (dri2_dpy->wl_drm) {
       struct wl_drm *wl_drm =
          dri2_surf ? dri2_surf->wl_drm_wrapper : dri2_dpy->wl_drm;
       int fd = -1, stride;
@@ -1870,6 +1853,12 @@ dri2_wl_swap_buffers_with_damage(_EGLDisplay *disp, _EGLSurface *draw,
          dri2_surf->current->dri_image, 0, 0, dri2_surf->base.Width,
          dri2_surf->base.Height, 0, 0, dri2_surf->base.Width,
          dri2_surf->base.Height, __BLIT_FLAG_FLUSH);
+
+      if (dri2_dpy->flush) {
+         __DRIdrawable *dri_drawable = dri2_dpy->vtbl->get_dri_drawable(draw);
+
+         dri2_dpy->flush->flush(dri_drawable);
+      }
    }
 
    wl_surface_commit(dri2_surf->wl_surface_wrapper);
@@ -2320,7 +2309,7 @@ dri2_wl_add_configs_for_visuals(_EGLDisplay *disp, bool allow_preserve)
 
          /* No match for config. Try if we can blitImage convert to a visual */
          c = dri2_wl_visual_idx_from_config(dri2_dpy,
-                                            dri2_dpy->driver_configs[i], false);
+                                            dri2_dpy->driver_configs[i]);
 
          if (c == -1)
             continue;
diff --git a/src/egl/drivers/dri2/platform_x11.c b/src/egl/drivers/dri2/platform_x11.c
index 10a78a403d9..cc8bc19b2cd 100644
--- a/src/egl/drivers/dri2/platform_x11.c
+++ b/src/egl/drivers/dri2/platform_x11.c
@@ -1523,7 +1523,8 @@ dri2_initialize_x11_swrast(_EGLDisplay *disp)
     */
    dri2_dpy->driver_name = strdup(disp->Options.Zink ? "zink" : "swrast");
    if (disp->Options.Zink &&
-       !debug_get_bool_option("LIBGL_DRI3_DISABLE", false))
+       !debug_get_bool_option("LIBGL_DRI3_DISABLE", false) &&
+       !debug_get_bool_option("LIBGL_KOPPER_DRI2", false))
       dri3_x11_connect(dri2_dpy);
    if (!dri2_load_driver_swrast(disp))
       goto cleanup;
diff --git a/src/freedreno/.gitlab-ci/reference/afuc_test.asm b/src/freedreno/.gitlab-ci/reference/afuc_test.asm
index 0bbdf37a4ba..b97dbaf2af7 100644
--- a/src/freedreno/.gitlab-ci/reference/afuc_test.asm
+++ b/src/freedreno/.gitlab-ci/reference/afuc_test.asm
@@ -162,7 +162,6 @@ nop
 CP_BLIT:
 CP_BOOTSTRAP_UCODE:
 CP_COND_EXEC:
-CP_COND_INDIRECT_BUFFER_PFE:
 CP_COND_REG_EXEC:
 CP_COND_WRITE5:
 CP_CONTEXT_REG_BUNCH:
@@ -268,6 +267,7 @@ UNKN31:
 UNKN32:
 UNKN48:
 UNKN5:
+UNKN58:
 UNKN6:
 UNKN7:
 UNKN73:
diff --git a/src/freedreno/.gitlab-ci/traces/afuc_test.asm b/src/freedreno/.gitlab-ci/traces/afuc_test.asm
index e8d6f8b2b42..f60ee28667d 100644
--- a/src/freedreno/.gitlab-ci/traces/afuc_test.asm
+++ b/src/freedreno/.gitlab-ci/traces/afuc_test.asm
@@ -269,7 +269,7 @@ CP_LOAD_STATE6:
 CP_INDIRECT_BUFFER_PFD:
 CP_DRAW_INDX_OFFSET:
 CP_REG_TEST:
-CP_COND_INDIRECT_BUFFER_PFE:
+UNKN58:
 CP_INVALIDATE_STATE:
 CP_WAIT_REG_MEM:
 CP_REG_TO_MEM:
diff --git a/src/freedreno/ci/gitlab-ci-inc.yml b/src/freedreno/ci/gitlab-ci-inc.yml
index 5367b48c8cf..f71dcb1c067 100644
--- a/src/freedreno/ci/gitlab-ci-inc.yml
+++ b/src/freedreno/ci/gitlab-ci-inc.yml
@@ -292,25 +292,6 @@
   tags:
     - google-freedreno-db410c
 
-# New jobs. Leave it as manual for now.
-.a306_piglit:
-  extends:
-    - .piglit-test
-    - .a306-test
-    - .google-freedreno-manual-rules
-  variables:
-    HWCI_START_XORG: 1
-
-# Something happened and now this hangchecks and doesn't recover.  Unkown when
-# it started.
-.a306_piglit_gl:
-  extends:
-    - .a306_piglit
-  variables:
-    PIGLIT_PROFILES: quick_gl
-    BM_KERNEL_EXTRA_ARGS: "msm.num_hw_submissions=1"
-    FDO_CI_CONCURRENT: 3
-
 # 8 devices (2023-04-15)
 .a530-test:
   extends:
diff --git a/src/freedreno/ci/gitlab-ci.yml b/src/freedreno/ci/gitlab-ci.yml
index f3c0b1738e2..9d19c21502a 100644
--- a/src/freedreno/ci/gitlab-ci.yml
+++ b/src/freedreno/ci/gitlab-ci.yml
@@ -10,6 +10,25 @@ a306_gl:
     FDO_CI_CONCURRENT: 6
   parallel: 5
 
+# New jobs. Leave it as manual for now.
+.a306_piglit:
+  extends:
+    - .piglit-test
+    - .a306-test
+    - .google-freedreno-manual-rules
+  variables:
+    HWCI_START_XORG: 1
+
+# Something happened and now this hangchecks and doesn't recover.  Unkown when
+# it started.
+.a306_piglit_gl:
+  extends:
+    - .a306_piglit
+  variables:
+    PIGLIT_PROFILES: quick_gl
+    BM_KERNEL_EXTRA_ARGS: "msm.num_hw_submissions=1"
+    FDO_CI_CONCURRENT: 3
+
 a306_piglit_shader:
   extends:
     - .a306_piglit
diff --git a/src/freedreno/ir3/ir3_spill.c b/src/freedreno/ir3/ir3_spill.c
index 475c132f6fa..9fba8d3ce80 100644
--- a/src/freedreno/ir3/ir3_spill.c
+++ b/src/freedreno/ir3/ir3_spill.c
@@ -673,13 +673,13 @@ get_spill_slot(struct ra_spill_ctx *ctx, struct ir3_register *reg)
    if (reg->merge_set) {
       if (reg->merge_set->spill_slot == ~0) {
          reg->merge_set->spill_slot = ALIGN_POT(ctx->spill_slot,
-                                                reg->merge_set->alignment);
+                                                reg->merge_set->alignment * 2);
          ctx->spill_slot = reg->merge_set->spill_slot + reg->merge_set->size * 2;
       }
       return reg->merge_set->spill_slot + reg->merge_set_offset * 2;
    } else {
       if (reg->spill_slot == ~0) {
-         reg->spill_slot = ALIGN_POT(ctx->spill_slot, reg_elem_size(reg));
+         reg->spill_slot = ALIGN_POT(ctx->spill_slot, reg_elem_size(reg) * 2);
          ctx->spill_slot = reg->spill_slot + reg_size(reg) * 2;
       }
       return reg->spill_slot;
diff --git a/src/freedreno/registers/adreno/adreno_pm4.xml b/src/freedreno/registers/adreno/adreno_pm4.xml
index 1b687eed5a7..d775f3afef8 100644
--- a/src/freedreno/registers/adreno/adreno_pm4.xml
+++ b/src/freedreno/registers/adreno/adreno_pm4.xml
@@ -371,7 +371,7 @@ xsi:schemaLocation="http://nouveau.freedesktop.org/ rules-ng.xsd">
 	<value name="CP_LOAD_STATE" value="0x30" variants="A3XX"/>
 	<value name="CP_LOAD_STATE4" value="0x30" variants="A4XX-A5XX"/>
 	<doc>Conditionally load a IB based on a flag, prefetch enabled</doc>
-	<value name="CP_COND_INDIRECT_BUFFER_PFE" value="0x3a"/>
+	<value name="CP_COND_INDIRECT_BUFFER_PFE" value="0x3a" variants="A3XX-A5XX"/>
 	<doc>Conditionally load a IB based on a flag, prefetch disabled</doc>
 	<value name="CP_COND_INDIRECT_BUFFER_PFD" value="0x32" variants="A3XX"/>
 	<doc>Load a buffer with pre-fetch enabled</doc>
@@ -648,6 +648,9 @@ xsi:schemaLocation="http://nouveau.freedesktop.org/ rules-ng.xsd">
 
 	<doc>Reset various on-chip state used for synchronization</doc>
 	<value name="CP_RESET_CONTEXT_STATE" value="0x1f" variants="A7XX-"/>
+
+	<doc>Invalidates the "CCHE" introduced on a740</doc>
+	<value name="CP_CCHE_INVALIDATE" value="0x3a" variants="A7XX-"/>
 </enum>
 
 
diff --git a/src/freedreno/vulkan/.clang-format b/src/freedreno/vulkan/.clang-format
index f7f9e5755db..8a1ae374067 100644
--- a/src/freedreno/vulkan/.clang-format
+++ b/src/freedreno/vulkan/.clang-format
@@ -20,5 +20,8 @@ IncludeCategories:
   - Regex:           '.*'
     Priority:        1
 
+ForEachMacros:
+  - u_vector_foreach
+
 SpaceAfterCStyleCast: true
 SpaceBeforeCpp11BracedList: true
diff --git a/src/freedreno/vulkan/tu_cmd_buffer.cc b/src/freedreno/vulkan/tu_cmd_buffer.cc
index 091c8cd29d7..206ea4efe78 100644
--- a/src/freedreno/vulkan/tu_cmd_buffer.cc
+++ b/src/freedreno/vulkan/tu_cmd_buffer.cc
@@ -187,6 +187,10 @@ tu6_emit_flushes(struct tu_cmd_buffer *cmd_buffer,
             .gfx_bindless = CHIP == A6XX ? 0x1f : 0xff,
       ));
    }
+   if (CHIP >= A7XX && (flushes & TU_CMD_FLAG_CCHE_INVALIDATE) &&
+       /* Invalidating UCHE seems to also invalidate CCHE */
+       !(flushes & TU_CMD_FLAG_CACHE_INVALIDATE))
+      tu_cs_emit_pkt7(cs, CP_CCHE_INVALIDATE, 0);
    if (flushes & TU_CMD_FLAG_WAIT_MEM_WRITES)
       tu_cs_emit_pkt7(cs, CP_WAIT_MEM_WRITES, 0);
    if (flushes & TU_CMD_FLAG_WAIT_FOR_IDLE)
@@ -2093,7 +2097,7 @@ tu_reset_cmd_buffer(struct vk_command_buffer *vk_cmd_buffer,
       memset(&cmd_buffer->descriptors[i].push_set, 0, sizeof(cmd_buffer->descriptors[i].push_set));
       cmd_buffer->descriptors[i].push_set.base.type = VK_OBJECT_TYPE_DESCRIPTOR_SET;
       cmd_buffer->descriptors[i].max_sets_bound = 0;
-      cmd_buffer->descriptors[i].dynamic_bound = 0;
+      cmd_buffer->descriptors[i].max_dynamic_offset_size = 0;
    }
 
    u_trace_fini(&cmd_buffer->trace);
@@ -2385,12 +2389,12 @@ tu6_emit_descriptor_sets(struct tu_cmd_buffer *cmd,
          cmd->state.desc_sets =
             tu_cs_draw_state(&cmd->sub_cs, &state_cs,
                              4 + 4 * descriptors_state->max_sets_bound +
-                             (descriptors_state->dynamic_bound ? 6 : 0));
+                             (descriptors_state->max_dynamic_offset_size ? 6 : 0));
       } else {
          cmd->state.desc_sets =
             tu_cs_draw_state(&cmd->sub_cs, &state_cs,
                              3 + 2 * descriptors_state->max_sets_bound +
-                             (descriptors_state->dynamic_bound ? 3 : 0));
+                             (descriptors_state->max_dynamic_offset_size ? 3 : 0));
       }
       cs = &state_cs;
    } else {
@@ -2410,7 +2414,7 @@ tu6_emit_descriptor_sets(struct tu_cmd_buffer *cmd,
    }
 
    /* Dynamic descriptors get the reserved descriptor set. */
-   if (descriptors_state->dynamic_bound) {
+   if (descriptors_state->max_dynamic_offset_size) {
       int reserved_set_idx = cmd->device->physical_device->reserved_set_idx;
       assert(reserved_set_idx >= 0); /* reserved set must be bound */
 
@@ -2561,22 +2565,26 @@ tu_CmdBindDescriptorSets(VkCommandBuffer commandBuffer,
    assert(dyn_idx == dynamicOffsetCount);
 
    if (dynamic_offset_offset) {
+      descriptors_state->max_dynamic_offset_size =
+         MAX2(descriptors_state->max_dynamic_offset_size, dynamic_offset_offset);
+
       /* allocate and fill out dynamic descriptor set */
       struct tu_cs_memory dynamic_desc_set;
       int reserved_set_idx = cmd->device->physical_device->reserved_set_idx;
-      VkResult result = tu_cs_alloc(&cmd->sub_cs,
-                                    dynamic_offset_offset / (4 * A6XX_TEX_CONST_DWORDS),
-                                    A6XX_TEX_CONST_DWORDS, &dynamic_desc_set);
+      VkResult result =
+         tu_cs_alloc(&cmd->sub_cs,
+                     descriptors_state->max_dynamic_offset_size /
+                     (4 * A6XX_TEX_CONST_DWORDS),
+                     A6XX_TEX_CONST_DWORDS, &dynamic_desc_set);
       if (result != VK_SUCCESS) {
          vk_command_buffer_set_error(&cmd->vk, result);
          return;
       }
 
       memcpy(dynamic_desc_set.map, descriptors_state->dynamic_descriptors,
-             dynamic_offset_offset);
+             descriptors_state->max_dynamic_offset_size);
       assert(reserved_set_idx >= 0); /* reserved set must be bound */
       descriptors_state->set_iova[reserved_set_idx] = dynamic_desc_set.iova | BINDLESS_DESCRIPTOR_64B;
-      descriptors_state->dynamic_bound = true;
    }
 
    tu_dirty_desc_sets(cmd, pipelineBindPoint);
@@ -3054,6 +3062,17 @@ tu_CmdBindPipeline(VkCommandBuffer commandBuffer,
    tu_bind_gs(cmd, pipeline->shaders[MESA_SHADER_GEOMETRY]);
    tu_bind_fs(cmd, pipeline->shaders[MESA_SHADER_FRAGMENT]);
 
+   /* We precompile static state and count it as dynamic, so we have to
+    * manually clear bitset that tells which dynamic state is set, in order to
+    * make sure that future dynamic state will be emitted. The issue is that
+    * framework remembers only a past REAL dynamic state and compares a new
+    * dynamic state against it, and not against our static state masquaraded
+    * as dynamic.
+    */
+   BITSET_ANDNOT(cmd->vk.dynamic_graphics_state.set,
+                 cmd->vk.dynamic_graphics_state.set,
+                 pipeline->static_state_mask);
+
    vk_cmd_set_dynamic_graphics_state(&cmd->vk,
                                      &gfx_pipeline->dynamic_state);
    cmd->state.program = pipeline->program;
@@ -3231,6 +3250,13 @@ tu_flush_for_access(struct tu_cache_state *cache,
       flush_bits |= TU_CMD_FLAG_BINDLESS_DESCRIPTOR_INVALIDATE;
    }
 
+   /* There are multiple incoherent copies of CCHE, so any read through it may
+    * require invalidating it and we cannot optimize away invalidates.
+    */
+   if (dst_mask & TU_ACCESS_CCHE_READ) {
+      flush_bits |= TU_CMD_FLAG_CCHE_INVALIDATE;
+   }
+
 #undef DST_INCOHERENT_FLUSH
 
    cache->flush_bits |= flush_bits;
@@ -3332,12 +3358,13 @@ vk2tu_access(VkAccessFlags2 flags, VkPipelineStageFlags2 stages, bool image_only
                        VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT |
                        VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT |
                        SHADER_STAGES))
-       mask |= TU_ACCESS_UCHE_READ;
+       mask |= TU_ACCESS_UCHE_READ | TU_ACCESS_CCHE_READ;
 
    if (gfx_read_access(flags, stages,
                        VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT,
                        SHADER_STAGES)) {
-      mask |= TU_ACCESS_UCHE_READ | TU_ACCESS_BINDLESS_DESCRIPTOR_READ;
+      mask |= TU_ACCESS_UCHE_READ | TU_ACCESS_BINDLESS_DESCRIPTOR_READ |
+              TU_ACCESS_CCHE_READ;
    }
 
    if (gfx_write_access(flags, stages,
diff --git a/src/freedreno/vulkan/tu_cmd_buffer.h b/src/freedreno/vulkan/tu_cmd_buffer.h
index 7538ad3a71c..07325b66fa0 100644
--- a/src/freedreno/vulkan/tu_cmd_buffer.h
+++ b/src/freedreno/vulkan/tu_cmd_buffer.h
@@ -54,7 +54,7 @@ struct tu_descriptor_state
    uint32_t dynamic_descriptors[MAX_DYNAMIC_BUFFERS_SIZE];
    uint64_t set_iova[MAX_SETS];
    uint32_t max_sets_bound;
-   bool dynamic_bound;
+   uint32_t max_dynamic_offset_size;
 };
 
 enum tu_cmd_dirty_bits
@@ -132,6 +132,13 @@ enum tu_cmd_access_mask {
     */
    TU_ACCESS_BINDLESS_DESCRIPTOR_READ = 1 << 13,
 
+   /* The CCHE is a write-through cache which sits behind UCHE, with multiple
+    * incoherent copies. Because it's write-through we only have to worry
+    * about invalidating it for reads. It's invalidated by "ccinv" in the
+    * shader and CP_CCHE_INVALIDATE in the command stream.
+    */
+   TU_ACCESS_CCHE_READ = 1 << 16,
+
    TU_ACCESS_READ =
       TU_ACCESS_UCHE_READ |
       TU_ACCESS_CCU_COLOR_READ |
@@ -139,7 +146,8 @@ enum tu_cmd_access_mask {
       TU_ACCESS_CCU_COLOR_INCOHERENT_READ |
       TU_ACCESS_CCU_DEPTH_INCOHERENT_READ |
       TU_ACCESS_SYSMEM_READ |
-      TU_ACCESS_BINDLESS_DESCRIPTOR_READ,
+      TU_ACCESS_BINDLESS_DESCRIPTOR_READ |
+      TU_ACCESS_CCHE_READ,
 
    TU_ACCESS_WRITE =
       TU_ACCESS_UCHE_WRITE |
@@ -186,10 +194,11 @@ enum tu_cmd_flush_bits {
    TU_CMD_FLAG_CCU_INVALIDATE_COLOR = 1 << 3,
    TU_CMD_FLAG_CACHE_FLUSH = 1 << 4,
    TU_CMD_FLAG_CACHE_INVALIDATE = 1 << 5,
-   TU_CMD_FLAG_WAIT_MEM_WRITES = 1 << 6,
-   TU_CMD_FLAG_WAIT_FOR_IDLE = 1 << 7,
-   TU_CMD_FLAG_WAIT_FOR_ME = 1 << 8,
-   TU_CMD_FLAG_BINDLESS_DESCRIPTOR_INVALIDATE = 1 << 9,
+   TU_CMD_FLAG_CCHE_INVALIDATE = 1 << 6,
+   TU_CMD_FLAG_WAIT_MEM_WRITES = 1 << 7,
+   TU_CMD_FLAG_WAIT_FOR_IDLE = 1 << 8,
+   TU_CMD_FLAG_WAIT_FOR_ME = 1 << 9,
+   TU_CMD_FLAG_BINDLESS_DESCRIPTOR_INVALIDATE = 1 << 10,
 
    TU_CMD_FLAG_ALL_FLUSH =
       TU_CMD_FLAG_CCU_FLUSH_DEPTH |
@@ -205,6 +214,7 @@ enum tu_cmd_flush_bits {
       TU_CMD_FLAG_CCU_INVALIDATE_COLOR |
       TU_CMD_FLAG_CACHE_INVALIDATE |
       TU_CMD_FLAG_BINDLESS_DESCRIPTOR_INVALIDATE |
+      TU_CMD_FLAG_CCHE_INVALIDATE |
       /* Treat CP_WAIT_FOR_ME as a "cache" that needs to be invalidated when a
        * a command that needs CP_WAIT_FOR_ME is executed. This means we may
        * insert an extra WAIT_FOR_ME before an indirect command requiring it
diff --git a/src/freedreno/vulkan/tu_knl.h b/src/freedreno/vulkan/tu_knl.h
index e9293e3d08b..f10ba6fdd09 100644
--- a/src/freedreno/vulkan/tu_knl.h
+++ b/src/freedreno/vulkan/tu_knl.h
@@ -15,12 +15,12 @@
 struct tu_u_trace_syncobj;
 struct vdrm_bo;
 
-enum tu_bo_alloc_flags
-{
+enum tu_bo_alloc_flags {
    TU_BO_ALLOC_NO_FLAGS = 0,
    TU_BO_ALLOC_ALLOW_DUMP = 1 << 0,
    TU_BO_ALLOC_GPU_READ_ONLY = 1 << 1,
    TU_BO_ALLOC_REPLAYABLE = 1 << 2,
+   TU_BO_ALLOC_DMABUF = 1 << 4,
 };
 
 /* Define tu_timeline_sync type based on drm syncobj for a point type
diff --git a/src/freedreno/vulkan/tu_knl_drm_msm.cc b/src/freedreno/vulkan/tu_knl_drm_msm.cc
index 581a65e0e5b..7f48b3cb48e 100644
--- a/src/freedreno/vulkan/tu_knl_drm_msm.cc
+++ b/src/freedreno/vulkan/tu_knl_drm_msm.cc
@@ -321,44 +321,68 @@ tu_free_zombie_vma_locked(struct tu_device *dev, bool wait)
          last_signaled_fence = vma->fence;
       }
 
-      /* Ensure that internal kernel's vma is freed. */
-      struct drm_msm_gem_info req = {
-         .handle = vma->gem_handle,
-         .info = MSM_INFO_SET_IOVA,
-         .value = 0,
-      };
+      if (vma->gem_handle) {
+         /* Ensure that internal kernel's vma is freed. */
+         struct drm_msm_gem_info req = {
+            .handle = vma->gem_handle,
+            .info = MSM_INFO_SET_IOVA,
+            .value = 0,
+         };
+
+         int ret =
+            drmCommandWriteRead(dev->fd, DRM_MSM_GEM_INFO, &req, sizeof(req));
+         if (ret < 0) {
+            mesa_loge("MSM_INFO_SET_IOVA(0) failed! %d (%s)", ret,
+                      strerror(errno));
+            return VK_ERROR_UNKNOWN;
+         }
 
-      int ret =
-         drmCommandWriteRead(dev->fd, DRM_MSM_GEM_INFO, &req, sizeof(req));
-      if (ret < 0) {
-         mesa_loge("MSM_INFO_SET_IOVA(0) failed! %d (%s)", ret,
-                   strerror(errno));
-         return VK_ERROR_UNKNOWN;
-      }
+         tu_gem_close(dev, vma->gem_handle);
 
-      tu_gem_close(dev, vma->gem_handle);
+         util_vma_heap_free(&dev->vma, vma->iova, vma->size);
+      }
 
-      util_vma_heap_free(&dev->vma, vma->iova, vma->size);
       u_vector_remove(&dev->zombie_vmas);
    }
 
    return VK_SUCCESS;
 }
 
+static bool
+tu_restore_from_zombie_vma_locked(struct tu_device *dev,
+                                  uint32_t gem_handle,
+                                  uint64_t *iova)
+{
+   struct tu_zombie_vma *vma;
+   u_vector_foreach (vma, &dev->zombie_vmas) {
+      if (vma->gem_handle == gem_handle) {
+         *iova = vma->iova;
+
+         /* mark to skip later gem and iova cleanup */
+         vma->gem_handle = 0;
+         return true;
+      }
+   }
+
+   return false;
+}
+
 static VkResult
-msm_allocate_userspace_iova(struct tu_device *dev,
-                            uint32_t gem_handle,
-                            uint64_t size,
-                            uint64_t client_iova,
-                            enum tu_bo_alloc_flags flags,
-                            uint64_t *iova)
+msm_allocate_userspace_iova_locked(struct tu_device *dev,
+                                   uint32_t gem_handle,
+                                   uint64_t size,
+                                   uint64_t client_iova,
+                                   enum tu_bo_alloc_flags flags,
+                                   uint64_t *iova)
 {
    VkResult result;
 
-   mtx_lock(&dev->vma_mutex);
-
    *iova = 0;
 
+   if ((flags & TU_BO_ALLOC_DMABUF) &&
+       tu_restore_from_zombie_vma_locked(dev, gem_handle, iova))
+      return VK_SUCCESS;
+
    tu_free_zombie_vma_locked(dev, false);
 
    result = tu_allocate_userspace_iova(dev, size, client_iova, flags, iova);
@@ -372,8 +396,6 @@ msm_allocate_userspace_iova(struct tu_device *dev,
       result = tu_allocate_userspace_iova(dev, size, client_iova, flags, iova);
    }
 
-   mtx_unlock(&dev->vma_mutex);
-
    if (result != VK_SUCCESS)
       return result;
 
@@ -386,6 +408,7 @@ msm_allocate_userspace_iova(struct tu_device *dev,
    int ret =
       drmCommandWriteRead(dev->fd, DRM_MSM_GEM_INFO, &req, sizeof(req));
    if (ret < 0) {
+      util_vma_heap_free(&dev->vma, *iova, size);
       mesa_loge("MSM_INFO_SET_IOVA failed! %d (%s)", ret, strerror(errno));
       return VK_ERROR_OUT_OF_HOST_MEMORY;
    }
@@ -420,8 +443,8 @@ tu_bo_init(struct tu_device *dev,
    assert(!client_iova || dev->physical_device->has_set_iova);
 
    if (dev->physical_device->has_set_iova) {
-      result = msm_allocate_userspace_iova(dev, gem_handle, size, client_iova,
-                                           flags, &iova);
+      result = msm_allocate_userspace_iova_locked(dev, gem_handle, size,
+                                                  client_iova, flags, &iova);
    } else {
       result = tu_allocate_kernel_iova(dev, gem_handle, &iova);
    }
@@ -445,6 +468,8 @@ tu_bo_init(struct tu_device *dev,
       if (!new_ptr) {
          dev->bo_count--;
          mtx_unlock(&dev->bo_mutex);
+         if (dev->physical_device->has_set_iova)
+            util_vma_heap_free(&dev->vma, iova, size);
          tu_gem_close(dev, gem_handle);
          return VK_ERROR_OUT_OF_HOST_MEMORY;
       }
@@ -506,6 +531,20 @@ tu_bo_set_kernel_name(struct tu_device *dev, struct tu_bo *bo, const char *name)
    }
 }
 
+static inline void
+msm_vma_lock(struct tu_device *dev)
+{
+   if (dev->physical_device->has_set_iova)
+      mtx_lock(&dev->vma_mutex);
+}
+
+static inline void
+msm_vma_unlock(struct tu_device *dev)
+{
+   if (dev->physical_device->has_set_iova)
+      mtx_unlock(&dev->vma_mutex);
+}
+
 static VkResult
 msm_bo_init(struct tu_device *dev,
             struct tu_bo **out_bo,
@@ -541,9 +580,15 @@ msm_bo_init(struct tu_device *dev,
    struct tu_bo* bo = tu_device_lookup_bo(dev, req.handle);
    assert(bo && bo->gem_handle == 0);
 
+   assert(!(flags & TU_BO_ALLOC_DMABUF));
+
+   msm_vma_lock(dev);
+
    VkResult result =
       tu_bo_init(dev, bo, req.handle, size, client_iova, flags, name);
 
+   msm_vma_unlock(dev);
+
    if (result != VK_SUCCESS)
       memset(bo, 0, sizeof(*bo));
    else
@@ -591,11 +636,13 @@ msm_bo_init_dmabuf(struct tu_device *dev,
     * to happen in parallel.
     */
    u_rwlock_wrlock(&dev->dma_bo_lock);
+   msm_vma_lock(dev);
 
    uint32_t gem_handle;
    int ret = drmPrimeFDToHandle(dev->fd, prime_fd,
                                 &gem_handle);
    if (ret) {
+      msm_vma_unlock(dev);
       u_rwlock_wrunlock(&dev->dma_bo_lock);
       return vk_error(dev, VK_ERROR_INVALID_EXTERNAL_HANDLE);
    }
@@ -604,6 +651,7 @@ msm_bo_init_dmabuf(struct tu_device *dev,
 
    if (bo->refcnt != 0) {
       p_atomic_inc(&bo->refcnt);
+      msm_vma_unlock(dev);
       u_rwlock_wrunlock(&dev->dma_bo_lock);
 
       *out_bo = bo;
@@ -611,13 +659,14 @@ msm_bo_init_dmabuf(struct tu_device *dev,
    }
 
    VkResult result =
-      tu_bo_init(dev, bo, gem_handle, size, 0, TU_BO_ALLOC_NO_FLAGS, "dmabuf");
+      tu_bo_init(dev, bo, gem_handle, size, 0, TU_BO_ALLOC_DMABUF, "dmabuf");
 
    if (result != VK_SUCCESS)
       memset(bo, 0, sizeof(*bo));
    else
       *out_bo = bo;
 
+   msm_vma_unlock(dev);
    u_rwlock_wrunlock(&dev->dma_bo_lock);
 
    return result;
diff --git a/src/freedreno/vulkan/tu_knl_drm_virtio.cc b/src/freedreno/vulkan/tu_knl_drm_virtio.cc
index 999a4af2fd4..e69c370dbab 100644
--- a/src/freedreno/vulkan/tu_knl_drm_virtio.cc
+++ b/src/freedreno/vulkan/tu_knl_drm_virtio.cc
@@ -412,14 +412,16 @@ tu_free_zombie_vma_locked(struct tu_device *dev, bool wait)
          last_signaled_fence = vma->fence;
       }
 
-      set_iova(dev, vma->res_id, 0);
-
       u_vector_remove(&dev->zombie_vmas);
 
-      struct tu_zombie_vma *vma2 = (struct tu_zombie_vma *)
-            u_vector_add(&vdev->zombie_vmas_stage_2);
+      if (vma->gem_handle) {
+         set_iova(dev, vma->res_id, 0);
+
+         struct tu_zombie_vma *vma2 =
+            (struct tu_zombie_vma *) u_vector_add(&vdev->zombie_vmas_stage_2);
 
-      *vma2 = *vma;
+         *vma2 = *vma;
+      }
    }
 
    /* And _then_ close the GEM handles: */
@@ -434,19 +436,44 @@ tu_free_zombie_vma_locked(struct tu_device *dev, bool wait)
    return VK_SUCCESS;
 }
 
+static bool
+tu_restore_from_zombie_vma_locked(struct tu_device *dev,
+                                  uint32_t gem_handle,
+                                  uint64_t *iova)
+{
+   struct tu_zombie_vma *vma;
+   u_vector_foreach (vma, &dev->zombie_vmas) {
+      if (vma->gem_handle == gem_handle) {
+         *iova = vma->iova;
+
+         /* mark to skip later vdrm bo and iova cleanup */
+         vma->gem_handle = 0;
+         return true;
+      }
+   }
+
+   return false;
+}
+
 static VkResult
-virtio_allocate_userspace_iova(struct tu_device *dev,
-                               uint64_t size,
-                               uint64_t client_iova,
-                               enum tu_bo_alloc_flags flags,
-                               uint64_t *iova)
+virtio_allocate_userspace_iova_locked(struct tu_device *dev,
+                                      uint32_t gem_handle,
+                                      uint64_t size,
+                                      uint64_t client_iova,
+                                      enum tu_bo_alloc_flags flags,
+                                      uint64_t *iova)
 {
    VkResult result;
 
-   mtx_lock(&dev->vma_mutex);
-
    *iova = 0;
 
+   if (flags & TU_BO_ALLOC_DMABUF) {
+      assert(gem_handle);
+
+      if (tu_restore_from_zombie_vma_locked(dev, gem_handle, iova))
+         return VK_SUCCESS;
+   }
+
    tu_free_zombie_vma_locked(dev, false);
 
    result = tu_allocate_userspace_iova(dev, size, client_iova, flags, iova);
@@ -460,8 +487,6 @@ virtio_allocate_userspace_iova(struct tu_device *dev,
       result = tu_allocate_userspace_iova(dev, size, client_iova, flags, iova);
    }
 
-   mtx_unlock(&dev->vma_mutex);
-
    return result;
 }
 
@@ -571,12 +596,8 @@ virtio_bo_init(struct tu_device *dev,
          .size = size,
    };
    VkResult result;
-
-   result = virtio_allocate_userspace_iova(dev, size, client_iova,
-                                           flags, &req.iova);
-   if (result != VK_SUCCESS) {
-      return result;
-   }
+   uint32_t res_id;
+   struct tu_bo *bo;
 
    if (mem_property & VK_MEMORY_PROPERTY_HOST_CACHED_BIT) {
       if (mem_property & VK_MEMORY_PROPERTY_HOST_COHERENT_BIT) {
@@ -601,6 +622,16 @@ virtio_bo_init(struct tu_device *dev,
    if (flags & TU_BO_ALLOC_GPU_READ_ONLY)
       req.flags |= MSM_BO_GPU_READONLY;
 
+   assert(!(flags & TU_BO_ALLOC_DMABUF));
+
+   mtx_lock(&dev->vma_mutex);
+   result = virtio_allocate_userspace_iova_locked(dev, 0, size, client_iova,
+                                                  flags, &req.iova);
+   mtx_unlock(&dev->vma_mutex);
+
+   if (result != VK_SUCCESS)
+      return result;
+
    /* tunneled cmds are processed separately on host side,
     * before the renderer->get_blob() callback.. the blob_id
     * is used to link the created bo to the get_blob() call
@@ -611,27 +642,28 @@ virtio_bo_init(struct tu_device *dev,
       vdrm_bo_create(vdev->vdrm, size, blob_flags, req.blob_id, &req.hdr);
 
    if (!handle) {
-      util_vma_heap_free(&dev->vma, req.iova, size);
-      return vk_error(dev, VK_ERROR_OUT_OF_DEVICE_MEMORY);
+      result = VK_ERROR_OUT_OF_DEVICE_MEMORY;
+      goto fail;
    }
 
-   uint32_t res_id = vdrm_handle_to_res_id(vdev->vdrm, handle);
-   struct tu_bo* bo = tu_device_lookup_bo(dev, res_id);
+   res_id = vdrm_handle_to_res_id(vdev->vdrm, handle);
+   bo = tu_device_lookup_bo(dev, res_id);
    assert(bo && bo->gem_handle == 0);
 
    bo->res_id = res_id;
 
    result = tu_bo_init(dev, bo, handle, size, req.iova, flags, name);
-   if (result != VK_SUCCESS)
+   if (result != VK_SUCCESS) {
       memset(bo, 0, sizeof(*bo));
-   else
-      *out_bo = bo;
+      goto fail;
+   }
+
+   *out_bo = bo;
 
    /* We don't use bo->name here because for the !TU_DEBUG=bo case bo->name is NULL. */
    tu_bo_set_kernel_name(dev, bo, name);
 
-   if (result == VK_SUCCESS &&
-       (mem_property & VK_MEMORY_PROPERTY_HOST_CACHED_BIT) &&
+   if ((mem_property & VK_MEMORY_PROPERTY_HOST_CACHED_BIT) &&
        !(mem_property & VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)) {
       tu_bo_map(dev, bo);
 
@@ -644,6 +676,12 @@ virtio_bo_init(struct tu_device *dev,
       tu_sync_cache_bo(dev, bo, 0, VK_WHOLE_SIZE, TU_MEM_SYNC_CACHE_TO_GPU);
    }
 
+   return VK_SUCCESS;
+
+fail:
+   mtx_lock(&dev->vma_mutex);
+   util_vma_heap_free(&dev->vma, req.iova, size);
+   mtx_unlock(&dev->vma_mutex);
    return result;
 }
 
@@ -666,11 +704,6 @@ virtio_bo_init_dmabuf(struct tu_device *dev,
    /* iova allocation needs to consider the object's *real* size: */
    size = real_size;
 
-   uint64_t iova;
-   result = virtio_allocate_userspace_iova(dev, size, 0, TU_BO_ALLOC_NO_FLAGS, &iova);
-   if (result != VK_SUCCESS)
-      return result;
-
    /* Importing the same dmabuf several times would yield the same
     * gem_handle. Thus there could be a race when destroying
     * BO and importing the same dmabuf from different threads.
@@ -678,8 +711,10 @@ virtio_bo_init_dmabuf(struct tu_device *dev,
     * to happen in parallel.
     */
    u_rwlock_wrlock(&dev->dma_bo_lock);
+   mtx_lock(&dev->vma_mutex);
 
    uint32_t handle, res_id;
+   uint64_t iova;
 
    handle = vdrm_dmabuf_to_handle(vdrm, prime_fd);
    if (!handle) {
@@ -689,6 +724,7 @@ virtio_bo_init_dmabuf(struct tu_device *dev,
 
    res_id = vdrm_handle_to_res_id(vdrm, handle);
    if (!res_id) {
+      /* XXX gem_handle potentially leaked here since no refcnt */
       result = vk_error(dev, VK_ERROR_INVALID_EXTERNAL_HANDLE);
       goto out_unlock;
    }
@@ -702,21 +738,25 @@ virtio_bo_init_dmabuf(struct tu_device *dev,
       goto out_unlock;
    }
 
-   result = tu_bo_init(dev, bo, handle, size, iova,
-                       TU_BO_ALLOC_NO_FLAGS, "dmabuf");
-   if (result != VK_SUCCESS)
-      memset(bo, 0, sizeof(*bo));
-   else
-      *out_bo = bo;
+   result = virtio_allocate_userspace_iova_locked(dev, handle, size, 0,
+                                                  TU_BO_ALLOC_DMABUF, &iova);
+   if (result != VK_SUCCESS) {
+      vdrm_bo_close(dev->vdev->vdrm, handle);
+      goto out_unlock;
+   }
 
-out_unlock:
-   u_rwlock_wrunlock(&dev->dma_bo_lock);
+   result =
+      tu_bo_init(dev, bo, handle, size, iova, TU_BO_ALLOC_NO_FLAGS, "dmabuf");
    if (result != VK_SUCCESS) {
-      mtx_lock(&dev->vma_mutex);
       util_vma_heap_free(&dev->vma, iova, size);
-      mtx_unlock(&dev->vma_mutex);
+      memset(bo, 0, sizeof(*bo));
+   } else {
+      *out_bo = bo;
    }
 
+out_unlock:
+   mtx_unlock(&dev->vma_mutex);
+   u_rwlock_wrunlock(&dev->dma_bo_lock);
    return result;
 }
 
diff --git a/src/freedreno/vulkan/tu_pipeline.cc b/src/freedreno/vulkan/tu_pipeline.cc
index e0a119af4ac..a775f83ca03 100644
--- a/src/freedreno/vulkan/tu_pipeline.cc
+++ b/src/freedreno/vulkan/tu_pipeline.cc
@@ -1963,6 +1963,9 @@ tu_pipeline_builder_parse_libraries(struct tu_pipeline_builder *builder,
          }
       }
 
+      BITSET_OR(pipeline->static_state_mask, pipeline->static_state_mask,
+                library->base.static_state_mask);
+
       vk_graphics_pipeline_state_merge(&builder->graphics_state,
                                        &library->graphics_state);
    }
@@ -3276,6 +3279,9 @@ tu_pipeline_builder_emit_state(struct tu_pipeline_builder *builder,
     * binding the pipeline by making it "dynamic".
     */
    BITSET_ANDNOT(remove, remove, keep);
+
+   BITSET_OR(pipeline->static_state_mask, pipeline->static_state_mask, remove);
+
    BITSET_OR(builder->graphics_state.dynamic, builder->graphics_state.dynamic,
              remove);
 }
diff --git a/src/freedreno/vulkan/tu_pipeline.h b/src/freedreno/vulkan/tu_pipeline.h
index a99675ccd4c..2c7b7f5b887 100644
--- a/src/freedreno/vulkan/tu_pipeline.h
+++ b/src/freedreno/vulkan/tu_pipeline.h
@@ -138,6 +138,8 @@ struct tu_pipeline
    uint32_t set_state_mask;
    struct tu_draw_state dynamic_state[TU_DYNAMIC_STATE_COUNT];
 
+   BITSET_DECLARE(static_state_mask, MESA_VK_DYNAMIC_GRAPHICS_STATE_ENUM_MAX);
+
    struct {
       bool raster_order_attachment_access;
    } ds;
diff --git a/src/freedreno/vulkan/tu_shader.cc b/src/freedreno/vulkan/tu_shader.cc
index 2740e7aa9ea..1c2d1451810 100644
--- a/src/freedreno/vulkan/tu_shader.cc
+++ b/src/freedreno/vulkan/tu_shader.cc
@@ -2104,20 +2104,21 @@ tu_shader_deserialize(struct vk_pipeline_cache *cache,
                       struct blob_reader *blob);
 
 static void
-tu_shader_destroy(struct vk_device *device,
-                  struct vk_pipeline_cache_object *object)
+tu_shader_pipeline_cache_object_destroy(struct vk_device *vk_device,
+                                        struct vk_pipeline_cache_object *object)
 {
+   struct tu_device *device = container_of(vk_device, struct tu_device, vk);
    struct tu_shader *shader =
       container_of(object, struct tu_shader, base);
 
    vk_pipeline_cache_object_finish(&shader->base);
-   vk_free(&device->alloc, shader);
+   tu_shader_destroy(device, shader);
 }
 
 const struct vk_pipeline_cache_object_ops tu_shader_ops = {
    .serialize = tu_shader_serialize,
    .deserialize = tu_shader_deserialize,
-   .destroy = tu_shader_destroy,
+   .destroy = tu_shader_pipeline_cache_object_destroy,
 };
 
 static struct tu_shader *
@@ -2376,6 +2377,8 @@ tu_shader_create(struct tu_device *dev,
                                    executable_info);
    }
 
+   ir3_shader_destroy(ir3_shader);
+
    shader->view_mask = key->multiview_mask;
 
    switch (shader->variant->type) {
@@ -2778,6 +2781,7 @@ tu_empty_fs_create(struct tu_device *dev, struct tu_shader **shader,
    struct ir3_shader *ir3_shader =
       ir3_shader_from_nir(dev->compiler, fs_b.shader, &options, &so_info);
    (*shader)->variant = ir3_shader_create_variant(ir3_shader, &key, false);
+   ir3_shader_destroy(ir3_shader);
 
    return tu_upload_shader(dev, *shader);
 }
@@ -2846,5 +2850,10 @@ tu_shader_destroy(struct tu_device *dev,
    if (shader->pvtmem_bo)
       tu_bo_finish(dev, shader->pvtmem_bo);
 
+   if (shader->variant)
+      ralloc_free((void *)shader->variant);
+   if (shader->safe_const_variant)
+      ralloc_free((void *)shader->safe_const_variant);
+
    vk_free(&dev->vk.alloc, shader);
 }
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_init.c b/src/gallium/auxiliary/gallivm/lp_bld_init.c
index cd2108f3a08..1345d85b224 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_init.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_init.c
@@ -609,7 +609,11 @@ gallivm_compile_module(struct gallivm_state *gallivm)
    LLVMRunPasses(gallivm->module, passes, LLVMGetExecutionEngineTargetMachine(gallivm->engine), opts);
 
    if (!(gallivm_perf & GALLIVM_PERF_NO_OPT))
+#if LLVM_VERSION_MAJOR >= 18
+      strcpy(passes, "sroa,early-cse,simplifycfg,reassociate,mem2reg,instsimplify,instcombine<no-verify-fixpoint>");
+#else
       strcpy(passes, "sroa,early-cse,simplifycfg,reassociate,mem2reg,instsimplify,instcombine");
+#endif
    else
       strcpy(passes, "mem2reg");
 
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c b/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c
index 17212874152..f2d6eadeef0 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c
@@ -27,6 +27,7 @@
  **************************************************************************/
 
 #include "util/u_memory.h"
+#include "lp_bld_const.h"
 #include "lp_bld_type.h"
 #include "lp_bld_init.h"
 #include "lp_bld_flow.h"
@@ -271,18 +272,17 @@ void lp_exec_bgnloop(struct lp_exec_mask *mask, bool load)
 }
 
 void lp_exec_endloop(struct gallivm_state *gallivm,
-                     struct lp_exec_mask *mask)
+                     struct lp_exec_mask *exec_mask,
+                     struct lp_build_mask_context *mask)
 {
-   LLVMBuilderRef builder = mask->bld->gallivm->builder;
-   struct function_ctx *ctx = func_ctx(mask);
+   LLVMBuilderRef builder = exec_mask->bld->gallivm->builder;
+   struct function_ctx *ctx = func_ctx(exec_mask);
    LLVMBasicBlockRef endloop;
-   LLVMTypeRef int_type = LLVMInt32TypeInContext(mask->bld->gallivm->context);
-   LLVMTypeRef reg_type = LLVMIntTypeInContext(gallivm->context,
-                                               mask->bld->type.width *
-                                               mask->bld->type.length);
+   LLVMTypeRef int_type = LLVMInt32TypeInContext(exec_mask->bld->gallivm->context);
+   LLVMTypeRef mask_type = LLVMIntTypeInContext(exec_mask->bld->gallivm->context, exec_mask->bld->type.length);
    LLVMValueRef i1cond, i2cond, icond, limiter;
 
-   assert(mask->break_mask);
+   assert(exec_mask->break_mask);
 
    assert(ctx->loop_stack_size);
    if (ctx->loop_stack_size > LP_MAX_TGSI_NESTING) {
@@ -294,14 +294,14 @@ void lp_exec_endloop(struct gallivm_state *gallivm,
    /*
     * Restore the cont_mask, but don't pop
     */
-   mask->cont_mask = ctx->loop_stack[ctx->loop_stack_size - 1].cont_mask;
-   lp_exec_mask_update(mask);
+   exec_mask->cont_mask = ctx->loop_stack[ctx->loop_stack_size - 1].cont_mask;
+   lp_exec_mask_update(exec_mask);
 
    /*
     * Unlike the continue mask, the break_mask must be preserved across loop
     * iterations
     */
-   LLVMBuildStore(builder, mask->break_mask, ctx->break_var);
+   LLVMBuildStore(builder, exec_mask->break_mask, ctx->break_var);
 
    /* Decrement the loop limiter */
    limiter = LLVMBuildLoad2(builder, int_type, ctx->loop_limiter, "");
@@ -314,12 +314,18 @@ void lp_exec_endloop(struct gallivm_state *gallivm,
 
    LLVMBuildStore(builder, limiter, ctx->loop_limiter);
 
-   /* i1cond = (mask != 0) */
+   LLVMValueRef end_mask = exec_mask->exec_mask;
+   if (mask)
+      end_mask = LLVMBuildAnd(builder, exec_mask->exec_mask, lp_build_mask_value(mask), "");
+   end_mask = LLVMBuildICmp(builder, LLVMIntNE, end_mask, lp_build_zero(gallivm, exec_mask->bld->type), "");
+   end_mask = LLVMBuildBitCast(builder, end_mask, mask_type, "");
+
+   /* i1cond = (end_mask != 0) */
    i1cond = LLVMBuildICmp(
       builder,
       LLVMIntNE,
-      LLVMBuildBitCast(builder, mask->exec_mask, reg_type, ""),
-      LLVMConstNull(reg_type), "i1cond");
+      end_mask,
+      LLVMConstNull(mask_type), "i1cond");
 
    /* i2cond = (looplimiter > 0) */
    i2cond = LLVMBuildICmp(
@@ -331,7 +337,7 @@ void lp_exec_endloop(struct gallivm_state *gallivm,
    /* if( i1cond && i2cond ) */
    icond = LLVMBuildAnd(builder, i1cond, i2cond, "");
 
-   endloop = lp_build_insert_new_block(mask->bld->gallivm, "endloop");
+   endloop = lp_build_insert_new_block(exec_mask->bld->gallivm, "endloop");
 
    LLVMBuildCondBr(builder,
                    icond, ctx->loop_block, endloop);
@@ -341,14 +347,14 @@ void lp_exec_endloop(struct gallivm_state *gallivm,
    assert(ctx->loop_stack_size);
    --ctx->loop_stack_size;
    --ctx->bgnloop_stack_size;
-   mask->cont_mask = ctx->loop_stack[ctx->loop_stack_size].cont_mask;
-   mask->break_mask = ctx->loop_stack[ctx->loop_stack_size].break_mask;
+   exec_mask->cont_mask = ctx->loop_stack[ctx->loop_stack_size].cont_mask;
+   exec_mask->break_mask = ctx->loop_stack[ctx->loop_stack_size].break_mask;
    ctx->loop_block = ctx->loop_stack[ctx->loop_stack_size].loop_block;
    ctx->break_var = ctx->loop_stack[ctx->loop_stack_size].break_var;
    ctx->break_type = ctx->break_type_stack[ctx->loop_stack_size +
          ctx->switch_stack_size];
 
-   lp_exec_mask_update(mask);
+   lp_exec_mask_update(exec_mask);
 }
 
 void lp_exec_mask_cond_push(struct lp_exec_mask *mask,
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_ir_common.h b/src/gallium/auxiliary/gallivm/lp_bld_ir_common.h
index 0e0a7f74f1b..0def76ebd92 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_ir_common.h
+++ b/src/gallium/auxiliary/gallivm/lp_bld_ir_common.h
@@ -101,6 +101,8 @@ struct lp_exec_mask {
    int function_stack_size;
 };
 
+struct lp_build_mask_context;
+
 void lp_exec_mask_function_init(struct lp_exec_mask *mask, int function_idx);
 void lp_exec_mask_init(struct lp_exec_mask *mask, struct lp_build_context *bld);
 void lp_exec_mask_fini(struct lp_exec_mask *mask);
@@ -112,7 +114,8 @@ void lp_exec_mask_update(struct lp_exec_mask *mask);
 void lp_exec_bgnloop_post_phi(struct lp_exec_mask *mask);
 void lp_exec_bgnloop(struct lp_exec_mask *mask, bool load_mask);
 void lp_exec_endloop(struct gallivm_state *gallivm,
-                     struct lp_exec_mask *mask);
+                     struct lp_exec_mask *exec_mask,
+                     struct lp_build_mask_context *mask);
 void lp_exec_mask_cond_push(struct lp_exec_mask *mask,
                             LLVMValueRef val);
 void lp_exec_mask_cond_invert(struct lp_exec_mask *mask);
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c b/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c
index 9a730ad6c66..fc440e9c71e 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c
@@ -2024,7 +2024,7 @@ static void bgnloop(struct lp_build_nir_context *bld_base)
 static void endloop(struct lp_build_nir_context *bld_base)
 {
    struct lp_build_nir_soa_context *bld = (struct lp_build_nir_soa_context *)bld_base;
-   lp_exec_endloop(bld_base->base.gallivm, &bld->exec_mask);
+   lp_exec_endloop(bld_base->base.gallivm, &bld->exec_mask, bld->mask);
 }
 
 static void if_cond(struct lp_build_nir_context *bld_base, LLVMValueRef cond)
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_tgsi_soa.c b/src/gallium/auxiliary/gallivm/lp_bld_tgsi_soa.c
index d4b0f8846c2..6b2a10e1b8a 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_tgsi_soa.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_tgsi_soa.c
@@ -4268,7 +4268,7 @@ endloop_emit(
 {
    struct lp_build_tgsi_soa_context * bld = lp_soa_context(bld_base);
 
-   lp_exec_endloop(bld_base->base.gallivm, &bld->exec_mask);
+   lp_exec_endloop(bld_base->base.gallivm, &bld->exec_mask, bld->mask);
 }
 
 static void
diff --git a/src/gallium/auxiliary/meson.build b/src/gallium/auxiliary/meson.build
index 96b0272c69b..17522637bcc 100644
--- a/src/gallium/auxiliary/meson.build
+++ b/src/gallium/auxiliary/meson.build
@@ -549,7 +549,7 @@ if with_tests
   )
 endif
 
-libgalliumvl_stub = static_library(
+_libgalliumvl_stub = static_library(
   'galliumvl_stub',
   'vl/vl_stubs.c',
   c_args : [c_msvc_compat_args],
@@ -571,6 +571,15 @@ libgalliumvl = static_library(
   build_by_default : false,
 )
 
+# some drivers export their screen creation function globally, so all frontends have to contain the
+# full libgalliumvl. So we'll handle this here globally for everybody.
+if (with_gallium_va or with_gallium_vdpau or with_gallium_omx != 'disabled' or
+   with_dri or with_gallium_radeonsi)
+  libgalliumvl_stub = libgalliumvl
+else
+  libgalliumvl_stub = _libgalliumvl_stub
+endif
+
 # XXX: The dependencies here may be off...
 libgalliumvlwinsys = static_library(
   'galliumvlwinsys',
diff --git a/src/gallium/auxiliary/nir/nir_draw_helpers.c b/src/gallium/auxiliary/nir/nir_draw_helpers.c
index 630f37b97e7..e10687cf8ef 100644
--- a/src/gallium/auxiliary/nir/nir_draw_helpers.c
+++ b/src/gallium/auxiliary/nir/nir_draw_helpers.c
@@ -177,6 +177,9 @@ lower_aaline_instr(nir_builder *b, nir_instr *instr, void *data)
       return false;
    if (var->data.location < FRAG_RESULT_DATA0 && var->data.location != FRAG_RESULT_COLOR)
       return false;
+   uint32_t mask = nir_intrinsic_write_mask(intrin) << var->data.location_frac;
+   if (!(mask & BITFIELD_BIT(3)))
+      return false;
 
    nir_def *out_input = intrin->src[1].ssa;
    b->cursor = nir_before_instr(instr);
@@ -223,12 +226,10 @@ lower_aaline_instr(nir_builder *b, nir_instr *instr, void *data)
 
    tmp = nir_fmul(b, nir_channel(b, tmp, 0),
                   nir_fmin(b, nir_channel(b, tmp, 1), max));
-   tmp = nir_fmul(b, nir_channel(b, out_input, 3), tmp);
+   tmp = nir_fmul(b, nir_channel(b, out_input, out_input->num_components - 1), tmp);
 
-   nir_def *out = nir_vec4(b, nir_channel(b, out_input, 0),
-                                 nir_channel(b, out_input, 1),
-                                 nir_channel(b, out_input, 2),
-                                 tmp);
+   nir_def *out = nir_vector_insert_imm(b, out_input, tmp,
+                                        out_input->num_components - 1);
    nir_src_rewrite(&intrin->src[1], out);
    return true;
 }
diff --git a/src/gallium/auxiliary/util/u_blitter.c b/src/gallium/auxiliary/util/u_blitter.c
index f4a0a2f898b..3300a0f776c 100644
--- a/src/gallium/auxiliary/util/u_blitter.c
+++ b/src/gallium/auxiliary/util/u_blitter.c
@@ -2014,6 +2014,7 @@ void util_blitter_blit_generic(struct blitter_context *blitter,
                                unsigned dst_sample)
 {
    struct blitter_context_priv *ctx = (struct blitter_context_priv*)blitter;
+   unsigned count = 0;
    struct pipe_context *pipe = ctx->base.pipe;
    enum pipe_texture_target src_target = src->target;
    unsigned src_samples = src->texture->nr_samples;
@@ -2038,7 +2039,7 @@ void util_blitter_blit_generic(struct blitter_context *blitter,
 
    /* Return if there is nothing to do. */
    if (!dst_has_color && !dst_has_depth && !dst_has_stencil) {
-      return;
+      goto out;
    }
 
    bool is_scaled = dstbox->width != abs(srcbox->width) ||
@@ -2170,7 +2171,6 @@ void util_blitter_blit_generic(struct blitter_context *blitter,
    }
 
    /* Set samplers. */
-   unsigned count = 0;
    if (src_has_depth && src_has_stencil &&
        (dst_has_color || (dst_has_depth && dst_has_stencil))) {
       /* Setup two samplers, one for depth and the other one for stencil. */
@@ -2223,7 +2223,8 @@ void util_blitter_blit_generic(struct blitter_context *blitter,
    do_blits(ctx, dst, dstbox, src, src_width0, src_height0,
             srcbox, dst_has_depth || dst_has_stencil, use_txf, sample0_only,
             dst_sample);
-
+   util_blitter_unset_running_flag(blitter);
+out:
    util_blitter_restore_vertex_states(blitter);
    util_blitter_restore_fragment_states(blitter);
    util_blitter_restore_textures_internal(blitter, count);
@@ -2232,7 +2233,6 @@ void util_blitter_blit_generic(struct blitter_context *blitter,
       pipe->set_scissor_states(pipe, 0, 1, &ctx->base.saved_scissor);
    }
    util_blitter_restore_render_cond(blitter);
-   util_blitter_unset_running_flag(blitter);
 }
 
 void
@@ -2952,33 +2952,36 @@ util_blitter_stencil_fallback(struct blitter_context *blitter,
    struct pipe_stencil_ref sr = { { (1u << stencil_bits) - 1 } };
    pipe->set_stencil_ref(pipe, sr);
 
-   union blitter_attrib coord;
-   get_texcoords(src_view, src->width0, src->height0,
-                 srcbox->x, srcbox->y,
-                 srcbox->x + srcbox->width, srcbox->y + srcbox->height,
-                 srcbox->z, 0, true,
-                 &coord);
-
-   for (int i = 0; i < stencil_bits; ++i) {
-      uint32_t mask = 1 << i;
-      struct pipe_constant_buffer cb = {
-         .user_buffer = &mask,
-         .buffer_size = sizeof(mask),
-      };
-      pipe->set_constant_buffer(pipe, PIPE_SHADER_FRAGMENT, blitter->cb_slot,
-                                false, &cb);
-
-      pipe->bind_depth_stencil_alpha_state(pipe,
-         get_stencil_blit_fallback_dsa(ctx, i));
-
-      blitter->draw_rectangle(blitter, ctx->velem_state,
-                              get_vs_passthrough_pos_generic,
-                              dstbox->x, dstbox->y,
-                              dstbox->x + dstbox->width,
-                              dstbox->y + dstbox->height,
-                              0, 1,
-                              UTIL_BLITTER_ATTRIB_TEXCOORD_XYZW,
-                              &coord);
+   for (unsigned i = 0; i <= util_res_sample_count(dst) - 1; i++) {
+      pipe->set_sample_mask(pipe, 1 << i);
+      union blitter_attrib coord;
+      get_texcoords(src_view, src->width0, src->height0,
+                  srcbox->x, srcbox->y,
+                  srcbox->x + srcbox->width, srcbox->y + srcbox->height,
+                  srcbox->z, i, true,
+                  &coord);
+
+      for (int i = 0; i < stencil_bits; ++i) {
+         uint32_t mask = 1 << i;
+         struct pipe_constant_buffer cb = {
+            .user_buffer = &mask,
+            .buffer_size = sizeof(mask),
+         };
+         pipe->set_constant_buffer(pipe, PIPE_SHADER_FRAGMENT, blitter->cb_slot,
+                                 false, &cb);
+
+         pipe->bind_depth_stencil_alpha_state(pipe,
+            get_stencil_blit_fallback_dsa(ctx, i));
+
+         blitter->draw_rectangle(blitter, ctx->velem_state,
+                                 get_vs_passthrough_pos_generic,
+                                 dstbox->x, dstbox->y,
+                                 dstbox->x + dstbox->width,
+                                 dstbox->y + dstbox->height,
+                                 0, 1,
+                                 UTIL_BLITTER_ATTRIB_TEXCOORD_XYZW,
+                                 &coord);
+      }
    }
 
    if (scissor)
diff --git a/src/gallium/auxiliary/vl/vl_compositor.c b/src/gallium/auxiliary/vl/vl_compositor.c
index 658a87adb14..c618c6dea68 100644
--- a/src/gallium/auxiliary/vl/vl_compositor.c
+++ b/src/gallium/auxiliary/vl/vl_compositor.c
@@ -259,7 +259,7 @@ init_buffers(struct vl_compositor *c)
            vertex_elems[1].vertex_buffer_index = 0;
            vertex_elems[1].src_format = PIPE_FORMAT_R32G32B32A32_FLOAT;
            vertex_elems[2].src_offset = sizeof(struct vertex2f) + sizeof(struct vertex4f);
-           vertex_elems[1].src_stride = VL_COMPOSITOR_VB_STRIDE;
+           vertex_elems[2].src_stride = VL_COMPOSITOR_VB_STRIDE;
            vertex_elems[2].instance_divisor = 0;
            vertex_elems[2].vertex_buffer_index = 0;
            vertex_elems[2].src_format = PIPE_FORMAT_R32G32B32A32_FLOAT;
diff --git a/src/gallium/auxiliary/vl/vl_stubs.c b/src/gallium/auxiliary/vl/vl_stubs.c
index 194e7a8700b..cd6b73b850b 100644
--- a/src/gallium/auxiliary/vl/vl_stubs.c
+++ b/src/gallium/auxiliary/vl/vl_stubs.c
@@ -108,6 +108,16 @@ vl_video_buffer_create_ex2(struct pipe_context *pipe,
    return NULL;
 }
 
+struct pipe_video_buffer *
+vl_video_buffer_create_as_resource(struct pipe_context *pipe,
+                                   const struct pipe_video_buffer *tmpl,
+                                   const uint64_t *modifiers,
+                                   int modifiers_count)
+{
+   assert(0);
+   return NULL;
+}
+
 void
 vl_video_buffer_destroy(struct pipe_video_buffer *buffer)
 {
@@ -145,9 +155,3 @@ vl_create_mpeg12_decoder(struct pipe_context *pipe,
    assert(0);
    return NULL;
 }
-
-/*
- * vl_zscan
- */
-const int vl_zscan_normal[] = {0};
-const int vl_zscan_alternate[] = {0};
diff --git a/src/gallium/auxiliary/vl/vl_video_buffer.c b/src/gallium/auxiliary/vl/vl_video_buffer.c
index 4d95f762510..69cc4563df7 100644
--- a/src/gallium/auxiliary/vl/vl_video_buffer.c
+++ b/src/gallium/auxiliary/vl/vl_video_buffer.c
@@ -118,21 +118,21 @@ vl_video_buffer_is_format_supported(struct pipe_screen *screen,
    vl_get_video_buffer_formats(screen, format, resource_formats);
 
    for (i = 0; i < VL_NUM_COMPONENTS; ++i) {
-      enum pipe_format format = resource_formats[i];
+      enum pipe_format fmt = resource_formats[i];
 
-      if (format == PIPE_FORMAT_NONE)
+      if (fmt == PIPE_FORMAT_NONE)
          continue;
 
       /* we at least need to sample from it */
-      if (!screen->is_format_supported(screen, format, PIPE_TEXTURE_2D, 0, 0, PIPE_BIND_SAMPLER_VIEW))
-         return false;
+      if (!screen->is_format_supported(screen, fmt, PIPE_TEXTURE_2D, 0, 0, PIPE_BIND_SAMPLER_VIEW))
+         continue;
 
-      format = vl_video_buffer_surface_format(format);
-      if (!screen->is_format_supported(screen, format, PIPE_TEXTURE_2D, 0, 0, PIPE_BIND_RENDER_TARGET))
-         return false;
+      fmt = vl_video_buffer_surface_format(fmt);
+      if (screen->is_format_supported(screen, fmt, PIPE_TEXTURE_2D, 0, 0, PIPE_BIND_RENDER_TARGET))
+         return true;
    }
 
-   return true;
+   return false;
 }
 
 unsigned
diff --git a/src/gallium/drivers/crocus/crocus_resource.c b/src/gallium/drivers/crocus/crocus_resource.c
index eed025a8003..7afb8bfe0cb 100644
--- a/src/gallium/drivers/crocus/crocus_resource.c
+++ b/src/gallium/drivers/crocus/crocus_resource.c
@@ -216,6 +216,10 @@ crocus_resource_configure_main(const struct crocus_screen *screen,
          tiling_flags = ISL_TILING_W_BIT;
    }
 
+   /* Disable aux for external memory objects. */
+   if (!res->mod_info && res->external_format != PIPE_FORMAT_NONE)
+      usage |= ISL_SURF_USAGE_DISABLE_AUX_BIT;
+
    const enum isl_format format =
       crocus_format_for_usage(&screen->devinfo, templ->format, usage).fmt;
 
diff --git a/src/gallium/drivers/etnaviv/etnaviv_rs.c b/src/gallium/drivers/etnaviv/etnaviv_rs.c
index 0d07b845172..5e11bd95ee0 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_rs.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_rs.c
@@ -711,12 +711,17 @@ etna_try_rs_blit(struct pipe_context *pctx,
       width = align(width, w_align);
 
    if (height & (h_align - 1) && height >= src_lev->height * src_yscale && height >= dst_lev->height) {
-      if (!ctx->screen->specs.single_buffer &&
-          align(height, h_align * ctx->screen->specs.pixel_pipes) <=
-          dst_lev->padded_height * src_yscale)
-         height = align(height, h_align * ctx->screen->specs.pixel_pipes);
-      else
-         height = align(height, h_align);
+      height = align(height, h_align);
+
+      /* Try to increase alignment to multi-pipe requirements to unlock
+       * multi-pipe resolve for increased performance. */
+      if (!ctx->screen->specs.single_buffer) {
+          unsigned int pipe_align = align(height, h_align * ctx->screen->specs.pixel_pipes);
+
+          if (pipe_align <= src_lev->padded_height &&
+              pipe_align <= dst_lev->padded_height * src_yscale)
+             height = pipe_align;
+      }
    }
 
    /* The padded dimensions are in samples */
diff --git a/src/gallium/drivers/etnaviv/etnaviv_screen.c b/src/gallium/drivers/etnaviv/etnaviv_screen.c
index 801562602fe..f210a98d0ce 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_screen.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_screen.c
@@ -896,7 +896,7 @@ etna_get_specs(struct etna_screen *screen)
       DBG("could not get ETNA_GPU_NUM_VARYINGS");
       goto fail;
    }
-   screen->specs.max_varyings = MAX2(val, ETNA_NUM_VARYINGS);
+   screen->specs.max_varyings = MIN2(val, ETNA_NUM_VARYINGS);
 
    /* Figure out gross GPU architecture. See rnndb/common.xml for a specific
     * description of the differences. */
diff --git a/src/gallium/drivers/etnaviv/etnaviv_util.h b/src/gallium/drivers/etnaviv/etnaviv_util.h
index 4f3061f2d2e..53f1f4ccf27 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_util.h
+++ b/src/gallium/drivers/etnaviv/etnaviv_util.h
@@ -35,14 +35,14 @@
 static inline uint32_t
 etna_float_to_fixp55(float f)
 {
-   return U_FIXED(f, 5);
+   return S_FIXED(f, 5);
 }
 
 /* float to fixp 8.8 */
 static inline uint32_t
 etna_float_to_fixp88(float f)
 {
-   return U_FIXED(f, 8);
+   return S_FIXED(f, 8);
 }
 
 /* texture size to log2 in fixp 5.5 format */
diff --git a/src/gallium/drivers/etnaviv/etnaviv_zsa.c b/src/gallium/drivers/etnaviv/etnaviv_zsa.c
index 38971e72916..7bdbf53f694 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_zsa.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_zsa.c
@@ -48,7 +48,7 @@ etna_zsa_state_create(struct pipe_context *pctx,
    cs->base = *so;
 
    cs->z_test_enabled = so->depth_enabled && so->depth_func != PIPE_FUNC_ALWAYS;
-   cs->z_write_enabled = so->depth_enabled && so->depth_writemask;
+   cs->z_write_enabled = so->depth_writemask;
 
    /* XXX does stencil[0] / stencil[1] order depend on rs->front_ccw? */
 
diff --git a/src/gallium/drivers/freedreno/a6xx/fd6_program.cc b/src/gallium/drivers/freedreno/a6xx/fd6_program.cc
index 4ee1852b757..183bba9b1af 100644
--- a/src/gallium/drivers/freedreno/a6xx/fd6_program.cc
+++ b/src/gallium/drivers/freedreno/a6xx/fd6_program.cc
@@ -119,7 +119,7 @@ fd6_emit_shader(struct fd_context *ctx, struct fd_ringbuffer *ring,
 #endif
 
    gl_shader_stage type = so->type;
-   if (type == MESA_SHADER_COMPUTE)
+   if (type == MESA_SHADER_KERNEL)
       type = MESA_SHADER_COMPUTE;
 
    enum a6xx_threadsize thrsz =
diff --git a/src/gallium/drivers/i915/i915_screen.c b/src/gallium/drivers/i915/i915_screen.c
index a6d6d67a39c..bfa7ea04b9f 100644
--- a/src/gallium/drivers/i915/i915_screen.c
+++ b/src/gallium/drivers/i915/i915_screen.c
@@ -456,7 +456,7 @@ i915_get_param(struct pipe_screen *screen, enum pipe_cap cap)
    case PIPE_CAP_MAX_TEXTURE_3D_LEVELS:
       return I915_MAX_TEXTURE_3D_LEVELS;
    case PIPE_CAP_MAX_TEXTURE_CUBE_LEVELS:
-      return 1 << (I915_MAX_TEXTURE_2D_LEVELS - 1);
+      return I915_MAX_TEXTURE_2D_LEVELS;
 
    /* Render targets. */
    case PIPE_CAP_MAX_RENDER_TARGETS:
diff --git a/src/gallium/drivers/iris/iris_batch.c b/src/gallium/drivers/iris/iris_batch.c
index 1505fe37f79..2d61048282c 100644
--- a/src/gallium/drivers/iris/iris_batch.c
+++ b/src/gallium/drivers/iris/iris_batch.c
@@ -862,8 +862,8 @@ iris_batch_name_to_string(enum iris_batch_name name)
    return names[name];
 }
 
-static inline bool
-context_or_exec_queue_was_banned(struct iris_bufmgr *bufmgr, int ret)
+bool
+iris_batch_is_banned(struct iris_bufmgr *bufmgr, int ret)
 {
    enum intel_kmd_type kmd_type = iris_bufmgr_get_device_info(bufmgr)->kmd_type;
 
@@ -960,7 +960,7 @@ _iris_batch_flush(struct iris_batch *batch, const char *file, int line)
     * has been lost and needs to be re-initialized.  If this succeeds,
     * dubiously claim success...
     */
-   if (ret && context_or_exec_queue_was_banned(bufmgr, ret)) {
+   if (ret && iris_batch_is_banned(bufmgr, ret)) {
       enum pipe_reset_status status = iris_batch_check_for_reset(batch);
 
       if (status != PIPE_NO_RESET || ice->context_reset_signaled)
diff --git a/src/gallium/drivers/iris/iris_batch.h b/src/gallium/drivers/iris/iris_batch.h
index 341a3c9fe5e..f0cfe4fb031 100644
--- a/src/gallium/drivers/iris/iris_batch.h
+++ b/src/gallium/drivers/iris/iris_batch.h
@@ -446,6 +446,9 @@ iris_batch_mark_reset_sync(struct iris_batch *batch)
 const char *
 iris_batch_name_to_string(enum iris_batch_name name);
 
+bool
+iris_batch_is_banned(struct iris_bufmgr *bufmgr, int ret);
+
 #define iris_foreach_batch(ice, batch)                \
    for (struct iris_batch *batch = &ice->batches[0];  \
         batch <= &ice->batches[((struct iris_screen *)ice->ctx.screen)->devinfo->ver >= 12 ? IRIS_BATCH_BLITTER : IRIS_BATCH_COMPUTE]; \
diff --git a/src/gallium/drivers/iris/iris_blit.c b/src/gallium/drivers/iris/iris_blit.c
index 4630e65ce32..921e9ef3f43 100644
--- a/src/gallium/drivers/iris/iris_blit.c
+++ b/src/gallium/drivers/iris/iris_blit.c
@@ -230,13 +230,14 @@ apply_blit_scissor(const struct pipe_scissor_state *scissor,
 }
 
 void
-iris_blorp_surf_for_resource(struct isl_device *isl_dev,
+iris_blorp_surf_for_resource(struct iris_batch *batch,
                              struct blorp_surf *surf,
                              struct pipe_resource *p_res,
                              enum isl_aux_usage aux_usage,
                              unsigned level,
                              bool is_dest)
 {
+   const struct isl_device *isl_dev = &batch->screen->isl_dev;
    struct iris_resource *res = (void *) p_res;
    const struct intel_device_info *devinfo = isl_dev->info;
 
@@ -247,8 +248,7 @@ iris_blorp_surf_for_resource(struct isl_device *isl_dev,
          .offset = res->offset,
          .reloc_flags = is_dest ? IRIS_BLORP_RELOC_FLAGS_EXEC_OBJECT_WRITE : 0,
          .mocs = iris_mocs(res->bo, isl_dev,
-                           is_dest ? ISL_SURF_USAGE_RENDER_TARGET_BIT
-                                   : ISL_SURF_USAGE_TEXTURE_BIT),
+                           iris_blorp_batch_usage(batch, is_dest)),
          .local_hint = iris_bo_likely_local(res->bo),
       },
       .aux_usage = aux_usage,
@@ -515,10 +515,10 @@ iris_blit(struct pipe_context *ctx, const struct pipe_blit_info *info)
                                    IRIS_DOMAIN_RENDER_WRITE);
 
       struct blorp_surf src_surf, dst_surf;
-      iris_blorp_surf_for_resource(&screen->isl_dev,  &src_surf,
+      iris_blorp_surf_for_resource(batch,  &src_surf,
                                    &src_res->base.b, src_aux_usage,
                                    info->src.level, false);
-      iris_blorp_surf_for_resource(&screen->isl_dev, &dst_surf,
+      iris_blorp_surf_for_resource(batch, &dst_surf,
                                    &dst_res->base.b, dst_aux_usage,
                                    info->dst.level, true);
 
@@ -683,14 +683,14 @@ iris_copy_region(struct blorp_context *blorp,
       struct blorp_address src_addr = {
          .buffer = src_res->bo, .offset = src_res->offset + src_box->x,
          .mocs = iris_mocs(src_res->bo, &screen->isl_dev,
-                           ISL_SURF_USAGE_TEXTURE_BIT),
+                           iris_blorp_batch_usage(batch, false /* is_dest */)),
          .local_hint = iris_bo_likely_local(src_res->bo),
       };
       struct blorp_address dst_addr = {
          .buffer = dst_res->bo, .offset = dst_res->offset + dstx,
          .reloc_flags = IRIS_BLORP_RELOC_FLAGS_EXEC_OBJECT_WRITE,
          .mocs = iris_mocs(dst_res->bo, &screen->isl_dev,
-                           ISL_SURF_USAGE_RENDER_TARGET_BIT),
+                           iris_blorp_batch_usage(batch, true /* is_dest */)),
          .local_hint = iris_bo_likely_local(dst_res->bo),
       };
 
@@ -716,10 +716,10 @@ iris_copy_region(struct blorp_context *blorp,
       iris_emit_buffer_barrier_for(batch, dst_res->bo, write_domain);
 
       struct blorp_surf src_surf, dst_surf;
-      iris_blorp_surf_for_resource(&screen->isl_dev, &src_surf,
-                                   src, src_aux_usage, src_level, false);
-      iris_blorp_surf_for_resource(&screen->isl_dev, &dst_surf,
-                                   dst, dst_aux_usage, dst_level, true);
+      iris_blorp_surf_for_resource(batch, &src_surf, src,
+                                   src_aux_usage, src_level, false);
+      iris_blorp_surf_for_resource(batch, &dst_surf, dst,
+                                   dst_aux_usage, dst_level, true);
 
       for (int slice = 0; slice < src_box->depth; slice++) {
          iris_batch_maybe_flush(batch, 1500);
diff --git a/src/gallium/drivers/iris/iris_clear.c b/src/gallium/drivers/iris/iris_clear.c
index ecb52fc9d08..1ceeabaa7c1 100644
--- a/src/gallium/drivers/iris/iris_clear.c
+++ b/src/gallium/drivers/iris/iris_clear.c
@@ -326,7 +326,7 @@ fast_clear_color(struct iris_context *ice,
     */
    if (devinfo->ver >= 11) {
       iris_emit_pipe_control_flush(batch, "fast clear: pre-flush",
-         PIPE_CONTROL_STATE_CACHE_INVALIDATE | 
+         PIPE_CONTROL_STATE_CACHE_INVALIDATE |
          PIPE_CONTROL_TEXTURE_CACHE_INVALIDATE);
    }
 
@@ -342,8 +342,8 @@ fast_clear_color(struct iris_context *ice,
    blorp_batch_init(&ice->blorp, &blorp_batch, batch, blorp_flags);
 
    struct blorp_surf surf;
-   iris_blorp_surf_for_resource(&batch->screen->isl_dev, &surf,
-                                p_res, res->aux.usage, level, true);
+   iris_blorp_surf_for_resource(batch, &surf, p_res, res->aux.usage,
+                                level, true);
 
    blorp_fast_clear(&blorp_batch, &surf, res->surf.format,
                     ISL_SWIZZLE_IDENTITY,
@@ -412,8 +412,7 @@ clear_color(struct iris_context *ice,
    iris_emit_buffer_barrier_for(batch, res->bo, IRIS_DOMAIN_RENDER_WRITE);
 
    struct blorp_surf surf;
-   iris_blorp_surf_for_resource(&batch->screen->isl_dev, &surf,
-                                p_res, aux_usage, level, true);
+   iris_blorp_surf_for_resource(batch, &surf, p_res, aux_usage, level, true);
 
    iris_batch_sync_region_start(batch);
 
@@ -631,8 +630,8 @@ clear_depth_stencil(struct iris_context *ice,
       iris_resource_prepare_render(ice, z_res, z_res->surf.format, level,
                                    box->z, box->depth, aux_usage);
       iris_emit_buffer_barrier_for(batch, z_res->bo, IRIS_DOMAIN_DEPTH_WRITE);
-      iris_blorp_surf_for_resource(&batch->screen->isl_dev, &z_surf,
-                                   &z_res->base.b, aux_usage, level, true);
+      iris_blorp_surf_for_resource(batch, &z_surf, &z_res->base.b,
+                                   aux_usage, level, true);
    }
 
    uint8_t stencil_mask = clear_stencil && stencil_res ? 0xff : 0;
@@ -641,8 +640,7 @@ clear_depth_stencil(struct iris_context *ice,
                                    box->depth, stencil_res->aux.usage, false);
       iris_emit_buffer_barrier_for(batch, stencil_res->bo,
                                    IRIS_DOMAIN_DEPTH_WRITE);
-      iris_blorp_surf_for_resource(&batch->screen->isl_dev,
-                                   &stencil_surf, &stencil_res->base.b,
+      iris_blorp_surf_for_resource(batch, &stencil_surf, &stencil_res->base.b,
                                    stencil_res->aux.usage, level, true);
    }
 
diff --git a/src/gallium/drivers/iris/iris_context.c b/src/gallium/drivers/iris/iris_context.c
index 82cdd54f365..016bc849ee3 100644
--- a/src/gallium/drivers/iris/iris_context.c
+++ b/src/gallium/drivers/iris/iris_context.c
@@ -298,7 +298,11 @@ iris_create_context(struct pipe_screen *pscreen, void *priv, unsigned flags)
    ctx->screen = pscreen;
    ctx->priv = priv;
 
-   ctx->stream_uploader = u_upload_create_default(ctx);
+   ctx->stream_uploader = u_upload_create(ctx, 1024 * 1024 * 2,
+                                          PIPE_BIND_VERTEX_BUFFER |
+                                          PIPE_BIND_INDEX_BUFFER |
+                                          PIPE_BIND_CONSTANT_BUFFER,
+                                          PIPE_USAGE_STREAM, 0);
    if (!ctx->stream_uploader) {
       ralloc_free(ice);
       return NULL;
diff --git a/src/gallium/drivers/iris/iris_context.h b/src/gallium/drivers/iris/iris_context.h
index 74461c18eac..7d154ddfb1c 100644
--- a/src/gallium/drivers/iris/iris_context.h
+++ b/src/gallium/drivers/iris/iris_context.h
@@ -955,7 +955,7 @@ void iris_fill_cs_push_const_buffer(struct brw_cs_prog_data *cs_prog_data,
 /* iris_blit.c */
 #define IRIS_BLORP_RELOC_FLAGS_EXEC_OBJECT_WRITE      (1 << 2)
 
-void iris_blorp_surf_for_resource(struct isl_device *isl_dev,
+void iris_blorp_surf_for_resource(struct iris_batch *batch,
                                   struct blorp_surf *surf,
                                   struct pipe_resource *p_res,
                                   enum isl_aux_usage aux_usage,
@@ -982,6 +982,21 @@ iris_blorp_flags_for_batch(struct iris_batch *batch)
    return 0;
 }
 
+static inline isl_surf_usage_flags_t
+iris_blorp_batch_usage(struct iris_batch *batch, bool is_dest)
+{
+   switch (batch->name) {
+   case IRIS_BATCH_RENDER:
+      return is_dest ? ISL_SURF_USAGE_RENDER_TARGET_BIT : ISL_SURF_USAGE_TEXTURE_BIT;
+   case IRIS_BATCH_COMPUTE:
+      return is_dest ? ISL_SURF_USAGE_STORAGE_BIT : ISL_SURF_USAGE_TEXTURE_BIT;
+   case IRIS_BATCH_BLITTER:
+      return is_dest ? ISL_SURF_USAGE_BLITTER_DST_BIT : ISL_SURF_USAGE_BLITTER_SRC_BIT;
+   default:
+      unreachable("Unhandled batch type");
+   }
+}
+
 /* iris_draw.c */
 
 void iris_draw_vbo(struct pipe_context *ctx, const struct pipe_draw_info *info,
diff --git a/src/gallium/drivers/iris/iris_resolve.c b/src/gallium/drivers/iris/iris_resolve.c
index a6c2c62d785..c4da1761b7a 100644
--- a/src/gallium/drivers/iris/iris_resolve.c
+++ b/src/gallium/drivers/iris/iris_resolve.c
@@ -508,8 +508,8 @@ iris_resolve_color(struct iris_context *ice,
    //DBG("%s to mt %p level %u layer %u\n", __func__, mt, level, layer);
 
    struct blorp_surf surf;
-   iris_blorp_surf_for_resource(&batch->screen->isl_dev, &surf,
-                                &res->base.b, res->aux.usage, level, true);
+   iris_blorp_surf_for_resource(batch, &surf, &res->base.b,
+                                res->aux.usage, level, true);
 
    iris_batch_maybe_flush(batch, 1500);
 
@@ -576,8 +576,8 @@ iris_mcs_exec(struct iris_context *ice,
    iris_batch_maybe_flush(batch, 1500);
 
    struct blorp_surf surf;
-   iris_blorp_surf_for_resource(&batch->screen->isl_dev, &surf,
-                                &res->base.b, res->aux.usage, 0, true);
+   iris_blorp_surf_for_resource(batch, &surf, &res->base.b,
+                                res->aux.usage, 0, true);
 
    /* MCS partial resolve will read from the MCS surface. */
    assert(res->aux.bo == res->bo);
@@ -596,10 +596,10 @@ iris_mcs_exec(struct iris_context *ice,
        * the full resolve.
        */
       struct blorp_surf src_surf, dst_surf;
-      iris_blorp_surf_for_resource(&batch->screen->isl_dev, &src_surf,
-                                   &res->base.b, res->aux.usage, 0, false);
-      iris_blorp_surf_for_resource(&batch->screen->isl_dev, &dst_surf,
-                                   &res->base.b, ISL_AUX_USAGE_NONE, 0, true);
+      iris_blorp_surf_for_resource(batch, &src_surf, &res->base.b,
+                                   res->aux.usage, 0, false);
+      iris_blorp_surf_for_resource(batch, &dst_surf, &res->base.b,
+                                   ISL_AUX_USAGE_NONE, 0, true);
 
       blorp_copy(&blorp_batch, &src_surf, 0, 0, &dst_surf, 0, 0,
                  0, 0, 0, 0, surf.surf->logical_level0_px.width,
@@ -730,8 +730,8 @@ iris_hiz_exec(struct iris_context *ice,
    iris_batch_sync_region_start(batch);
 
    struct blorp_surf surf;
-   iris_blorp_surf_for_resource(&batch->screen->isl_dev, &surf,
-                                &res->base.b, res->aux.usage, level, true);
+   iris_blorp_surf_for_resource(batch, &surf, &res->base.b,
+                                res->aux.usage, level, true);
 
    struct blorp_batch blorp_batch;
    enum blorp_batch_flags flags = 0;
diff --git a/src/gallium/drivers/iris/iris_resource.c b/src/gallium/drivers/iris/iris_resource.c
index 09dbcc0c5d4..9b9bfd267cd 100644
--- a/src/gallium/drivers/iris/iris_resource.c
+++ b/src/gallium/drivers/iris/iris_resource.c
@@ -745,6 +745,10 @@ iris_resource_configure_main(const struct iris_screen *screen,
 
    if (res->mod_info && !isl_drm_modifier_has_aux(modifier))
       usage |= ISL_SURF_USAGE_DISABLE_AUX_BIT;
+
+   else if (!res->mod_info && res->external_format != PIPE_FORMAT_NONE)
+      usage |= ISL_SURF_USAGE_DISABLE_AUX_BIT;
+
    else if (templ->bind & PIPE_BIND_CONST_BW)
       usage |= ISL_SURF_USAGE_DISABLE_AUX_BIT;
 
diff --git a/src/gallium/drivers/iris/iris_state.c b/src/gallium/drivers/iris/iris_state.c
index 51bf69debef..276949aaca9 100644
--- a/src/gallium/drivers/iris/iris_state.c
+++ b/src/gallium/drivers/iris/iris_state.c
@@ -6052,7 +6052,9 @@ batch_emit_fast_color_dummy_blit(struct iris_batch *batch)
 #if GFX_VERx10 >= 125
    iris_emit_cmd(batch, GENX(XY_FAST_COLOR_BLT), blt) {
       blt.DestinationBaseAddress = batch->screen->workaround_address;
-      blt.DestinationMOCS = batch->screen->isl_dev.mocs.blitter_dst;
+      blt.DestinationMOCS = iris_mocs(batch->screen->workaround_address.bo,
+                                      &batch->screen->isl_dev,
+                                      ISL_SURF_USAGE_BLITTER_DST_BIT);
       blt.DestinationPitch = 63;
       blt.DestinationX2 = 1;
       blt.DestinationY2 = 4;
@@ -7135,7 +7137,12 @@ iris_upload_dirty_render_state(struct iris_context *ice,
       }
    }
 
+#if GFX_VERx10 >= 125
+   /* This is only used on >= gfx125 for dynamic 3DSTATE_TE emission
+    * related workarounds.
+    */
    bool program_needs_wa_14015055625 = false;
+#endif
 
 #if INTEL_WA_14015055625_GFX_VER
    /* Check if FS stage will use primitive ID overrides for Wa_14015055625. */
@@ -7239,16 +7246,14 @@ iris_upload_dirty_render_state(struct iris_context *ice,
                             GENX(3DSTATE_PS_length));
             iris_emit_merge(batch, shader_psx, psx_state,
                             GENX(3DSTATE_PS_EXTRA_length));
-         } else if (stage == MESA_SHADER_TESS_EVAL &&
-                    intel_needs_workaround(batch->screen->devinfo, 14015055625) &&
-                    !program_needs_wa_14015055625) {
-            /* This program doesn't require Wa_14015055625, so we can enable
-             * a Tessellation Distribution Mode.
-             */
 #if GFX_VERx10 >= 125
+         } else if (stage == MESA_SHADER_TESS_EVAL) {
             uint32_t te_state[GENX(3DSTATE_TE_length)] = { 0 };
             iris_pack_command(GENX(3DSTATE_TE), te_state, te) {
-               if (intel_needs_workaround(batch->screen->devinfo, 22012699309))
+               if (intel_needs_workaround(screen->devinfo, 14015055625) &&
+                   program_needs_wa_14015055625)
+                  te.TessellationDistributionMode = TEDMODE_OFF;
+               else if (intel_needs_workaround(screen->devinfo, 22012699309))
                   te.TessellationDistributionMode = TEDMODE_RR_STRICT;
                else
                   te.TessellationDistributionMode = TEDMODE_RR_FREE;
@@ -7273,7 +7278,13 @@ iris_upload_dirty_render_state(struct iris_context *ice,
             switch (stage) {
             case MESA_SHADER_VERTEX:    MERGE_SCRATCH_ADDR(3DSTATE_VS); break;
             case MESA_SHADER_TESS_CTRL: MERGE_SCRATCH_ADDR(3DSTATE_HS); break;
-            case MESA_SHADER_TESS_EVAL: MERGE_SCRATCH_ADDR(3DSTATE_DS); break;
+            case MESA_SHADER_TESS_EVAL: {
+               uint32_t *shader_ds = (uint32_t *) shader->derived_data;
+               uint32_t *shader_te = shader_ds + GENX(3DSTATE_DS_length);
+               iris_batch_emit(batch, shader_te, 4 * GENX(3DSTATE_TE_length));
+               MERGE_SCRATCH_ADDR(3DSTATE_DS);
+               break;
+            }
             case MESA_SHADER_GEOMETRY:  MERGE_SCRATCH_ADDR(3DSTATE_GS); break;
             }
          } else {
@@ -9526,10 +9537,12 @@ iris_emit_raw_pipe_control(struct iris_batch *batch,
    /* "GPGPU specific workarounds" (both post-sync and flush) ------------ */
 
    if (IS_COMPUTE_PIPELINE(batch)) {
-      if ((GFX_VER == 9 || GFX_VER == 11) &&
-          (flags & PIPE_CONTROL_TEXTURE_CACHE_INVALIDATE)) {
-         /* Project: SKL, ICL / Argument: Tex Invalidate
-          * "Requires stall bit ([20] of DW) set for all GPGPU Workloads."
+      if (GFX_VER >= 9 && (flags & PIPE_CONTROL_TEXTURE_CACHE_INVALIDATE)) {
+         /* SKL PRMs, Volume 7: 3D-Media-GPGPU, Programming Restrictions for
+          * PIPE_CONTROL, Flush Types:
+          *   "Requires stall bit ([20] of DW) set for all GPGPU Workloads."
+          * For newer platforms this is documented in the PIPE_CONTROL
+          * instruction page.
           */
          flags |= PIPE_CONTROL_CS_STALL;
       }
diff --git a/src/gallium/drivers/iris/xe/iris_batch.c b/src/gallium/drivers/iris/xe/iris_batch.c
index 0c0fc208cb9..7e09d352773 100644
--- a/src/gallium/drivers/iris/xe/iris_batch.c
+++ b/src/gallium/drivers/iris/xe/iris_batch.c
@@ -151,7 +151,45 @@ void iris_xe_init_batches(struct iris_context *ice)
    free(engines_info);
 }
 
-void iris_xe_destroy_batch(struct iris_batch *batch)
+/*
+ * Wait for all previous DRM_IOCTL_XE_EXEC calls over the
+ * drm_xe_exec_queue in this iris_batch to complete.
+ **/
+static void
+iris_xe_wait_exec_queue_idle(struct iris_batch *batch)
+{
+   struct iris_bufmgr *bufmgr = batch->screen->bufmgr;
+   struct iris_syncobj *syncobj = iris_create_syncobj(bufmgr);
+   struct drm_xe_sync xe_sync = {
+      .type = DRM_XE_SYNC_TYPE_SYNCOBJ,
+      .flags = DRM_XE_SYNC_FLAG_SIGNAL,
+   };
+   struct drm_xe_exec exec = {
+      .exec_queue_id = batch->xe.exec_queue_id,
+      .num_syncs = 1,
+      .syncs = (uintptr_t)&xe_sync,
+   };
+   int ret;
+
+   if (!syncobj)
+      return;
+
+   xe_sync.handle = syncobj->handle;
+   /* Using the special exec.num_batch_buffer == 0 handling to get syncobj
+    * signaled when the last DRM_IOCTL_XE_EXEC is completed.
+    */
+   ret = intel_ioctl(iris_bufmgr_get_fd(bufmgr), DRM_IOCTL_XE_EXEC, &exec);
+   if (ret == 0) {
+      assert(iris_wait_syncobj(bufmgr, syncobj, INT64_MAX));
+   } else {
+      assert(iris_batch_is_banned(bufmgr, errno) == true);
+   }
+
+   iris_syncobj_destroy(bufmgr, syncobj);
+}
+
+static void
+iris_xe_destroy_exec_queue(struct iris_batch *batch)
 {
    struct iris_screen *screen = batch->screen;
    struct iris_bufmgr *bufmgr = screen->bufmgr;
@@ -165,6 +203,15 @@ void iris_xe_destroy_batch(struct iris_batch *batch)
    assert(ret == 0);
 }
 
+void iris_xe_destroy_batch(struct iris_batch *batch)
+{
+   /* Xe KMD don't refcount anything, so resources could be freed while they
+    * are still in use if we don't wait for exec_queue to be idle.
+    */
+   iris_xe_wait_exec_queue_idle(batch);
+   iris_xe_destroy_exec_queue(batch);
+}
+
 bool iris_xe_replace_batch(struct iris_batch *batch)
 {
    enum intel_engine_class engine_classes[IRIS_BATCH_COUNT];
@@ -184,7 +231,7 @@ bool iris_xe_replace_batch(struct iris_batch *batch)
    ret = iris_xe_init_batch(bufmgr, engines_info, engine_classes[batch->name],
                             ice->priority, &new_exec_queue_id);
    if (ret) {
-      iris_xe_destroy_batch(batch);
+      iris_xe_destroy_exec_queue(batch);
       batch->xe.exec_queue_id = new_exec_queue_id;
       iris_lost_context_state(batch);
    }
diff --git a/src/gallium/drivers/iris/xe/iris_kmd_backend.c b/src/gallium/drivers/iris/xe/iris_kmd_backend.c
index 2f49c4d8bea..ea49f6da8db 100644
--- a/src/gallium/drivers/iris/xe/iris_kmd_backend.c
+++ b/src/gallium/drivers/iris/xe/iris_kmd_backend.c
@@ -138,10 +138,6 @@ xe_gem_vm_bind_op(struct iris_bo *bo, uint32_t op)
          op = DRM_XE_VM_BIND_OP_MAP_USERPTR;
    }
 
-   uint16_t pat_index = 0;
-   if (op != DRM_XE_VM_BIND_OP_UNMAP)
-      pat_index = iris_heap_to_pat_entry(devinfo, bo->real.heap)->index;
-
    struct drm_xe_vm_bind args = {
       .vm_id = iris_bufmgr_get_global_vm_id(bo->bufmgr),
       .num_syncs = 1,
@@ -152,7 +148,7 @@ xe_gem_vm_bind_op(struct iris_bo *bo, uint32_t op)
       .bind.range = range,
       .bind.addr = intel_48b_address(bo->address),
       .bind.op = op,
-      .bind.pat_index = pat_index,
+      .bind.pat_index = iris_heap_to_pat_entry(devinfo, bo->real.heap)->index,
    };
    ret = intel_ioctl(fd, DRM_IOCTL_XE_VM_BIND, &args);
    if (ret == 0) {
diff --git a/src/gallium/drivers/lima/ci/lima-fails.txt b/src/gallium/drivers/lima/ci/lima-fails.txt
index 948ca471b95..4c4c4ccfa46 100644
--- a/src/gallium/drivers/lima/ci/lima-fails.txt
+++ b/src/gallium/drivers/lima/ci/lima-fails.txt
@@ -63,22 +63,12 @@ x11-dEQP-EGL.functional.wide_color.window_8888_colorspace_srgb,Fail
 
 shaders@glsl-arb-fragment-coord-conventions,Fail
 shaders@glsl-bug-110796,Fail
-shaders@glsl-bug-22603,Fail
 shaders@glsl-fs-flat-color,Fail
 shaders@glsl-predication-on-large-array,Fail
 shaders@glsl-routing,Fail
 spec@arb_arrays_of_arrays@execution@glsl-arrays-copy-size-mismatch,Fail
 spec@arb_color_buffer_float@gl_rgba8-render,Fail
 spec@arb_color_buffer_float@gl_rgba8-render-sanity,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component16-blit,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component16-copypixels,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component16-readpixels,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component24-blit,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component24-copypixels,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component24-readpixels,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component32-blit,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component32-copypixels,Fail
-spec@arb_depth_texture@fbo-depth-gl_depth_component32-readpixels,Fail
 spec@arb_depth_texture@fbo-generatemipmap-formats,Fail
 spec@arb_depth_texture@fbo-generatemipmap-formats@GL_DEPTH_COMPONENT24,Fail
 spec@arb_depth_texture@fbo-generatemipmap-formats@GL_DEPTH_COMPONENT24 NPOT,Fail
@@ -157,22 +147,22 @@ spec@arb_texture_rg@texwrap formats bordercolor@GL_RG8- border color only,Fail
 spec@arb_texture_rg@texwrap formats bordercolor-swizzled,Fail
 spec@arb_texture_rg@texwrap formats bordercolor-swizzled@GL_RG8- swizzled- border color only,Fail
 spec@arb_texture_storage@texture-storage@cube array texture,Fail
-spec@arb_vertex_program@arl,Crash
+spec@arb_vertex_program@arl,Fail
 spec@arb_vertex_program@big-param,Fail
 spec@arb_vertex_program@clip-plane-transformation arb,Fail
-spec@arb_vertex_program@instructions@arl,Crash
-spec@arb_vertex_program@vp-address-01,Crash
-spec@arb_vertex_program@vp-arl-constant-array,Crash
-spec@arb_vertex_program@vp-arl-constant-array-huge,Crash
-spec@arb_vertex_program@vp-arl-constant-array-huge-offset,Crash
-spec@arb_vertex_program@vp-arl-constant-array-huge-offset-neg,Crash
-spec@arb_vertex_program@vp-arl-constant-array-huge-relative-offset,Crash
-spec@arb_vertex_program@vp-arl-constant-array-huge-varying,Crash
-spec@arb_vertex_program@vp-arl-constant-array-varying,Crash
-spec@arb_vertex_program@vp-arl-env-array,Crash
-spec@arb_vertex_program@vp-arl-local-array,Crash
-spec@arb_vertex_program@vp-arl-neg-array-2,Crash
-spec@arb_vertex_program@vp-arl-neg-array,Crash
+spec@arb_vertex_program@instructions@arl,Fail
+spec@arb_vertex_program@vp-address-01,Fail
+spec@arb_vertex_program@vp-arl-constant-array,Fail
+spec@arb_vertex_program@vp-arl-constant-array-huge,Fail
+spec@arb_vertex_program@vp-arl-constant-array-huge-offset,Fail
+spec@arb_vertex_program@vp-arl-constant-array-huge-offset-neg,Fail
+spec@arb_vertex_program@vp-arl-constant-array-huge-relative-offset,Fail
+spec@arb_vertex_program@vp-arl-constant-array-huge-varying,Fail
+spec@arb_vertex_program@vp-arl-constant-array-varying,Fail
+spec@arb_vertex_program@vp-arl-env-array,Fail
+spec@arb_vertex_program@vp-arl-local-array,Fail
+spec@arb_vertex_program@vp-arl-neg-array-2,Fail
+spec@arb_vertex_program@vp-arl-neg-array,Fail
 spec@ati_fragment_shader@ati_fragment_shader-render-default,Fail
 spec@ati_fragment_shader@ati_fragment_shader-render-notexture,Fail
 spec@ati_fragment_shader@ati_fragment_shader-render-sources,Fail
@@ -197,26 +187,15 @@ spec@ext_framebuffer_object@fbo-blending-formats@GL_RGB,Fail
 spec@ext_framebuffer_object@fbo-cubemap,Fail
 spec@ext_framebuffer_object@fbo-depth-sample-compare,Fail
 spec@ext_framebuffer_object@fbo-maxsize,Fail
-spec@ext_framebuffer_object@fbo-readpixels-depth-formats,Fail
-spec@ext_framebuffer_object@fbo-readpixels-depth-formats@GL_DEPTH_COMPONENT/GL_FLOAT,Fail
-spec@ext_framebuffer_object@fbo-readpixels-depth-formats@GL_DEPTH_COMPONENT/GL_UNSIGNED_INT,Fail
 spec@ext_framebuffer_object@fbo-scissor-bitmap,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index16-blit,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index16-copypixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index16-drawpixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index16-readpixels,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index1-blit,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index1-copypixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index1-drawpixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index1-readpixels,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index4-blit,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index4-copypixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index4-drawpixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index4-readpixels,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index8-blit,Fail
 spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index8-copypixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index8-drawpixels,Fail
-spec@ext_framebuffer_object@fbo-stencil-gl_stencil_index8-readpixels,Fail
 spec@ext_image_dma_buf_import@ext_image_dma_buf_import-export,Fail
 spec@ext_image_dma_buf_import@ext_image_dma_buf_import-sample_p010,Fail
 spec@ext_image_dma_buf_import@ext_image_dma_buf_import-sample_p012,Fail
@@ -229,19 +208,8 @@ spec@ext_image_dma_buf_import@ext_image_dma_buf_import-sample_y412,Fail
 spec@ext_image_dma_buf_import@ext_image_dma_buf_import-sample_y416,Fail
 spec@ext_packed_depth_stencil@depth_stencil texture,Fail
 spec@ext_packed_depth_stencil@fbo-blit-d24s8,Fail
-spec@ext_packed_depth_stencil@fbo-depth-gl_depth24_stencil8-blit,Fail
-spec@ext_packed_depth_stencil@fbo-depth-gl_depth24_stencil8-copypixels,Fail
-spec@ext_packed_depth_stencil@fbo-depth-gl_depth24_stencil8-readpixels,Fail
-spec@ext_packed_depth_stencil@fbo-depthstencil-gl_depth24_stencil8-blit,Fail
-spec@ext_packed_depth_stencil@fbo-depthstencil-gl_depth24_stencil8-copypixels,Fail
-spec@ext_packed_depth_stencil@fbo-depthstencil-gl_depth24_stencil8-drawpixels-24_8,Fail
-spec@ext_packed_depth_stencil@fbo-depthstencil-gl_depth24_stencil8-readpixels-24_8,Fail
-spec@ext_packed_depth_stencil@fbo-depthstencil-gl_depth24_stencil8-readpixels-float-and-ushort,Fail
 spec@ext_packed_depth_stencil@fbo-stencil-gl_depth24_stencil8-blit,Fail
 spec@ext_packed_depth_stencil@fbo-stencil-gl_depth24_stencil8-copypixels,Fail
-spec@ext_packed_depth_stencil@fbo-stencil-gl_depth24_stencil8-drawpixels,Fail
-spec@ext_packed_depth_stencil@fbo-stencil-gl_depth24_stencil8-readpixels,Fail
-spec@ext_packed_depth_stencil@readpixels-24_8,Fail
 spec@ext_provoking_vertex@provoking-vertex,Fail
 spec@ext_texture_format_bgra8888@api-errors,Fail
 spec@ext_texture_lod_bias@lodbias,Fail
diff --git a/src/gallium/drivers/lima/ir/gp/nir.c b/src/gallium/drivers/lima/ir/gp/nir.c
index 765da082ed0..4b02e60a8fc 100644
--- a/src/gallium/drivers/lima/ir/gp/nir.c
+++ b/src/gallium/drivers/lima/ir/gp/nir.c
@@ -253,6 +253,11 @@ static bool gpir_emit_intrinsic(gpir_block *block, nir_instr *ni)
    case nir_intrinsic_load_uniform:
    {
       int offset = nir_intrinsic_base(instr);
+
+      if (!nir_src_is_const(instr->src[0])) {
+         gpir_error("indirect indexing for uniforms is not implemented\n");
+         return false;
+      }
       offset += (int)nir_src_as_float(instr->src[0]);
 
       return gpir_create_load(block, &instr->def,
diff --git a/src/gallium/drivers/lima/ir/pp/nir.c b/src/gallium/drivers/lima/ir/pp/nir.c
index 3bc129beda9..517ec628b41 100644
--- a/src/gallium/drivers/lima/ir/pp/nir.c
+++ b/src/gallium/drivers/lima/ir/pp/nir.c
@@ -403,6 +403,8 @@ static bool ppir_emit_intrinsic(ppir_block *block, nir_instr *ni)
          default: {
             ppir_dest *dest = ppir_node_get_dest(node);
             dest->ssa.out_type = out_type;
+            dest->ssa.num_components = 4;
+            dest->write_mask = u_bit_consecutive(0, 4);
             node->is_out = 1;
             return true;
             }
@@ -415,9 +417,9 @@ static bool ppir_emit_intrinsic(ppir_block *block, nir_instr *ni)
 
       ppir_dest *dest = ppir_node_get_dest(&alu_node->node);
       dest->type = ppir_target_ssa;
-      dest->ssa.num_components = instr->num_components;
+      dest->ssa.num_components = 4;
       dest->ssa.index = 0;
-      dest->write_mask = u_bit_consecutive(0, instr->num_components);
+      dest->write_mask = u_bit_consecutive(0, 4);
       dest->ssa.out_type = out_type;
 
       alu_node->num_src = 1;
@@ -427,7 +429,7 @@ static bool ppir_emit_intrinsic(ppir_block *block, nir_instr *ni)
 
       nir_legacy_src legacy_src = nir_legacy_chase_src(instr->src);
       ppir_node_add_src(block->comp, &alu_node->node, alu_node->src, &legacy_src,
-                        u_bit_consecutive(0, instr->num_components));
+                        u_bit_consecutive(0, 4));
 
       alu_node->node.is_out = 1;
 
diff --git a/src/gallium/drivers/lima/lima_program.c b/src/gallium/drivers/lima/lima_program.c
index 2d6dd4c9944..0ef3ebbfc98 100644
--- a/src/gallium/drivers/lima/lima_program.c
+++ b/src/gallium/drivers/lima/lima_program.c
@@ -323,15 +323,25 @@ static bool
 lima_fs_upload_shader(struct lima_context *ctx,
                       struct lima_fs_compiled_shader *fs)
 {
+   static const uint32_t pp_clear_program[] = {
+      PP_CLEAR_PROGRAM
+   };
+   int shader_size = sizeof(pp_clear_program);
+   void *shader = (void *)pp_clear_program;
    struct lima_screen *screen = lima_screen(ctx->base.screen);
 
-   fs->bo = lima_bo_create(screen, fs->state.shader_size, 0);
+   if (fs->state.shader_size) {
+      shader_size = fs->state.shader_size;
+      shader = fs->shader;
+   }
+
+   fs->bo = lima_bo_create(screen, shader_size, 0);
    if (!fs->bo) {
       fprintf(stderr, "lima: create fs shader bo fail\n");
       return false;
    }
 
-   memcpy(lima_bo_map(fs->bo), fs->shader, fs->state.shader_size);
+   memcpy(lima_bo_map(fs->bo), shader, shader_size);
 
    return true;
 }
diff --git a/src/gallium/drivers/lima/lima_screen.c b/src/gallium/drivers/lima/lima_screen.c
index 8a58b5c6b2b..2e779693d0e 100644
--- a/src/gallium/drivers/lima/lima_screen.c
+++ b/src/gallium/drivers/lima/lima_screen.c
@@ -692,11 +692,9 @@ lima_screen_create(int fd, const struct pipe_screen_config *config,
    screen->pp_buffer->cacheable = false;
 
    /* fs program for clear buffer?
-    * const0 1 0 0 -1.67773, mov.v0 $0 ^const0.xxxx, stop
     */
    static const uint32_t pp_clear_program[] = {
-      0x00020425, 0x0000000c, 0x01e007cf, 0xb0000000,
-      0x000005f5, 0x00000000, 0x00000000, 0x00000000,
+      PP_CLEAR_PROGRAM
    };
    memcpy(lima_bo_map(screen->pp_buffer) + pp_clear_program_offset,
           pp_clear_program, sizeof(pp_clear_program));
diff --git a/src/gallium/drivers/lima/lima_screen.h b/src/gallium/drivers/lima/lima_screen.h
index 82800052b15..5f76edd551a 100644
--- a/src/gallium/drivers/lima/lima_screen.h
+++ b/src/gallium/drivers/lima/lima_screen.h
@@ -60,6 +60,11 @@ struct ra_regs;
 
 #define NR_BO_CACHE_BUCKETS (MAX_BO_CACHE_BUCKET - MIN_BO_CACHE_BUCKET + 1)
 
+/* const0 1 0 0 -1.67773, mov.v0 $0 ^const0.xxxx, stop */
+#define PP_CLEAR_PROGRAM \
+   0x00020425, 0x0000000c, 0x01e007cf, 0xb0000000, \
+   0x000005f5, 0x00000000, 0x00000000, 0x00000000, \
+
 struct lima_screen {
    struct pipe_screen base;
    struct renderonly *ro;
diff --git a/src/gallium/drivers/llvmpipe/ci/traces-llvmpipe.yml b/src/gallium/drivers/llvmpipe/ci/traces-llvmpipe.yml
index 57a0bfda02a..14edd04c9b0 100644
--- a/src/gallium/drivers/llvmpipe/ci/traces-llvmpipe.yml
+++ b/src/gallium/drivers/llvmpipe/ci/traces-llvmpipe.yml
@@ -111,7 +111,7 @@ traces:
       checksum: 58a6a276abc0e28fcb2a8acea3342712
   gputest/pixmark-piano-v2.trace:
     gl-vmware-llvmpipe:
-      checksum: edc09da55fea262e76686d99548f2cfd
+      checksum: b0077264046fe6dd2cdec059d9e53bf5
   gputest/triangle-v2.trace:
     gl-vmware-llvmpipe:
       checksum: 7812de00011a3a059892e36cea19c696
diff --git a/src/gallium/drivers/llvmpipe/lp_query.c b/src/gallium/drivers/llvmpipe/lp_query.c
index d63c6aae0a3..4de16e9b657 100644
--- a/src/gallium/drivers/llvmpipe/lp_query.c
+++ b/src/gallium/drivers/llvmpipe/lp_query.c
@@ -372,12 +372,12 @@ llvmpipe_get_query_result_resource(struct pipe_context *pipe,
       switch (result_type) {
       case PIPE_QUERY_TYPE_I32: {
          int32_t *iptr = (int32_t *)dst;
-         *iptr = (int32_t) MIN2(value, INT32_MAX);
+         *iptr = (int32_t) (value & INT32_MAX);
          break;
       }
       case PIPE_QUERY_TYPE_U32: {
          uint32_t *uptr = (uint32_t *)dst;
-         *uptr = (uint32_t) MIN2(value, UINT32_MAX);
+         *uptr = (uint32_t) (value & UINT32_MAX);
          break;
       }
       case PIPE_QUERY_TYPE_I64: {
diff --git a/src/gallium/drivers/llvmpipe/lp_screen.c b/src/gallium/drivers/llvmpipe/lp_screen.c
index ad3d66424e1..ae341bfda13 100644
--- a/src/gallium/drivers/llvmpipe/lp_screen.c
+++ b/src/gallium/drivers/llvmpipe/lp_screen.c
@@ -410,6 +410,11 @@ llvmpipe_get_shader_param(struct pipe_screen *screen,
             return PIPE_MAX_SHADER_SAMPLER_VIEWS;
          else
             return 0;
+      case PIPE_SHADER_CAP_MAX_CONST_BUFFERS:
+         if (debug_get_bool_option("DRAW_USE_LLVM", false))
+            return LP_MAX_TGSI_CONST_BUFFERS;
+         else
+            return draw_get_shader_param(shader, param);
       default:
          return draw_get_shader_param(shader, param);
       }
diff --git a/src/gallium/drivers/llvmpipe/lp_state_cs.c b/src/gallium/drivers/llvmpipe/lp_state_cs.c
index c4661ced025..46cc5ffb06f 100644
--- a/src/gallium/drivers/llvmpipe/lp_state_cs.c
+++ b/src/gallium/drivers/llvmpipe/lp_state_cs.c
@@ -95,7 +95,7 @@ enum {
    CS_ARG_VERTEX_DATA,
    CS_ARG_PER_THREAD_DATA,
    CS_ARG_OUTER_COUNT,
-   CS_ARG_CORO_X_LOOPS = CS_ARG_OUTER_COUNT,
+   CS_ARG_CORO_SUBGROUP_COUNT = CS_ARG_OUTER_COUNT,
    CS_ARG_CORO_PARTIALS,
    CS_ARG_CORO_BLOCK_X_SIZE,
    CS_ARG_CORO_BLOCK_Y_SIZE,
@@ -374,7 +374,7 @@ generate_compute(struct llvmpipe_context *lp,
    else
       arg_types[CS_ARG_VERTEX_DATA] = LLVMPointerType(LLVMInt8TypeInContext(gallivm->context), 0); /* mesh shaders only */
    arg_types[CS_ARG_PER_THREAD_DATA] = variant->jit_cs_thread_data_ptr_type;  /* per thread data */
-   arg_types[CS_ARG_CORO_X_LOOPS] = int32_type;                        /* coro only - num X loops */
+   arg_types[CS_ARG_CORO_SUBGROUP_COUNT] = int32_type;                 /* coro only - subgroup count */
    arg_types[CS_ARG_CORO_PARTIALS] = int32_type;                       /* coro only - partials */
    arg_types[CS_ARG_CORO_BLOCK_X_SIZE] = int32_type;                   /* coro block_x_size */
    arg_types[CS_ARG_CORO_BLOCK_Y_SIZE] = int32_type;                   /* coro block_y_size */
@@ -560,23 +560,24 @@ generate_compute(struct llvmpipe_context *lp,
       output_array = lp_build_array_alloca(gallivm, output_type, lp_build_const_int32(gallivm, align(MAX2(nir->info.mesh.max_primitives_out, nir->info.mesh.max_vertices_out), 8)), "outputs");
    }
 
-   struct lp_build_loop_state loop_state[4];
-   LLVMValueRef num_x_loop;
+   struct lp_build_loop_state loop_state[2];
+
    LLVMValueRef vec_length = lp_build_const_int32(gallivm, cs_type.length);
-   num_x_loop = LLVMBuildAdd(gallivm->builder, block_x_size_arg, vec_length, "");
-   num_x_loop = LLVMBuildSub(gallivm->builder, num_x_loop, lp_build_const_int32(gallivm, 1), "");
-   num_x_loop = LLVMBuildUDiv(gallivm->builder, num_x_loop, vec_length, "");
-   LLVMValueRef partials = LLVMBuildURem(gallivm->builder, block_x_size_arg, vec_length, "");
 
-   LLVMValueRef coro_num_hdls = LLVMBuildMul(gallivm->builder, num_x_loop, block_y_size_arg, "");
-   coro_num_hdls = LLVMBuildMul(gallivm->builder, coro_num_hdls, block_z_size_arg, "");
+   LLVMValueRef invocation_count = LLVMBuildMul(gallivm->builder, block_x_size_arg, block_y_size_arg, "");
+   invocation_count = LLVMBuildMul(gallivm->builder, invocation_count, block_z_size_arg, "");
+
+   LLVMValueRef partials = LLVMBuildURem(gallivm->builder, invocation_count, vec_length, "");
+
+   LLVMValueRef num_subgroup_loop = LLVMBuildAdd(gallivm->builder, invocation_count, lp_build_const_int32(gallivm, cs_type.length - 1), "");
+   num_subgroup_loop = LLVMBuildUDiv(gallivm->builder, num_subgroup_loop, vec_length, "");
 
    /* build a ptr in memory to store all the frames in later. */
    LLVMTypeRef hdl_ptr_type = LLVMPointerType(LLVMInt8TypeInContext(gallivm->context), 0);
    LLVMValueRef coro_mem = LLVMBuildAlloca(gallivm->builder, hdl_ptr_type, "coro_mem");
    LLVMBuildStore(builder, LLVMConstNull(hdl_ptr_type), coro_mem);
 
-   LLVMValueRef coro_hdls = LLVMBuildArrayAlloca(gallivm->builder, hdl_ptr_type, coro_num_hdls, "coro_hdls");
+   LLVMValueRef coro_hdls = LLVMBuildArrayAlloca(gallivm->builder, hdl_ptr_type, num_subgroup_loop, "coro_hdls");
 
    unsigned end_coroutine = INT_MAX;
 
@@ -585,22 +586,17 @@ generate_compute(struct llvmpipe_context *lp,
     * and calls the coroutine main entrypoint on the first pass, but in subsequent
     * passes it checks if the coroutine has completed and resumes it if not.
     */
-   /* take x_width - round up to type.length width */
-   lp_build_loop_begin(&loop_state[3], gallivm,
-                       lp_build_const_int32(gallivm, 0)); /* coroutine reentry loop */
-   lp_build_loop_begin(&loop_state[2], gallivm,
-                       lp_build_const_int32(gallivm, 0)); /* z loop */
    lp_build_loop_begin(&loop_state[1], gallivm,
-                       lp_build_const_int32(gallivm, 0)); /* y loop */
+                       lp_build_const_int32(gallivm, 0)); /* coroutine reentry loop */
    lp_build_loop_begin(&loop_state[0], gallivm,
-                       lp_build_const_int32(gallivm, 0)); /* x loop */
+                       lp_build_const_int32(gallivm, 0)); /* subgroup loop */
    {
       LLVMValueRef args[CS_ARG_MAX];
       args[CS_ARG_CONTEXT] = context_ptr;
       args[CS_ARG_RESOURCES] = resources_ptr;
-      args[CS_ARG_BLOCK_X_SIZE] = loop_state[0].counter;
-      args[CS_ARG_BLOCK_Y_SIZE] = loop_state[1].counter;
-      args[CS_ARG_BLOCK_Z_SIZE] = loop_state[2].counter;
+      args[CS_ARG_BLOCK_X_SIZE] = LLVMGetUndef(int32_type);
+      args[CS_ARG_BLOCK_Y_SIZE] = LLVMGetUndef(int32_type);
+      args[CS_ARG_BLOCK_Z_SIZE] = LLVMGetUndef(int32_type);
       args[CS_ARG_GRID_X] = grid_x_arg;
       args[CS_ARG_GRID_Y] = grid_y_arg;
       args[CS_ARG_GRID_Z] = grid_z_arg;
@@ -611,34 +607,25 @@ generate_compute(struct llvmpipe_context *lp,
       args[CS_ARG_DRAW_ID] = draw_id_arg;
       args[CS_ARG_VERTEX_DATA] = io_ptr;
       args[CS_ARG_PER_THREAD_DATA] = thread_data_ptr;
-      args[CS_ARG_CORO_X_LOOPS] = num_x_loop;
+      args[CS_ARG_CORO_SUBGROUP_COUNT] = num_subgroup_loop;
       args[CS_ARG_CORO_PARTIALS] = partials;
       args[CS_ARG_CORO_BLOCK_X_SIZE] = block_x_size_arg;
       args[CS_ARG_CORO_BLOCK_Y_SIZE] = block_y_size_arg;
       args[CS_ARG_CORO_BLOCK_Z_SIZE] = block_z_size_arg;
 
-      /* idx = (z * (size_x * size_y) + y * size_x + x */
-      LLVMValueRef coro_hdl_idx = LLVMBuildMul(gallivm->builder, loop_state[2].counter,
-                                               LLVMBuildMul(gallivm->builder, num_x_loop, block_y_size_arg, ""), "");
-      coro_hdl_idx = LLVMBuildAdd(gallivm->builder, coro_hdl_idx,
-                                  LLVMBuildMul(gallivm->builder, loop_state[1].counter,
-                                               num_x_loop, ""), "");
-      coro_hdl_idx = LLVMBuildAdd(gallivm->builder, coro_hdl_idx,
-                                  loop_state[0].counter, "");
-
-      args[CS_ARG_CORO_IDX] = coro_hdl_idx;
+      args[CS_ARG_CORO_IDX] = loop_state[0].counter;
 
       args[CS_ARG_CORO_MEM] = coro_mem;
 
       if (is_mesh)
          args[CS_ARG_CORO_OUTPUTS] = output_array;
 
-      LLVMValueRef coro_entry = LLVMBuildGEP2(gallivm->builder, hdl_ptr_type, coro_hdls, &coro_hdl_idx, 1, "");
+      LLVMValueRef coro_entry = LLVMBuildGEP2(gallivm->builder, hdl_ptr_type, coro_hdls, &loop_state[0].counter, 1, "");
 
       LLVMValueRef coro_hdl = LLVMBuildLoad2(gallivm->builder, hdl_ptr_type, coro_entry, "coro_hdl");
 
       struct lp_build_if_state ifstate;
-      LLVMValueRef cmp = LLVMBuildICmp(gallivm->builder, LLVMIntEQ, loop_state[3].counter,
+      LLVMValueRef cmp = LLVMBuildICmp(gallivm->builder, LLVMIntEQ, loop_state[1].counter,
                                        lp_build_const_int32(gallivm, 0), "");
       /* first time here - call the coroutine function entry point */
       lp_build_if(&ifstate, gallivm, cmp);
@@ -651,24 +638,18 @@ generate_compute(struct llvmpipe_context *lp,
       lp_build_if(&ifstate2, gallivm, coro_done);
       /* if done destroy and force loop exit */
       lp_build_coro_destroy(gallivm, coro_hdl);
-      lp_build_loop_force_set_counter(&loop_state[3], lp_build_const_int32(gallivm, end_coroutine - 1));
+      lp_build_loop_force_set_counter(&loop_state[1], lp_build_const_int32(gallivm, end_coroutine - 1));
       lp_build_else(&ifstate2);
       /* otherwise resume the coroutine */
       lp_build_coro_resume(gallivm, coro_hdl);
       lp_build_endif(&ifstate2);
       lp_build_endif(&ifstate);
-      lp_build_loop_force_reload_counter(&loop_state[3]);
+      lp_build_loop_force_reload_counter(&loop_state[1]);
    }
    lp_build_loop_end_cond(&loop_state[0],
-                          num_x_loop,
+                          num_subgroup_loop,
                           NULL,  LLVMIntUGE);
    lp_build_loop_end_cond(&loop_state[1],
-                          block_y_size_arg,
-                          NULL,  LLVMIntUGE);
-   lp_build_loop_end_cond(&loop_state[2],
-                          block_z_size_arg,
-                          NULL,  LLVMIntUGE);
-   lp_build_loop_end_cond(&loop_state[3],
                           lp_build_const_int32(gallivm, end_coroutine),
                           NULL, LLVMIntEQ);
 
@@ -680,12 +661,8 @@ generate_compute(struct llvmpipe_context *lp,
    LLVMBuildRetVoid(builder);
 
    /* This is stage (b) - generate the compute shader code inside the coroutine. */
-   LLVMValueRef x_size_arg, y_size_arg, z_size_arg;
    context_ptr  = LLVMGetParam(coro, CS_ARG_CONTEXT);
    resources_ptr = LLVMGetParam(coro, CS_ARG_RESOURCES);
-   x_size_arg = LLVMGetParam(coro, CS_ARG_BLOCK_X_SIZE);
-   y_size_arg = LLVMGetParam(coro, CS_ARG_BLOCK_Y_SIZE);
-   z_size_arg = LLVMGetParam(coro, CS_ARG_BLOCK_Z_SIZE);
    grid_x_arg = LLVMGetParam(coro, CS_ARG_GRID_X);
    grid_y_arg = LLVMGetParam(coro, CS_ARG_GRID_Y);
    grid_z_arg = LLVMGetParam(coro, CS_ARG_GRID_Z);
@@ -696,12 +673,12 @@ generate_compute(struct llvmpipe_context *lp,
    draw_id_arg = LLVMGetParam(coro, CS_ARG_DRAW_ID);
    io_ptr = LLVMGetParam(coro, CS_ARG_VERTEX_DATA);
    thread_data_ptr  = LLVMGetParam(coro, CS_ARG_PER_THREAD_DATA);
-   num_x_loop = LLVMGetParam(coro, CS_ARG_CORO_X_LOOPS);
+   num_subgroup_loop = LLVMGetParam(coro, CS_ARG_CORO_SUBGROUP_COUNT);
    partials = LLVMGetParam(coro, CS_ARG_CORO_PARTIALS);
    block_x_size_arg = LLVMGetParam(coro, CS_ARG_CORO_BLOCK_X_SIZE);
    block_y_size_arg = LLVMGetParam(coro, CS_ARG_CORO_BLOCK_Y_SIZE);
    block_z_size_arg = LLVMGetParam(coro, CS_ARG_CORO_BLOCK_Z_SIZE);
-   LLVMValueRef coro_idx = LLVMGetParam(coro, CS_ARG_CORO_IDX);
+   LLVMValueRef subgroup_id = LLVMGetParam(coro, CS_ARG_CORO_IDX);
    coro_mem = LLVMGetParam(coro, CS_ARG_CORO_MEM);
    if (is_mesh)
       output_array = LLVMGetParam(coro, CS_ARG_CORO_OUTPUTS);
@@ -730,27 +707,32 @@ generate_compute(struct llvmpipe_context *lp,
                                                   variant->jit_cs_thread_data_type,
                                                   thread_data_ptr);
 
-      LLVMValueRef coro_num_hdls = LLVMBuildMul(gallivm->builder, num_x_loop, block_y_size_arg, "");
-      coro_num_hdls = LLVMBuildMul(gallivm->builder, coro_num_hdls, block_z_size_arg, "");
-
       /* these are coroutine entrypoint necessities */
       LLVMValueRef coro_id = lp_build_coro_id(gallivm);
-      LLVMValueRef coro_entry = lp_build_coro_alloc_mem_array(gallivm, coro_mem, coro_idx, coro_num_hdls);
+      LLVMValueRef coro_entry = lp_build_coro_alloc_mem_array(gallivm, coro_mem, subgroup_id, num_subgroup_loop);
       LLVMTypeRef mem_ptr_type = LLVMInt8TypeInContext(gallivm->context);
       LLVMValueRef alloced_ptr = LLVMBuildLoad2(gallivm->builder, hdl_ptr_type, coro_mem, "");
       alloced_ptr = LLVMBuildGEP2(gallivm->builder, mem_ptr_type, alloced_ptr, &coro_entry, 1, "");
       LLVMValueRef coro_hdl = lp_build_coro_begin(gallivm, coro_id, alloced_ptr);
       LLVMValueRef has_partials = LLVMBuildICmp(gallivm->builder, LLVMIntNE, partials, lp_build_const_int32(gallivm, 0), "");
-      LLVMValueRef tids_x[LP_MAX_VECTOR_LENGTH], tids_y[LP_MAX_VECTOR_LENGTH], tids_z[LP_MAX_VECTOR_LENGTH];
-      LLVMValueRef base_val = LLVMBuildMul(gallivm->builder, x_size_arg, vec_length, "");
-      for (i = 0; i < cs_type.length; i++) {
-         tids_x[i] = LLVMBuildAdd(gallivm->builder, base_val, lp_build_const_int32(gallivm, i), "");
-         tids_y[i] = y_size_arg;
-         tids_z[i] = z_size_arg;
-      }
-      system_values.thread_id[0] = lp_build_gather_values(gallivm, tids_x, cs_type.length);
-      system_values.thread_id[1] = lp_build_gather_values(gallivm, tids_y, cs_type.length);
-      system_values.thread_id[2] = lp_build_gather_values(gallivm, tids_z, cs_type.length);
+
+      struct lp_build_context bld;
+      lp_build_context_init(&bld, gallivm, lp_uint_type(cs_type));
+
+      LLVMValueRef base_val = LLVMBuildMul(gallivm->builder, subgroup_id, vec_length, "");
+      LLVMValueRef invocation_indices[LP_MAX_VECTOR_LENGTH];
+      for (i = 0; i < cs_type.length; i++)
+         invocation_indices[i] = LLVMBuildAdd(gallivm->builder, base_val, lp_build_const_int32(gallivm, i), "");
+      LLVMValueRef invocation_index = lp_build_gather_values(gallivm, invocation_indices, cs_type.length);
+
+      LLVMValueRef block_x_size_vec = lp_build_broadcast_scalar(&bld, block_x_size_arg);
+      LLVMValueRef block_y_size_vec = lp_build_broadcast_scalar(&bld, block_y_size_arg);
+
+      system_values.thread_id[0] = LLVMBuildURem(gallivm->builder, invocation_index, block_x_size_vec, "");
+      system_values.thread_id[1] = LLVMBuildUDiv(gallivm->builder, invocation_index, block_x_size_vec, "");
+      system_values.thread_id[1] = LLVMBuildURem(gallivm->builder, system_values.thread_id[1], block_y_size_vec, "");
+      system_values.thread_id[2] = LLVMBuildUDiv(gallivm->builder, invocation_index, block_x_size_vec, "");
+      system_values.thread_id[2] = LLVMBuildUDiv(gallivm->builder, system_values.thread_id[2], block_y_size_vec, "");
 
       system_values.block_id[0] = grid_x_arg;
       system_values.block_id[1] = grid_y_arg;
@@ -763,38 +745,15 @@ generate_compute(struct llvmpipe_context *lp,
       system_values.work_dim = work_dim_arg;
       system_values.draw_id = draw_id_arg;
 
-      /* subgroup_id = ((z * block_size_x * block_size_y) + (y * block_size_x) + x) / subgroup_size
-       *
-       * this breaks if z or y is zero, so distribute the division to preserve ids
-       *
-       * subgroup_id = ((z * block_size_x * block_size_y) / subgroup_size) + ((y * block_size_x) / subgroup_size) + (x / subgroup_size)
-       *
-       * except "x" is pre-divided here
-       *
-       * subgroup_id = ((z * block_size_x * block_size_y) / subgroup_size) + ((y * block_size_x) / subgroup_size) + x
-       */
-      LLVMValueRef subgroup_id = LLVMBuildUDiv(builder,
-                                               LLVMBuildMul(gallivm->builder, z_size_arg, LLVMBuildMul(gallivm->builder, block_x_size_arg, block_y_size_arg, ""), ""),
-                                               vec_length, "");
-      subgroup_id = LLVMBuildAdd(gallivm->builder,
-                                 subgroup_id,
-                                 LLVMBuildUDiv(builder, LLVMBuildMul(gallivm->builder, y_size_arg, block_x_size_arg, ""), vec_length, ""),
-                                 "");
-      subgroup_id = LLVMBuildAdd(gallivm->builder, subgroup_id, x_size_arg, "");
       system_values.subgroup_id = subgroup_id;
-      LLVMValueRef num_subgroups = LLVMBuildUDiv(builder,
-                                                 LLVMBuildMul(builder, block_x_size_arg,
-                                                              LLVMBuildMul(builder, block_y_size_arg, block_z_size_arg, ""), ""),
-                                                 vec_length, "");
-      LLVMValueRef subgroup_cmp = LLVMBuildICmp(gallivm->builder, LLVMIntEQ, num_subgroups, lp_build_const_int32(gallivm, 0), "");
-      system_values.num_subgroups = LLVMBuildSelect(builder, subgroup_cmp, lp_build_const_int32(gallivm, 1), num_subgroups, "");
+      system_values.num_subgroups = num_subgroup_loop;
 
       system_values.block_size[0] = block_x_size_arg;
       system_values.block_size[1] = block_y_size_arg;
       system_values.block_size[2] = block_z_size_arg;
 
-      LLVMValueRef last_x_loop = LLVMBuildICmp(gallivm->builder, LLVMIntEQ, x_size_arg, LLVMBuildSub(gallivm->builder, num_x_loop, lp_build_const_int32(gallivm, 1), ""), "");
-      LLVMValueRef use_partial_mask = LLVMBuildAnd(gallivm->builder, last_x_loop, has_partials, "");
+      LLVMValueRef last_loop = LLVMBuildICmp(gallivm->builder, LLVMIntEQ, subgroup_id, LLVMBuildSub(gallivm->builder, num_subgroup_loop, lp_build_const_int32(gallivm, 1), ""), "");
+      LLVMValueRef use_partial_mask = LLVMBuildAnd(gallivm->builder, last_loop, has_partials, "");
       struct lp_build_if_state if_state;
       LLVMTypeRef mask_type = LLVMVectorType(int32_type, cs_type.length);
       LLVMValueRef mask_val = lp_build_alloca(gallivm, mask_type, "mask");
@@ -866,7 +825,7 @@ generate_compute(struct llvmpipe_context *lp,
                                                         lp_int_type(cs_type), 0);
 
          struct lp_build_if_state iter0state;
-         LLVMValueRef is_iter0 = LLVMBuildICmp(gallivm->builder, LLVMIntEQ, coro_idx,
+         LLVMValueRef is_iter0 = LLVMBuildICmp(gallivm->builder, LLVMIntEQ, subgroup_id,
                                                lp_build_const_int32(gallivm, 0), "");
          LLVMValueRef vertex_count = LLVMBuildLoad2(gallivm->builder, i32t, mesh_iface.vertex_count, "");
          LLVMValueRef prim_count = LLVMBuildLoad2(gallivm->builder, i32t, mesh_iface.prim_count, "");
diff --git a/src/gallium/drivers/nouveau/ci/gitlab-ci-inc.yml b/src/gallium/drivers/nouveau/ci/gitlab-ci-inc.yml
index a2fb4821bc4..5d041b61282 100644
--- a/src/gallium/drivers/nouveau/ci/gitlab-ci-inc.yml
+++ b/src/gallium/drivers/nouveau/ci/gitlab-ci-inc.yml
@@ -70,20 +70,3 @@
   tags:
     - google-nouveau-jetson-nano
 
-# Single Jetson Nano board at anholt's house.
-.gm20b-gles-full:
-  extends:
-    - .gm20b-test
-    - .nouveau-manual-rules
-  timeout: 2h
-  variables:
-    HWCI_TEST_SCRIPT: "/install/deqp-runner.sh"
-    DEQP_SUITE: nouveau-gm20b
-    TEST_PHASE_TIMEOUT: 120
-
-.gm20b-gles:
-  extends:
-    - .gm20b-gles-full
-  timeout: 30m
-  variables:
-    DEQP_FRACTION: 10
diff --git a/src/gallium/drivers/nouveau/ci/gitlab-ci.yml b/src/gallium/drivers/nouveau/ci/gitlab-ci.yml
index 90ee2b58d82..673d77eaee2 100644
--- a/src/gallium/drivers/nouveau/ci/gitlab-ci.yml
+++ b/src/gallium/drivers/nouveau/ci/gitlab-ci.yml
@@ -12,3 +12,21 @@ gk20a-gles:
     DEQP_SUITE: nouveau-gk20a
     FARM : anholt
     DEVICE_TYPE: anholt-jetson
+
+# Single Jetson Nano board at anholt's house.
+.gm20b-gles-full:
+  extends:
+    - .gm20b-test
+    - .nouveau-manual-rules
+  timeout: 2h
+  variables:
+    HWCI_TEST_SCRIPT: "/install/deqp-runner.sh"
+    DEQP_SUITE: nouveau-gm20b
+    TEST_PHASE_TIMEOUT: 120
+
+.gm20b-gles:
+  extends:
+    - .gm20b-gles-full
+  timeout: 30m
+  variables:
+    DEQP_FRACTION: 10
diff --git a/src/gallium/drivers/nouveau/nouveau_screen.c b/src/gallium/drivers/nouveau/nouveau_screen.c
index 22924204514..e03ab87790d 100644
--- a/src/gallium/drivers/nouveau/nouveau_screen.c
+++ b/src/gallium/drivers/nouveau/nouveau_screen.c
@@ -80,7 +80,8 @@ nouveau_screen_fence_ref(struct pipe_screen *pscreen,
                          struct pipe_fence_handle **ptr,
                          struct pipe_fence_handle *pfence)
 {
-   nouveau_fence_ref(nouveau_fence(pfence), (struct nouveau_fence **)ptr);
+   nouveau_fence_ref((pfence ? nouveau_fence(pfence) : NULL),
+                     (ptr ? (struct nouveau_fence **)ptr : NULL));
 }
 
 static bool
@@ -291,6 +292,8 @@ nouveau_screen_init(struct nouveau_screen *screen, struct nouveau_device *dev)
    void *data;
    union nouveau_bo_config mm_config;
 
+   glsl_type_singleton_init_or_ref();
+
    char *nv_dbg = getenv("NOUVEAU_MESA_DEBUG");
    if (nv_dbg)
       nouveau_mesa_debug = atoi(nv_dbg);
@@ -442,8 +445,6 @@ nouveau_screen_init(struct nouveau_screen *screen, struct nouveau_device *dev)
                                        &mm_config);
    screen->mm_VRAM = nouveau_mm_create(dev, NOUVEAU_BO_VRAM, &mm_config);
 
-   glsl_type_singleton_init_or_ref();
-
    return 0;
 
 err:
diff --git a/src/gallium/drivers/panfrost/pan_cmdstream.c b/src/gallium/drivers/panfrost/pan_cmdstream.c
index 2930a546d51..3565588f113 100644
--- a/src/gallium/drivers/panfrost/pan_cmdstream.c
+++ b/src/gallium/drivers/panfrost/pan_cmdstream.c
@@ -622,6 +622,7 @@ panfrost_emit_frag_shader_meta(struct panfrost_batch *batch)
    struct panfrost_compiled_shader *ss = ctx->prog[PIPE_SHADER_FRAGMENT];
 
    panfrost_batch_add_bo(batch, ss->bin.bo, PIPE_SHADER_FRAGMENT);
+   panfrost_batch_add_bo(batch, ss->state.bo, PIPE_SHADER_FRAGMENT);
 
    struct panfrost_ptr xfer;
 
@@ -1380,7 +1381,8 @@ panfrost_emit_const_buf(struct panfrost_batch *batch,
             PAN_SYSVAL_TYPE(ss->sysvals.sysvals[sysval_idx]);
          mali_ptr ptr = push_transfer.gpu + (4 * i);
 
-         if (sysval_type == PAN_SYSVAL_NUM_WORK_GROUPS)
+         if (sysval_type == PAN_SYSVAL_NUM_WORK_GROUPS &&
+             sysval_comp < ARRAY_SIZE(batch->num_wg_sysval))
             batch->num_wg_sysval[sysval_comp] = ptr;
       }
       /* Map the UBO, this should be cheap. For some buffers this may
@@ -2495,6 +2497,8 @@ panfrost_initialize_surface(struct panfrost_batch *batch,
    if (surf) {
       struct panfrost_resource *rsrc = pan_resource(surf->texture);
       BITSET_SET(rsrc->valid.data, surf->u.tex.level);
+      if (rsrc->separate_stencil)
+         BITSET_SET(rsrc->separate_stencil->valid.data, surf->u.tex.level);
    }
 }
 
@@ -3021,6 +3025,11 @@ panfrost_launch_grid_on_batch(struct pipe_context *pipe,
    mali_ptr saved_tls = batch->tls.gpu;
    batch->tls.gpu = panfrost_emit_shared_memory(batch, info);
 
+   /* if indirect, mark the indirect buffer as being read */
+   if (info->indirect)
+      panfrost_batch_read_rsrc(batch, pan_resource(info->indirect), PIPE_SHADER_COMPUTE);
+
+   /* launch it */
    JOBX(launch_grid)(batch, info);
    batch->compute_count++;
    batch->tls.gpu = saved_tls;
diff --git a/src/gallium/drivers/panfrost/pan_job.c b/src/gallium/drivers/panfrost/pan_job.c
index 26f9be55060..c1baacc034d 100644
--- a/src/gallium/drivers/panfrost/pan_job.c
+++ b/src/gallium/drivers/panfrost/pan_job.c
@@ -635,16 +635,19 @@ panfrost_batch_submit(struct panfrost_context *ctx,
       struct pipe_surface *surf = batch->key.zsbuf;
       struct panfrost_resource *z_rsrc = pan_resource(surf->texture);
 
-      /* Shared depth/stencil resources are not supported, and would
-       * break this optimisation. */
-      assert(!(z_rsrc->base.bind & PAN_BIND_SHARED_MASK));
-
-      if (batch->clear & PIPE_CLEAR_STENCIL) {
-         z_rsrc->stencil_value = batch->clear_stencil;
-         z_rsrc->constant_stencil = true;
-      } else if (z_rsrc->constant_stencil) {
-         batch->clear_stencil = z_rsrc->stencil_value;
-         batch->clear |= PIPE_CLEAR_STENCIL;
+      /* if there are multiple levels or layers, we optimize only the first */
+      if (surf->u.tex.level == 0 && surf->u.tex.first_layer == 0) {
+         /* Shared depth/stencil resources are not supported, and would
+          * break this optimisation. */
+         assert(!(z_rsrc->base.bind & PAN_BIND_SHARED_MASK));
+
+         if (batch->clear & PIPE_CLEAR_STENCIL) {
+            z_rsrc->stencil_value = batch->clear_stencil;
+            z_rsrc->constant_stencil = true;
+         } else if (z_rsrc->constant_stencil) {
+            batch->clear_stencil = z_rsrc->stencil_value;
+            batch->clear |= PIPE_CLEAR_STENCIL;
+         }
       }
 
       if (batch->draws & PIPE_CLEAR_STENCIL)
diff --git a/src/gallium/drivers/panfrost/pan_resource.c b/src/gallium/drivers/panfrost/pan_resource.c
index aa2974eb5eb..7bf25155e51 100644
--- a/src/gallium/drivers/panfrost/pan_resource.c
+++ b/src/gallium/drivers/panfrost/pan_resource.c
@@ -1181,7 +1181,7 @@ panfrost_ptr_map(struct pipe_context *pctx, struct pipe_resource *resource,
    bool create_new_bo = usage & PIPE_MAP_DISCARD_WHOLE_RESOURCE;
    bool copy_resource = false;
 
-   if (!create_new_bo && !(usage & PIPE_MAP_UNSYNCHRONIZED) &&
+   if (!(usage & PIPE_MAP_UNSYNCHRONIZED) &&
        !(resource->flags & PIPE_RESOURCE_FLAG_MAP_PERSISTENT) &&
        (usage & PIPE_MAP_WRITE) && panfrost_any_batch_reads_rsrc(ctx, rsrc)) {
       /* When a resource to be modified is already being used by a
diff --git a/src/gallium/drivers/panfrost/pan_screen.c b/src/gallium/drivers/panfrost/pan_screen.c
index 1a3497b1b88..9ddce2b7e82 100644
--- a/src/gallium/drivers/panfrost/pan_screen.c
+++ b/src/gallium/drivers/panfrost/pan_screen.c
@@ -301,9 +301,7 @@ panfrost_get_param(struct pipe_screen *screen, enum pipe_cap param)
       return 4;
 
    case PIPE_CAP_MAX_VARYINGS:
-      /* Return the GLSL maximum. The internal maximum
-       * PAN_MAX_VARYINGS accommodates internal varyings. */
-      return MAX_VARYING;
+      return dev->arch >= 9 ? 16 : 32;
 
    /* Removed in v6 (Bifrost) */
    case PIPE_CAP_GL_CLAMP:
diff --git a/src/gallium/drivers/panfrost/pan_shader.c b/src/gallium/drivers/panfrost/pan_shader.c
index 27716bd64c1..fc6e6d546dd 100644
--- a/src/gallium/drivers/panfrost/pan_shader.c
+++ b/src/gallium/drivers/panfrost/pan_shader.c
@@ -383,10 +383,6 @@ panfrost_create_shader_state(struct pipe_context *pctx,
    struct panfrost_context *ctx = pan_context(pctx);
 
    if (so->nir->xfb_info) {
-      nir_shader *xfb = nir_shader_clone(NULL, so->nir);
-      xfb->info.name = ralloc_asprintf(xfb, "%s@xfb", xfb->info.name);
-      xfb->info.internal = true;
-
       so->xfb = calloc(1, sizeof(struct panfrost_compiled_shader));
       so->xfb->key.vs_is_xfb = true;
 
diff --git a/src/gallium/drivers/r300/ci/r300-r480-fails.txt b/src/gallium/drivers/r300/ci/r300-r480-fails.txt
index d092bbe3b38..a18f099845b 100644
--- a/src/gallium/drivers/r300/ci/r300-r480-fails.txt
+++ b/src/gallium/drivers/r300/ci/r300-r480-fails.txt
@@ -3,7 +3,6 @@ dEQP-GLES2.functional.clipping.line.wide_line_clip_viewport_corner,Fail
 dEQP-GLES2.functional.clipping.point.wide_point_clip,Fail
 dEQP-GLES2.functional.clipping.point.wide_point_clip_viewport_center,Fail
 dEQP-GLES2.functional.clipping.point.wide_point_clip_viewport_corner,Fail
-dEQP-GLES2.functional.draw.draw_elements.indices.user_ptr.index_byte,Fail
 dEQP-GLES2.functional.fbo.completeness.renderable.texture.color0.rgb_half_float_oes,Fail
 dEQP-GLES2.functional.fbo.render.repeated_clear.tex2d_rgb,Fail
 dEQP-GLES2.functional.fbo.render.repeated_clear.tex2d_rgba,Fail
diff --git a/src/gallium/drivers/r300/ci/r300-rv370-fails.txt b/src/gallium/drivers/r300/ci/r300-rv370-fails.txt
index 0c43c21baff..cd0b1b7b85d 100644
--- a/src/gallium/drivers/r300/ci/r300-rv370-fails.txt
+++ b/src/gallium/drivers/r300/ci/r300-rv370-fails.txt
@@ -3,7 +3,6 @@ dEQP-GLES2.functional.clipping.line.wide_line_clip_viewport_corner,Fail
 dEQP-GLES2.functional.clipping.point.wide_point_clip,Fail
 dEQP-GLES2.functional.clipping.point.wide_point_clip_viewport_center,Fail
 dEQP-GLES2.functional.clipping.point.wide_point_clip_viewport_corner,Fail
-dEQP-GLES2.functional.draw.draw_elements.indices.user_ptr.index_byte,Fail
 dEQP-GLES2.functional.fbo.completeness.renderable.texture.color0.rgb_half_float_oes,Fail
 dEQP-GLES2.functional.fbo.completeness.renderable.texture.color0.rgba_half_float_oes,Fail
 dEQP-GLES2.functional.fbo.render.repeated_clear.tex2d_rgb,Fail
diff --git a/src/gallium/drivers/r300/ci/r300-rv530-nohiz-fails.txt b/src/gallium/drivers/r300/ci/r300-rv530-nohiz-fails.txt
index 07fa9e6435b..21a8043dcb8 100644
--- a/src/gallium/drivers/r300/ci/r300-rv530-nohiz-fails.txt
+++ b/src/gallium/drivers/r300/ci/r300-rv530-nohiz-fails.txt
@@ -5,7 +5,6 @@ dEQP-GLES2.functional.clipping.point.wide_point_clip_viewport_corner,Fail
 dEQP-GLES2.functional.clipping.line.wide_line_clip_viewport_center,Fail
 dEQP-GLES2.functional.clipping.line.wide_line_clip_viewport_corner,Fail
 
-dEQP-GLES2.functional.draw.draw_elements.indices.user_ptr.index_byte,Fail
 
 # "Framebuffer checked as complete, expected incomplete"
 dEQP-GLES2.functional.fbo.completeness.renderable.texture.color0.rgb_half_float_oes,Fail
diff --git a/src/gallium/drivers/r300/compiler/r300_nir.c b/src/gallium/drivers/r300/compiler/r300_nir.c
index 1fc240fa7b5..d87e6c165c2 100644
--- a/src/gallium/drivers/r300/compiler/r300_nir.c
+++ b/src/gallium/drivers/r300/compiler/r300_nir.c
@@ -80,6 +80,7 @@ r300_optimize_nir(struct nir_shader *s, struct pipe_screen *screen)
       NIR_PASS_V(s, nir_lower_vars_to_ssa);
 
       NIR_PASS(progress, s, nir_copy_prop);
+      NIR_PASS(progress, s, r300_nir_lower_flrp);
       NIR_PASS(progress, s, nir_opt_algebraic);
       if (s->info.stage == MESA_SHADER_VERTEX) {
          if (!is_r500)
diff --git a/src/gallium/drivers/r300/compiler/r3xx_vertprog.c b/src/gallium/drivers/r300/compiler/r3xx_vertprog.c
index a02147a8244..00b9928164a 100644
--- a/src/gallium/drivers/r300/compiler/r3xx_vertprog.c
+++ b/src/gallium/drivers/r300/compiler/r3xx_vertprog.c
@@ -689,6 +689,7 @@ static void allocate_temporary_registers(struct radeon_compiler *c, void *user)
 
 	if (!ra_allocate(graph)) {
 		rc_error(c, "Ran out of hardware temporaries\n");
+                ralloc_free(graph);
 		return;
 	}
 
diff --git a/src/gallium/drivers/r300/compiler/r500_nir_lower_fcsel.c b/src/gallium/drivers/r300/compiler/r500_nir_lower_fcsel.c
index ac280870850..2f3ccb48c19 100644
--- a/src/gallium/drivers/r300/compiler/r500_nir_lower_fcsel.c
+++ b/src/gallium/drivers/r300/compiler/r500_nir_lower_fcsel.c
@@ -1,3 +1,8 @@
+/*
+ * Copyright Pavel Ondračka <pavel.ondracka@gmail.com>
+ * SPDX-License-Identifier: MIT
+ */
+
 #include <stdbool.h>
 #include "r300_nir.h"
 #include "nir_builder.h"
diff --git a/src/gallium/drivers/r300/compiler/radeon_pair_regalloc.c b/src/gallium/drivers/r300/compiler/radeon_pair_regalloc.c
index e7cabfa9d24..5f947678453 100644
--- a/src/gallium/drivers/r300/compiler/radeon_pair_regalloc.c
+++ b/src/gallium/drivers/r300/compiler/radeon_pair_regalloc.c
@@ -357,6 +357,7 @@ static void do_advanced_regalloc(struct regalloc_state * s)
 
 	if (!ra_allocate(graph)) {
 		rc_error(s->C, "Ran out of hardware temporaries\n");
+                ralloc_free(graph);
 		return;
 	}
 
diff --git a/src/gallium/drivers/r300/r300_context.c b/src/gallium/drivers/r300/r300_context.c
index edad0071a5a..433f669b58a 100644
--- a/src/gallium/drivers/r300/r300_context.c
+++ b/src/gallium/drivers/r300/r300_context.c
@@ -86,10 +86,15 @@ static void r300_destroy_context(struct pipe_context* context)
     if (r300->draw)
         draw_destroy(r300->draw);
 
+    for (unsigned i = 0; i < r300->nr_vertex_buffers; i++)
+       pipe_vertex_buffer_unreference(&r300->vertex_buffer[i]);
+
     if (r300->uploader)
         u_upload_destroy(r300->uploader);
     if (r300->context.stream_uploader)
         u_upload_destroy(r300->context.stream_uploader);
+    if (r300->context.const_uploader)
+       u_upload_destroy(r300->context.const_uploader);
 
     /* XXX: This function assumes r300->query_list was initialized */
     r300_release_referenced_objects(r300);
@@ -99,6 +104,7 @@ static void r300_destroy_context(struct pipe_context* context)
         r300->rws->ctx_destroy(r300->ctx);
 
     rc_destroy_regalloc_state(&r300->fs_regalloc_state);
+    rc_destroy_regalloc_state(&r300->vs_regalloc_state);
 
     /* XXX: No way to tell if this was initialized or not? */
     slab_destroy_child(&r300->pool_transfers);
@@ -125,6 +131,9 @@ static void r300_destroy_context(struct pipe_context* context)
             FREE(r300->vertex_stream_state.state);
         }
     }
+
+    FREE(r300->stencilref_fallback);
+
     FREE(r300);
 }
 
diff --git a/src/gallium/drivers/r300/r300_context.h b/src/gallium/drivers/r300/r300_context.h
index d7a784ac083..ff0962e835e 100644
--- a/src/gallium/drivers/r300/r300_context.h
+++ b/src/gallium/drivers/r300/r300_context.h
@@ -744,7 +744,8 @@ void r300_translate_index_buffer(struct r300_context *r300,
                                  const struct pipe_draw_info *info,
                                  struct pipe_resource **out_index_buffer,
                                  unsigned *index_size, unsigned index_offset,
-                                 unsigned *start, unsigned count);
+                                 unsigned *start, unsigned count,
+                                 const uint8_t **export_ptr);
 
 /* r300_render_stencilref.c */
 void r300_plug_in_stencil_ref_fallback(struct r300_context *r300);
diff --git a/src/gallium/drivers/r300/r300_fs.c b/src/gallium/drivers/r300/r300_fs.c
index 5300c8bf047..3179e77ce71 100644
--- a/src/gallium/drivers/r300/r300_fs.c
+++ b/src/gallium/drivers/r300/r300_fs.c
@@ -525,6 +525,8 @@ static void r300_translate_fragment_shader(
             abort();
         }
 
+        free(compiler.code->constants.Constants);
+        free(compiler.code->constants_remap_table);
         rc_destroy(&compiler.Base);
         r300_dummy_fragment_shader(r300, shader);
         return;
diff --git a/src/gallium/drivers/r300/r300_public.h b/src/gallium/drivers/r300/r300_public.h
index bf54cc4dfc0..89e4a9e9cac 100644
--- a/src/gallium/drivers/r300/r300_public.h
+++ b/src/gallium/drivers/r300/r300_public.h
@@ -1,4 +1,4 @@
-
+// SPDX-License-Identifier: MIT
 #ifndef R300_PUBLIC_H
 #define R300_PUBLIC_H
 
diff --git a/src/gallium/drivers/r300/r300_render.c b/src/gallium/drivers/r300/r300_render.c
index 858d1798b48..978d7d6c59d 100644
--- a/src/gallium/drivers/r300/r300_render.c
+++ b/src/gallium/drivers/r300/r300_render.c
@@ -601,6 +601,7 @@ static void r300_draw_elements(struct r300_context *r300,
     unsigned short_count;
     int buffer_offset = 0, index_offset = 0; /* for index bias emulation */
     uint16_t indices3[3];
+    const uint8_t *local_ptr = info->index.user;
 
     if (draw->index_bias && !r300->screen->caps.is_r500) {
         r300_split_index_bias(r300, draw->index_bias, &buffer_offset,
@@ -608,7 +609,7 @@ static void r300_draw_elements(struct r300_context *r300,
     }
 
     r300_translate_index_buffer(r300, info, &indexBuffer,
-                                &indexSize, index_offset, &start, count);
+                                &indexSize, index_offset, &start, count, &local_ptr);
 
     /* Fallback for misaligned ushort indices. */
     if (indexSize == 2 && (start & 1) && indexBuffer) {
@@ -628,10 +629,18 @@ static void r300_draw_elements(struct r300_context *r300,
                                      count, (uint8_t*)ptr);
         }
     } else {
-        if (info->has_user_indices)
-            r300_upload_index_buffer(r300, &indexBuffer, indexSize,
+        if (info->has_user_indices) {
+           struct pipe_resource* indexSaved = indexBuffer;
+
+           if (local_ptr != info->index.user)
+              start = 0;
+
+           r300_upload_index_buffer(r300, &indexBuffer, indexSize,
                                      &start, count,
-                                     info->index.user);
+                                     local_ptr);
+
+           pipe_resource_reference(&indexSaved, NULL);
+        }
     }
 
     /* 19 dwords for emit_draw_elements. Give up if the function fails. */
diff --git a/src/gallium/drivers/r300/r300_render_translate.c b/src/gallium/drivers/r300/r300_render_translate.c
index f3749815773..32d6a2ec5a9 100644
--- a/src/gallium/drivers/r300/r300_render_translate.c
+++ b/src/gallium/drivers/r300/r300_render_translate.c
@@ -29,20 +29,21 @@ void r300_translate_index_buffer(struct r300_context *r300,
                                  const struct pipe_draw_info *info,
                                  struct pipe_resource **out_buffer,
                                  unsigned *index_size, unsigned index_offset,
-                                 unsigned *start, unsigned count)
+                                 unsigned *start, unsigned count,
+                                 const uint8_t **export_ptr)
 {
     unsigned out_offset;
-    void *ptr;
+    void **ptr = (void **)export_ptr;
 
     switch (*index_size) {
     case 1:
         *out_buffer = NULL;
         u_upload_alloc(r300->uploader, 0, count * 2, 4,
-                       &out_offset, out_buffer, &ptr);
+                       &out_offset, out_buffer, ptr);
 
         util_shorten_ubyte_elts_to_userptr(
                 &r300->context, info, PIPE_MAP_UNSYNCHRONIZED, index_offset,
-                *start, count, ptr);
+                *start, count, *ptr);
 
         *index_size = 2;
         *start = out_offset / 2;
@@ -52,12 +53,12 @@ void r300_translate_index_buffer(struct r300_context *r300,
         if (index_offset) {
             *out_buffer = NULL;
             u_upload_alloc(r300->uploader, 0, count * 2, 4,
-                           &out_offset, out_buffer, &ptr);
+                           &out_offset, out_buffer, ptr);
 
             util_rebuild_ushort_elts_to_userptr(&r300->context, info,
                                                 PIPE_MAP_UNSYNCHRONIZED,
                                                 index_offset, *start,
-                                                count, ptr);
+                                                count, *ptr);
 
             *start = out_offset / 2;
         }
@@ -67,12 +68,12 @@ void r300_translate_index_buffer(struct r300_context *r300,
         if (index_offset) {
             *out_buffer = NULL;
             u_upload_alloc(r300->uploader, 0, count * 4, 4,
-                           &out_offset, out_buffer, &ptr);
+                           &out_offset, out_buffer, ptr);
 
             util_rebuild_uint_elts_to_userptr(&r300->context, info,
                                               PIPE_MAP_UNSYNCHRONIZED,
                                               index_offset, *start,
-                                              count, ptr);
+                                              count, *ptr);
 
             *start = out_offset / 4;
         }
diff --git a/src/gallium/drivers/r300/r300_state.c b/src/gallium/drivers/r300/r300_state.c
index a0177280444..ff825c796a2 100644
--- a/src/gallium/drivers/r300/r300_state.c
+++ b/src/gallium/drivers/r300/r300_state.c
@@ -1119,6 +1119,8 @@ static void r300_delete_fs_state(struct pipe_context* pipe, void* shader)
     struct r300_fragment_shader* fs = (struct r300_fragment_shader*)shader;
     struct r300_fragment_shader_code *tmp, *ptr = fs->first;
 
+    free(fs->shader->code.constants_remap_table);
+
     while (ptr) {
         tmp = ptr;
         ptr = ptr->next;
diff --git a/src/gallium/drivers/r300/r300_texture.c b/src/gallium/drivers/r300/r300_texture.c
index 23b38490d45..5bdeca72af9 100644
--- a/src/gallium/drivers/r300/r300_texture.c
+++ b/src/gallium/drivers/r300/r300_texture.c
@@ -1223,7 +1223,8 @@ struct pipe_surface* r300_create_surface_custom(struct pipe_context * ctx,
                                                tex->b.nr_samples,
                                                tex->tex.microtile,
                                                tex->tex.macrotile[level],
-                                               DIM_HEIGHT, 0);
+                                               DIM_HEIGHT, 0,
+                                               tex->b.bind & PIPE_BIND_SCANOUT);
 
         surface->cbzb_height = align((surface->base.height + 1) / 2,
                                      tile_height);
diff --git a/src/gallium/drivers/r300/r300_texture_desc.c b/src/gallium/drivers/r300/r300_texture_desc.c
index 7b1b2e21d2a..d8ebcad3a48 100644
--- a/src/gallium/drivers/r300/r300_texture_desc.c
+++ b/src/gallium/drivers/r300/r300_texture_desc.c
@@ -33,7 +33,8 @@ unsigned r300_get_pixel_alignment(enum pipe_format format,
                                   unsigned num_samples,
                                   enum radeon_bo_layout microtile,
                                   enum radeon_bo_layout macrotile,
-                                  enum r300_dim dim, bool is_rs690)
+                                  enum r300_dim dim, bool is_rs690,
+                                  bool scanout)
 {
     static const unsigned table[2][5][3][2] =
     {
@@ -75,6 +76,13 @@ unsigned r300_get_pixel_alignment(enum pipe_format format,
             tile = align;
     }
 
+    if (scanout) {
+        if (microtile || macrotile)
+           tile = MAX2(tile, 256 / pixsize);
+        else
+           tile = MAX2(tile, 64);
+    }
+
     assert(tile);
     return tile;
 }
@@ -92,7 +100,9 @@ static bool r300_texture_macro_switch(struct r300_resource *tex,
     }
 
     tile = r300_get_pixel_alignment(tex->b.format, tex->b.nr_samples,
-                                    tex->tex.microtile, RADEON_LAYOUT_TILED, dim, 0);
+                                    tex->tex.microtile, RADEON_LAYOUT_TILED, dim, 0,
+                                    tex->b.bind & PIPE_BIND_SCANOUT);
+
     if (dim == DIM_WIDTH) {
         texdim = u_minify(tex->tex.width0, level);
     } else {
@@ -133,11 +143,16 @@ static unsigned r300_texture_get_stride(struct r300_screen *screen,
     width = u_minify(tex->tex.width0, level);
 
     if (util_format_is_plain(tex->b.format)) {
+        /* MSAA and mipmapping are incompatible with scanout. */
+        assert(!(tex->b.bind & PIPE_BIND_SCANOUT) ||
+               (tex->b.last_level == 0 && tex->b.nr_samples <= 1));
+
         tile_width = r300_get_pixel_alignment(tex->b.format,
                                               tex->b.nr_samples,
                                               tex->tex.microtile,
                                               tex->tex.macrotile[level],
-                                              DIM_WIDTH, is_rs690);
+                                              DIM_WIDTH, is_rs690,
+                                              tex->b.bind & PIPE_BIND_SCANOUT);
         width = align(width, tile_width);
 
         stride = util_format_get_stride(tex->b.format, width);
@@ -169,7 +184,8 @@ static unsigned r300_texture_get_nblocksy(struct r300_resource *tex,
                                                tex->b.nr_samples,
                                                tex->tex.microtile,
                                                tex->tex.macrotile[level],
-                                               DIM_HEIGHT, 0);
+                                               DIM_HEIGHT, 0,
+                                               tex->b.bind & PIPE_BIND_SCANOUT);
         height = align(height, tile_height);
 
         /* See if the CBZB clear can be used on the buffer,
@@ -259,6 +275,11 @@ static void r300_setup_miptree(struct r300_screen *screen,
         tex->tex.stride_in_bytes[i] = stride;
         tex->tex.cbzb_allowed[i] = tex->tex.cbzb_allowed[i] && aligned_for_cbzb;
 
+        if (tex->b.bind & PIPE_BIND_SCANOUT) {
+           assert(i == 0);
+           tex->tex.stride_in_bytes_override = stride;
+        }
+
         SCREEN_DBG(screen, DBG_TEXALLOC, "r300: Texture miptree: Level %d "
                 "(%dx%dx%d px, pitch %d bytes) %d bytes total, macrotiled %s\n",
                 i, u_minify(tex->tex.width0, i), u_minify(tex->tex.height0, i),
diff --git a/src/gallium/drivers/r300/r300_texture_desc.h b/src/gallium/drivers/r300/r300_texture_desc.h
index 767335c1b90..45b7219acda 100644
--- a/src/gallium/drivers/r300/r300_texture_desc.h
+++ b/src/gallium/drivers/r300/r300_texture_desc.h
@@ -41,7 +41,8 @@ unsigned r300_get_pixel_alignment(enum pipe_format format,
                                   unsigned num_samples,
                                   enum radeon_bo_layout microtile,
                                   enum radeon_bo_layout macrotile,
-                                  enum r300_dim dim, bool is_rs690);
+                                  enum r300_dim dim, bool is_rs690,
+                                  bool scanout);
 
 void r300_texture_desc_init(struct r300_screen *rscreen,
                             struct r300_resource *tex,
diff --git a/src/gallium/drivers/r600/evergreen_state.c b/src/gallium/drivers/r600/evergreen_state.c
index fe6cb10b1e9..511a74e3dd4 100644
--- a/src/gallium/drivers/r600/evergreen_state.c
+++ b/src/gallium/drivers/r600/evergreen_state.c
@@ -2137,7 +2137,8 @@ static void evergreen_emit_vertex_buffers(struct r600_context *rctx,
 {
 	struct radeon_cmdbuf *cs = &rctx->b.gfx.cs;
 	struct r600_fetch_shader *shader = (struct r600_fetch_shader*)rctx->vertex_fetch_shader.cso;
-	uint32_t dirty_mask = state->dirty_mask & shader->buffer_mask;
+	uint32_t buffer_mask = shader ? shader->buffer_mask : ~0;
+	uint32_t dirty_mask = state->dirty_mask & buffer_mask;
 
 	while (dirty_mask) {
 		struct pipe_vertex_buffer *vb;
@@ -2176,7 +2177,7 @@ static void evergreen_emit_vertex_buffers(struct r600_context *rctx,
 		radeon_emit(cs, radeon_add_to_buffer_list(&rctx->b, &rctx->b.gfx, rbuffer,
 						      RADEON_USAGE_READ | RADEON_PRIO_VERTEX_BUFFER));
 	}
-	state->dirty_mask &= ~shader->buffer_mask;
+	state->dirty_mask &= ~buffer_mask;
 }
 
 static void evergreen_fs_emit_vertex_buffers(struct r600_context *rctx, struct r600_atom * atom)
diff --git a/src/gallium/drivers/r600/r600_formats.h b/src/gallium/drivers/r600/r600_formats.h
index f36e5534f29..6ce342c0a80 100644
--- a/src/gallium/drivers/r600/r600_formats.h
+++ b/src/gallium/drivers/r600/r600_formats.h
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: MIT
 #ifndef R600_FORMATS_H
 #define R600_FORMATS_H
 
diff --git a/src/gallium/drivers/r600/r600_opcodes.h b/src/gallium/drivers/r600/r600_opcodes.h
index 93dda44283a..6c294183480 100644
--- a/src/gallium/drivers/r600/r600_opcodes.h
+++ b/src/gallium/drivers/r600/r600_opcodes.h
@@ -1,4 +1,4 @@
-
+// SPDX-License-Identifier: MIT
 #ifndef R600_OPCODES_H
 #define R600_OPCODES_H
 
diff --git a/src/gallium/drivers/r600/sfn/sfn_instr_alu.cpp b/src/gallium/drivers/r600/sfn/sfn_instr_alu.cpp
index 5344d0653b6..f57017590d4 100644
--- a/src/gallium/drivers/r600/sfn/sfn_instr_alu.cpp
+++ b/src/gallium/drivers/r600/sfn/sfn_instr_alu.cpp
@@ -2101,6 +2101,14 @@ emit_alu_op2_64bit(const nir_alu_instr& alu,
 
    int num_emit0 = opcode == op2_mul_64 ? 3 : 1;
 
+   std::array<std::array<PRegister, 4>,2> tmp;
+   for (unsigned k = 0; k < alu.def.num_components; ++k) {
+      tmp[k][0] = shader.emit_load_to_register(value_factory.src64(alu.src[order[0]], k, 1), 0);
+      tmp[k][1] = shader.emit_load_to_register(value_factory.src64(alu.src[order[1]], k, 1), 1);
+      tmp[k][2] = shader.emit_load_to_register(value_factory.src64(alu.src[order[0]], k, 0), 2);
+      tmp[k][3] = shader.emit_load_to_register(value_factory.src64(alu.src[order[1]], k, 0), 3);
+   }
+
    assert(num_emit0 == 1 || alu.def.num_components == 1);
 
    for (unsigned k = 0; k < alu.def.num_components; ++k) {
@@ -2111,8 +2119,8 @@ emit_alu_op2_64bit(const nir_alu_instr& alu,
 
          ir = new AluInstr(opcode,
                            dest,
-                           value_factory.src64(alu.src[order[0]], k, 1),
-                           value_factory.src64(alu.src[order[1]], k, 1),
+                           tmp[k][0],
+                           tmp[k][1],
                            i < 2 ? AluInstr::write : AluInstr::empty);
          group->add_instruction(ir);
       }
@@ -2122,8 +2130,8 @@ emit_alu_op2_64bit(const nir_alu_instr& alu,
 
       ir = new AluInstr(opcode,
                         dest,
-                        value_factory.src64(alu.src[order[0]], k, 0),
-                        value_factory.src64(alu.src[order[1]], k, 0),
+                        tmp[k][2],
+                        tmp[k][3],
                         i == 1 ? AluInstr::write : AluInstr::empty);
       group->add_instruction(ir);
    }
@@ -2222,27 +2230,22 @@ static bool
 emit_alu_b2f64(const nir_alu_instr& alu, Shader& shader)
 {
    auto& value_factory = shader.value_factory();
-   auto group = new AluGroup();
-   AluInstr *ir = nullptr;
 
    for (unsigned i = 0; i < alu.def.num_components; ++i) {
-      ir = new AluInstr(op2_and_int,
+      auto ir = new AluInstr(op2_and_int,
                         value_factory.dest(alu.def, 2 * i, pin_group),
                         value_factory.src(alu.src[0], i),
                         value_factory.zero(),
                         {alu_write});
-      group->add_instruction(ir);
+      shader.emit_instruction(ir);
 
       ir = new AluInstr(op2_and_int,
                         value_factory.dest(alu.def, 2 * i + 1, pin_group),
                         value_factory.src(alu.src[0], i),
                         value_factory.literal(0x3ff00000),
                         {alu_write});
-      group->add_instruction(ir);
+      shader.emit_instruction(ir);
    }
-   if (ir)
-      ir->set_alu_flag(alu_last_instr);
-   shader.emit_instruction(group);
    return true;
 }
 
diff --git a/src/gallium/drivers/r600/sfn/sfn_shader.cpp b/src/gallium/drivers/r600/sfn/sfn_shader.cpp
index 7af0000f45b..2e374bd3301 100644
--- a/src/gallium/drivers/r600/sfn/sfn_shader.cpp
+++ b/src/gallium/drivers/r600/sfn/sfn_shader.cpp
@@ -938,13 +938,14 @@ lds_op_from_intrinsic(nir_atomic_op op, bool ret)
 }
 
 PRegister
-Shader::emit_load_to_register(PVirtualValue src)
+Shader::emit_load_to_register(PVirtualValue src, int chan)
 {
    assert(src);
    PRegister dest = src->as_register();
 
-   if (!dest) {
-      dest = value_factory().temp_register();
+   if (!dest || chan >= 0) {
+      dest = value_factory().temp_register(chan);
+      dest->set_pin(pin_free);
       emit_instruction(new AluInstr(op1_mov, dest, src, AluInstr::last_write));
    }
    return dest;
@@ -1364,6 +1365,22 @@ void Shader::InstructionChain::visit(AluInstr *instr)
          }
       }
    }
+
+   if (instr->has_lds_access()) {
+      last_lds_access = instr;
+      if (last_group_barrier)
+         instr->add_required_instr(last_group_barrier);
+   }
+
+   if (!instr->has_alu_flag(alu_is_lds) &&
+       instr->opcode() == op0_group_barrier) {
+      last_group_barrier = instr;
+      if (last_lds_access)
+         instr->add_required_instr(last_group_barrier);
+      if (last_ssbo_instr)
+         instr->add_required_instr(last_ssbo_instr);
+   }
+
 }
 
 void
@@ -1402,6 +1419,9 @@ Shader::InstructionChain::visit(RatInstr *instr)
 
    if (last_kill_instr)
       instr->add_required_instr(last_kill_instr);
+
+   if (last_group_barrier)
+      instr->add_required_instr(last_group_barrier);
 }
 
 void
@@ -1464,13 +1484,9 @@ Shader::emit_group_barrier(nir_intrinsic_instr *intr)
 {
    assert(m_control_flow_depth == 0);
    (void)intr;
-   /* Put barrier into it's own block, so that optimizers and the
-    * scheduler don't move code */
-   start_new_block(0);
    auto op = new AluInstr(op0_group_barrier, 0);
    op->set_alu_flag(alu_last_instr);
    emit_instruction(op);
-   start_new_block(0);
    return true;
 }
 
diff --git a/src/gallium/drivers/r600/sfn/sfn_shader.h b/src/gallium/drivers/r600/sfn/sfn_shader.h
index 9b442bdab04..e60c0da754a 100644
--- a/src/gallium/drivers/r600/sfn/sfn_shader.h
+++ b/src/gallium/drivers/r600/sfn/sfn_shader.h
@@ -261,7 +261,7 @@ public:
       return m_rat_return_address;
    }
 
-   PRegister emit_load_to_register(PVirtualValue src);
+   PRegister emit_load_to_register(PVirtualValue src, int chan = -1);
 
    virtual unsigned image_size_const_offset() { return 0;}
 
@@ -413,6 +413,8 @@ private:
       Instr *last_gds_instr{nullptr};
       Instr *last_ssbo_instr{nullptr};
       Instr *last_kill_instr{nullptr};
+      Instr *last_lds_access{nullptr};
+      Instr *last_group_barrier{nullptr};
       std::unordered_map<int, Instr * > last_alu_with_indirect_reg;
       bool prepare_mem_barrier{false};
    };
diff --git a/src/gallium/drivers/r600/sfn/sfn_shader_gs.h b/src/gallium/drivers/r600/sfn/sfn_shader_gs.h
index 206e7713052..aa40b0f078c 100644
--- a/src/gallium/drivers/r600/sfn/sfn_shader_gs.h
+++ b/src/gallium/drivers/r600/sfn/sfn_shader_gs.h
@@ -1,3 +1,9 @@
+/*
+ * Copyright 2021 Collabora LTD
+ * Author: Gert Wollny <gert.wollny@collabora.com>
+ * SPDX-License-Identifier: MIT
+ */
+
 #ifndef SFN_GEOMETRYSHADER_H
 #define SFN_GEOMETRYSHADER_H
 
diff --git a/src/gallium/drivers/r600/sfn/sfn_virtualvalues.cpp b/src/gallium/drivers/r600/sfn/sfn_virtualvalues.cpp
index 804d1bac2e4..9c70915e217 100644
--- a/src/gallium/drivers/r600/sfn/sfn_virtualvalues.cpp
+++ b/src/gallium/drivers/r600/sfn/sfn_virtualvalues.cpp
@@ -1076,6 +1076,7 @@ LocalArrayValue::accept(ConstRegisterVisitor& vistor) const
 void
 LocalArrayValue::add_parent_to_array(Instr *instr)
 {
+   m_array.add_parent(instr);
    if (m_addr)
       m_array.add_parent_to_elements(chan(), instr);
 }
diff --git a/src/gallium/drivers/radeonsi/radeon_uvd_enc.c b/src/gallium/drivers/radeonsi/radeon_uvd_enc.c
index c6daee96366..7c32a9d5056 100644
--- a/src/gallium/drivers/radeonsi/radeon_uvd_enc.c
+++ b/src/gallium/drivers/radeonsi/radeon_uvd_enc.c
@@ -80,9 +80,9 @@ static void radeon_uvd_enc_get_param(struct radeon_uvd_encoder *enc,
          enc->enc_pic.crop_bottom = pic->seq.conf_win_bottom_offset;
    } else {
          enc->enc_pic.crop_left = 0;
-         enc->enc_pic.crop_right = (align(enc->base.width, 16) - enc->base.width) / 2;
+         enc->enc_pic.crop_right = 0;
          enc->enc_pic.crop_top = 0;
-         enc->enc_pic.crop_bottom = (align(enc->base.height, 16) - enc->base.height) / 2;
+         enc->enc_pic.crop_bottom = 0;
    }
 
    enc->enc_pic.general_tier_flag = pic->seq.general_tier_flag;
diff --git a/src/gallium/drivers/radeonsi/radeon_uvd_enc_1_1.c b/src/gallium/drivers/radeonsi/radeon_uvd_enc_1_1.c
index 4ecaa4405c8..04d7bd88a32 100644
--- a/src/gallium/drivers/radeonsi/radeon_uvd_enc_1_1.c
+++ b/src/gallium/drivers/radeonsi/radeon_uvd_enc_1_1.c
@@ -203,9 +203,9 @@ static void radeon_uvd_enc_session_init_hevc(struct radeon_uvd_encoder *enc)
    enc->enc_pic.session_init.aligned_picture_width = align(enc->base.width, 64);
    enc->enc_pic.session_init.aligned_picture_height = align(enc->base.height, 16);
    enc->enc_pic.session_init.padding_width =
-      enc->enc_pic.session_init.aligned_picture_width - enc->base.width;
+      (enc->enc_pic.crop_left + enc->enc_pic.crop_right) * 2;
    enc->enc_pic.session_init.padding_height =
-      enc->enc_pic.session_init.aligned_picture_height - enc->base.height;
+      (enc->enc_pic.crop_top + enc->enc_pic.crop_bottom) * 2;
    enc->enc_pic.session_init.pre_encode_mode = RENC_UVD_PREENCODE_MODE_NONE;
    enc->enc_pic.session_init.pre_encode_chroma_enabled = false;
 
diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_dec.c b/src/gallium/drivers/radeonsi/radeon_vcn_dec.c
index c6fa84af78a..ee52d8c7f5a 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_dec.c
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_dec.c
@@ -239,15 +239,13 @@ static rvcn_dec_message_avc_t get_h264_msg(struct radeon_decoder *dec,
       }
    }
 
-   /* if reference picture exists, however no reference picture found at the end
-      curr_pic_ref_frame_num == 0, which is not reasonable, should be corrected. */
-   if (result.used_for_reference_flags && (result.curr_pic_ref_frame_num == 0)) {
-      for (i = 0; i < ARRAY_SIZE(result.ref_frame_list); i++) {
-         result.ref_frame_list[i] = pic->ref[i] ?
-                (uintptr_t)vl_video_buffer_get_associated_data(pic->ref[i], &dec->base) : 0xff;
-         if (result.ref_frame_list[i] != 0xff) {
+   /* need at least one reference for P/B frames */
+   if (result.curr_pic_ref_frame_num == 0 && pic->slice_parameter.slice_info_present) {
+      for (i = 0; i < pic->slice_count; i++) {
+         if (pic->slice_parameter.slice_type[i] % 5 != 2) {
             result.curr_pic_ref_frame_num++;
-            result.non_existing_frame_flags &= ~(1 << i);
+            result.ref_frame_list[0] = 0;
+            result.non_existing_frame_flags &= ~1;
             break;
          }
       }
@@ -279,7 +277,8 @@ static rvcn_dec_message_avc_t get_h264_msg(struct radeon_decoder *dec,
       dec->ref_codec.bts = CODEC_8_BITS;
       dec->ref_codec.index = result.decoded_pic_idx;
       dec->ref_codec.ref_size = 16;
-      memset(dec->ref_codec.ref_list, 0xff, sizeof(dec->ref_codec.ref_list));
+      dec->ref_codec.num_refs = result.curr_pic_ref_frame_num;
+      STATIC_ASSERT(sizeof(dec->ref_codec.ref_list) == sizeof(result.ref_frame_list));
       memcpy(dec->ref_codec.ref_list, result.ref_frame_list, sizeof(result.ref_frame_list));
    }
 
@@ -292,7 +291,7 @@ static rvcn_dec_message_hevc_t get_h265_msg(struct radeon_decoder *dec,
                                             struct pipe_h265_picture_desc *pic)
 {
    rvcn_dec_message_hevc_t result;
-   unsigned i, j;
+   unsigned i, j, num_refs = 0;
 
    memset(&result, 0, sizeof(result));
    result.sps_info_flags = 0;
@@ -307,15 +306,15 @@ static rvcn_dec_message_hevc_t get_h265_msg(struct radeon_decoder *dec,
    result.sps_info_flags |= pic->pps->sps->separate_colour_plane_flag << 8;
    if (((struct si_screen *)dec->screen)->info.family == CHIP_CARRIZO)
       result.sps_info_flags |= 1 << 9;
-   if (pic->UseRefPicList == true)
+   if (pic->UseRefPicList == true) {
       result.sps_info_flags |= 1 << 10;
+      result.sps_info_flags |= 1 << 12;
+   }
    if (pic->UseStRpsBits == true && pic->pps->st_rps_bits != 0) {
       result.sps_info_flags |= 1 << 11;
       result.st_rps_bits = pic->pps->st_rps_bits;
    }
 
-   result.sps_info_flags |= 1 << 12;
-
    result.chroma_format = pic->pps->sps->chroma_format_idc;
    result.bit_depth_luma_minus8 = pic->pps->sps->bit_depth_luma_minus8;
    result.bit_depth_chroma_minus8 = pic->pps->sps->bit_depth_chroma_minus8;
@@ -413,9 +412,10 @@ static rvcn_dec_message_hevc_t get_h265_msg(struct radeon_decoder *dec,
 
       result.poc_list[i] = pic->PicOrderCntVal[i];
 
-      if (ref)
+      if (ref) {
          ref_pic = (uintptr_t)vl_video_buffer_get_associated_data(ref, &dec->base);
-      else
+         num_refs++;
+      } else
          ref_pic = 0x7F;
       result.ref_pic_list[i] = ref_pic;
    }
@@ -469,7 +469,8 @@ static rvcn_dec_message_hevc_t get_h265_msg(struct radeon_decoder *dec,
          CODEC_10_BITS : CODEC_8_BITS;
       dec->ref_codec.index = result.curr_idx;
       dec->ref_codec.ref_size = 15;
-      memset(dec->ref_codec.ref_list, 0x7f, sizeof(dec->ref_codec.ref_list));
+      dec->ref_codec.num_refs = num_refs;
+      STATIC_ASSERT(sizeof(dec->ref_codec.ref_list) == sizeof(result.ref_pic_list));
       memcpy(dec->ref_codec.ref_list, result.ref_pic_list, sizeof(result.ref_pic_list));
    }
    return result;
@@ -507,7 +508,7 @@ static rvcn_dec_message_vp9_t get_vp9_msg(struct radeon_decoder *dec,
                                           struct pipe_vp9_picture_desc *pic)
 {
    rvcn_dec_message_vp9_t result;
-   unsigned i ,j;
+   unsigned i, j, num_refs = 0;
 
    memset(&result, 0, sizeof(result));
 
@@ -641,9 +642,13 @@ static rvcn_dec_message_vp9_t get_vp9_msg(struct radeon_decoder *dec,
    get_current_pic_index(dec, target, &result.curr_pic_idx);
 
    for (i = 0; i < 8; i++) {
-      result.ref_frame_map[i] =
-         (pic->ref[i]) ? (uintptr_t)vl_video_buffer_get_associated_data(pic->ref[i], &dec->base)
-                       : 0x7f;
+      uintptr_t ref_frame;
+      if (pic->ref[i]) {
+         ref_frame = (uintptr_t)vl_video_buffer_get_associated_data(pic->ref[i], &dec->base);
+         num_refs++;
+      } else
+         ref_frame = 0x7f;
+      result.ref_frame_map[i] = ref_frame;
    }
 
    result.frame_refs[0] = result.ref_frame_map[pic->picture_parameter.pic_fields.last_ref_frame];
@@ -669,6 +674,7 @@ static rvcn_dec_message_vp9_t get_vp9_msg(struct radeon_decoder *dec,
          CODEC_10_BITS : CODEC_8_BITS;
       dec->ref_codec.index = result.curr_pic_idx;
       dec->ref_codec.ref_size = 8;
+      dec->ref_codec.num_refs = num_refs;
       memset(dec->ref_codec.ref_list, 0x7f, sizeof(dec->ref_codec.ref_list));
       memcpy(dec->ref_codec.ref_list, result.ref_frame_map, sizeof(result.ref_frame_map));
    }
@@ -959,7 +965,7 @@ static rvcn_dec_message_av1_t get_av1_msg(struct radeon_decoder *dec,
                                           struct pipe_av1_picture_desc *pic)
 {
    rvcn_dec_message_av1_t result;
-   unsigned i, j;
+   unsigned i, j, num_refs = 0;
    uint16_t tile_count = pic->picture_parameter.tile_cols * pic->picture_parameter.tile_rows;
 
    memset(&result, 0, sizeof(result));
@@ -1151,9 +1157,13 @@ static rvcn_dec_message_av1_t get_av1_msg(struct radeon_decoder *dec,
    result.order_hint_bits = pic->picture_parameter.order_hint_bits_minus_1 + 1;
 
    for (i = 0; i < NUM_AV1_REFS; ++i) {
-      result.ref_frame_map[i] =
-         (pic->ref[i]) ? (uintptr_t)vl_video_buffer_get_associated_data(pic->ref[i], &dec->base)
-                       : 0x7f;
+      uintptr_t ref_frame;
+      if (pic->ref[i]) {
+         ref_frame = (uintptr_t)vl_video_buffer_get_associated_data(pic->ref[i], &dec->base);
+         num_refs++;
+      } else
+         ref_frame = 0x7f;
+      result.ref_frame_map[i] = ref_frame;
    }
    for (i = 0; i < NUM_AV1_REFS_PER_FRAME; ++i)
        result.frame_refs[i] = result.ref_frame_map[pic->picture_parameter.ref_frame_idx[i]];
@@ -1300,6 +1310,7 @@ static rvcn_dec_message_av1_t get_av1_msg(struct radeon_decoder *dec,
       dec->ref_codec.bts = pic->picture_parameter.bit_depth_idx ? CODEC_10_BITS : CODEC_8_BITS;
       dec->ref_codec.index = result.curr_pic_idx;
       dec->ref_codec.ref_size = 8;
+      dec->ref_codec.num_refs = num_refs;
       memset(dec->ref_codec.ref_list, 0x7f, sizeof(dec->ref_codec.ref_list));
       memcpy(dec->ref_codec.ref_list, result.ref_frame_map, sizeof(result.ref_frame_map));
    }
@@ -1816,6 +1827,7 @@ static unsigned rvcn_dec_dynamic_dpb_t2_message(struct radeon_decoder *dec, rvcn
       size = size * 3 / 2;
 
    list_for_each_entry_safe(struct rvcn_dec_dynamic_dpb_t2, d, &dec->dpb_ref_list, list) {
+      bool found = false;
       for (i = 0; i < dec->ref_codec.ref_size; ++i) {
          if (((dec->ref_codec.ref_list[i] & 0x7f) != 0x7f) && (d->index == (dec->ref_codec.ref_list[i] & 0x7f))) {
             if (!dummy)
@@ -1829,10 +1841,10 @@ static unsigned rvcn_dec_dynamic_dpb_t2_message(struct radeon_decoder *dec, rvcn
             dynamic_dpb_t2->dpbAddrLo[i] = addr;
             dynamic_dpb_t2->dpbAddrHi[i] = addr >> 32;
             ++dynamic_dpb_t2->dpbArraySize;
-            break;
+            found = true;
          }
       }
-      if (i == dec->ref_codec.ref_size) {
+      if (!found) {
          if (d->dpb.res->b.b.width0 * d->dpb.res->b.b.height0 != size) {
             list_del(&d->list);
             list_addtail(&d->list, &dec->dpb_unref_list);
@@ -1887,6 +1899,23 @@ static unsigned rvcn_dec_dynamic_dpb_t2_message(struct radeon_decoder *dec, rvcn
       list_addtail(&dpb->list, &dec->dpb_ref_list);
    }
 
+   if (dynamic_dpb_t2->dpbArraySize < dec->ref_codec.num_refs) {
+      struct rvcn_dec_dynamic_dpb_t2 *d =
+         list_first_entry(&dec->dpb_ref_list, struct rvcn_dec_dynamic_dpb_t2, list);
+      addr = dec->ws->buffer_get_virtual_address(d->dpb.res->buf);
+      if (!addr && dummy)
+         addr = dec->ws->buffer_get_virtual_address(dummy->dpb.res->buf);
+      assert(addr);
+      for (i = 0; i < dec->ref_codec.num_refs; ++i) {
+         if (dynamic_dpb_t2->dpbAddrLo[i] || dynamic_dpb_t2->dpbAddrHi[i])
+            continue;
+         dynamic_dpb_t2->dpbAddrLo[i] = addr;
+         dynamic_dpb_t2->dpbAddrHi[i] = addr >> 32;
+         ++dynamic_dpb_t2->dpbArraySize;
+      }
+      assert(dynamic_dpb_t2->dpbArraySize == dec->ref_codec.num_refs);
+   }
+
    dec->ws->cs_add_buffer(&dec->cs, dpb->dpb.res->buf,
       RADEON_USAGE_READWRITE | RADEON_USAGE_SYNCHRONIZED, RADEON_DOMAIN_VRAM);
    addr = dec->ws->buffer_get_virtual_address(dpb->dpb.res->buf);
@@ -2873,9 +2902,6 @@ static void radeon_dec_decode_bitstream(struct pipe_video_codec *decoder,
    if (!dec->bs_ptr)
       return;
 
-   if (dec->bs_size && dec->stream_type == RDECODE_CODEC_AV1)
-      return;
-
    unsigned long total_bs_size = dec->bs_size;
    for (i = 0; i < num_buffers; ++i)
       total_bs_size += sizes[i];
diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_dec.h b/src/gallium/drivers/radeonsi/radeon_vcn_dec.h
index 1be65c7ded8..3d502ce7b66 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_dec.h
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_dec.h
@@ -120,6 +120,7 @@ struct radeon_decoder {
       } bts;
       uint8_t index;
       unsigned ref_size;
+      unsigned num_refs;
       uint8_t ref_list[16];
    } ref_codec;
 
diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_enc.c b/src/gallium/drivers/radeonsi/radeon_vcn_enc.c
index 9d0aa41e342..fb5ad4822af 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_enc.c
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_enc.c
@@ -196,9 +196,9 @@ static void radeon_vcn_enc_h264_get_cropping_param(struct radeon_encoder *enc,
       enc->enc_pic.crop_bottom = pic->seq.enc_frame_crop_bottom_offset;
    } else {
       enc->enc_pic.crop_left = 0;
-      enc->enc_pic.crop_right = (align(enc->base.width, 16) - enc->base.width) / 2;
+      enc->enc_pic.crop_right = 0;
       enc->enc_pic.crop_top = 0;
-      enc->enc_pic.crop_bottom = (align(enc->base.height, 16) - enc->base.height) / 2;
+      enc->enc_pic.crop_bottom = 0;
    }
 }
 
@@ -238,7 +238,6 @@ static void radeon_vcn_enc_h264_get_rc_param(struct radeon_encoder *enc,
    uint32_t frame_rate_den, frame_rate_num;
 
    enc->enc_pic.num_temporal_layers = pic->seq.num_temporal_layers ? pic->seq.num_temporal_layers : 1;
-   enc->enc_pic.temporal_id = 0;
    for (int i = 0; i < enc->enc_pic.num_temporal_layers; i++) {
       enc->enc_pic.rc_layer_init[i].target_bit_rate = pic->rate_ctrl[i].target_bitrate;
       enc->enc_pic.rc_layer_init[i].peak_bit_rate = pic->rate_ctrl[i].peak_bitrate;
@@ -446,9 +445,9 @@ static void radeon_vcn_enc_hevc_get_cropping_param(struct radeon_encoder *enc,
       enc->enc_pic.crop_bottom = pic->seq.conf_win_bottom_offset;
    } else {
       enc->enc_pic.crop_left = 0;
-      enc->enc_pic.crop_right = (align(enc->base.width, 16) - enc->base.width) / 2;
+      enc->enc_pic.crop_right = 0;
       enc->enc_pic.crop_top = 0;
-      enc->enc_pic.crop_bottom = (align(enc->base.height, 16) - enc->base.height) / 2;
+      enc->enc_pic.crop_bottom = 0;
    }
 }
 
@@ -1119,7 +1118,7 @@ static void radeon_enc_begin_frame(struct pipe_video_codec *encoder,
       enc->si = CALLOC_STRUCT(rvid_buffer);
       if (!enc->si ||
           !enc->stream_handle ||
-          !si_vid_create_buffer(enc->screen, enc->si, 128 * 1024, PIPE_USAGE_STAGING)) {
+          !si_vid_create_buffer(enc->screen, enc->si, 128 * 1024, PIPE_USAGE_DEFAULT)) {
          RVID_ERR("Can't create session buffer.\n");
          goto error;
       }
diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_enc_1_2.c b/src/gallium/drivers/radeonsi/radeon_vcn_enc_1_2.c
index cb1b2957c49..b1d4d40808e 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_enc_1_2.c
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_enc_1_2.c
@@ -81,10 +81,12 @@ static void radeon_enc_session_init(struct radeon_encoder *enc)
       enc->enc_pic.session_init.aligned_picture_width = align(enc->base.width, 64);
    }
    enc->enc_pic.session_init.aligned_picture_height = align(enc->base.height, 16);
+
    enc->enc_pic.session_init.padding_width =
-      enc->enc_pic.session_init.aligned_picture_width - enc->base.width;
+      (enc->enc_pic.crop_left + enc->enc_pic.crop_right) * 2;
    enc->enc_pic.session_init.padding_height =
-      enc->enc_pic.session_init.aligned_picture_height - enc->base.height;
+      (enc->enc_pic.crop_top + enc->enc_pic.crop_bottom) * 2;
+
    enc->enc_pic.session_init.display_remote = 0;
    enc->enc_pic.session_init.pre_encode_mode = enc->enc_pic.quality_modes.pre_encode_mode;
    enc->enc_pic.session_init.pre_encode_chroma_enabled = !!(enc->enc_pic.quality_modes.pre_encode_mode);
@@ -114,8 +116,6 @@ static void radeon_enc_layer_control(struct radeon_encoder *enc)
 
 static void radeon_enc_layer_select(struct radeon_encoder *enc)
 {
-   enc->enc_pic.layer_sel.temporal_layer_index = enc->enc_pic.temporal_id;
-
    RADEON_ENC_BEGIN(enc->cmd.layer_select);
    RADEON_ENC_CS(enc->enc_pic.layer_sel.temporal_layer_index);
    RADEON_ENC_END();
@@ -183,7 +183,7 @@ static void radeon_enc_rc_session_init(struct radeon_encoder *enc)
 
 static void radeon_enc_rc_layer_init(struct radeon_encoder *enc)
 {
-   unsigned int i = enc->enc_pic.temporal_id;
+   unsigned int i = enc->enc_pic.layer_sel.temporal_layer_index;
    RADEON_ENC_BEGIN(enc->cmd.rc_layer_init);
    RADEON_ENC_CS(enc->enc_pic.rc_layer_init[i].target_bit_rate);
    RADEON_ENC_CS(enc->enc_pic.rc_layer_init[i].peak_bit_rate);
@@ -221,7 +221,9 @@ static void radeon_enc_deblocking_filter_hevc(struct radeon_encoder *enc)
 
 static void radeon_enc_quality_params(struct radeon_encoder *enc)
 {
-   enc->enc_pic.quality_params.vbaq_mode = enc->enc_pic.quality_modes.vbaq_mode;
+   enc->enc_pic.quality_params.vbaq_mode =
+      enc->enc_pic.rc_session_init.rate_control_method != RENCODE_RATE_CONTROL_METHOD_NONE ?
+      enc->enc_pic.quality_modes.vbaq_mode : 0;
    enc->enc_pic.quality_params.scene_change_sensitivity = 0;
    enc->enc_pic.quality_params.scene_change_min_idr_interval = 0;
    enc->enc_pic.quality_params.two_pass_search_center_map_mode =
@@ -779,7 +781,12 @@ static void radeon_enc_nalu_vps(struct radeon_encoder *enc)
    radeon_enc_code_fixed_bits(enc, 0x0, 2);
    radeon_enc_code_fixed_bits(enc, enc->enc_pic.general_tier_flag, 1);
    radeon_enc_code_fixed_bits(enc, enc->enc_pic.general_profile_idc, 5);
-   radeon_enc_code_fixed_bits(enc, 0x60000000, 32);
+
+   if (enc->enc_pic.general_profile_idc == 2)
+      radeon_enc_code_fixed_bits(enc, 0x20000000, 32);
+   else
+      radeon_enc_code_fixed_bits(enc, 0x60000000, 32);
+
    radeon_enc_code_fixed_bits(enc, 0xb0000000, 32);
    radeon_enc_code_fixed_bits(enc, 0x0, 16);
    radeon_enc_code_fixed_bits(enc, enc->enc_pic.general_level_idc, 8);
@@ -1350,7 +1357,7 @@ static void begin(struct radeon_encoder *enc)
 
    i = 0;
    do {
-      enc->enc_pic.temporal_id = i;
+      enc->enc_pic.layer_sel.temporal_layer_index = i;
       enc->layer_select(enc);
       enc->rc_layer_init(enc);
       enc->layer_select(enc);
@@ -1402,7 +1409,7 @@ static void encode(struct radeon_encoder *enc)
    if (enc->need_rate_control) {
       i = 0;
       do {
-         enc->enc_pic.temporal_id = i;
+         enc->enc_pic.layer_sel.temporal_layer_index = i;
          enc->layer_select(enc);
          enc->rc_layer_init(enc);
       } while (++i < enc->enc_pic.num_temporal_layers);
diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_enc_2_0.c b/src/gallium/drivers/radeonsi/radeon_vcn_enc_2_0.c
index aefbd3192e8..3ecf88e2142 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_enc_2_0.c
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_enc_2_0.c
@@ -68,7 +68,9 @@ static void radeon_enc_op_preset(struct radeon_encoder *enc)
 
 static void radeon_enc_quality_params(struct radeon_encoder *enc)
 {
-   enc->enc_pic.quality_params.vbaq_mode = enc->enc_pic.quality_modes.vbaq_mode;
+   enc->enc_pic.quality_params.vbaq_mode =
+      enc->enc_pic.rc_session_init.rate_control_method != RENCODE_RATE_CONTROL_METHOD_NONE ?
+      enc->enc_pic.quality_modes.vbaq_mode : 0;
    enc->enc_pic.quality_params.scene_change_sensitivity = 0;
    enc->enc_pic.quality_params.scene_change_min_idr_interval = 0;
    enc->enc_pic.quality_params.two_pass_search_center_map_mode =
@@ -515,7 +517,7 @@ static void encode(struct radeon_encoder *enc)
    if (enc->need_rate_control) {
       i = 0;
       do {
-         enc->enc_pic.temporal_id = i;
+         enc->enc_pic.layer_sel.temporal_layer_index = i;
          enc->layer_select(enc);
          enc->rc_layer_init(enc);
       } while (++i < enc->enc_pic.num_temporal_layers);
diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_enc_3_0.c b/src/gallium/drivers/radeonsi/radeon_vcn_enc_3_0.c
index ce94f221c1c..f2e217884d4 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_enc_3_0.c
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_enc_3_0.c
@@ -98,7 +98,9 @@ static void radeon_enc_encode_params_h264(struct radeon_encoder *enc)
 
 static void radeon_enc_quality_params(struct radeon_encoder *enc)
 {
-   enc->enc_pic.quality_params.vbaq_mode = enc->enc_pic.quality_modes.vbaq_mode;
+   enc->enc_pic.quality_params.vbaq_mode =
+      enc->enc_pic.rc_session_init.rate_control_method != RENCODE_RATE_CONTROL_METHOD_NONE ?
+      enc->enc_pic.quality_modes.vbaq_mode : 0;
    enc->enc_pic.quality_params.scene_change_sensitivity = 0;
    enc->enc_pic.quality_params.scene_change_min_idr_interval = 0;
    enc->enc_pic.quality_params.two_pass_search_center_map_mode =
@@ -506,10 +508,12 @@ static void radeon_enc_session_init(struct radeon_encoder *enc)
       enc->enc_pic.session_init.aligned_picture_width = align(enc->base.width, 64);
    }
    enc->enc_pic.session_init.aligned_picture_height = align(enc->base.height, 16);
+
    enc->enc_pic.session_init.padding_width =
-      enc->enc_pic.session_init.aligned_picture_width - enc->base.width;
+      (enc->enc_pic.crop_left + enc->enc_pic.crop_right) * 2;
    enc->enc_pic.session_init.padding_height =
-      enc->enc_pic.session_init.aligned_picture_height - enc->base.height;
+      (enc->enc_pic.crop_top + enc->enc_pic.crop_bottom) * 2;
+
    enc->enc_pic.session_init.slice_output_enabled = 0;
    enc->enc_pic.session_init.display_remote = 0;
    enc->enc_pic.session_init.pre_encode_mode = enc->enc_pic.quality_modes.pre_encode_mode;
diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_enc_4_0.c b/src/gallium/drivers/radeonsi/radeon_vcn_enc_4_0.c
index 5255922a555..f15ea7930ba 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_enc_4_0.c
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_enc_4_0.c
@@ -81,7 +81,6 @@ static void radeon_enc_op_preset(struct radeon_encoder *enc)
 
 static void radeon_enc_session_init(struct radeon_encoder *enc)
 {
-   bool av1_encoding = false;
    uint32_t av1_height = enc->enc_pic.pic_height_in_luma_samples;
 
    switch (u_reduce_video_profile(enc->base.profile)) {
@@ -89,11 +88,20 @@ static void radeon_enc_session_init(struct radeon_encoder *enc)
          enc->enc_pic.session_init.encode_standard = RENCODE_ENCODE_STANDARD_H264;
          enc->enc_pic.session_init.aligned_picture_width = align(enc->base.width, 16);
          enc->enc_pic.session_init.aligned_picture_height = align(enc->base.height, 16);
+
+         enc->enc_pic.session_init.padding_width =
+            (enc->enc_pic.crop_left + enc->enc_pic.crop_right) * 2;
+         enc->enc_pic.session_init.padding_height =
+            (enc->enc_pic.crop_top + enc->enc_pic.crop_bottom) * 2;
          break;
       case PIPE_VIDEO_FORMAT_HEVC:
          enc->enc_pic.session_init.encode_standard = RENCODE_ENCODE_STANDARD_HEVC;
          enc->enc_pic.session_init.aligned_picture_width = align(enc->base.width, 64);
          enc->enc_pic.session_init.aligned_picture_height = align(enc->base.height, 16);
+         enc->enc_pic.session_init.padding_width =
+            (enc->enc_pic.crop_left + enc->enc_pic.crop_right) * 2;
+         enc->enc_pic.session_init.padding_height =
+            (enc->enc_pic.crop_top + enc->enc_pic.crop_bottom) * 2;
          break;
       case PIPE_VIDEO_FORMAT_AV1:
          enc->enc_pic.session_init.encode_standard = RENCODE_ENCODE_STANDARD_AV1;
@@ -104,33 +112,24 @@ static void radeon_enc_session_init(struct radeon_encoder *enc)
          if (!(av1_height % 8) && (av1_height % 16) && !(enc->enc_pic.enable_render_size))
             enc->enc_pic.session_init.aligned_picture_height = av1_height + 2;
 
-         av1_encoding = true;
+         enc->enc_pic.session_init.padding_width =
+            enc->enc_pic.session_init.aligned_picture_width -
+            enc->enc_pic.pic_width_in_luma_samples;
+         enc->enc_pic.session_init.padding_height =
+            enc->enc_pic.session_init.aligned_picture_height - av1_height;
+
+         if (enc->enc_pic.enable_render_size)
+            enc->enc_pic.enable_render_size =
+                           (enc->enc_pic.session_init.aligned_picture_width !=
+                            enc->enc_pic.render_width) ||
+                           (enc->enc_pic.session_init.aligned_picture_height !=
+                            enc->enc_pic.render_height);
          break;
       default:
          assert(0);
          break;
    }
 
-   enc->enc_pic.session_init.padding_width =
-      enc->enc_pic.session_init.aligned_picture_width - enc->base.width;
-   enc->enc_pic.session_init.padding_height =
-      enc->enc_pic.session_init.aligned_picture_height - enc->base.height;
-
-   if (av1_encoding) {
-      enc->enc_pic.session_init.padding_width =
-         enc->enc_pic.session_init.aligned_picture_width -
-         enc->enc_pic.pic_width_in_luma_samples;
-      enc->enc_pic.session_init.padding_height =
-         enc->enc_pic.session_init.aligned_picture_height - av1_height;
-
-      if (enc->enc_pic.enable_render_size)
-         enc->enc_pic.enable_render_size =
-                        (enc->enc_pic.session_init.aligned_picture_width !=
-                         enc->enc_pic.render_width) ||
-                        (enc->enc_pic.session_init.aligned_picture_height !=
-                         enc->enc_pic.render_height);
-   }
-
    enc->enc_pic.session_init.slice_output_enabled = 0;
    enc->enc_pic.session_init.display_remote = 0;
    enc->enc_pic.session_init.pre_encode_mode = enc->enc_pic.quality_modes.pre_encode_mode;
diff --git a/src/gallium/drivers/radeonsi/si_blit.c b/src/gallium/drivers/radeonsi/si_blit.c
index 81142d75560..6bc6511adea 100644
--- a/src/gallium/drivers/radeonsi/si_blit.c
+++ b/src/gallium/drivers/radeonsi/si_blit.c
@@ -962,6 +962,13 @@ void si_resource_copy_region(struct pipe_context *ctx, struct pipe_resource *dst
                              src_box, SI_OP_SYNC_BEFORE_AFTER))
       return;
 
+   /* If the blitter isn't available fail here instead of crashing. */
+   if (!sctx->blitter) {
+      fprintf(stderr, "si_resource_copy_region failed src_format: %s dst_format: %s\n",
+              util_format_name(src->format), util_format_name(dst->format));
+      return;
+   }
+
    assert(u_max_sample(dst) == u_max_sample(src));
 
    /* The driver doesn't decompress resources automatically while
diff --git a/src/gallium/drivers/radeonsi/si_buffer.c b/src/gallium/drivers/radeonsi/si_buffer.c
index 85d0ea5dffc..f4dfd27881f 100644
--- a/src/gallium/drivers/radeonsi/si_buffer.c
+++ b/src/gallium/drivers/radeonsi/si_buffer.c
@@ -176,6 +176,15 @@ bool si_alloc_resource(struct si_screen *sscreen, struct si_resource *res)
    util_range_set_empty(&res->valid_buffer_range);
    res->TC_L2_dirty = false;
 
+   if (res->b.b.target != PIPE_BUFFER && !(res->b.b.flags & SI_RESOURCE_AUX_PLANE)) {
+      /* The buffer is shared with other planes. */
+      struct si_resource *plane = (struct si_resource *)res->b.b.next;
+      for (; plane; plane = (struct si_resource *)plane->b.b.next) {
+         radeon_bo_reference(sscreen->ws, &plane->buf, res->buf);
+         plane->gpu_address = res->gpu_address;
+      }
+   }
+
    /* Print debug information. */
    if (sscreen->debug_flags & DBG(VM) && res->b.b.target == PIPE_BUFFER) {
       fprintf(stderr, "VM start=0x%" PRIX64 "  end=0x%" PRIX64 " | Buffer %" PRIu64 " bytes | Flags: ",
diff --git a/src/gallium/drivers/radeonsi/si_compute_blit.c b/src/gallium/drivers/radeonsi/si_compute_blit.c
index cdcf255b187..66dee97c643 100644
--- a/src/gallium/drivers/radeonsi/si_compute_blit.c
+++ b/src/gallium/drivers/radeonsi/si_compute_blit.c
@@ -659,12 +659,30 @@ bool si_compute_copy_image(struct si_context *sctx, struct pipe_resource *dst, u
     */
    if (!util_format_is_compressed(src->format) &&
        !util_format_is_compressed(dst->format) &&
-       !util_format_is_subsampled_422(src->format) &&
-       (!si_can_use_compute_blit(sctx, dst->format, dst->nr_samples, true,
-                                 vi_dcc_enabled(sdst, dst_level)) ||
-        !si_can_use_compute_blit(sctx, src->format, src->nr_samples, false,
-                                 vi_dcc_enabled(ssrc, src_level))))
-      return false;
+       !util_format_is_subsampled_422(src->format)) {
+      bool src_can_use_compute_blit =
+         si_can_use_compute_blit(sctx, src->format, src->nr_samples, false,
+                                 vi_dcc_enabled(ssrc, src_level));
+
+      if (!src_can_use_compute_blit)
+         return false;
+
+      bool dst_can_use_compute_blit =
+         si_can_use_compute_blit(sctx, dst->format, dst->nr_samples, true,
+                                 vi_dcc_enabled(sdst, dst_level));
+
+      if (!dst_can_use_compute_blit && !sctx->has_graphics &&
+          si_can_use_compute_blit(sctx, dst->format, dst->nr_samples, false,
+                                  vi_dcc_enabled(sdst, dst_level))) {
+         /* Non-graphics context don't have a blitter, so try harder to do
+          * a compute blit by disabling dcc on the destination texture.
+          */
+         dst_can_use_compute_blit = si_texture_disable_dcc(sctx, sdst);
+      }
+
+      if (!dst_can_use_compute_blit)
+         return false;
+   }
 
    enum pipe_format src_format = util_format_linear(src->format);
    enum pipe_format dst_format = util_format_linear(dst->format);
diff --git a/src/gallium/drivers/radeonsi/si_get.c b/src/gallium/drivers/radeonsi/si_get.c
index 93c9606fc62..a8926026455 100644
--- a/src/gallium/drivers/radeonsi/si_get.c
+++ b/src/gallium/drivers/radeonsi/si_get.c
@@ -838,6 +838,18 @@ static int si_get_video_param(struct pipe_screen *screen, enum pipe_video_profil
          }
          else
             return 0;
+      case PIPE_VIDEO_CAP_ENC_SURFACE_ALIGNMENT:
+           if (profile == PIPE_VIDEO_PROFILE_HEVC_MAIN ||
+               profile == PIPE_VIDEO_PROFILE_HEVC_MAIN_10) {
+            union pipe_enc_cap_surface_alignment attrib;
+            attrib.value = 0;
+
+            attrib.bits.log2_width_alignment = RADEON_ENC_HEVC_SURFACE_LOG2_WIDTH_ALIGNMENT;
+            attrib.bits.log2_height_alignment = RADEON_ENC_HEVC_SURFACE_LOG2_HEIGHT_ALIGNMENT;
+            return attrib.value;
+         }
+         else
+            return 0;
 
       default:
          return 0;
diff --git a/src/gallium/drivers/radeonsi/si_shader.c b/src/gallium/drivers/radeonsi/si_shader.c
index 4eed0367932..e40a15dac67 100644
--- a/src/gallium/drivers/radeonsi/si_shader.c
+++ b/src/gallium/drivers/radeonsi/si_shader.c
@@ -1770,6 +1770,11 @@ static bool kill_ps_outputs_cb(struct nir_builder *b, nir_instr *instr, void *_k
    assert(nir_intrinsic_component(intr) == 0);
    unsigned cb_shader_mask = ac_get_cb_shader_mask(key->ps.part.epilog.spi_shader_col_format);
 
+   /* Preserve alpha if ALPHA_TESTING is enabled. */
+   if (key->ps.part.epilog.alpha_func != PIPE_FUNC_ALWAYS ||
+       key->ps.part.epilog.alpha_to_coverage_via_mrtz)
+      cb_shader_mask |= 1 << 3;
+
    /* If COLOR is broadcasted to multiple color buffers, combine their masks. */
    if (location == FRAG_RESULT_COLOR) {
       for (unsigned i = 1; i <= key->ps.part.epilog.last_cbuf; i++)
diff --git a/src/gallium/drivers/radeonsi/si_shader_llvm.c b/src/gallium/drivers/radeonsi/si_shader_llvm.c
index 77b9c024974..6f9821c233a 100644
--- a/src/gallium/drivers/radeonsi/si_shader_llvm.c
+++ b/src/gallium/drivers/radeonsi/si_shader_llvm.c
@@ -239,7 +239,6 @@ void si_llvm_optimize_module(struct si_shader_context *ctx)
 
    /* Run the pass */
    LLVMRunPassManager(ctx->compiler->passmgr, ctx->ac.module);
-   LLVMDisposeBuilder(ctx->ac.builder);
 }
 
 void si_llvm_dispose(struct si_shader_context *ctx)
diff --git a/src/gallium/drivers/radeonsi/si_shader_nir.c b/src/gallium/drivers/radeonsi/si_shader_nir.c
index 027d9c410b8..3b03b3eaecb 100644
--- a/src/gallium/drivers/radeonsi/si_shader_nir.c
+++ b/src/gallium/drivers/radeonsi/si_shader_nir.c
@@ -208,7 +208,7 @@ static void si_late_optimize_16bit_samplers(struct si_screen *sscreen, nir_shade
       },
    };
    struct nir_fold_16bit_tex_image_options fold_16bit_options = {
-      .rounding_mode = nir_rounding_mode_rtz,
+      .rounding_mode = nir_rounding_mode_undef,
       .fold_tex_dest_types = nir_type_float,
       .fold_image_dest_types = nir_type_float,
       .fold_image_store_data = true,
diff --git a/src/gallium/drivers/radeonsi/si_shaderlib_nir.c b/src/gallium/drivers/radeonsi/si_shaderlib_nir.c
index 1ab8a0a5a65..51375878004 100644
--- a/src/gallium/drivers/radeonsi/si_shaderlib_nir.c
+++ b/src/gallium/drivers/radeonsi/si_shaderlib_nir.c
@@ -697,13 +697,15 @@ void *si_create_dma_compute_shader(struct si_context *sctx, unsigned num_dwords_
     * the 2nd store writes into 1 * wavesize + tid,
     * the 3rd store writes into 2 * wavesize + tid, etc.
     */
-   nir_def *store_address = get_global_ids(&b, 1);
+   nir_def *store_address =
+      nir_iadd(&b, nir_imul_imm(&b, nir_channel(&b, nir_load_workgroup_id(&b), 0),
+                                default_wave_size * num_mem_ops),
+               nir_channel(&b, nir_load_local_invocation_id(&b), 0));
 
    /* Convert from a "store size unit" into bytes. */
    store_address = nir_imul_imm(&b, store_address, 4 * inst_dwords[0]);
 
-   nir_def *load_address = store_address, *value, *values[num_mem_ops];
-   value = nir_undef(&b, 1, 32);
+   nir_def *load_address = store_address, *value = NULL, *values[num_mem_ops];
 
    if (is_copy) {
       b.shader->info.num_ssbos++;
@@ -723,7 +725,7 @@ void *si_create_dma_compute_shader(struct si_context *sctx, unsigned num_dwords_
             load_address = nir_iadd(&b, load_address,
                                     nir_imm_int(&b, 4 * inst_dwords[i] * default_wave_size));
          }
-         values[i] = nir_load_ssbo(&b, 4, 32, nir_imm_int(&b, 1),load_address,
+         values[i] = nir_load_ssbo(&b, inst_dwords[i], 32, nir_imm_int(&b, 1), load_address,
                                    .access = load_qualifier);
       }
 
diff --git a/src/gallium/drivers/radeonsi/si_state.c b/src/gallium/drivers/radeonsi/si_state.c
index 47485a23feb..7075acfba2d 100644
--- a/src/gallium/drivers/radeonsi/si_state.c
+++ b/src/gallium/drivers/radeonsi/si_state.c
@@ -6286,11 +6286,10 @@ static void gfx10_init_gfx_preamble_state(struct si_context *sctx)
 
    /* Compute registers. */
    si_pm4_set_reg(pm4, R_00B834_COMPUTE_PGM_HI, S_00B834_DATA(sscreen->info.address32_hi >> 8));
-   si_pm4_set_reg(pm4, R_00B858_COMPUTE_STATIC_THREAD_MGMT_SE0, compute_cu_en);
-   si_pm4_set_reg(pm4, R_00B85C_COMPUTE_STATIC_THREAD_MGMT_SE1, compute_cu_en);
 
-   si_pm4_set_reg(pm4, R_00B864_COMPUTE_STATIC_THREAD_MGMT_SE2, compute_cu_en);
-   si_pm4_set_reg(pm4, R_00B868_COMPUTE_STATIC_THREAD_MGMT_SE3, compute_cu_en);
+   for (unsigned i = 0; i < 4; ++i)
+      si_pm4_set_reg(pm4, R_00B858_COMPUTE_STATIC_THREAD_MGMT_SE0 + i * 4,
+                     i < sscreen->info.max_se ? compute_cu_en : 0x0);
 
    si_pm4_set_reg(pm4, R_00B890_COMPUTE_USER_ACCUM_0, 0);
    si_pm4_set_reg(pm4, R_00B894_COMPUTE_USER_ACCUM_1, 0);
@@ -6298,10 +6297,9 @@ static void gfx10_init_gfx_preamble_state(struct si_context *sctx)
    si_pm4_set_reg(pm4, R_00B89C_COMPUTE_USER_ACCUM_3, 0);
 
    if (sctx->gfx_level >= GFX11) {
-      si_pm4_set_reg(pm4, R_00B8AC_COMPUTE_STATIC_THREAD_MGMT_SE4, compute_cu_en);
-      si_pm4_set_reg(pm4, R_00B8B0_COMPUTE_STATIC_THREAD_MGMT_SE5, compute_cu_en);
-      si_pm4_set_reg(pm4, R_00B8B4_COMPUTE_STATIC_THREAD_MGMT_SE6, compute_cu_en);
-      si_pm4_set_reg(pm4, R_00B8B8_COMPUTE_STATIC_THREAD_MGMT_SE7, compute_cu_en);
+      for (unsigned i = 4; i < 8; ++i)
+         si_pm4_set_reg(pm4, R_00B8AC_COMPUTE_STATIC_THREAD_MGMT_SE4 + (i - 4) * 4,
+                        i < sscreen->info.max_se ? compute_cu_en : 0x0);
 
       /* How many threads should go to 1 SE before moving onto the next. Think of GL1 cache hits.
        * Only these values are valid: 0 (disabled), 64, 128, 256, 512
@@ -6392,6 +6390,7 @@ static void gfx10_init_gfx_preamble_state(struct si_context *sctx)
                   (sctx->gfx_level >= GFX11 ?
                       S_028410_DCC_WR_POLICY_GFX11(meta_write_policy) |
                       S_028410_COLOR_WR_POLICY_GFX11(V_028410_CACHE_STREAM) |
+                      S_028410_DCC_RD_POLICY(meta_read_policy) |
                       S_028410_COLOR_RD_POLICY(V_028410_CACHE_NOA_GFX11)
                     :
                       S_028410_CMASK_WR_POLICY(meta_write_policy) |
@@ -6401,7 +6400,7 @@ static void gfx10_init_gfx_preamble_state(struct si_context *sctx)
                       S_028410_CMASK_RD_POLICY(meta_read_policy) |
                       S_028410_FMASK_RD_POLICY(V_028410_CACHE_NOA_GFX10) |
                       S_028410_COLOR_RD_POLICY(V_028410_CACHE_NOA_GFX10)) |
-                  S_028410_DCC_RD_POLICY(meta_read_policy));
+                      S_028410_DCC_RD_POLICY(meta_read_policy));
    si_pm4_set_reg(pm4, R_028708_SPI_SHADER_IDX_FORMAT,
                   S_028708_IDX0_EXPORT_FORMAT(V_028708_SPI_SHADER_1COMP));
 
@@ -6445,8 +6444,10 @@ static void gfx10_init_gfx_preamble_state(struct si_context *sctx)
                      S_028B50_DONUT_SPLIT_GFX9(24) |
                      S_028B50_TRAP_SPLIT(6));
 
+   /* GFX11+ shouldn't subtract 1 from pbb_max_alloc_count.  */
+   unsigned gfx10_one = sctx->gfx_level < GFX11;
    si_pm4_set_reg(pm4, R_028C48_PA_SC_BINNER_CNTL_1,
-                  S_028C48_MAX_ALLOC_COUNT(sscreen->info.pbb_max_alloc_count - 1) |
+                  S_028C48_MAX_ALLOC_COUNT(sscreen->info.pbb_max_alloc_count - gfx10_one) |
                   S_028C48_MAX_PRIM_PER_BATCH(1023));
 
    if (sctx->gfx_level >= GFX11_5)
diff --git a/src/gallium/drivers/radeonsi/si_state.h b/src/gallium/drivers/radeonsi/si_state.h
index 096f94cee39..c2e9e9d7d79 100644
--- a/src/gallium/drivers/radeonsi/si_state.h
+++ b/src/gallium/drivers/radeonsi/si_state.h
@@ -342,7 +342,7 @@ enum si_tracked_reg
 
    /* The slots below can be reused by other generations. */
    SI_TRACKED_VGT_ESGS_RING_ITEMSIZE,        /* GFX6-8 (GFX9+ can reuse this slot) */
-   SI_TRACKED_VGT_REUSE_OFF,                 /* GFX6-8 (GFX9+ can reuse this slot) */
+   SI_TRACKED_VGT_REUSE_OFF,                 /* GFX6-8,10.3 */
    SI_TRACKED_IA_MULTI_VGT_PARAM,            /* GFX6-8 (GFX9+ can reuse this slot) */
 
    SI_TRACKED_VGT_GS_MAX_PRIMS_PER_SUBGROUP, /* GFX9 - the slots above can be reused */
diff --git a/src/gallium/drivers/radeonsi/si_state_binning.c b/src/gallium/drivers/radeonsi/si_state_binning.c
index 39a97ebd0ce..984586eb864 100644
--- a/src/gallium/drivers/radeonsi/si_state_binning.c
+++ b/src/gallium/drivers/radeonsi/si_state_binning.c
@@ -393,6 +393,9 @@ static void si_emit_dpbb_disable(struct si_context *sctx)
    if (sctx->gfx_level >= GFX10) {
       struct uvec2 bin_size = {};
       struct uvec2 bin_size_extend = {};
+      unsigned binning_disabled =
+         sctx->gfx_level >= GFX11_5 ? V_028C44_BINNING_DISABLED
+                                    : V_028C44_DISABLE_BINNING_USE_NEW_SC;
 
       bin_size.x = 128;
       bin_size.y = sctx->framebuffer.min_bytes_per_pixel <= 4 ? 128 : 64;
@@ -404,7 +407,7 @@ static void si_emit_dpbb_disable(struct si_context *sctx)
 
       radeon_opt_set_context_reg(sctx, R_028C44_PA_SC_BINNER_CNTL_0,
                                  SI_TRACKED_PA_SC_BINNER_CNTL_0,
-                                 S_028C44_BINNING_MODE(V_028C44_DISABLE_BINNING_USE_NEW_SC) |
+                                 S_028C44_BINNING_MODE(binning_disabled) |
                                  S_028C44_BIN_SIZE_X(bin_size.x == 16) |
                                  S_028C44_BIN_SIZE_Y(bin_size.y == 16) |
                                  S_028C44_BIN_SIZE_X_EXTEND(bin_size_extend.x) |
diff --git a/src/gallium/drivers/radeonsi/si_state_shaders.cpp b/src/gallium/drivers/radeonsi/si_state_shaders.cpp
index 9faa8693b3b..11f483aef58 100644
--- a/src/gallium/drivers/radeonsi/si_state_shaders.cpp
+++ b/src/gallium/drivers/radeonsi/si_state_shaders.cpp
@@ -3856,6 +3856,8 @@ static void si_destroy_shader_selector(struct pipe_context *ctx, void *cso)
       si_delete_shader(sctx, sel->main_shader_part_es);
    if (sel->main_shader_part_ngg)
       si_delete_shader(sctx, sel->main_shader_part_ngg);
+   if (sel->main_shader_part_ngg_es)
+      si_delete_shader(sctx, sel->main_shader_part_ngg_es);
 
    free(sel->keys);
    free(sel->variants);
@@ -4343,6 +4345,15 @@ static void si_emit_vgt_pipeline_state(struct si_context *sctx, unsigned index)
    radeon_begin(cs);
    radeon_opt_set_context_reg(sctx, R_028B54_VGT_SHADER_STAGES_EN, SI_TRACKED_VGT_SHADER_STAGES_EN,
                               sctx->vgt_shader_stages_en);
+   if (sctx->gfx_level == GFX10_3) {
+      /* Legacy Tess+GS should disable reuse to prevent hangs on GFX10.3. */
+      bool has_legacy_tess_gs = G_028B54_HS_EN(sctx->vgt_shader_stages_en) &&
+                                G_028B54_GS_EN(sctx->vgt_shader_stages_en) &&
+                                !G_028B54_PRIMGEN_EN(sctx->vgt_shader_stages_en); /* !NGG */
+
+      radeon_opt_set_context_reg(sctx, R_028AB4_VGT_REUSE_OFF, SI_TRACKED_VGT_REUSE_OFF,
+                                 S_028AB4_REUSE_OFF(has_legacy_tess_gs));
+   }
    radeon_end_update_context_roll(sctx);
 
    if (sctx->gfx_level >= GFX10) {
diff --git a/src/gallium/drivers/svga/svga_draw.c b/src/gallium/drivers/svga/svga_draw.c
index 16865ba06c3..fdf498cda7e 100644
--- a/src/gallium/drivers/svga/svga_draw.c
+++ b/src/gallium/drivers/svga/svga_draw.c
@@ -1006,6 +1006,7 @@ draw_vgpu10(struct svga_hwtnl *hwtnl,
    struct svga_context *svga = hwtnl->svga;
    struct svga_winsys_surface *indirect_handle;
    enum pipe_error ret;
+   bool is_instanced_draw = instance_count > 1 || start_instance > 0;
 
    assert(svga_have_vgpu10(svga));
    assert(hwtnl->cmd.prim_count == 0);
@@ -1096,7 +1097,7 @@ draw_vgpu10(struct svga_hwtnl *hwtnl,
                                                        indirect_handle,
                                                        indirect->offset);
       }
-      else if (instance_count > 1) {
+      else if (is_instanced_draw) {
          ret = SVGA3D_vgpu10_DrawIndexedInstanced(svga->swc,
                                                   vcount,
                                                   instance_count,
@@ -1139,7 +1140,7 @@ draw_vgpu10(struct svga_hwtnl *hwtnl,
                                                 indirect_handle,
                                                 indirect->offset);
       }
-      else if (instance_count > 1) {
+      else if (is_instanced_draw) {
          ret = SVGA3D_vgpu10_DrawInstanced(svga->swc,
                                            vcount,
                                            instance_count,
diff --git a/src/gallium/drivers/v3d/v3d_cl.c b/src/gallium/drivers/v3d/v3d_cl.c
index d8ee4ffc206..42cfd6282bf 100644
--- a/src/gallium/drivers/v3d/v3d_cl.c
+++ b/src/gallium/drivers/v3d/v3d_cl.c
@@ -32,6 +32,16 @@
 #include "broadcom/common/v3d_macros.h"
 #include "broadcom/cle/v3dx_pack.h"
 
+/* The Control List Executor (CLE) pre-fetches V3D_CLE_READAHEAD bytes from
+ * the Control List buffer. The usage of these last bytes should be avoided or
+ * the CLE would pre-fetch the data after the end of the CL buffer, reporting
+ * the kernel "MMU error from client CLE".
+ */
+#define V3D42_CLE_READAHEAD 256u
+#define V3D42_CLE_BUFFER_MIN_SIZE 4096u
+#define V3D71_CLE_READAHEAD 1024u
+#define V3D71_CLE_BUFFER_MIN_SIZE 16384u
+
 void
 v3d_init_cl(struct v3d_job *job, struct v3d_cl *cl)
 {
@@ -50,9 +60,12 @@ v3d_cl_ensure_space(struct v3d_cl *cl, uint32_t space, uint32_t alignment)
                 cl->next = cl->base + offset;
                 return offset;
         }
-
+        struct v3d_device_info *devinfo = &cl->job->v3d->screen->devinfo;
+        uint32_t cle_buffer_min_size = V3DV_X(devinfo, CLE_BUFFER_MIN_SIZE);
         v3d_bo_unreference(&cl->bo);
-        cl->bo = v3d_bo_alloc(cl->job->v3d->screen, align(space, 4096), "CL");
+        cl->bo = v3d_bo_alloc(cl->job->v3d->screen,
+                              align(space, cle_buffer_min_size),
+                              "CL");
         cl->base = v3d_bo_map(cl->bo);
         cl->size = cl->bo->size;
         cl->next = cl->base;
@@ -63,14 +76,30 @@ v3d_cl_ensure_space(struct v3d_cl *cl, uint32_t space, uint32_t alignment)
 void
 v3d_cl_ensure_space_with_branch(struct v3d_cl *cl, uint32_t space)
 {
-        if (cl_offset(cl) + space + cl_packet_length(BRANCH) <= cl->size)
+        if (cl_offset(cl) + space  <= cl->size)
                 return;
 
-        struct v3d_bo *new_bo = v3d_bo_alloc(cl->job->v3d->screen, space, "CL");
-        assert(space <= new_bo->size);
+        /* The last V3D_CLE_READAHEAD bytes of the buffer are unusable, so we
+         * need to take them into account when allocating a new BO for the
+         * CL. We have to be sure that we have room for a BRANCH packet so we
+         * can always chain a next BO if needed. We will need to increase
+         * cl->size by the packet length before calling cl_summit to use this
+         * reserved space.
+         */
+        struct v3d_device_info *devinfo = &cl->job->v3d->screen->devinfo;
+        uint32_t cle_readahead = V3DV_X(devinfo, CLE_READAHEAD);
+        uint32_t cle_buffer_min_size = V3DV_X(devinfo, CLE_BUFFER_MIN_SIZE);
+        uint32_t unusable_size = cle_readahead + cl_packet_length(BRANCH);
+        struct v3d_bo *new_bo = v3d_bo_alloc(cl->job->v3d->screen,
+                                             align(space + unusable_size,
+                                                   cle_buffer_min_size),
+                                             "CL");
+        assert(space + unusable_size <= new_bo->size);
 
         /* Chain to the new BO from the old one. */
         if (cl->bo) {
+                cl->size += cl_packet_length(BRANCH);
+                assert(cl->size + cle_readahead <= cl->bo->size);
                 cl_emit(cl, BRANCH, branch) {
                         branch.address = cl_address(new_bo, 0);
                 }
@@ -82,7 +111,11 @@ v3d_cl_ensure_space_with_branch(struct v3d_cl *cl, uint32_t space)
 
         cl->bo = new_bo;
         cl->base = v3d_bo_map(cl->bo);
-        cl->size = cl->bo->size;
+        /* Take only into account the usable size of the BO to guarantee that
+         * we never write in the last bytes of the CL buffer because of the
+         * readahead of the CLE
+         */
+        cl->size = cl->bo->size - unusable_size;
         cl->next = cl->base;
 }
 
diff --git a/src/gallium/drivers/v3d/v3d_cl.h b/src/gallium/drivers/v3d/v3d_cl.h
index de966d2baad..76d8c3aa300 100644
--- a/src/gallium/drivers/v3d/v3d_cl.h
+++ b/src/gallium/drivers/v3d/v3d_cl.h
@@ -234,6 +234,7 @@ cl_get_emit_space(struct v3d_cl_out **cl, size_t size)
                 cl_advance(&cl_out, cl_packet_length(packet));   \
                 cl_end(cl, cl_out);                              \
                 _loop_terminate = NULL;                          \
+                assert(cl_offset(cl) <= (cl)->size);             \
         }))                                                      \
 
 #define cl_emit_with_prepacked(cl, packet, prepacked, name)      \
@@ -253,9 +254,10 @@ cl_get_emit_space(struct v3d_cl_out **cl, size_t size)
                 _loop_terminate = NULL;                          \
         }))                                                      \
 
-#define cl_emit_prepacked_sized(cl, packet, size) do {                \
-        memcpy((cl)->next, packet, size);             \
-        cl_advance(&(cl)->next, size);                \
+#define cl_emit_prepacked_sized(cl, packet, psize) do {          \
+        memcpy((cl)->next, packet, psize);                       \
+        cl_advance(&(cl)->next, psize);                          \
+        assert(cl_offset(cl) <= (cl)->size);                     \
 } while (0)
 
 #define cl_emit_prepacked(cl, packet) \
diff --git a/src/gallium/drivers/v3d/v3dx_draw.c b/src/gallium/drivers/v3d/v3dx_draw.c
index feba9080ec2..128104c213b 100644
--- a/src/gallium/drivers/v3d/v3dx_draw.c
+++ b/src/gallium/drivers/v3d/v3dx_draw.c
@@ -709,6 +709,9 @@ v3d_emit_gl_shader_state(struct v3d_context *v3d,
         }
 
         bool cs_loaded_any = false;
+        const bool cs_uses_builtins = v3d->prog.cs->prog_data.vs->uses_iid ||
+                                      v3d->prog.cs->prog_data.vs->uses_biid ||
+                                      v3d->prog.cs->prog_data.vs->uses_vid;
         for (int i = 0; i < vtx->num_elements; i++) {
                 struct pipe_vertex_element *elem = &vtx->pipe[i];
                 struct pipe_vertex_buffer *vb =
@@ -738,11 +741,18 @@ v3d_emit_gl_shader_state(struct v3d_context *v3d,
                          * inputs.  (Since CS is just dead-code-elimination
                          * compared to VS, we can't have CS loading but not
                          * VS).
+                         *
+                         * GFXH-1602: first attribute must be active if using
+                         * builtins.
                          */
                         if (v3d->prog.cs->prog_data.vs->vattr_sizes[i])
                                 cs_loaded_any = true;
-                        if (i == vtx->num_elements - 1 && !cs_loaded_any) {
+                        if (i == 0 && cs_uses_builtins && !cs_loaded_any) {
+                                attr.number_of_values_read_by_coordinate_shader = 1;
+                                cs_loaded_any = true;
+                        } else if (i == vtx->num_elements - 1 && !cs_loaded_any) {
                                 attr.number_of_values_read_by_coordinate_shader = 1;
+                                cs_loaded_any = true;
                         }
                         attr.maximum_index = 0xffffff;
                 }
@@ -1390,7 +1400,7 @@ v3d_launch_grid(struct pipe_context *pctx, const struct pipe_grid_info *info)
                 v3d->compute_shared_memory =
                         v3d_bo_alloc(v3d->screen,
                                      v3d->prog.compute->prog_data.compute->shared_size *
-                                     wgs_per_sg,
+                                     num_wgs,
                                      "shared_vars");
         }
 
diff --git a/src/gallium/drivers/virgl/ci/gitlab-ci-inc.yml b/src/gallium/drivers/virgl/ci/gitlab-ci-inc.yml
index 7326998c325..61b56188ed4 100644
--- a/src/gallium/drivers/virgl/ci/gitlab-ci-inc.yml
+++ b/src/gallium/drivers/virgl/ci/gitlab-ci-inc.yml
@@ -67,7 +67,7 @@
 .virgl-iris-test:
   extends:
     - .lava-piglit-traces:x86_64
-    - .lava-asus-cx9400-volteer:x86_64
+    - .lava-acer-cp514-2h-1160g7-volteer:x86_64
   variables:
     HWCI_KERNEL_MODULES: vhost_vsock
     HWCI_KVM: "true"
diff --git a/src/gallium/drivers/virgl/ci/traces-virgl.yml b/src/gallium/drivers/virgl/ci/traces-virgl.yml
index bf5fcc8539b..44f04175082 100644
--- a/src/gallium/drivers/virgl/ci/traces-virgl.yml
+++ b/src/gallium/drivers/virgl/ci/traces-virgl.yml
@@ -12,7 +12,7 @@ traces:
       checksum: 57ddd36b117adc9216c65c10d914a37e
   gputest/pixmark-piano-v2.trace:
     gl-virgl:
-      checksum: cbe50265c2d1a114fd75bf12407fbad9
+      checksum: 3b760606c18aebda1ad0eff6eb03203a
   gputest/triangle-v2.trace:
     gl-virgl:
       checksum: 7812de00011a3a059892e36cea19c696
diff --git a/src/gallium/drivers/zink/ci/gitlab-ci-inc.yml b/src/gallium/drivers/zink/ci/gitlab-ci-inc.yml
index c54a6bc7dee..ed4ed87566e 100644
--- a/src/gallium/drivers/zink/ci/gitlab-ci-inc.yml
+++ b/src/gallium/drivers/zink/ci/gitlab-ci-inc.yml
@@ -121,7 +121,8 @@
 
 .zink-anv-test:
   extends:
-    - .anv-tgl-test
+    - .lava-acer-cp514-2h-1160g7-volteer:x86_64
+    - .anv-test
     - .zink-anv-rules
     - .zink-test
   variables:
diff --git a/src/gallium/drivers/zink/ci/traces-zink-restricted.yml b/src/gallium/drivers/zink/ci/traces-zink-restricted.yml
index c45b40947f3..37eff63598a 100644
--- a/src/gallium/drivers/zink/ci/traces-zink-restricted.yml
+++ b/src/gallium/drivers/zink/ci/traces-zink-restricted.yml
@@ -60,7 +60,7 @@ traces:
       text: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8986
   TheRavenRemastered/Raven-f10900-v2.trace:
     gl-zink-anv-tgl:
-      checksum: db7b901177e7ac00cc489e0e13f71f76
+      checksum: e910141d9520739c653fa7de0d8a1c9b
   TombRaider2013/TombRaider-f1430-v2.trace:
     gl-zink-anv-tgl:
       label: [crash]
diff --git a/src/gallium/drivers/zink/ci/traces-zink.yml b/src/gallium/drivers/zink/ci/traces-zink.yml
index b1af198f019..0882be78295 100644
--- a/src/gallium/drivers/zink/ci/traces-zink.yml
+++ b/src/gallium/drivers/zink/ci/traces-zink.yml
@@ -30,7 +30,7 @@ traces:
       checksum: 433b69bea68cfe81914b857bbdc60ea5
   gputest/pixmark-piano-v2.trace:
     gl-zink-anv-tgl:
-      checksum: 4c7afcce5d87ec2bced65e92a1c9a41c
+      checksum: 9e7b3f2d38e6cea705af8161cfd41465
   gputest/triangle-v2.trace:
     gl-zink-anv-tgl:
       checksum: 5f694874b15bcd7a3689b387c143590b
diff --git a/src/gallium/drivers/zink/ci/zink-anv-tgl-fails.txt b/src/gallium/drivers/zink/ci/zink-anv-tgl-fails.txt
index f683854124e..1f4373e869d 100644
--- a/src/gallium/drivers/zink/ci/zink-anv-tgl-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-anv-tgl-fails.txt
@@ -96,10 +96,6 @@ glx@glx_arb_create_context_es2_profile@invalid opengl es version,Fail
 glx@glx_arb_create_context_no_error@no error,Fail
 glx@glx_arb_create_context_robustness@invalid reset notification strategy,Fail
 
-# See also the EGL buffer age failures
-glx@glx-buffer-age,Fail
-glx@glx-buffer-age vblank_mode=0,Fail
-
 glx@glx-swap-pixmap-bad,Fail
 
 # ../src/gallium/drivers/zink/zink_kopper.c:859: zink_kopper_update: Assertion `pres->bind & PIPE_BIND_DISPLAY_TARGET' failed.
@@ -156,10 +152,6 @@ spec@!opengl 2.1@polygon-stipple-fs,Fail
 
 spec@!opengl 3.0@clearbuffer-depth-cs-probe,Fail
 
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index2,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-non-const-uniform-index,Fail
-
 spec@arb_framebuffer_object@fbo-blit-scaled-linear,Fail
 
 
@@ -530,10 +522,6 @@ spec@arb_sample_shading@samplemask 8@sample mask_in_one,Fail
 
 spec@arb_shader_image_load_store@early-z,Fail
 spec@arb_shader_image_load_store@early-z@occlusion query test/early-z pass,Fail
-spec@arb_shader_image_load_store@host-mem-barrier,Fail
-spec@arb_shader_image_load_store@host-mem-barrier@Transform feedback/WaW/one bit barrier test/16x16,Fail
-spec@arb_shader_image_load_store@host-mem-barrier@Transform feedback/WaW/one bit barrier test/4x4,Fail
-spec@arb_shader_image_load_store@host-mem-barrier@Transform feedback/WaW/one bit barrier test/64x64,Fail
 
 spec@arb_shader_texture_lod@execution@arb_shader_texture_lod-texgradcube,Fail
 
@@ -680,3 +668,8 @@ KHR-GL46.sparse_texture_tests.SparseTextureCommitment,Crash
 # Assertion `size % ZINK_SPARSE_BUFFER_PAGE_SIZE == 0 || offset + size == bo->base.size' failed.
 spec@arb_sparse_buffer@basic,Crash
 spec@arb_sparse_buffer@buffer-data,Crash
+
+# Failing on a bunch of drivers with an assert on the weak_ref
+# pipeline cache, seems to be a zink issue not destroying a
+# shader/pipeline before calling vkDestroyPipeline()
+spec@ext_external_objects@vk-vert-buf-reuse,Crash
diff --git a/src/gallium/drivers/zink/ci/zink-lvp-fails.txt b/src/gallium/drivers/zink/ci/zink-lvp-fails.txt
index dfb56f0c41b..5a1e8d3c5bf 100644
--- a/src/gallium/drivers/zink/ci/zink-lvp-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-lvp-fails.txt
@@ -143,10 +143,6 @@ spec@!opengl 1.0@rasterpos,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_gs_linked,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_tes_linked,Fail
 
-
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index2,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-non-const-uniform-index,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2-mat2,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2x3-mat2x3,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2x4-mat2x4,Fail
diff --git a/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt b/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt
index 248257a7d79..c04e59251c6 100644
--- a/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt
@@ -13,13 +13,8 @@ glx@extension string sanity,Fail
 # #6322
 spec@arb_framebuffer_object@fbo-blit-scaled-linear,Fail
 
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index2,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-non-const-uniform-index,Fail
 spec@arb_bindless_texture@compiler@samplers@arith-bound-sampler-texture2d.frag,Crash
 
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@MS8,Fail
 spec@arb_gpu_shader_fp64@execution@arb_gpu_shader_fp64-tf-separate,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2-mat2,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2x3-mat2x3,Fail
@@ -187,62 +182,6 @@ spec@!opengl 3.0@clearbuffer-depth-cs-probe,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_gs_linked,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_tes_linked,Fail
 
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8 NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA NPOT,Fail
 spec@ext_framebuffer_blit@fbo-blit-check-limits,Fail
 
 # Introduced with the uprev of piglit (70ce1dcacc92 - "ci: Update piglit with s3 support")
diff --git a/src/gallium/drivers/zink/ci/zink-radv-navi31-fails.txt b/src/gallium/drivers/zink/ci/zink-radv-navi31-fails.txt
index a826438ae27..4a92af95939 100644
--- a/src/gallium/drivers/zink/ci/zink-radv-navi31-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-radv-navi31-fails.txt
@@ -13,14 +13,8 @@ glx@extension string sanity,Fail
 # #6322
 spec@arb_framebuffer_object@fbo-blit-scaled-linear,Fail
 
-
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index2,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-non-const-uniform-index,Fail
 spec@arb_bindless_texture@compiler@samplers@arith-bound-sampler-texture2d.frag,Crash
 
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@MS8,Fail
 spec@arb_gpu_shader_fp64@execution@arb_gpu_shader_fp64-tf-separate,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2-mat2,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2x3-mat2x3,Fail
@@ -187,62 +181,6 @@ spec@!opengl 3.0@clearbuffer-depth-cs-probe,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_gs_linked,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_tes_linked,Fail
 
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8 NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA NPOT,Fail
 spec@ext_framebuffer_blit@fbo-blit-check-limits,Fail
 
 # Introduced with the uprev of piglit (70ce1dcacc92 - "ci: Update piglit with s3 support")
diff --git a/src/gallium/drivers/zink/ci/zink-radv-polaris10-fails.txt b/src/gallium/drivers/zink/ci/zink-radv-polaris10-fails.txt
index 1c4088c67f2..b7fa3416124 100644
--- a/src/gallium/drivers/zink/ci/zink-radv-polaris10-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-radv-polaris10-fails.txt
@@ -13,13 +13,8 @@ glx@extension string sanity,Fail
 # #6322
 spec@arb_framebuffer_object@fbo-blit-scaled-linear,Fail
 
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index2,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-non-const-uniform-index,Fail
 spec@arb_bindless_texture@compiler@samplers@arith-bound-sampler-texture2d.frag,Crash
 
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@MS8,Fail
 spec@arb_gpu_shader_fp64@execution@arb_gpu_shader_fp64-tf-separate,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2-mat2,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2x3-mat2x3,Fail
@@ -198,64 +193,8 @@ spec@!opengl 3.0@clearbuffer-depth-cs-probe,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_gs_linked,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_tes_linked,Fail
 
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
 spec@ext_image_dma_buf_import@ext_image_dma_buf_import-sample_yuv420,Fail
 spec@ext_image_dma_buf_import@ext_image_dma_buf_import-sample_yvu420,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8 NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA NPOT,Fail
 spec@ext_framebuffer_blit@fbo-blit-check-limits,Fail
 
 # Introduced with the uprev of piglit (70ce1dcacc92 - "ci: Update piglit with s3 support")
@@ -380,69 +319,11 @@ dEQP-GLES3.functional.texture.specification.texsubimage2d_depth.depth24_stencil8
 dEQP-GLES3.functional.texture.specification.texsubimage2d_depth.depth32f_stencil8,Fail
 dEQP-GLES3.functional.texture.specification.texsubimage3d_depth.depth24_stencil8_2d_array,Fail
 dEQP-GLES3.functional.texture.specification.texsubimage3d_depth.depth32f_stencil8_2d_array,Fail
-dEQP-GLES31.functional.fbo.no_attachments.maximums.all,Fail
-dEQP-GLES31.functional.fbo.no_attachments.maximums.height,Fail
-dEQP-GLES31.functional.fbo.no_attachments.maximums.samples,Fail
-dEQP-GLES31.functional.fbo.no_attachments.maximums.size,Fail
-dEQP-GLES31.functional.fbo.no_attachments.maximums.width,Fail
-dEQP-GLES31.functional.fbo.no_attachments.multisample.samples0,Fail
-dEQP-GLES31.functional.fbo.no_attachments.multisample.samples1,Fail
-dEQP-GLES31.functional.fbo.no_attachments.multisample.samples2,Fail
-dEQP-GLES31.functional.fbo.no_attachments.multisample.samples3,Fail
-dEQP-GLES31.functional.fbo.no_attachments.multisample.samples4,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.1023x1023,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.1025x1025,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.127x127,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.127x15,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.129x127,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.129x129,Fail
 dEQP-GLES31.functional.fbo.no_attachments.npot_size.15x15,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.15x511,Fail
 dEQP-GLES31.functional.fbo.no_attachments.npot_size.17x17,Fail
 dEQP-GLES31.functional.fbo.no_attachments.npot_size.1x1,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.2047x1025,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.2047x2047,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.255x255,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.257x257,Fail
 dEQP-GLES31.functional.fbo.no_attachments.npot_size.31x31,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.33x33,Fail
 dEQP-GLES31.functional.fbo.no_attachments.npot_size.3x3,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.511x127,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.511x511,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.513x513,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.63x63,Fail
-dEQP-GLES31.functional.fbo.no_attachments.npot_size.65x65,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.0,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.1,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.10,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.11,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.12,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.13,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.14,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.15,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.2,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.3,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.4,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.5,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.6,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.7,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.8,Fail
-dEQP-GLES31.functional.fbo.no_attachments.random.9,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.1024x1024,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.1024x16,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.1024x256,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.1024x64,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.16x1024,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.16x256,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.16x64,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.256x1024,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.256x16,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.256x256,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.256x64,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.64x1024,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.64x16,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.64x256,Fail
-dEQP-GLES31.functional.fbo.no_attachments.size.64x64,Fail
 dEQP-GLES31.functional.texture.specification.texstorage3d.format.depth24_stencil8_cube_array,Fail
 dEQP-GLES31.functional.texture.specification.texstorage3d.format.depth32f_stencil8_cube_array,Fail
 dEQP-GLES31.functional.texture.specification.texsubimage3d_depth.depth24_stencil8_cube_array,Fail
@@ -488,10 +369,6 @@ spec@arb_depth_buffer_float@fbo-clear-formats,Fail
 spec@arb_depth_buffer_float@fbo-clear-formats@GL_DEPTH32F_STENCIL8,Fail
 spec@arb_es2_compatibility@texwrap formats bordercolor-swizzled,Fail
 spec@arb_es2_compatibility@texwrap formats bordercolor-swizzled@GL_RGB565- swizzled- border color only,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@Basic,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@discard,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@fb resize,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@glViewport,Fail
 spec@arb_sample_locations@test,Fail
 spec@arb_sample_locations@test@MSAA: 1- X: 0- Y: 0- Grid: false,Fail
 spec@arb_sample_locations@test@MSAA: 1- X: 0- Y: 0- Grid: true,Fail
diff --git a/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt b/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt
index 03e0bacfb29..9ff3b55ff8d 100644
--- a/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt
@@ -13,13 +13,8 @@ glx@extension string sanity,Fail
 # #6322
 spec@arb_framebuffer_object@fbo-blit-scaled-linear,Fail
 
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index2,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-mixed-const-non-const-uniform-index,Fail
-spec@arb_arrays_of_arrays@execution@image_store@basic-imagestore-non-const-uniform-index,Fail
 spec@arb_bindless_texture@compiler@samplers@arith-bound-sampler-texture2d.frag,Crash
 
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query,Fail
-spec@arb_framebuffer_no_attachments@arb_framebuffer_no_attachments-query@MS8,Fail
 spec@arb_gpu_shader_fp64@execution@arb_gpu_shader_fp64-tf-separate,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2-mat2,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@frag-conversion-explicit-dmat2x3-mat2x3,Fail
@@ -186,62 +181,6 @@ spec@!opengl 3.0@clearbuffer-depth-cs-probe,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_gs_linked,Fail
 spec@!opengl 1.0@rasterpos@glsl_vs_tes_linked,Fail
 
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ABGR_EXT and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_BGRA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_LUMINANCE_ALPHA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_FLOAT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_BYTE,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_10_10_10_2,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_2_10_10_10_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_INT_8_8_8_8_REV,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4,Fail
-spec@!opengl 1.1@teximage-colors gl_sluminance8_alpha8@GL_SLUMINANCE8_ALPHA8 texture with GL_RGBA and GL_UNSIGNED_SHORT_4_4_4_4_REV,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats-s3tc@GL_COMPRESSED_SLUMINANCE_ALPHA NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE8_ALPHA8 NPOT,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA,Fail
-spec@ext_texture_srgb@fbo-generatemipmap-formats@GL_SLUMINANCE_ALPHA NPOT,Fail
 spec@ext_framebuffer_blit@fbo-blit-check-limits,Fail
 
 # Introduced with the uprev of piglit (70ce1dcacc92 - "ci: Update piglit with s3 support")
diff --git a/src/gallium/drivers/zink/ci/zink-tu-a630-flakes.txt b/src/gallium/drivers/zink/ci/zink-tu-a630-flakes.txt
index c729c1415d7..a9107058df7 100644
--- a/src/gallium/drivers/zink/ci/zink-tu-a630-flakes.txt
+++ b/src/gallium/drivers/zink/ci/zink-tu-a630-flakes.txt
@@ -13,3 +13,4 @@ dEQP-GLES31.functional.copy_image.non_compressed.viewclass_16_bits.rg8ui_rg8ui.t
 dEQP-GLES31.functional.copy_image.non_compressed.viewclass_32_bits.rg16i_rgb10_a2.cubemap_to_renderbuffer
 dEQP-GLES3.functional.texture.specification.texstorage3d.format.depth_component16_2d_array
 dEQP-GLES3.functional.texture.specification.texstorage2d.format.rgb565_cube
+dEQP-GLES31.functional.fbo.color.texcubearray.r16f
diff --git a/src/gallium/drivers/zink/nir_to_spirv/nir_to_spirv.c b/src/gallium/drivers/zink/nir_to_spirv/nir_to_spirv.c
index c30426aba83..e59df2b9ce4 100644
--- a/src/gallium/drivers/zink/nir_to_spirv/nir_to_spirv.c
+++ b/src/gallium/drivers/zink/nir_to_spirv/nir_to_spirv.c
@@ -114,6 +114,7 @@ struct ntv_context {
          subgroup_size_var;
 
    SpvId discard_func;
+   SpvId float_array_type[2];
 };
 
 static SpvId
@@ -1166,6 +1167,8 @@ get_bare_image_type(struct ntv_context *ctx, struct nir_variable *var, bool is_s
    bool arrayed = glsl_sampler_type_is_array(type);
    if (dimension == SpvDimCube && arrayed)
       spirv_builder_emit_cap(&ctx->builder, SpvCapabilityImageCubeArray);
+   if (arrayed && !is_sampler && is_ms)
+      spirv_builder_emit_cap(&ctx->builder, SpvCapabilityImageMSArray);
 
    SpvId result_type = get_glsl_basetype(ctx, glsl_get_sampler_result_type(type));
    return spirv_builder_type_image(&ctx->builder, result_type,
@@ -1930,13 +1933,7 @@ emit_alu(struct ntv_context *ctx, nir_alu_instr *alu)
       result = emit_builtin_unop(ctx, GLSLstd450PackHalf2x16, get_def_type(ctx, &alu->def, nir_type_uint), src[0]);
       break;
 
-   case nir_op_unpack_64_2x32:
-      assert(nir_op_infos[alu->op].num_inputs == 1);
-      result = emit_builtin_unop(ctx, GLSLstd450UnpackDouble2x32, get_def_type(ctx, &alu->def, nir_type_uint), src[0]);
-      break;
-
    BUILTIN_UNOPF(nir_op_unpack_half_2x16, GLSLstd450UnpackHalf2x16)
-   BUILTIN_UNOPF(nir_op_pack_64_2x32, GLSLstd450PackDouble2x32)
 #undef BUILTIN_UNOP
 #undef BUILTIN_UNOPF
 
@@ -2122,9 +2119,11 @@ emit_alu(struct ntv_context *ctx, nir_alu_instr *alu)
    /* those are all simple bitcasts, we could do better, but it doesn't matter */
    case nir_op_pack_32_4x8:
    case nir_op_pack_32_2x16:
+   case nir_op_pack_64_2x32:
    case nir_op_pack_64_4x16:
    case nir_op_unpack_32_4x8:
    case nir_op_unpack_32_2x16:
+   case nir_op_unpack_64_2x32:
    case nir_op_unpack_64_4x16: {
       result = emit_bitcast(ctx, dest_type, src[0]);
       break;
@@ -2737,6 +2736,8 @@ emit_interpolate(struct ntv_context *ctx, nir_intrinsic_instr *intr)
    case nir_intrinsic_interp_deref_at_sample:
       op = GLSLstd450InterpolateAtSample;
       src1 = get_src(ctx, &intr->src[1], &atype);
+      if (atype != nir_type_int)
+         src1 = emit_bitcast(ctx, get_ivec_type(ctx, 32, 1), src1);
       break;
    case nir_intrinsic_interp_deref_at_offset:
       op = GLSLstd450InterpolateAtOffset;
@@ -2780,6 +2781,16 @@ emit_deref_atomic_intrinsic(struct ntv_context *ctx, nir_intrinsic_instr *intr)
    nir_alu_type atype;
    nir_alu_type ret_type = nir_atomic_op_type(nir_intrinsic_atomic_op(intr)) == nir_type_float ? nir_type_float : nir_type_uint;
    SpvId ptr = get_src(ctx, &intr->src[0], &atype);
+   if (atype != ret_type && ret_type == nir_type_float) {
+      unsigned bit_size = nir_src_bit_size(intr->src[0]);
+      SpvId *float_array_type = &ctx->float_array_type[bit_size == 32 ? 0 : 1];
+      if (!*float_array_type) {
+         *float_array_type = spirv_builder_type_pointer(&ctx->builder, SpvStorageClassStorageBuffer,
+                                                        spirv_builder_type_float(&ctx->builder, bit_size));
+      }
+      ptr = emit_unop(ctx, SpvOpBitcast, *float_array_type, ptr);
+   }
+
    SpvId param = get_src(ctx, &intr->src[1], &atype);
    if (atype != ret_type)
       param = cast_src_to_type(ctx, param, intr->src[1], ret_type);
@@ -3208,6 +3219,11 @@ emit_barrier(struct ntv_context *ctx, nir_intrinsic_instr *intr)
       if (modes & (nir_var_shader_out | nir_var_mem_task_payload))
          semantics |= SpvMemorySemanticsOutputMemoryMask;
 
+      if (!modes)
+         semantics = SpvMemorySemanticsWorkgroupMemoryMask |
+                     SpvMemorySemanticsUniformMemoryMask |
+                     SpvMemorySemanticsImageMemoryMask |
+                     SpvMemorySemanticsCrossWorkgroupMemoryMask;
       semantics |= SpvMemorySemanticsAcquireReleaseMask;
    }
 
@@ -3533,6 +3549,9 @@ tex_instr_is_lod_allowed(nir_tex_instr *tex)
            tex->sampler_dim == GLSL_SAMPLER_DIM_2D ||
            tex->sampler_dim == GLSL_SAMPLER_DIM_3D ||
            tex->sampler_dim == GLSL_SAMPLER_DIM_CUBE ||
+           /* External images are interpreted as 2D in type_to_dim,
+            * so LOD is allowed */
+           tex->sampler_dim == GLSL_SAMPLER_DIM_EXTERNAL ||
            /* RECT will always become 2D, so this is fine */
            tex->sampler_dim == GLSL_SAMPLER_DIM_RECT);
 }
@@ -3965,8 +3984,11 @@ emit_deref_array(struct ntv_context *ctx, nir_deref_instr *deref)
    }
 
    SpvStorageClass storage_class = get_storage_class(var);
-   SpvId base, type;
+   SpvId type;
    nir_alu_type atype = nir_type_uint;
+
+   SpvId base = get_src(ctx, &deref->parent, &atype);
+
    switch (var->data.mode) {
 
    case nir_var_mem_ubo:
@@ -4008,6 +4030,26 @@ emit_deref_array(struct ntv_context *ctx, nir_deref_instr *deref)
    if (itype == nir_type_float)
       index = emit_bitcast(ctx, get_uvec_type(ctx, 32, 1), index);
 
+   if (var->data.mode == nir_var_uniform || var->data.mode == nir_var_image) {
+      nir_deref_instr *aoa_deref = nir_src_as_deref(deref->parent);
+      uint32_t inner_stride = glsl_array_size(aoa_deref->type);
+
+      while (aoa_deref->deref_type != nir_deref_type_var) {
+         assert(aoa_deref->deref_type == nir_deref_type_array);
+
+         SpvId aoa_index = get_src(ctx, &aoa_deref->arr.index, &itype);
+         if (itype == nir_type_float)
+            aoa_index = emit_bitcast(ctx, get_uvec_type(ctx, 32, 1), aoa_index);
+
+         aoa_deref = nir_src_as_deref(aoa_deref->parent);
+
+         uint32_t stride = glsl_get_aoa_size(aoa_deref->type) / inner_stride;
+         aoa_index = emit_binop(ctx, SpvOpIMul, get_uvec_type(ctx, 32, 1), aoa_index,
+                                emit_uint_const(ctx, 32, stride));
+         index = emit_binop(ctx, SpvOpIAdd, get_uvec_type(ctx, 32, 1), index, aoa_index);
+      }
+   }
+
    SpvId ptr_type = spirv_builder_type_pointer(&ctx->builder,
                                                storage_class,
                                                type);
@@ -4774,7 +4816,7 @@ nir_to_spirv(struct nir_shader *s, const struct zink_shader_info *sinfo, uint32_
       /* this could be huge, so only alloc if needed since it's extremely unlikely to
        * ever be used by anything except cts
        */
-      ctx.resident_defs = ralloc_array_size(ctx.mem_ctx,
+      ctx.resident_defs = rzalloc_array_size(ctx.mem_ctx,
                                             sizeof(SpvId), entry->ssa_alloc);
       if (!ctx.resident_defs)
          goto fail;
diff --git a/src/gallium/drivers/zink/zink_batch.c b/src/gallium/drivers/zink/zink_batch.c
index 769ba4f212c..b8abb68e53d 100644
--- a/src/gallium/drivers/zink/zink_batch.c
+++ b/src/gallium/drivers/zink/zink_batch.c
@@ -309,6 +309,11 @@ zink_batch_state_destroy(struct zink_screen *screen, struct zink_batch_state *bs
    util_dynarray_fini(&bs->bindless_releases[0]);
    util_dynarray_fini(&bs->bindless_releases[1]);
    util_dynarray_fini(&bs->acquires);
+   util_dynarray_fini(&bs->signal_semaphores);
+   util_dynarray_fini(&bs->wait_semaphores);
+   util_dynarray_fini(&bs->wait_semaphore_stages);
+   util_dynarray_fini(&bs->fd_wait_semaphores);
+   util_dynarray_fini(&bs->fd_wait_semaphore_stages);
    util_dynarray_fini(&bs->acquire_flags);
    unsigned num_mfences = util_dynarray_num_elements(&bs->fence.mfences, void *);
    struct zink_tc_fence **mfence = bs->fence.mfences.data;
@@ -458,10 +463,13 @@ get_batch_state(struct zink_context *ctx, struct zink_batch *batch)
       }
       simple_mtx_unlock(&screen->free_batch_states_lock);
    }
-   if (!bs && ctx->batch_states) {
-      /* states are stored sequentially, so if the first one doesn't work, none of them will */
-      if (zink_screen_check_last_finished(screen, ctx->batch_states->fence.batch_id) ||
-          find_unused_state(ctx->batch_states)) {
+   /* states are stored sequentially, so if the first one doesn't work, none of them will */
+   if (!bs && ctx->batch_states && ctx->batch_states->next) {
+      /* only a submitted state can be reused */
+      if (p_atomic_read(&ctx->batch_states->fence.submitted) &&
+          /* a submitted state must have completed before it can be reused */
+          (zink_screen_check_last_finished(screen, ctx->batch_states->fence.batch_id) ||
+           p_atomic_read(&ctx->batch_states->fence.completed))) {
          bs = ctx->batch_states;
          pop_batch_state(ctx);
       }
@@ -754,7 +762,7 @@ submit_queue(void *data, void *gdata, int thread_index)
 
    unsigned i = 0;
    VkSemaphore *sem = bs->signal_semaphores.data;
-   set_foreach_remove(&bs->dmabuf_exports, entry) {
+   set_foreach(&bs->dmabuf_exports, entry) {
       struct zink_resource *res = (void*)entry->key;
       for (; res; res = zink_resource(res->base.b.next))
          zink_screen_import_dmabuf_semaphore(screen, res, sem[i++]);
@@ -762,6 +770,7 @@ submit_queue(void *data, void *gdata, int thread_index)
       struct pipe_resource *pres = (void*)entry->key;
       pipe_resource_reference(&pres, NULL);
    }
+   _mesa_set_clear(&bs->dmabuf_exports, NULL);
 
    bs->usage.submit_count++;
 end:
diff --git a/src/gallium/drivers/zink/zink_blit.c b/src/gallium/drivers/zink/zink_blit.c
index 43ab2db5649..966b22a5755 100644
--- a/src/gallium/drivers/zink/zink_blit.c
+++ b/src/gallium/drivers/zink/zink_blit.c
@@ -362,13 +362,20 @@ zink_blit(struct pipe_context *pctx,
    bool stencil_blit = false;
    if (!util_blitter_is_blit_supported(ctx->blitter, info)) {
       if (util_format_is_depth_or_stencil(info->src.resource->format)) {
-         struct pipe_blit_info depth_blit = *info;
-         depth_blit.mask = PIPE_MASK_Z;
-         stencil_blit = util_blitter_is_blit_supported(ctx->blitter, &depth_blit);
-         if (stencil_blit) {
-            zink_blit_begin(ctx, ZINK_BLIT_SAVE_FB | ZINK_BLIT_SAVE_FS | ZINK_BLIT_SAVE_TEXTURES);
-            util_blitter_blit(ctx->blitter, &depth_blit);
+         if (info->mask & PIPE_MASK_Z) {
+            struct pipe_blit_info depth_blit = *info;
+            depth_blit.mask = PIPE_MASK_Z;
+            if (util_blitter_is_blit_supported(ctx->blitter, &depth_blit)) {
+               zink_blit_begin(ctx, ZINK_BLIT_SAVE_FB | ZINK_BLIT_SAVE_FS | ZINK_BLIT_SAVE_TEXTURES);
+               util_blitter_blit(ctx->blitter, &depth_blit);
+            } else {
+               mesa_loge("ZINK: depth blit unsupported %s -> %s",
+                         util_format_short_name(info->src.resource->format),
+                         util_format_short_name(info->dst.resource->format));
+            }
          }
+         if (info->mask & PIPE_MASK_S)
+            stencil_blit = true;
       }
       if (!stencil_blit) {
          mesa_loge("ZINK: blit unsupported %s -> %s",
diff --git a/src/gallium/drivers/zink/zink_bo.c b/src/gallium/drivers/zink/zink_bo.c
index b5b4f070765..2c5e78c1b7a 100644
--- a/src/gallium/drivers/zink/zink_bo.c
+++ b/src/gallium/drivers/zink/zink_bo.c
@@ -548,7 +548,7 @@ bo_sparse_create(struct zink_screen *screen, uint64_t size)
    bo->base.base.alignment_log2 = util_logbase2(ZINK_SPARSE_BUFFER_PAGE_SIZE);
    bo->base.base.size = size;
    bo->base.vtbl = &bo_sparse_vtbl;
-   unsigned placement = zink_mem_type_idx_from_bits(screen, ZINK_HEAP_DEVICE_LOCAL_SPARSE, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
+   unsigned placement = zink_mem_type_idx_from_types(screen, ZINK_HEAP_DEVICE_LOCAL_SPARSE, UINT32_MAX);
    assert(placement != UINT32_MAX);
    bo->base.base.placement = placement;
    bo->unique_id = p_atomic_inc_return(&screen->pb.next_bo_unique_id);
@@ -622,6 +622,8 @@ zink_bo_create(struct zink_screen *screen, uint64_t size, unsigned alignment, en
             low_bound *= 2; //nvidia has fat textures or something
          unsigned vk_heap_idx = screen->info.mem_props.memoryTypes[mem_type_idx].heapIndex;
          reclaim_all = screen->info.mem_props.memoryHeaps[vk_heap_idx].size <= low_bound;
+         if (reclaim_all)
+            reclaim_all = clean_up_buffer_managers(screen);
       }
       entry = pb_slab_alloc_reclaimed(slabs, alloc_size, mem_type_idx, reclaim_all);
       if (!entry) {
@@ -636,6 +638,8 @@ zink_bo_create(struct zink_screen *screen, uint64_t size, unsigned alignment, en
       assert(bo->base.base.placement == mem_type_idx);
       pipe_reference_init(&bo->base.base.reference, 1);
       bo->base.base.size = size;
+      memset(&bo->reads, 0, sizeof(bo->reads));
+      memset(&bo->writes, 0, sizeof(bo->writes));
       assert(alignment <= 1 << bo->base.base.alignment_log2);
 
       return &bo->base;
@@ -664,8 +668,11 @@ no_slab:
        bo = (struct zink_bo*)
             pb_cache_reclaim_buffer(&screen->pb.bo_cache, size, alignment, 0, mem_type_idx);
        assert(!bo || bo->base.base.placement == mem_type_idx);
-       if (bo)
+       if (bo) {
+          memset(&bo->reads, 0, sizeof(bo->reads));
+          memset(&bo->writes, 0, sizeof(bo->writes));
           return &bo->base;
+       }
    }
 
    /* Create a new one. */
diff --git a/src/gallium/drivers/zink/zink_bo.h b/src/gallium/drivers/zink/zink_bo.h
index f747df6d869..cd7338aff5a 100644
--- a/src/gallium/drivers/zink/zink_bo.h
+++ b/src/gallium/drivers/zink/zink_bo.h
@@ -94,10 +94,10 @@ zink_heap_from_domain_flags(VkMemoryPropertyFlags domains, enum zink_alloc_flag
 }
 
 static ALWAYS_INLINE unsigned
-zink_mem_type_idx_from_bits(struct zink_screen *screen, enum zink_heap heap, uint32_t bits)
+zink_mem_type_idx_from_types(struct zink_screen *screen, enum zink_heap heap, uint32_t types)
 {
    for (unsigned i = 0; i < screen->heap_count[heap]; i++) {
-      if (bits & BITFIELD_BIT(screen->heap_map[heap][i])) {
+      if (types & BITFIELD_BIT(screen->heap_map[heap][i])) {
          return screen->heap_map[heap][i];
       }
    }
diff --git a/src/gallium/drivers/zink/zink_clear.c b/src/gallium/drivers/zink/zink_clear.c
index dc2ca1d1c11..dd1684a33f9 100644
--- a/src/gallium/drivers/zink/zink_clear.c
+++ b/src/gallium/drivers/zink/zink_clear.c
@@ -98,8 +98,8 @@ clear_in_rp(struct pipe_context *pctx,
          return;
       cr.rect.offset.x = scissor_state->minx;
       cr.rect.offset.y = scissor_state->miny;
-      cr.rect.extent.width = MIN2(fb->width, scissor_state->maxx - scissor_state->minx);
-      cr.rect.extent.height = MIN2(fb->height, scissor_state->maxy - scissor_state->miny);
+      cr.rect.extent.width = MIN2(fb->width - cr.rect.offset.x, scissor_state->maxx - scissor_state->minx);
+      cr.rect.extent.height = MIN2(fb->height - cr.rect.offset.y, scissor_state->maxy - scissor_state->miny);
    } else {
       cr.rect.extent.width = fb->width;
       cr.rect.extent.height = fb->height;
@@ -644,6 +644,8 @@ zink_clear_depth_stencil(struct pipe_context *pctx, struct pipe_surface *dst,
                          bool render_condition_enabled)
 {
    struct zink_context *ctx = zink_context(pctx);
+   /* check for stencil fallback */
+   bool blitting = ctx->blitting;
    zink_flush_dgc_if_enabled(ctx);
    bool render_condition_active = ctx->render_condition_active;
    if (!render_condition_enabled && render_condition_active) {
@@ -656,14 +658,16 @@ zink_clear_depth_stencil(struct pipe_context *pctx, struct pipe_surface *dst,
        dsty + height > ctx->fb_state.height)
       cur_attachment = false;
    if (!cur_attachment) {
-      util_blitter_save_framebuffer(ctx->blitter, &ctx->fb_state);
-      set_clear_fb(pctx, NULL, dst);
-      zink_blit_barriers(ctx, NULL, zink_resource(dst->texture), false);
-      ctx->blitting = true;
+      if (!blitting) {
+         util_blitter_save_framebuffer(ctx->blitter, &ctx->fb_state);
+         set_clear_fb(pctx, NULL, dst);
+         zink_blit_barriers(ctx, NULL, zink_resource(dst->texture), false);
+         ctx->blitting = true;
+      }
    }
    struct pipe_scissor_state scissor = {dstx, dsty, dstx + width, dsty + height};
    pctx->clear(pctx, clear_flags, &scissor, NULL, depth, stencil);
-   if (!cur_attachment) {
+   if (!cur_attachment && !blitting) {
       util_blitter_restore_fb_state(ctx->blitter);
       ctx->blitting = false;
    }
diff --git a/src/gallium/drivers/zink/zink_compiler.c b/src/gallium/drivers/zink/zink_compiler.c
index 3674f412062..fce8f51b7ea 100644
--- a/src/gallium/drivers/zink/zink_compiler.c
+++ b/src/gallium/drivers/zink/zink_compiler.c
@@ -2671,13 +2671,11 @@ fill_zero_reads(nir_builder *b, nir_intrinsic_instr *intr, void *data)
    if (intr->def.bit_size == 64)
       num_components *= 2;
    nir_src *src_offset = nir_get_io_offset_src(intr);
-   if (nir_src_is_const(*src_offset)) {
-      unsigned slot_offset = nir_src_as_uint(*src_offset);
-      if (s.location + slot_offset != wc->slot)
-         return false;
-   } else if (s.location > wc->slot || s.location + s.num_slots <= wc->slot) {
+   if (!nir_src_is_const(*src_offset))
+      return false;
+   unsigned slot_offset = nir_src_as_uint(*src_offset);
+   if (s.location + slot_offset != wc->slot)
       return false;
-   }
    uint32_t readmask = BITFIELD_MASK(intr->num_components) << c;
    if (intr->def.bit_size == 64)
       readmask |= readmask << (intr->num_components + c);
@@ -3543,6 +3541,88 @@ invert_point_coord(nir_shader *nir)
                                      nir_metadata_dominance, NULL);
 }
 
+static bool
+is_residency_code(nir_def *src)
+{
+   nir_instr *parent = src->parent_instr;
+   while (1) {
+      if (parent->type == nir_instr_type_intrinsic) {
+         ASSERTED nir_intrinsic_instr *intr = nir_instr_as_intrinsic(parent);
+         assert(intr->intrinsic == nir_intrinsic_is_sparse_texels_resident);
+         return false;
+      }
+      if (parent->type == nir_instr_type_tex)
+         return true;
+      assert(parent->type == nir_instr_type_alu);
+      nir_alu_instr *alu = nir_instr_as_alu(parent);
+      parent = alu->src[0].src.ssa->parent_instr;
+   }
+}
+
+static bool
+lower_sparse_instr(nir_builder *b, nir_intrinsic_instr *instr, void *data)
+{
+   if (instr->intrinsic == nir_intrinsic_sparse_residency_code_and) {
+      b->cursor = nir_before_instr(&instr->instr);
+      nir_def *src0;
+      if (is_residency_code(instr->src[0].ssa))
+         src0 = nir_is_sparse_texels_resident(b, 1, instr->src[0].ssa);
+      else
+         src0 = instr->src[0].ssa;
+      nir_def *src1;
+      if (is_residency_code(instr->src[1].ssa))
+         src1 = nir_is_sparse_texels_resident(b, 1, instr->src[1].ssa);
+      else
+         src1 = instr->src[1].ssa;
+      nir_def *def = nir_iand(b, src0, src1);
+      nir_def_rewrite_uses_after(&instr->def, def, &instr->instr);
+      nir_instr_remove(&instr->instr);
+      return true;
+   }
+   if (instr->intrinsic != nir_intrinsic_is_sparse_texels_resident)
+      return false;
+
+   /* vulkan vec can only be a vec4, but this is (maybe) vec5,
+    * so just rewrite as the first component since ntv is going to use a different
+    * method for storing the residency value anyway
+    */
+   b->cursor = nir_before_instr(&instr->instr);
+   nir_instr *parent = instr->src[0].ssa->parent_instr;
+   if (is_residency_code(instr->src[0].ssa)) {
+      assert(parent->type == nir_instr_type_alu);
+      nir_alu_instr *alu = nir_instr_as_alu(parent);
+      nir_def_rewrite_uses_after(instr->src[0].ssa, nir_channel(b, alu->src[0].src.ssa, 0), parent);
+      nir_instr_remove(parent);
+   } else {
+      nir_def *src;
+      if (parent->type == nir_instr_type_intrinsic) {
+         nir_intrinsic_instr *intr = nir_instr_as_intrinsic(parent);
+         assert(intr->intrinsic == nir_intrinsic_is_sparse_texels_resident);
+         src = intr->src[0].ssa;
+      } else {
+         assert(parent->type == nir_instr_type_alu);
+         nir_alu_instr *alu = nir_instr_as_alu(parent);
+         src = alu->src[0].src.ssa;
+      }
+      if (instr->def.bit_size != 32) {
+         if (instr->def.bit_size == 1)
+            src = nir_ieq_imm(b, src, 1);
+         else
+            src = nir_u2uN(b, src, instr->def.bit_size);
+      }
+      nir_def_rewrite_uses(&instr->def, src);
+      nir_instr_remove(&instr->instr);
+   }
+   return true;
+}
+
+static bool
+lower_sparse(nir_shader *shader)
+{
+   return nir_shader_intrinsics_pass(shader, lower_sparse_instr,
+                                     nir_metadata_dominance, NULL);
+}
+
 static bool
 add_derefs_instr(nir_builder *b, nir_intrinsic_instr *intr, void *data)
 {
@@ -3551,6 +3631,8 @@ add_derefs_instr(nir_builder *b, nir_intrinsic_instr *intr, void *data)
    bool is_interp = false;
    if (!filter_io_instr(intr, &is_load, &is_input, &is_interp))
       return false;
+   bool is_special_io = (b->shader->info.stage == MESA_SHADER_VERTEX && is_input) ||
+                        (b->shader->info.stage == MESA_SHADER_FRAGMENT && !is_input);
    unsigned loc = nir_intrinsic_io_semantics(intr).location;
    nir_src *src_offset = nir_get_io_offset_src(intr);
    const unsigned slot_offset = src_offset && nir_src_is_const(*src_offset) ? nir_src_as_uint(*src_offset) : 0;
@@ -3579,9 +3661,8 @@ add_derefs_instr(nir_builder *b, nir_intrinsic_instr *intr, void *data)
       bool is_struct = glsl_type_is_struct(glsl_without_array(type));
       if (is_struct)
          size = get_slot_components(var, var->data.location + slot_offset, var->data.location);
-      else if ((var->data.mode == nir_var_shader_out && var->data.location < VARYING_SLOT_VAR0) ||
-          (var->data.mode == nir_var_shader_in && var->data.location < (b->shader->info.stage == MESA_SHADER_VERTEX ? VERT_ATTRIB_GENERIC0 : VARYING_SLOT_VAR0)))
-         size = glsl_type_is_array(type) ? glsl_get_aoa_size(type) : glsl_get_vector_elements(type);
+      else if (!is_special_io && var->data.compact)
+         size = glsl_get_aoa_size(type);
       else
          size = glsl_get_vector_elements(glsl_without_array(type));
       assert(size);
@@ -3679,7 +3760,7 @@ add_derefs_instr(nir_builder *b, nir_intrinsic_instr *intr, void *data)
          }
          /* filter needed components */
          if (intr->num_components < load->num_components)
-            load = nir_channels(b, load, BITFIELD_MASK(intr->num_components) << c);
+            load = nir_channels(b, load, BITFIELD_MASK(intr->num_components) << (c - var->data.location_frac));
          nir_def_rewrite_uses(&intr->def, load);
       } else {
          nir_def *store = intr->src[0].ssa;
@@ -3936,6 +4017,7 @@ zink_shader_compile(struct zink_screen *screen, bool can_shobj, struct zink_shad
          zs->can_inline = false;
    } else if (need_optimize)
       optimize_nir(nir, zs, true);
+   NIR_PASS_V(nir, lower_sparse);
    
    struct zink_shader_object obj = compile_module(screen, zs, nir, can_shobj, pg);
    ralloc_free(nir);
@@ -4570,88 +4652,6 @@ scan_nir(struct zink_screen *screen, nir_shader *shader, struct zink_shader *zs)
    }
 }
 
-static bool
-is_residency_code(nir_def *src)
-{
-   nir_instr *parent = src->parent_instr;
-   while (1) {
-      if (parent->type == nir_instr_type_intrinsic) {
-         ASSERTED nir_intrinsic_instr *intr = nir_instr_as_intrinsic(parent);
-         assert(intr->intrinsic == nir_intrinsic_is_sparse_texels_resident);
-         return false;
-      }
-      if (parent->type == nir_instr_type_tex)
-         return true;
-      assert(parent->type == nir_instr_type_alu);
-      nir_alu_instr *alu = nir_instr_as_alu(parent);
-      parent = alu->src[0].src.ssa->parent_instr;
-   }
-}
-
-static bool
-lower_sparse_instr(nir_builder *b, nir_intrinsic_instr *instr, void *data)
-{
-   if (instr->intrinsic == nir_intrinsic_sparse_residency_code_and) {
-      b->cursor = nir_before_instr(&instr->instr);
-      nir_def *src0;
-      if (is_residency_code(instr->src[0].ssa))
-         src0 = nir_is_sparse_texels_resident(b, 1, instr->src[0].ssa);
-      else
-         src0 = instr->src[0].ssa;
-      nir_def *src1;
-      if (is_residency_code(instr->src[1].ssa))
-         src1 = nir_is_sparse_texels_resident(b, 1, instr->src[1].ssa);
-      else
-         src1 = instr->src[1].ssa;
-      nir_def *def = nir_iand(b, src0, src1);
-      nir_def_rewrite_uses_after(&instr->def, def, &instr->instr);
-      nir_instr_remove(&instr->instr);
-      return true;
-   }
-   if (instr->intrinsic != nir_intrinsic_is_sparse_texels_resident)
-      return false;
-
-   /* vulkan vec can only be a vec4, but this is (maybe) vec5,
-    * so just rewrite as the first component since ntv is going to use a different
-    * method for storing the residency value anyway
-    */
-   b->cursor = nir_before_instr(&instr->instr);
-   nir_instr *parent = instr->src[0].ssa->parent_instr;
-   if (is_residency_code(instr->src[0].ssa)) {
-      assert(parent->type == nir_instr_type_alu);
-      nir_alu_instr *alu = nir_instr_as_alu(parent);
-      nir_def_rewrite_uses_after(instr->src[0].ssa, nir_channel(b, alu->src[0].src.ssa, 0), parent);
-      nir_instr_remove(parent);
-   } else {
-      nir_def *src;
-      if (parent->type == nir_instr_type_intrinsic) {
-         nir_intrinsic_instr *intr = nir_instr_as_intrinsic(parent);
-         assert(intr->intrinsic == nir_intrinsic_is_sparse_texels_resident);
-         src = intr->src[0].ssa;
-      } else {
-         assert(parent->type == nir_instr_type_alu);
-         nir_alu_instr *alu = nir_instr_as_alu(parent);
-         src = alu->src[0].src.ssa;
-      }
-      if (instr->def.bit_size != 32) {
-         if (instr->def.bit_size == 1)
-            src = nir_ieq_imm(b, src, 1);
-         else
-            src = nir_u2uN(b, src, instr->def.bit_size);
-      }
-      nir_def_rewrite_uses(&instr->def, src);
-      nir_instr_remove(&instr->instr);
-   }
-   return true;
-}
-
-static bool
-lower_sparse(nir_shader *shader)
-{
-   return nir_shader_intrinsics_pass(shader, lower_sparse_instr,
-                                     nir_metadata_dominance, NULL);
-}
-
 static bool
 match_tex_dests_instr(nir_builder *b, nir_instr *in, void *data)
 {
@@ -4912,13 +4912,13 @@ fixup_io_locations(nir_shader *nir)
             else
                var->data.driver_location = var->data.location;
          }
-         return true;
+         continue;
       }
       /* i/o interface blocks are required to be EXACT matches between stages:
       * iterate over all locations and set locations incrementally
       */
       unsigned slot = 0;
-      for (unsigned i = 0; i < VARYING_SLOT_MAX; i++) {
+      for (unsigned i = 0; i < VARYING_SLOT_TESS_MAX; i++) {
          if (nir_slot_is_sysval_output(i, MESA_SHADER_NONE))
             continue;
          bool found = false;
@@ -5301,11 +5301,20 @@ mem_access_size_align_cb(nir_intrinsic_op intrin, uint8_t bytes,
 
    assert(util_is_power_of_two_nonzero(align));
 
-   return (nir_mem_access_size_align){
-      .num_components = MIN2(bytes / (bit_size / 8), 4),
-      .bit_size = bit_size,
-      .align = bit_size / 8,
-   };
+   /* simply drop the bit_size for unaligned load/stores */
+   if (align < (bit_size / 8)) {
+      return (nir_mem_access_size_align){
+         .num_components = MIN2(bytes / align, 4),
+         .bit_size = align * 8,
+         .align = align,
+      };
+   } else {
+      return (nir_mem_access_size_align){
+         .num_components = MIN2(bytes / (bit_size / 8), 4),
+         .bit_size = bit_size,
+         .align = bit_size / 8,
+      };
+   }
 }
 
 static nir_mem_access_size_align
@@ -5468,7 +5477,6 @@ zink_shader_create(struct zink_screen *screen, struct nir_shader *nir)
 
    NIR_PASS_V(nir, lower_basevertex);
    NIR_PASS_V(nir, lower_baseinstance);
-   NIR_PASS_V(nir, lower_sparse);
    NIR_PASS_V(nir, split_bitfields);
    NIR_PASS_V(nir, nir_lower_frexp); /* TODO: Use the spirv instructions for this. */
 
@@ -5651,6 +5659,7 @@ zink_shader_create(struct zink_screen *screen, struct nir_shader *nir)
    }
    zink_shader_serialize_blob(nir, &ret->blob);
    memcpy(&ret->info, &nir->info, sizeof(nir->info));
+   ret->info.name = ralloc_strdup(ret, nir->info.name);
 
    ret->can_inline = true;
 
@@ -5708,70 +5717,82 @@ zink_shader_free(struct zink_screen *screen, struct zink_shader *shader)
    ralloc_free(shader);
 }
 
+static bool
+gfx_shader_prune(struct zink_screen *screen, struct zink_shader *shader)
+{
+   /* this shader may still be precompiling, so access here must be locked and singular */
+   simple_mtx_lock(&shader->lock);
+   struct set_entry *entry = _mesa_set_next_entry(shader->programs, NULL);
+   struct zink_gfx_program *prog = (void*)(entry ? entry->key : NULL);
+   if (entry)
+      _mesa_set_remove(shader->programs, entry);
+   simple_mtx_unlock(&shader->lock);
+   if (!prog)
+      return false;
+   gl_shader_stage stage = shader->info.stage;
+   assert(stage < ZINK_GFX_SHADER_COUNT);
+   unsigned stages_present = prog->stages_present;
+   if (prog->shaders[MESA_SHADER_TESS_CTRL] &&
+         prog->shaders[MESA_SHADER_TESS_CTRL]->non_fs.is_generated)
+      stages_present &= ~BITFIELD_BIT(MESA_SHADER_TESS_CTRL);
+   unsigned idx = zink_program_cache_stages(stages_present);
+   if (!prog->base.removed && prog->stages_present == prog->stages_remaining &&
+         (stage == MESA_SHADER_FRAGMENT || !shader->non_fs.is_generated)) {
+      struct hash_table *ht = &prog->ctx->program_cache[idx];
+      simple_mtx_lock(&prog->ctx->program_lock[idx]);
+      struct hash_entry *he = _mesa_hash_table_search(ht, prog->shaders);
+      assert(he && he->data == prog);
+      _mesa_hash_table_remove(ht, he);
+      prog->base.removed = true;
+      simple_mtx_unlock(&prog->ctx->program_lock[idx]);
+      util_queue_fence_wait(&prog->base.cache_fence);
+
+      for (unsigned r = 0; r < ARRAY_SIZE(prog->pipelines); r++) {
+         for (int i = 0; i < ARRAY_SIZE(prog->pipelines[0]); ++i) {
+            hash_table_foreach(&prog->pipelines[r][i], entry) {
+               struct zink_gfx_pipeline_cache_entry *pc_entry = entry->data;
+
+               util_queue_fence_wait(&pc_entry->fence);
+            }
+         }
+      }
+   }
+   if (stage == MESA_SHADER_FRAGMENT || !shader->non_fs.is_generated) {
+      prog->shaders[stage] = NULL;
+      prog->stages_remaining &= ~BITFIELD_BIT(stage);
+   }
+   /* only remove generated tcs during parent tes destruction */
+   if (stage == MESA_SHADER_TESS_EVAL && shader->non_fs.generated_tcs)
+      prog->shaders[MESA_SHADER_TESS_CTRL] = NULL;
+   if (stage != MESA_SHADER_FRAGMENT &&
+      prog->shaders[MESA_SHADER_GEOMETRY] &&
+      prog->shaders[MESA_SHADER_GEOMETRY]->non_fs.parent ==
+      shader) {
+      prog->shaders[MESA_SHADER_GEOMETRY] = NULL;
+   }
+   zink_gfx_program_reference(screen, &prog, NULL);
+   return true;
+}
+
 void
 zink_gfx_shader_free(struct zink_screen *screen, struct zink_shader *shader)
 {
    assert(shader->info.stage != MESA_SHADER_COMPUTE);
    util_queue_fence_wait(&shader->precompile.fence);
-   set_foreach(shader->programs, entry) {
-      struct zink_gfx_program *prog = (void*)entry->key;
-      gl_shader_stage stage = shader->info.stage;
-      assert(stage < ZINK_GFX_SHADER_COUNT);
-      unsigned stages_present = prog->stages_present;
-      if (prog->shaders[MESA_SHADER_TESS_CTRL] &&
-            prog->shaders[MESA_SHADER_TESS_CTRL]->non_fs.is_generated)
-         stages_present &= ~BITFIELD_BIT(MESA_SHADER_TESS_CTRL);
-      unsigned idx = zink_program_cache_stages(stages_present);
-      if (!prog->base.removed && prog->stages_present == prog->stages_remaining &&
-          (stage == MESA_SHADER_FRAGMENT || !shader->non_fs.is_generated)) {
-         struct hash_table *ht = &prog->ctx->program_cache[idx];
-         simple_mtx_lock(&prog->ctx->program_lock[idx]);
-         struct hash_entry *he = _mesa_hash_table_search(ht, prog->shaders);
-         assert(he && he->data == prog);
-         _mesa_hash_table_remove(ht, he);
-         prog->base.removed = true;
-         simple_mtx_unlock(&prog->ctx->program_lock[idx]);
-         util_queue_fence_wait(&prog->base.cache_fence);
-
-         for (unsigned r = 0; r < ARRAY_SIZE(prog->pipelines); r++) {
-            for (int i = 0; i < ARRAY_SIZE(prog->pipelines[0]); ++i) {
-               hash_table_foreach(&prog->pipelines[r][i], entry) {
-                  struct zink_gfx_pipeline_cache_entry *pc_entry = entry->data;
-
-                  util_queue_fence_wait(&pc_entry->fence);
-               }
-            }
-         }
 
+   /* if the shader is still precompiling, the program set must be pruned under lock */
+   while (gfx_shader_prune(screen, shader));
+
+   while (util_dynarray_contains(&shader->pipeline_libs, struct zink_gfx_lib_cache*)) {
+      struct zink_gfx_lib_cache *libs = util_dynarray_pop(&shader->pipeline_libs, struct zink_gfx_lib_cache*);
+      if (!libs->removed) {
+         libs->removed = true;
+         unsigned idx = zink_program_cache_stages(libs->stages_present);
+         simple_mtx_lock(&screen->pipeline_libs_lock[idx]);
+         _mesa_set_remove_key(&screen->pipeline_libs[idx], libs);
+         simple_mtx_unlock(&screen->pipeline_libs_lock[idx]);
       }
-      while (util_dynarray_contains(&shader->pipeline_libs, struct zink_gfx_lib_cache*)) {
-         struct zink_gfx_lib_cache *libs = util_dynarray_pop(&shader->pipeline_libs, struct zink_gfx_lib_cache*);
-         //this condition is equivalent to verifying that, for each bit stages_present_i in stages_present,
-         //stages_present_i implies libs->stages_present_i
-         if ((stages_present & ~(libs->stages_present & stages_present)) != 0)
-            continue;
-         if (!libs->removed) {
-            libs->removed = true;
-            simple_mtx_lock(&screen->pipeline_libs_lock[idx]);
-            _mesa_set_remove_key(&screen->pipeline_libs[idx], libs);
-            simple_mtx_unlock(&screen->pipeline_libs_lock[idx]);
-         }
-         zink_gfx_lib_cache_unref(screen, libs);
-      }
-      if (stage == MESA_SHADER_FRAGMENT || !shader->non_fs.is_generated) {
-         prog->shaders[stage] = NULL;
-         prog->stages_remaining &= ~BITFIELD_BIT(stage);
-      }
-      /* only remove generated tcs during parent tes destruction */
-      if (stage == MESA_SHADER_TESS_EVAL && shader->non_fs.generated_tcs)
-         prog->shaders[MESA_SHADER_TESS_CTRL] = NULL;
-      if (stage != MESA_SHADER_FRAGMENT &&
-          prog->shaders[MESA_SHADER_GEOMETRY] &&
-          prog->shaders[MESA_SHADER_GEOMETRY]->non_fs.parent ==
-          shader) {
-         prog->shaders[MESA_SHADER_GEOMETRY] = NULL;
-      }
-      zink_gfx_program_reference(screen, &prog, NULL);
+      zink_gfx_lib_cache_unref(screen, libs);
    }
    if (shader->info.stage == MESA_SHADER_TESS_EVAL &&
        shader->non_fs.generated_tcs) {
diff --git a/src/gallium/drivers/zink/zink_context.c b/src/gallium/drivers/zink/zink_context.c
index 5916839c37b..8978ea2f2a1 100644
--- a/src/gallium/drivers/zink/zink_context.c
+++ b/src/gallium/drivers/zink/zink_context.c
@@ -137,7 +137,7 @@ zink_context_destroy(struct pipe_context *pctx)
       simple_mtx_lock((&ctx->program_lock[i]));
       hash_table_foreach(&ctx->program_cache[i], entry) {
          struct zink_program *pg = entry->data;
-         util_queue_fence_wait(&pg->cache_fence);
+         zink_program_finish(ctx, pg);
          pg->removed = true;
       }
       simple_mtx_unlock((&ctx->program_lock[i]));
@@ -187,21 +187,31 @@ zink_context_destroy(struct pipe_context *pctx)
          screen->free_batch_states = ctx->batch_states;
          screen->last_free_batch_state = screen->free_batch_states;
       }
-      while (screen->last_free_batch_state->next)
-         screen->last_free_batch_state = screen->last_free_batch_state->next;
    }
+   while (screen->last_free_batch_state && screen->last_free_batch_state->next)
+      screen->last_free_batch_state = screen->last_free_batch_state->next;
    if (ctx->free_batch_states) {
       if (screen->free_batch_states)
          screen->last_free_batch_state->next = ctx->free_batch_states;
-      else
+      else {
          screen->free_batch_states = ctx->free_batch_states;
-      screen->last_free_batch_state = ctx->last_free_batch_state;
+         screen->last_free_batch_state = ctx->last_free_batch_state;
+      }
    }
-   simple_mtx_unlock(&screen->free_batch_states_lock);
+   while (screen->last_free_batch_state && screen->last_free_batch_state->next)
+      screen->last_free_batch_state = screen->last_free_batch_state->next;
    if (ctx->batch.state) {
       zink_clear_batch_state(ctx, ctx->batch.state);
-      zink_batch_state_destroy(screen, ctx->batch.state);
+      if (screen->free_batch_states)
+         screen->last_free_batch_state->next = ctx->batch.state;
+      else {
+         screen->free_batch_states = ctx->batch.state;
+         screen->last_free_batch_state = screen->free_batch_states;
+      }
    }
+   while (screen->last_free_batch_state && screen->last_free_batch_state->next)
+      screen->last_free_batch_state = screen->last_free_batch_state->next;
+   simple_mtx_unlock(&screen->free_batch_states_lock);
 
    for (unsigned i = 0; i < 2; i++) {
       util_idalloc_fini(&ctx->di.bindless[i].tex_slots);
@@ -1937,9 +1947,6 @@ zink_set_shader_images(struct pipe_context *pctx,
                   /* ref already added by create */
                   a->buffer_view = bv;
                }
-               if (zink_resource_access_is_write(access))
-                  res->obj->unordered_write = false;
-               res->obj->unordered_read = false;
             } else {
                /* image rebind: get updated surface and unref old one */
                struct zink_surface *surface = create_image_surface(ctx, b, is_compute);
@@ -1959,6 +1966,9 @@ zink_set_shader_images(struct pipe_context *pctx,
                                          res->gfx_barrier);
             zink_batch_resource_usage_set(&ctx->batch, res,
                                           zink_resource_access_is_write(access), true);
+            if (zink_resource_access_is_write(access))
+               res->obj->unordered_write = false;
+            res->obj->unordered_read = false;
          } else {
             finalize_image_bind(ctx, res, is_compute);
             zink_batch_resource_usage_set(&ctx->batch, res,
@@ -2837,6 +2847,29 @@ begin_rendering(struct zink_context *ctx)
                ctx->dynamic_fb.attachments[PIPE_MAX_COLOR_BUFS+1].loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
             }
          }
+      }
+      if (changed_size || changed_layout)
+         ctx->rp_changed = true;
+      ctx->rp_loadop_changed = false;
+      ctx->rp_layout_changed = false;
+   }
+   /* always assemble clear_buffers mask:
+    * if a scissored clear must be triggered during glFlush,
+    * the renderpass metadata may be unchanged (e.g., LOAD from previous rp),
+    * but the buffer mask must still be returned
+    */
+   if (ctx->clears_enabled) {
+      for (int i = 0; i < ctx->fb_state.nr_cbufs; i++) {
+         /* these are no-ops */
+         if (!ctx->fb_state.cbufs[i] || !zink_fb_clear_enabled(ctx, i))
+            continue;
+         /* these need actual clear calls inside the rp */
+         if (zink_fb_clear_needs_explicit(&ctx->fb_clears[i]))
+            clear_buffers |= (PIPE_CLEAR_COLOR0 << i);
+      }
+      if (ctx->fb_state.zsbuf && zink_fb_clear_enabled(ctx, PIPE_MAX_COLOR_BUFS)) {
+         struct zink_framebuffer_clear *fb_clear = &ctx->fb_clears[PIPE_MAX_COLOR_BUFS];
+         struct zink_framebuffer_clear_data *clear = zink_fb_clear_element(fb_clear, 0);
          if (zink_fb_clear_needs_explicit(fb_clear)) {
             for (int j = !zink_fb_clear_element_needs_explicit(clear);
                  (clear_buffers & PIPE_CLEAR_DEPTHSTENCIL) != PIPE_CLEAR_DEPTHSTENCIL && j < zink_fb_clear_count(fb_clear);
@@ -2844,10 +2877,6 @@ begin_rendering(struct zink_context *ctx)
                clear_buffers |= zink_fb_clear_element(fb_clear, j)->zs.bits;
          }
       }
-      if (changed_size || changed_layout)
-         ctx->rp_changed = true;
-      ctx->rp_loadop_changed = false;
-      ctx->rp_layout_changed = false;
    }
 
    if (!ctx->rp_changed && ctx->batch.in_rp)
@@ -2878,10 +2907,11 @@ begin_rendering(struct zink_context *ctx)
    if (has_swapchain) {
       ASSERTED struct zink_resource *res = zink_resource(ctx->fb_state.cbufs[0]->texture);
       zink_render_fixup_swapchain(ctx);
-      assert(ctx->dynamic_fb.info.renderArea.extent.width <= res->base.b.width0);
-      assert(ctx->dynamic_fb.info.renderArea.extent.height <= res->base.b.height0);
-      assert(ctx->fb_state.width <= res->base.b.width0);
-      assert(ctx->fb_state.height <= res->base.b.height0);
+      /* clamp for late swapchain resize */
+      if (res->base.b.width0 < ctx->dynamic_fb.info.renderArea.extent.width)
+         ctx->dynamic_fb.info.renderArea.extent.width = res->base.b.width0;
+      if (res->base.b.height0 < ctx->dynamic_fb.info.renderArea.extent.height)
+         ctx->dynamic_fb.info.renderArea.extent.height = res->base.b.height0;
    }
    if (ctx->fb_state.zsbuf && zsbuf_used) {
       struct zink_surface *surf = zink_csurface(ctx->fb_state.zsbuf);
@@ -3803,7 +3833,6 @@ zink_flush(struct pipe_context *pctx,
    struct zink_batch *batch = &ctx->batch;
    struct zink_fence *fence = NULL;
    struct zink_screen *screen = zink_screen(ctx->base.screen);
-   unsigned submit_count = 0;
    VkSemaphore export_sem = VK_NULL_HANDLE;
 
    /* triggering clears will force has_work */
@@ -3864,8 +3893,7 @@ zink_flush(struct pipe_context *pctx,
       }
    }
 
-   /* TODO: if swapchains gain timeline semaphore semantics, `flags` can be eliminated and no-op fence can return timeline id */
-   if (!batch->has_work && flags) {
+   if (!batch->has_work) {
        if (pfence) {
           /* reuse last fence */
           fence = ctx->last_fence;
@@ -3882,7 +3910,6 @@ zink_flush(struct pipe_context *pctx,
          tc_driver_internal_flush_notify(ctx->tc);
    } else {
       fence = &batch->state->fence;
-      submit_count = batch->state->usage.submit_count;
       if (deferred && !(flags & PIPE_FLUSH_FENCE_FD) && pfence)
          deferred_fence = true;
       else
@@ -3906,7 +3933,7 @@ zink_flush(struct pipe_context *pctx,
       mfence->fence = fence;
       mfence->sem = export_sem;
       if (fence) {
-         mfence->submit_count = submit_count;
+         mfence->submit_count = zink_batch_state(fence)->usage.submit_count;
          util_dynarray_append(&fence->mfences, struct zink_tc_fence *, mfence);
       }
       if (export_sem) {
@@ -4120,7 +4147,7 @@ zink_flush_resource(struct pipe_context *pctx,
    struct zink_context *ctx = zink_context(pctx);
    struct zink_resource *res = zink_resource(pres);
    if (res->obj->dt) {
-      if (zink_kopper_acquired(res->obj->dt, res->obj->dt_idx)) {
+      if (zink_kopper_acquired(res->obj->dt, res->obj->dt_idx) && (!ctx->clears_enabled || !res->fb_bind_count)) {
          zink_batch_no_rp_safe(ctx);
          zink_kopper_readback_update(ctx, res);
          zink_screen(ctx->base.screen)->image_barrier(ctx, res, VK_IMAGE_LAYOUT_PRESENT_SRC_KHR, 0, VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT);
@@ -4819,8 +4846,11 @@ zink_resource_commit(struct pipe_context *pctx, struct pipe_resource *pres, unsi
    VkSemaphore sem = VK_NULL_HANDLE;
    bool ret = zink_bo_commit(ctx, res, level, box, commit, &sem);
    if (ret) {
-      if (sem)
+      if (sem) {
          zink_batch_add_wait_semaphore(&ctx->batch, sem);
+         zink_batch_reference_resource_rw(&ctx->batch, res, true);
+         ctx->batch.has_work = true;
+      }
    } else {
       check_device_lost(ctx);
    }
diff --git a/src/gallium/drivers/zink/zink_descriptors.c b/src/gallium/drivers/zink/zink_descriptors.c
index 81b197c2ef0..2ddd65eaa76 100644
--- a/src/gallium/drivers/zink/zink_descriptors.c
+++ b/src/gallium/drivers/zink/zink_descriptors.c
@@ -825,11 +825,14 @@ create_pool(struct zink_screen *screen, unsigned num_type_sizes, const VkDescrip
    dpci.poolSizeCount = num_type_sizes;
    dpci.flags = flags;
    dpci.maxSets = MAX_LAZY_DESCRIPTORS;
-   VkResult result = VKSCR(CreateDescriptorPool)(screen->dev, &dpci, 0, &pool);
-   if (result != VK_SUCCESS) {
-      mesa_loge("ZINK: vkCreateDescriptorPool failed (%s)", vk_Result_to_str(result));
-      return VK_NULL_HANDLE;
-   }
+   VkResult result;
+   VRAM_ALLOC_LOOP(result,
+      VKSCR(CreateDescriptorPool)(screen->dev, &dpci, 0, &pool),
+      if (result != VK_SUCCESS) {
+         mesa_loge("ZINK: vkCreateDescriptorPool failed (%s)", vk_Result_to_str(result));
+         return VK_NULL_HANDLE;
+      }
+   );
    return pool;
 }
 
@@ -1588,7 +1591,7 @@ zink_batch_descriptor_init(struct zink_screen *screen, struct zink_batch_state *
    }
 
    if (zink_descriptor_mode == ZINK_DESCRIPTOR_MODE_DB && !(bs->ctx->flags & ZINK_CONTEXT_COPY_ONLY)) {
-      unsigned bind = ZINK_BIND_RESOURCE_DESCRIPTOR | ZINK_BIND_SAMPLER_DESCRIPTOR;
+      unsigned bind = ZINK_BIND_DESCRIPTOR;
       struct pipe_resource *pres = pipe_buffer_create(&screen->base, bind, 0, bs->ctx->dd.db.max_db_size * screen->base_descriptor_size);
       if (!pres)
          return false;
@@ -1730,7 +1733,7 @@ zink_descriptors_init_bindless(struct zink_context *ctx)
    ctx->dd.bindless_init = true;
 
    if (zink_descriptor_mode == ZINK_DESCRIPTOR_MODE_DB) {
-      unsigned bind = ZINK_BIND_RESOURCE_DESCRIPTOR | ZINK_BIND_SAMPLER_DESCRIPTOR;
+      unsigned bind = ZINK_BIND_DESCRIPTOR;
       VkDeviceSize size;
       VKSCR(GetDescriptorSetLayoutSizeEXT)(screen->dev, screen->bindless_layout, &size);
       struct pipe_resource *pres = pipe_buffer_create(&screen->base, bind, 0, size);
diff --git a/src/gallium/drivers/zink/zink_device_info.py b/src/gallium/drivers/zink/zink_device_info.py
index c7d2aa4be4a..fea43c448ae 100644
--- a/src/gallium/drivers/zink/zink_device_info.py
+++ b/src/gallium/drivers/zink/zink_device_info.py
@@ -145,10 +145,6 @@ EXTENSIONS = [
     Extension("VK_EXT_sample_locations",
               alias="sample_locations",
               properties=True),
-    Extension("VK_EXT_conservative_rasterization",
-              alias="cons_raster",
-              properties=True,
-              conditions=["$props.fullyCoveredFragmentShaderInputVariable"]),
     Extension("VK_KHR_shader_draw_parameters"),
     Extension("VK_KHR_sampler_mirror_clamp_to_edge"),
     Extension("VK_EXT_descriptor_buffer", alias="db", features=True, properties=True),
@@ -658,6 +654,36 @@ zink_get_physical_device_info(struct zink_screen *screen)
 
    info->num_extensions = num_extensions;
 
+   info->feats.pNext = NULL;
+
+%for version in versions:
+%if version.device_version < (1,2,0):
+      if (VK_MAKE_VERSION(1,2,0) <= screen->vk_version) {
+         /* VkPhysicalDeviceVulkan11Features was added in 1.2, not 1.1 as one would think */
+%else:
+      if (${version.version()} <= screen->vk_version) {
+%endif
+         info->feats${version.struct()}.pNext = info->feats.pNext;
+         info->feats.pNext = &info->feats${version.struct()};
+      }
+%endfor
+
+%for ext in extensions:
+%if ext.has_features:
+<%helpers:guard ext="${ext}">
+%if ext.features_promoted:
+      if (info->have_${ext.name_with_vendor()} && !info->have_vulkan${ext.core_since.struct()}) {
+%else:
+      if (info->have_${ext.name_with_vendor()}) {
+%endif
+         info->${ext.field("feats")}.sType = ${ext.stype("FEATURES")};
+         info->${ext.field("feats")}.pNext = info->feats.pNext;
+         info->feats.pNext = &info->${ext.field("feats")};
+      }
+</%helpers:guard>
+%endif
+%endfor
+
    return true;
 
 fail:
diff --git a/src/gallium/drivers/zink/zink_draw.cpp b/src/gallium/drivers/zink/zink_draw.cpp
index 1526f3fc077..0da405ea7b7 100644
--- a/src/gallium/drivers/zink/zink_draw.cpp
+++ b/src/gallium/drivers/zink/zink_draw.cpp
@@ -437,6 +437,7 @@ update_gfx_pipeline(struct zink_context *ctx, struct zink_batch_state *bs, enum
          VKCTX(CmdSetDepthBiasEnable)(bs->cmdbuf, VK_TRUE);
          VKCTX(CmdSetTessellationDomainOriginEXT)(bs->cmdbuf, VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT);
          VKCTX(CmdSetSampleLocationsEnableEXT)(bs->cmdbuf, ctx->gfx_pipeline_state.sample_locations_enabled);
+         VKCTX(CmdSetRasterizationStreamEXT)(bs->cmdbuf, 0);
       }
       ctx->shobj_draw = true;
    }
diff --git a/src/gallium/drivers/zink/zink_fence.c b/src/gallium/drivers/zink/zink_fence.c
index 33ea9d7d90e..86bc56cf119 100644
--- a/src/gallium/drivers/zink/zink_fence.c
+++ b/src/gallium/drivers/zink/zink_fence.c
@@ -185,7 +185,12 @@ zink_fence_finish(struct zink_screen *screen, struct pipe_context *pctx, struct
    if (submit_diff > 1)
       return true;
 
-   if (fence->submitted && zink_screen_check_last_finished(screen, fence->batch_id))
+   /* - if fence is submitted, batch_id is nonzero and can be checked
+    * - if fence is not submitted here, it must be reset; batch_id will be 0 and submitted is false
+    * in either case, the fence has finished
+    */
+   if ((fence->submitted && zink_screen_check_last_finished(screen, fence->batch_id)) ||
+       (!fence->submitted && submit_diff))
       return true;
 
    return fence_wait(screen, fence, timeout_ns);
diff --git a/src/gallium/drivers/zink/zink_format.c b/src/gallium/drivers/zink/zink_format.c
index 96a046a6fef..cf36909d6ca 100644
--- a/src/gallium/drivers/zink/zink_format.c
+++ b/src/gallium/drivers/zink/zink_format.c
@@ -152,6 +152,8 @@ zink_format_get_emulated_alpha(enum pipe_format format)
    if (util_format_is_luminance(format))
       return util_format_luminance_to_red(format);
    if (util_format_is_luminance_alpha(format)) {
+      if (util_format_is_srgb(format))
+         return format;
       if (format == PIPE_FORMAT_LATC2_UNORM)
          return PIPE_FORMAT_RGTC2_UNORM;
       if (format == PIPE_FORMAT_LATC2_SNORM)
diff --git a/src/gallium/drivers/zink/zink_kopper.c b/src/gallium/drivers/zink/zink_kopper.c
index bda4c206877..b700befbc29 100644
--- a/src/gallium/drivers/zink/zink_kopper.c
+++ b/src/gallium/drivers/zink/zink_kopper.c
@@ -561,6 +561,8 @@ kopper_acquire(struct zink_screen *screen, struct zink_resource *res, uint64_t t
    if (cdt->swapchain->images[res->obj->dt_idx].readback)
       zink_resource(cdt->swapchain->images[res->obj->dt_idx].readback)->valid = false;
    res->obj->image = cdt->swapchain->images[res->obj->dt_idx].image;
+   if (!cdt->age_locked)
+      zink_kopper_update_last_written(res);
    cdt->swapchain->images[res->obj->dt_idx].acquired = false;
    if (!cdt->swapchain->images[res->obj->dt_idx].init) {
       /* swapchain images are initially in the UNDEFINED layout */
@@ -792,7 +794,7 @@ zink_kopper_present_queue(struct zink_screen *screen, struct zink_resource *res)
    cpi->res = res;
    cpi->swapchain = cdt->swapchain;
    cpi->indefinite_acquire = res->obj->indefinite_acquire;
-   res->obj->last_dt_idx = cpi->image = res->obj->dt_idx;
+   cpi->image = res->obj->dt_idx;
    cpi->info.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
    cpi->info.pNext = NULL;
    cpi->info.waitSemaphoreCount = 1;
@@ -812,11 +814,13 @@ zink_kopper_present_queue(struct zink_screen *screen, struct zink_resource *res)
     *  * Any other color buffers' ages are incremented by 1 if
     *    their age was previously greater than 0.
     */
-   for (int i = 0; i < cdt->swapchain->num_images; i++) {
-       if (i == res->obj->dt_idx)
-           cdt->swapchain->images[i].age = 1;
-       else if (cdt->swapchain->images[i].age > 0)
-           cdt->swapchain->images[i].age += 1;
+   if (!cdt->age_locked) {
+      for (int i = 0; i < cdt->swapchain->num_images; i++) {
+            if (i == res->obj->dt_idx)
+               cdt->swapchain->images[i].age = 1;
+            else if (cdt->swapchain->images[i].age > 0)
+               cdt->swapchain->images[i].age += 1;
+      }
    }
    if (util_queue_is_initialized(&screen->flush_queue)) {
       p_atomic_inc(&cpi->swapchain->async_presents);
@@ -832,6 +836,12 @@ zink_kopper_present_queue(struct zink_screen *screen, struct zink_resource *res)
    res->obj->dt_idx = UINT32_MAX;
 }
 
+void
+zink_kopper_update_last_written(struct zink_resource *res)
+{
+   res->obj->last_dt_idx = res->obj->dt_idx;
+}
+
 static void
 kopper_ensure_readback(struct zink_screen *screen, struct zink_resource *res)
 {
@@ -873,14 +883,30 @@ zink_kopper_acquire_readback(struct zink_context *ctx, struct zink_resource *res
    if (++cdt->readback_counter >= ZINK_READBACK_THRESHOLD)
       kopper_ensure_readback(screen, res);
    while (res->obj->dt_idx != last_dt_idx) {
-      if (res->obj->dt_idx != UINT32_MAX && !zink_kopper_present_readback(ctx, res))
-         break;
+      cdt->age_locked = true;
+      if (res->obj->dt_idx != UINT32_MAX) {
+         if (!zink_kopper_present_readback(ctx, res))
+            break;
+      } else if (util_queue_is_initialized(&screen->flush_queue)) {
+         /* AcquireNextImageKHR and QueuePresentKHR both access the swapchain, and
+          * if res->obj->dt_idx == UINT32_MAX then zink_kopper_present_readback is
+          * not called and we don't wait for the cdt->swapchain->present_fence.
+          * Still, a kopper_present might have been called in another thread, like
+          * e.g. with spec@!opengl 1.1@read-front, so we have to wait until the
+          * last call to QueuePresentKHR is finished to avoid an
+          *    UNASSIGNED-Threading-MultipleThreads-Write
+          * validation error that indicats a race condition when accessing the swapchain.
+          */
+         util_queue_fence_wait(&cdt->swapchain->present_fence);
+      }
+      cdt->age_locked = true;
       do {
          ret = kopper_acquire(screen, res, 0);
       } while (!is_swapchain_kill(ret) && (ret == VK_NOT_READY || ret == VK_TIMEOUT));
       if (is_swapchain_kill(ret)) {
          kill_swapchain(ctx, res);
          *readback = NULL;
+         cdt->age_locked = false;
          return false;
       }
    }
@@ -936,6 +962,10 @@ zink_kopper_present_readback(struct zink_context *ctx, struct zink_resource *res
    simple_mtx_lock(&screen->semaphores_lock);
    util_dynarray_append(&screen->semaphores, VkSemaphore, acquire);
    simple_mtx_unlock(&screen->semaphores_lock);
+
+   struct kopper_displaytarget *cdt = res->obj->dt;
+   cdt->age_locked = false;
+
    return zink_screen_handle_vkresult(screen, error);
 }
 
@@ -1042,8 +1072,13 @@ zink_kopper_set_swap_interval(struct pipe_screen *pscreen, struct pipe_resource
 
    zink_kopper_set_present_mode_for_interval(cdt, interval);
 
-   if (old_present_mode != cdt->present_mode)
-      update_swapchain(screen, cdt, cdt->caps.currentExtent.width, cdt->caps.currentExtent.height);
+   if (old_present_mode == cdt->present_mode)
+      return;
+   VkResult ret = update_swapchain(screen, cdt, cdt->caps.currentExtent.width, cdt->caps.currentExtent.height);
+   if (ret == VK_SUCCESS)
+      return;
+   cdt->present_mode = old_present_mode;
+   mesa_loge("zink: failed to set swap interval!");
 }
 
 int
diff --git a/src/gallium/drivers/zink/zink_kopper.h b/src/gallium/drivers/zink/zink_kopper.h
index f930f282e2e..2ebf9f3b212 100644
--- a/src/gallium/drivers/zink/zink_kopper.h
+++ b/src/gallium/drivers/zink/zink_kopper.h
@@ -95,6 +95,8 @@ struct kopper_displaytarget
    bool is_kill;
    VkPresentModeKHR present_mode;
    unsigned readback_counter;
+
+   bool age_locked; //disables buffer age during readback
 };
 
 struct zink_context;
@@ -119,6 +121,9 @@ zink_kopper_acquired(const struct kopper_displaytarget *cdt, uint32_t idx)
    return idx != UINT32_MAX && cdt->swapchain->images[idx].acquired;
 }
 
+void
+zink_kopper_update_last_written(struct zink_resource *res);
+
 struct kopper_displaytarget *
 zink_kopper_displaytarget_create(struct zink_screen *screen, unsigned tex_usage,
                                  enum pipe_format format, unsigned width,
diff --git a/src/gallium/drivers/zink/zink_pipeline.c b/src/gallium/drivers/zink/zink_pipeline.c
index dc7de3443d3..80d2f5479ce 100644
--- a/src/gallium/drivers/zink/zink_pipeline.c
+++ b/src/gallium/drivers/zink/zink_pipeline.c
@@ -273,7 +273,7 @@ zink_create_gfx_pipeline(struct zink_screen *screen,
    if (screen->info.have_EXT_color_write_enable)
       dynamicStateEnables[state_count++] = VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT;
 
-   assert(state->rast_prim != MESA_PRIM_COUNT);
+   assert(state->rast_prim != MESA_PRIM_COUNT || zink_debug & ZINK_DEBUG_SHADERDB);
 
    VkPipelineRasterizationLineStateCreateInfoEXT rast_line_state;
    if (screen->info.have_EXT_line_rasterization &&
@@ -332,6 +332,8 @@ zink_create_gfx_pipeline(struct zink_screen *screen,
 
    VkGraphicsPipelineCreateInfo pci = {0};
    pci.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
+   if (zink_debug & ZINK_DEBUG_SHADERDB)
+      pci.flags |= VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR;
    if (!optimize)
       pci.flags |= VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT;
    if (screen->info.have_EXT_attachment_feedback_loop_dynamic_state) {
diff --git a/src/gallium/drivers/zink/zink_program.c b/src/gallium/drivers/zink/zink_program.c
index 0832772c038..cb6cdbfb753 100644
--- a/src/gallium/drivers/zink/zink_program.c
+++ b/src/gallium/drivers/zink/zink_program.c
@@ -669,14 +669,15 @@ update_gfx_shader_module_optimal(struct zink_context *ctx, struct zink_gfx_progr
 static void
 update_gfx_program_optimal(struct zink_context *ctx, struct zink_gfx_program *prog)
 {
-   const union zink_shader_key_optimal *optimal_key = (union zink_shader_key_optimal*)&prog->last_variant_hash;
-   if (ctx->gfx_pipeline_state.shader_keys_optimal.key.vs_bits != optimal_key->vs_bits) {
+   const union zink_shader_key_optimal *key = (union zink_shader_key_optimal*)&ctx->gfx_pipeline_state.optimal_key;
+   const union zink_shader_key_optimal *last_prog_key = (union zink_shader_key_optimal*)&prog->last_variant_hash;
+   if (key->vs_bits != last_prog_key->vs_bits) {
       assert(!prog->is_separable);
       bool changed = update_gfx_shader_module_optimal(ctx, prog, ctx->last_vertex_stage->info.stage);
       ctx->gfx_pipeline_state.modules_changed |= changed;
    }
-   const bool shadow_needs_shader_swizzle = optimal_key->fs.shadow_needs_shader_swizzle && (ctx->dirty_gfx_stages & BITFIELD_BIT(MESA_SHADER_FRAGMENT));
-   if (ctx->gfx_pipeline_state.shader_keys_optimal.key.fs_bits != optimal_key->fs_bits ||
+   const bool shadow_needs_shader_swizzle = last_prog_key->fs.shadow_needs_shader_swizzle && (ctx->dirty_gfx_stages & BITFIELD_BIT(MESA_SHADER_FRAGMENT));
+   if (key->fs_bits != last_prog_key->fs_bits ||
        /* always recheck shadow swizzles since they aren't directly part of the key */
        unlikely(shadow_needs_shader_swizzle)) {
       assert(!prog->is_separable);
@@ -688,7 +689,7 @@ update_gfx_program_optimal(struct zink_context *ctx, struct zink_gfx_program *pr
       }
    }
    if (prog->shaders[MESA_SHADER_TESS_CTRL] && prog->shaders[MESA_SHADER_TESS_CTRL]->non_fs.is_generated &&
-       ctx->gfx_pipeline_state.shader_keys_optimal.key.tcs_bits != optimal_key->tcs_bits) {
+       key->tcs_bits != last_prog_key->tcs_bits) {
       assert(!prog->is_separable);
       bool changed = update_gfx_shader_module_optimal(ctx, prog, MESA_SHADER_TESS_CTRL);
       ctx->gfx_pipeline_state.modules_changed |= changed;
@@ -724,12 +725,16 @@ zink_gfx_program_update_optimal(struct zink_context *ctx)
          ctx->gfx_pipeline_state.final_hash ^= ctx->curr_program->last_variant_hash;
       if (entry) {
          prog = (struct zink_gfx_program*)entry->data;
-         if (prog->is_separable && !(zink_debug & ZINK_DEBUG_NOOPT)) {
+         if (prog->is_separable) {
             /* shader variants can't be handled by separable programs: sync and compile */
-            if (!ZINK_SHADER_KEY_OPTIMAL_IS_DEFAULT(ctx->gfx_pipeline_state.optimal_key))
+            if (!ZINK_SHADER_KEY_OPTIMAL_IS_DEFAULT(ctx->gfx_pipeline_state.optimal_key) ||
+                (prog->base.uses_shobj ? !zink_can_use_shader_objects(ctx) : !zink_can_use_pipeline_libs(ctx)))
                util_queue_fence_wait(&prog->base.cache_fence);
             /* If the optimized linked pipeline is done compiling, swap it into place. */
-            if (util_queue_fence_is_signalled(&prog->base.cache_fence)) {
+            if (util_queue_fence_is_signalled(&prog->base.cache_fence) &&
+                /* but only if needed for ZINK_DEBUG=noopt */
+                (!(zink_debug & ZINK_DEBUG_NOOPT) || !ZINK_SHADER_KEY_OPTIMAL_IS_DEFAULT(ctx->gfx_pipeline_state.optimal_key) ||
+                 (prog->base.uses_shobj ? !zink_can_use_shader_objects(ctx) : !zink_can_use_pipeline_libs(ctx)))) {
                prog = replace_separable_prog(screen, entry, prog);
             }
          }
@@ -754,19 +759,19 @@ zink_gfx_program_update_optimal(struct zink_context *ctx)
       /* remove old hash */
       ctx->gfx_pipeline_state.optimal_key = zink_sanitize_optimal_key(ctx->gfx_stages, ctx->gfx_pipeline_state.shader_keys_optimal.key.val);
       ctx->gfx_pipeline_state.final_hash ^= ctx->curr_program->last_variant_hash;
-      if (ctx->curr_program->is_separable && !(zink_debug & ZINK_DEBUG_NOOPT)) {
+      if (ctx->curr_program->is_separable && !ZINK_SHADER_KEY_OPTIMAL_IS_DEFAULT(ctx->gfx_pipeline_state.optimal_key) &&
+          (ctx->curr_program->base.uses_shobj ? !zink_can_use_shader_objects(ctx) : !zink_can_use_pipeline_libs(ctx))) {
          struct zink_gfx_program *prog = ctx->curr_program;
-         if (!ZINK_SHADER_KEY_OPTIMAL_IS_DEFAULT(ctx->gfx_pipeline_state.optimal_key)) {
-            util_queue_fence_wait(&prog->base.cache_fence);
-            /* shader variants can't be handled by separable programs: sync and compile */
-            perf_debug(ctx, "zink[gfx_compile]: non-default shader variant required with separate shader object program\n");
-            struct hash_table *ht = &ctx->program_cache[zink_program_cache_stages(ctx->shader_stages)];
-            const uint32_t hash = ctx->gfx_hash;
-            simple_mtx_lock(&ctx->program_lock[zink_program_cache_stages(ctx->shader_stages)]);
-            struct hash_entry *entry = _mesa_hash_table_search_pre_hashed(ht, hash, ctx->gfx_stages);
-            ctx->curr_program = replace_separable_prog(screen, entry, prog);
-            simple_mtx_unlock(&ctx->program_lock[zink_program_cache_stages(ctx->shader_stages)]);
-         }
+
+         util_queue_fence_wait(&prog->base.cache_fence);
+         /* shader variants can't be handled by separable programs: sync and compile */
+         perf_debug(ctx, "zink[gfx_compile]: non-default shader variant required with separate shader object program\n");
+         struct hash_table *ht = &ctx->program_cache[zink_program_cache_stages(ctx->shader_stages)];
+         const uint32_t hash = ctx->gfx_hash;
+         simple_mtx_lock(&ctx->program_lock[zink_program_cache_stages(ctx->shader_stages)]);
+         struct hash_entry *entry = _mesa_hash_table_search_pre_hashed(ht, hash, ctx->gfx_stages);
+         ctx->curr_program = replace_separable_prog(screen, entry, prog);
+         simple_mtx_unlock(&ctx->program_lock[zink_program_cache_stages(ctx->shader_stages)]);
       }
       update_gfx_program_optimal(ctx, ctx->curr_program);
       /* apply new hash */
@@ -825,6 +830,23 @@ zink_gfx_program_compile_queue(struct zink_context *ctx, struct zink_gfx_pipelin
    }
 }
 
+void
+zink_program_finish(struct zink_context *ctx, struct zink_program *pg)
+{
+   util_queue_fence_wait(&pg->cache_fence);
+   if (pg->is_compute)
+      return;
+   struct zink_gfx_program *prog = (struct zink_gfx_program*)pg;
+   for (int r = 0; r < ARRAY_SIZE(prog->pipelines); ++r) {
+      for (int i = 0; i < ARRAY_SIZE(prog->pipelines[0]); ++i) {
+         hash_table_foreach(&prog->pipelines[r][i], entry) {
+            struct zink_gfx_pipeline_cache_entry *pc_entry = entry->data;
+            util_queue_fence_wait(&pc_entry->fence);
+         }
+      }
+   }
+}
+
 static void
 update_cs_shader_module(struct zink_context *ctx, struct zink_compute_program *comp)
 {
@@ -1006,6 +1028,8 @@ create_lib_cache(struct zink_gfx_program *prog, bool generated_tcs)
 {
    struct zink_gfx_lib_cache *libs = CALLOC_STRUCT(zink_gfx_lib_cache);
    libs->stages_present = prog->stages_present;
+   if (generated_tcs)
+      libs->stages_present &= ~BITFIELD_BIT(MESA_SHADER_TESS_CTRL);
    simple_mtx_init(&libs->lock, mtx_plain);
    if (generated_tcs)
       _mesa_set_init(&libs->libs, NULL, hash_pipeline_lib_generated_tcs, equals_pipeline_lib_generated_tcs);
@@ -2196,6 +2220,7 @@ zink_link_gfx_shader(struct pipe_context *pctx, void **shaders)
                                                      ctx->gfx_pipeline_state.element_state->binding_map,
                                                      shaders[MESA_SHADER_TESS_EVAL] ? VK_PRIMITIVE_TOPOLOGY_PATCH_LIST : VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, true, NULL);
       print_pipeline_stats(screen, pipeline);
+      VKSCR(DestroyPipeline)(screen->dev, pipeline, NULL);
    } else {
       if (zink_screen(pctx->screen)->info.have_EXT_shader_object)
          prog->base.uses_shobj = !BITSET_TEST(zshaders[MESA_SHADER_FRAGMENT]->info.system_values_read, SYSTEM_VALUE_SAMPLE_MASK_IN);
diff --git a/src/gallium/drivers/zink/zink_program.h b/src/gallium/drivers/zink/zink_program.h
index 432dcb0a9e4..6f372923135 100644
--- a/src/gallium/drivers/zink/zink_program.h
+++ b/src/gallium/drivers/zink/zink_program.h
@@ -133,6 +133,8 @@ uint32_t hash_gfx_input_dynamic(const void *key);
 
 void
 zink_gfx_program_compile_queue(struct zink_context *ctx, struct zink_gfx_pipeline_cache_entry *pc_entry);
+void
+zink_program_finish(struct zink_context *ctx, struct zink_program *pg);
 
 static inline unsigned
 get_primtype_idx(enum mesa_prim mode)
@@ -418,6 +420,21 @@ zink_can_use_pipeline_libs(const struct zink_context *ctx)
           !ctx->is_generated_gs_bound;
 }
 
+/* stricter requirements */
+ALWAYS_INLINE static bool
+zink_can_use_shader_objects(const struct zink_context *ctx)
+{
+   return
+          /* TODO: if there's ever a dynamic render extension with input attachments */
+          !ctx->gfx_pipeline_state.render_pass &&
+          ZINK_SHADER_KEY_OPTIMAL_IS_DEFAULT(ctx->gfx_pipeline_state.optimal_key) &&
+          /* TODO: is sample shading even possible to handle with GPL? */
+          !ctx->gfx_stages[MESA_SHADER_FRAGMENT]->info.fs.uses_sample_shading &&
+          !ctx->gfx_pipeline_state.force_persample_interp &&
+          !ctx->gfx_pipeline_state.min_samples &&
+          !ctx->is_generated_gs_bound;
+}
+
 bool
 zink_set_rasterizer_discard(struct zink_context *ctx, bool disable);
 void
diff --git a/src/gallium/drivers/zink/zink_program_state.hpp b/src/gallium/drivers/zink/zink_program_state.hpp
index 10e2fb94897..2cabc678660 100644
--- a/src/gallium/drivers/zink/zink_program_state.hpp
+++ b/src/gallium/drivers/zink/zink_program_state.hpp
@@ -168,7 +168,7 @@ zink_get_gfx_pipeline(struct zink_context *ctx,
           !prog->inline_variants && likely(prog->last_pipeline[rp_idx][idx]) &&
           /* this data is too big to compare in the fast-path */
           likely(!prog->shaders[MESA_SHADER_FRAGMENT]->fs.legacy_shadow_mask)) {
-         state->pipeline = prog->last_pipeline[rp_idx][idx];
+         state->pipeline = prog->last_pipeline[rp_idx][idx]->pipeline;
          return state->pipeline;
       }
    }
@@ -245,7 +245,7 @@ zink_get_gfx_pipeline(struct zink_context *ctx,
    /* update states for fastpath */
    if (DYNAMIC_STATE >= ZINK_DYNAMIC_VERTEX_INPUT) {
       prog->last_finalized_hash[rp_idx][idx] = state->final_hash;
-      prog->last_pipeline[rp_idx][idx] = cache_entry->pipeline;
+      prog->last_pipeline[rp_idx][idx] = cache_entry;
    }
    return state->pipeline;
 }
diff --git a/src/gallium/drivers/zink/zink_query.c b/src/gallium/drivers/zink/zink_query.c
index c10fb4fd8f4..e00bcafa047 100644
--- a/src/gallium/drivers/zink/zink_query.c
+++ b/src/gallium/drivers/zink/zink_query.c
@@ -971,7 +971,7 @@ zink_begin_query(struct pipe_context *pctx,
    util_dynarray_clear(&query->starts);
    query->start_offset = 0;
 
-   if (batch->in_rp) {
+   if (batch->in_rp || (query->type == PIPE_QUERY_TIME_ELAPSED)) {
       begin_query(ctx, batch, query);
    } else {
       /* never directly start queries out of renderpass, always defer */
diff --git a/src/gallium/drivers/zink/zink_resource.c b/src/gallium/drivers/zink/zink_resource.c
index ae78836d15a..84a657d5331 100644
--- a/src/gallium/drivers/zink/zink_resource.c
+++ b/src/gallium/drivers/zink/zink_resource.c
@@ -282,10 +282,8 @@ create_bci(struct zink_screen *screen, const struct pipe_resource *templ, unsign
    if (bind & ZINK_BIND_DESCRIPTOR) {
       /* gallium sizes are all uint32_t, while the total size of this buffer may exceed that limit */
       bci.usage = 0;
-      if (bind & ZINK_BIND_SAMPLER_DESCRIPTOR)
-         bci.usage |= VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT;
-      if (bind & ZINK_BIND_RESOURCE_DESCRIPTOR)
-         bci.usage |= VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT;
+      bci.usage |= VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT |
+                   VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT;
    } else {
       bci.usage = VK_BUFFER_USAGE_TRANSFER_SRC_BIT |
                   VK_BUFFER_USAGE_TRANSFER_DST_BIT |
@@ -671,7 +669,7 @@ retry:
    }
    if (want_cube) {
       ici->flags |= VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT;
-      if (get_image_usage(screen, ici, templ, bind, modifiers_count, modifiers, &mod) != ici->usage)
+      if ((get_image_usage(screen, ici, templ, bind, modifiers_count, modifiers, &mod) & ici->usage) != ici->usage)
          ici->flags &= ~VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT;
    }
 
@@ -729,7 +727,8 @@ init_ici(struct zink_screen *screen, VkImageCreateInfo *ici, const struct pipe_r
 
    case PIPE_TEXTURE_3D:
       ici->imageType = VK_IMAGE_TYPE_3D;
-      ici->flags |= VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
+      if (!(templ->flags & PIPE_RESOURCE_FLAG_SPARSE))
+         ici->flags |= VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
       if (screen->info.have_EXT_image_2d_view_of_3d)
          ici->flags |= VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT;
       break;
@@ -1180,6 +1179,10 @@ resource_object_create(struct zink_screen *screen, const struct pipe_resource *t
    mai.pNext = NULL;
    mai.allocationSize = reqs.size;
    enum zink_heap heap = zink_heap_from_domain_flags(flags, aflags);
+   if (templ->flags & PIPE_RESOURCE_FLAG_MAP_COHERENT) {
+      if (!(vk_domain_from_heap(heap) & VK_MEMORY_PROPERTY_HOST_COHERENT_BIT))
+         heap = zink_heap_from_domain_flags(flags & ~VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT, aflags);
+   }
 
    VkMemoryDedicatedAllocateInfo ded_alloc_info = {
       .sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
@@ -1267,7 +1270,7 @@ resource_object_create(struct zink_screen *screen, const struct pipe_resource *t
       alignment = MAX2(alignment, screen->info.props.limits.minMemoryMapAlignment);
    obj->alignment = alignment;
 
-   if (zink_mem_type_idx_from_bits(screen, heap, reqs.memoryTypeBits) == UINT32_MAX) {
+   if (zink_mem_type_idx_from_types(screen, heap, reqs.memoryTypeBits) == UINT32_MAX) {
       /* not valid based on reqs; demote to more compatible type */
       switch (heap) {
       case ZINK_HEAP_DEVICE_LOCAL_VISIBLE:
@@ -1279,7 +1282,7 @@ resource_object_create(struct zink_screen *screen, const struct pipe_resource *t
       default:
          break;
       }
-      assert(zink_mem_type_idx_from_bits(screen, heap, reqs.memoryTypeBits) != UINT32_MAX);
+      assert(zink_mem_type_idx_from_types(screen, heap, reqs.memoryTypeBits) != UINT32_MAX);
    }
 
 retry:
@@ -1611,6 +1614,11 @@ add_resource_bind(struct zink_context *ctx, struct zink_resource *res, unsigned
       box.depth = util_num_layers(&res->base.b, i);
       ctx->base.resource_copy_region(&ctx->base, &res->base.b, i, 0, 0, 0, &staging.base.b, i, &box);
    }
+   if (old_obj->exportable) {
+      simple_mtx_lock(&ctx->batch.state->exportable_lock);
+      _mesa_set_remove_key(&ctx->batch.state->dmabuf_exports, &staging);
+      simple_mtx_unlock(&ctx->batch.state->exportable_lock);
+   }
    zink_resource_object_reference(screen, &old_obj, NULL);
    return true;
 }
@@ -2201,31 +2209,31 @@ zink_buffer_map(struct pipe_context *pctx,
       if (!zink_resource_usage_check_completion(screen, res, ZINK_RESOURCE_ACCESS_WRITE))
          goto success;
       usage |= PIPE_MAP_UNSYNCHRONIZED;
-   } else if (!(usage & PIPE_MAP_UNSYNCHRONIZED) &&
-              (((usage & PIPE_MAP_READ) && !(usage & PIPE_MAP_PERSISTENT) &&
+   } else if (((usage & PIPE_MAP_READ) && !(usage & PIPE_MAP_PERSISTENT) &&
                ((screen->info.mem_props.memoryTypes[res->obj->bo->base.base.placement].propertyFlags & VK_STAGING_RAM) != VK_STAGING_RAM)) ||
-              !res->obj->host_visible)) {
-      /* the above conditional catches uncached reads and non-HV writes */
-      assert(!(usage & (TC_TRANSFER_MAP_THREADED_UNSYNC)));
+              !res->obj->host_visible) {
       /* any read, non-HV write, or unmappable that reaches this point needs staging */
       if ((usage & PIPE_MAP_READ) || !res->obj->host_visible || res->base.b.flags & PIPE_RESOURCE_FLAG_DONT_MAP_DIRECTLY) {
 overwrite:
-         trans->offset = box->x % screen->info.props.limits.minMemoryMapAlignment;
+         trans->offset = box->x % MAX2(screen->info.props.limits.minMemoryMapAlignment, 1 << MIN_SLAB_ORDER);
          trans->staging_res = pipe_buffer_create(&screen->base, PIPE_BIND_LINEAR, PIPE_USAGE_STAGING, box->width + trans->offset);
          if (!trans->staging_res)
             goto fail;
          struct zink_resource *staging_res = zink_resource(trans->staging_res);
-         if (usage & PIPE_MAP_THREAD_SAFE) {
+         if (usage & (PIPE_MAP_THREAD_SAFE | PIPE_MAP_UNSYNCHRONIZED | TC_TRANSFER_MAP_THREADED_UNSYNC)) {
+            assert(ctx != screen->copy_context);
             /* this map can't access the passed context: use the copy context */
             zink_screen_lock_context(screen);
             ctx = screen->copy_context;
          }
-         zink_copy_buffer(ctx, staging_res, res, trans->offset, box->x, box->width);
+         if (usage & PIPE_MAP_READ)
+            zink_copy_buffer(ctx, staging_res, res, trans->offset, box->x, box->width);
          res = staging_res;
          usage &= ~PIPE_MAP_UNSYNCHRONIZED;
          map_offset = trans->offset;
       }
    } else if ((usage & PIPE_MAP_UNSYNCHRONIZED) && !res->obj->host_visible) {
+      assert(!(usage & PIPE_MAP_READ));
       trans->offset = box->x % screen->info.props.limits.minMemoryMapAlignment;
       trans->staging_res = pipe_buffer_create(&screen->base, PIPE_BIND_LINEAR, PIPE_USAGE_STAGING, box->width + trans->offset);
       if (!trans->staging_res)
diff --git a/src/gallium/drivers/zink/zink_resource.h b/src/gallium/drivers/zink/zink_resource.h
index f09a4e89f52..c7185d32125 100644
--- a/src/gallium/drivers/zink/zink_resource.h
+++ b/src/gallium/drivers/zink/zink_resource.h
@@ -27,9 +27,7 @@
 #include "zink_types.h"
 
 #define ZINK_MAP_TEMPORARY (PIPE_MAP_DRV_PRV << 0)
-#define ZINK_BIND_SAMPLER_DESCRIPTOR (1u << 26)
-#define ZINK_BIND_RESOURCE_DESCRIPTOR (1u << 27)
-#define ZINK_BIND_DESCRIPTOR (ZINK_BIND_SAMPLER_DESCRIPTOR | ZINK_BIND_RESOURCE_DESCRIPTOR)
+#define ZINK_BIND_DESCRIPTOR (1u << 27)
 #define ZINK_BIND_MUTABLE (1u << 28)
 #define ZINK_BIND_DMABUF (1u << 29)
 #define ZINK_BIND_TRANSIENT (1u << 30) //transient fb attachment
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index 1f06a606b66..0362d53de5e 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -837,6 +837,9 @@ zink_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
       return 1;
 
    case PIPE_CAP_BINDLESS_TEXTURE:
+      if (zink_descriptor_mode == ZINK_DESCRIPTOR_MODE_DB &&
+          (screen->info.db_props.maxDescriptorBufferBindings < 2 || screen->info.db_props.maxSamplerDescriptorBufferBindings < 2))
+         return 0;
       return screen->info.have_EXT_descriptor_indexing;
 
    case PIPE_CAP_TEXTURE_BUFFER_OFFSET_ALIGNMENT:
@@ -1004,7 +1007,7 @@ zink_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
       return 0;
 
    case PIPE_CAP_MAX_SHADER_PATCH_VARYINGS:
-      return screen->info.props.limits.maxTessellationControlPerVertexOutputComponents / 4;
+      return screen->info.props.limits.maxTessellationControlPerPatchOutputComponents / 4;
    case PIPE_CAP_MAX_VARYINGS:
       /* need to reserve up to 60 of our varying components and 16 slots for streamout */
       return MIN2(screen->info.props.limits.maxVertexOutputComponents / 4 / 2, 16);
@@ -1463,12 +1466,6 @@ static void
 zink_destroy_screen(struct pipe_screen *pscreen)
 {
    struct zink_screen *screen = zink_screen(pscreen);
-   struct zink_batch_state *bs = screen->free_batch_states;
-   while (bs) {
-      struct zink_batch_state *bs_next = bs->next;
-      zink_batch_state_destroy(screen, bs);
-      bs = bs_next;
-   }
 
 #ifdef HAVE_RENDERDOC_APP_H
    if (screen->renderdoc_capture_all && p_atomic_dec_zero(&num_screens))
@@ -1481,6 +1478,13 @@ zink_destroy_screen(struct pipe_screen *pscreen)
    if (screen->copy_context)
       screen->copy_context->base.destroy(&screen->copy_context->base);
 
+   struct zink_batch_state *bs = screen->free_batch_states;
+   while (bs) {
+      struct zink_batch_state *bs_next = bs->next;
+      zink_batch_state_destroy(screen, bs);
+      bs = bs_next;
+   }
+
    if (VK_NULL_HANDLE != screen->debugUtilsCallbackHandle) {
       VKSCR(DestroyDebugUtilsMessengerEXT)(screen->instance, screen->debugUtilsCallbackHandle, NULL);
    }
@@ -2274,7 +2278,7 @@ zink_screen_export_dmabuf_semaphore(struct zink_screen *screen, struct zink_reso
       .fd = -1,
    };
 
-   int fd;
+   int fd = -1;
    if (res->obj->is_aux) {
       fd = os_dupfd_cloexec(res->obj->handle);
    } else {
@@ -2285,6 +2289,11 @@ zink_screen_export_dmabuf_semaphore(struct zink_screen *screen, struct zink_reso
       VKSCR(GetMemoryFdKHR)(screen->dev, &fd_info, &fd);
    }
 
+   if (unlikely(fd < 0)) {
+      mesa_loge("MESA: Unable to get a valid memory fd");
+      return VK_NULL_HANDLE;
+   }
+
    int ret = drmIoctl(fd, DMA_BUF_IOCTL_EXPORT_SYNC_FILE, &export);
    if (ret) {
       if (errno == ENOTTY || errno == EBADF || errno == ENOSYS) {
@@ -2543,9 +2552,11 @@ zink_get_sparse_texture_virtual_page_size(struct pipe_screen *pscreen,
    default:
       return 0;
    }
-   VkImageUsageFlags flags = VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT |
-                             VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
-   flags |= is_zs ? VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT : VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
+
+   VkImageUsageFlags use_flags = VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT |
+                                 VK_IMAGE_USAGE_STORAGE_BIT;
+   use_flags |= is_zs ? VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT : VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
+   VkImageUsageFlags flags = screen->format_props[pformat].optimalTilingFeatures & use_flags;
    VkSparseImageFormatProperties props[4]; //planar?
    unsigned prop_count = ARRAY_SIZE(props);
    VKSCR(GetPhysicalDeviceSparseImageFormatProperties)(screen->pdev, format, type,
@@ -2554,11 +2565,21 @@ zink_get_sparse_texture_virtual_page_size(struct pipe_screen *pscreen,
                                                        VK_IMAGE_TILING_OPTIMAL,
                                                        &prop_count, props);
    if (!prop_count) {
-      if (pformat == PIPE_FORMAT_R9G9B9E5_FLOAT) {
-         screen->faked_e5sparse = true;
-         goto hack_it_up;
+      /* format may not support storage; try without */
+      flags &= ~VK_IMAGE_USAGE_STORAGE_BIT;
+      prop_count = ARRAY_SIZE(props);
+      VKSCR(GetPhysicalDeviceSparseImageFormatProperties)(screen->pdev, format, type,
+                                                         multi_sample ? VK_SAMPLE_COUNT_2_BIT : VK_SAMPLE_COUNT_1_BIT,
+                                                         flags,
+                                                         VK_IMAGE_TILING_OPTIMAL,
+                                                         &prop_count, props);
+      if (!prop_count) {
+         if (pformat == PIPE_FORMAT_R9G9B9E5_FLOAT) {
+            screen->faked_e5sparse = true;
+            goto hack_it_up;
+         }
+         return 0;
       }
-      return 0;
    }
 
    if (size) {
@@ -3196,12 +3217,12 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
       }
    }
 
-   vk_instance_dispatch_table_load(&screen->vk.instance,
-                                   screen->vk_GetInstanceProcAddr,
-                                   screen->instance);
-   vk_physical_device_dispatch_table_load(&screen->vk.physical_device,
-                                          screen->vk_GetInstanceProcAddr,
-                                          screen->instance);
+   vk_instance_uncompacted_dispatch_table_load(&screen->vk.instance,
+                                                screen->vk_GetInstanceProcAddr,
+                                                screen->instance);
+   vk_physical_device_uncompacted_dispatch_table_load(&screen->vk.physical_device,
+                                                      screen->vk_GetInstanceProcAddr,
+                                                      screen->instance);
 
    zink_verify_instance_extensions(screen);
 
@@ -3298,9 +3319,9 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
    if (!screen->dev)
       goto fail;
 
-   vk_device_dispatch_table_load(&screen->vk.device,
-                                 screen->vk_GetDeviceProcAddr,
-                                 screen->dev);
+   vk_device_uncompacted_dispatch_table_load(&screen->vk.device,
+                                             screen->vk_GetDeviceProcAddr,
+                                             screen->dev);
 
    init_queue(screen);
 
@@ -3465,20 +3486,11 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
          mesa_logw("zink: bug detected: inputAttachmentDescriptorSize(%u) > %u", (unsigned)screen->info.db_props.inputAttachmentDescriptorSize, ZINK_FBFETCH_DESCRIPTOR_SIZE);
          can_db = false;
       }
-      if (screen->compact_descriptors) {
-         if (screen->info.db_props.maxDescriptorBufferBindings < 3) {
-            if (zink_descriptor_mode == ZINK_DESCRIPTOR_MODE_DB) {
-               mesa_loge("Cannot use db descriptor mode with compact descriptors with maxDescriptorBufferBindings < 3");
-               goto fail;
-            }
-            can_db = false;
-         }
-      } else {
-         if (screen->info.db_props.maxDescriptorBufferBindings < 5) {
-            if (zink_descriptor_mode == ZINK_DESCRIPTOR_MODE_DB) {
-               mesa_loge("Cannot use db descriptor mode with maxDescriptorBufferBindings < 5");
-               goto fail;
-            }
+      if (screen->info.db_props.maxDescriptorBufferBindings < 2 || screen->info.db_props.maxSamplerDescriptorBufferBindings < 2) {
+         if (zink_descriptor_mode == ZINK_DESCRIPTOR_MODE_DB) {
+            /* allow for testing, but disable bindless */
+            mesa_logw("Cannot use bindless and db descriptor mode with (maxDescriptorBufferBindings||maxSamplerDescriptorBufferBindings) < 2");
+         } else {
             can_db = false;
          }
       }
diff --git a/src/gallium/drivers/zink/zink_screen.h b/src/gallium/drivers/zink/zink_screen.h
index 886700b65ad..c907bc6e85d 100644
--- a/src/gallium/drivers/zink/zink_screen.h
+++ b/src/gallium/drivers/zink/zink_screen.h
@@ -61,6 +61,7 @@ static inline bool
 zink_screen_check_last_finished(struct zink_screen *screen, uint32_t batch_id)
 {
    const uint32_t check_id = (uint32_t)batch_id;
+   assert(check_id);
    /* last_finished may have wrapped */
    if (screen->last_finished < UINT_MAX / 2) {
       /* last_finished has wrapped, batch_id has not */
diff --git a/src/gallium/drivers/zink/zink_synchronization.cpp b/src/gallium/drivers/zink/zink_synchronization.cpp
index 05a904f3231..22fc3fc66e5 100644
--- a/src/gallium/drivers/zink/zink_synchronization.cpp
+++ b/src/gallium/drivers/zink/zink_synchronization.cpp
@@ -673,6 +673,7 @@ zink_resource_buffer_barrier(struct zink_context *ctx, struct zink_resource *res
          } else {
             bmb.srcAccessMask = res->obj->access;
          }
+         bmb.dstAccessMask = flags;
          VKCTX(CmdPipelineBarrier)(
             cmdbuf,
             stages,
diff --git a/src/gallium/drivers/zink/zink_types.h b/src/gallium/drivers/zink/zink_types.h
index 41eaa21215c..ba4aea002e8 100644
--- a/src/gallium/drivers/zink/zink_types.h
+++ b/src/gallium/drivers/zink/zink_types.h
@@ -1137,7 +1137,7 @@ struct zink_gfx_program {
    uint32_t last_variant_hash;
 
    uint32_t last_finalized_hash[2][4]; //[dynamic, renderpass][primtype idx]
-   VkPipeline last_pipeline[2][4]; //[dynamic, renderpass][primtype idx]
+   struct zink_gfx_pipeline_cache_entry *last_pipeline[2][4]; //[dynamic, renderpass][primtype idx]
 
    struct zink_gfx_lib_cache *libs;
 };
@@ -1519,7 +1519,7 @@ struct zink_screen {
    bool renderdoc_capture_all;
 #endif
 
-   struct vk_dispatch_table vk;
+   struct vk_uncompacted_dispatch_table vk;
 
    void (*buffer_barrier)(struct zink_context *ctx, struct zink_resource *res, VkAccessFlags flags, VkPipelineStageFlags pipeline);
    void (*image_barrier)(struct zink_context *ctx, struct zink_resource *res, VkImageLayout new_layout, VkAccessFlags flags, VkPipelineStageFlags pipeline);
diff --git a/src/gallium/frontends/clover/llvm/invocation.cpp b/src/gallium/frontends/clover/llvm/invocation.cpp
index 6ab32befbcd..e899b205d22 100644
--- a/src/gallium/frontends/clover/llvm/invocation.cpp
+++ b/src/gallium/frontends/clover/llvm/invocation.cpp
@@ -513,6 +513,7 @@ namespace {
       LLVMRunPasses(wrap(&mod), opt_str, tm, opts);
 
       LLVMDisposeTargetMachine(tm);
+      LLVMDisposePassBuilderOptions(opts);
    }
 
    std::unique_ptr<Module>
diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index 751a15d43a5..994e7e6c035 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -2385,7 +2385,7 @@ dri2_init_screen(struct dri_screen *screen)
       pscreen = pipe_loader_create_screen(screen->dev);
 
    if (!pscreen)
-       goto fail;
+       return NULL;
 
    dri_init_options(screen);
    screen->throttle = pscreen->get_param(pscreen, PIPE_CAP_THROTTLE);
@@ -2419,7 +2419,7 @@ dri2_init_screen(struct dri_screen *screen)
    return configs;
 
 fail:
-   dri_release_screen(screen);
+   pipe_loader_release(&screen->dev, 1);
 
    return NULL;
 }
diff --git a/src/gallium/frontends/dri/dri_drawable.h b/src/gallium/frontends/dri/dri_drawable.h
index 55a7ec82684..f4b951fc104 100644
--- a/src/gallium/frontends/dri/dri_drawable.h
+++ b/src/gallium/frontends/dri/dri_drawable.h
@@ -90,6 +90,7 @@ struct dri_drawable
    struct kopper_loader_info info;
    __DRIimage   *image; //texture_from_pixmap
    bool is_window;
+   bool window_valid;
    bool has_modifiers;
 
    /* hooks filled in by dri2 & drisw */
diff --git a/src/gallium/frontends/dri/drisw.c b/src/gallium/frontends/dri/drisw.c
index 7c6a75a228b..4c9b66cedfb 100644
--- a/src/gallium/frontends/dri/drisw.c
+++ b/src/gallium/frontends/dri/drisw.c
@@ -546,6 +546,8 @@ drisw_init_screen(struct dri_screen *screen)
    struct pipe_screen *pscreen = NULL;
    const struct drisw_loader_funcs *lf = &drisw_lf;
 
+   (void) mtx_init(&screen->opencl_func_mutex, mtx_plain);
+
    screen->swrast_no_present = debug_get_option_swrast_no_present();
 
    if (loader->base.version >= 4) {
@@ -565,7 +567,7 @@ drisw_init_screen(struct dri_screen *screen)
       pscreen = pipe_loader_create_screen(screen->dev);
 
    if (!pscreen)
-      goto fail;
+      return NULL;
 
    dri_init_options(screen);
    configs = dri_init_screen(screen, pscreen);
@@ -593,7 +595,7 @@ drisw_init_screen(struct dri_screen *screen)
 
    return configs;
 fail:
-   dri_release_screen(screen);
+   pipe_loader_release(&screen->dev, 1);
    return NULL;
 }
 
diff --git a/src/gallium/frontends/dri/kopper.c b/src/gallium/frontends/dri/kopper.c
index 70b9980b6f5..d247f2223c7 100644
--- a/src/gallium/frontends/dri/kopper.c
+++ b/src/gallium/frontends/dri/kopper.c
@@ -115,6 +115,8 @@ kopper_init_screen(struct dri_screen *screen)
    const __DRIconfig **configs;
    struct pipe_screen *pscreen = NULL;
 
+   (void) mtx_init(&screen->opencl_func_mutex, mtx_plain);
+
    if (!screen->kopper_loader) {
       fprintf(stderr, "mesa: Kopper interface not found!\n"
                       "      Ensure the versions of %s built with this version of Zink are\n"
@@ -134,7 +136,7 @@ kopper_init_screen(struct dri_screen *screen)
       pscreen = pipe_loader_create_screen(screen->dev);
 
    if (!pscreen)
-      goto fail;
+      return NULL;
 
    dri_init_options(screen);
    screen->unwrapped_screen = trace_screen_unwrap(pscreen);
@@ -167,7 +169,7 @@ kopper_init_screen(struct dri_screen *screen)
 
    return configs;
 fail:
-   dri_release_screen(screen);
+   pipe_loader_release(&screen->dev, 1);
    return NULL;
 }
 
@@ -606,6 +608,7 @@ XXX do this once swapinterval is hooked up
             assert(data);
             drawable->textures[statts[i]] =
                screen->base.screen->resource_create_drawable(screen->base.screen, &templ, data);
+            drawable->window_valid = !!drawable->textures[statts[i]];
          }
 #ifdef VK_USE_PLATFORM_XCB_KHR
          else if (is_pixmap && statts[i] == ST_ATTACHMENT_FRONT_LEFT && !screen->is_sw) {
@@ -928,6 +931,9 @@ kopperSetSwapInterval(__DRIdrawable *dPriv, int interval)
                                 drawable->textures[ST_ATTACHMENT_BACK_LEFT] :
                                 drawable->textures[ST_ATTACHMENT_FRONT_LEFT];
 
+   /* can't set swap interval on non-windows */
+   if (!drawable->window_valid)
+      return;
    /* the conditional is because we can be called before buffer allocation.  If
     * we're before allocation, then the initial_swap_interval will be used when
     * the swapchain is eventually created.
@@ -946,6 +952,10 @@ kopperQueryBufferAge(__DRIdrawable *dPriv)
                                 drawable->textures[ST_ATTACHMENT_BACK_LEFT] :
                                 drawable->textures[ST_ATTACHMENT_FRONT_LEFT];
 
+   /* can't get buffer age from non-window swapchain */
+   if (!drawable->window_valid)
+      return 0;
+
    /* Wait for glthread to finish because we can't use pipe_context from
     * multiple threads.
     */
diff --git a/src/gallium/frontends/lavapipe/lvp_descriptor_set.c b/src/gallium/frontends/lavapipe/lvp_descriptor_set.c
index fa198f3e575..7e176a42324 100644
--- a/src/gallium/frontends/lavapipe/lvp_descriptor_set.c
+++ b/src/gallium/frontends/lavapipe/lvp_descriptor_set.c
@@ -1070,20 +1070,28 @@ VKAPI_ATTR void VKAPI_CALL lvp_GetDescriptorEXT(
       if (info && info->imageView) {
          LVP_FROM_HANDLE(lvp_image_view, iview, info->imageView);
 
-         lp_jit_texture_from_pipe(&desc->texture, iview->planes[0].sv);
-         desc->functions = iview->planes[0].texture_handle->functions;
-
-         if (info->sampler) {
-            LVP_FROM_HANDLE(lvp_sampler, sampler, info->sampler);
-            desc->sampler = sampler->desc.sampler;
-            desc->texture.sampler_index = sampler->desc.texture.sampler_index;
-         } else {
-            lp_jit_sampler_from_pipe(&desc->sampler, &sampler);
-            desc->texture.sampler_index = 0;
+         unsigned plane_count = iview->plane_count;
+
+         for (unsigned p = 0; p < plane_count; p++) {
+            lp_jit_texture_from_pipe(&desc[p].texture, iview->planes[p].sv);
+            desc[p].functions = iview->planes[p].texture_handle->functions;
+
+            if (info->sampler) {
+               LVP_FROM_HANDLE(lvp_sampler, sampler, info->sampler);
+               desc[p].sampler = sampler->desc.sampler;
+                 desc[p].texture.sampler_index = sampler->desc.texture.sampler_index;
+            } else {
+               lp_jit_sampler_from_pipe(&desc->sampler, &sampler);
+               desc[p].texture.sampler_index = 0;
+            }
          }
       } else {
-         desc->functions = device->null_texture_handle->functions;
-         desc->texture.sampler_index = 0;
+         unsigned plane_count = size / sizeof(struct lp_descriptor);
+
+         for (unsigned p = 0; p < plane_count; p++) {
+            desc[p].functions = device->null_texture_handle->functions;
+            desc[p].texture.sampler_index = 0;
+         }
       }
 
       break;
@@ -1092,11 +1100,20 @@ VKAPI_ATTR void VKAPI_CALL lvp_GetDescriptorEXT(
    case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: {
       if (pCreateInfo->data.pSampledImage && pCreateInfo->data.pSampledImage->imageView) {
          LVP_FROM_HANDLE(lvp_image_view, iview, pCreateInfo->data.pSampledImage->imageView);
-         lp_jit_texture_from_pipe(&desc->texture, iview->planes[0].sv);
-         desc->functions = iview->planes[0].texture_handle->functions;
+
+         unsigned plane_count = iview->plane_count;
+
+         for (unsigned p = 0; p < plane_count; p++) {
+            lp_jit_texture_from_pipe(&desc[p].texture, iview->planes[p].sv);
+            desc[p].functions = iview->planes[p].texture_handle->functions;
+         }
       } else {
-         desc->functions = device->null_texture_handle->functions;
-         desc->texture.sampler_index = 0;
+         unsigned plane_count = size / sizeof(struct lp_descriptor);
+
+         for (unsigned p = 0; p < plane_count; p++) {
+            desc[p].functions = device->null_texture_handle->functions;
+            desc[p].texture.sampler_index = 0;
+         }
       }
       break;
    }
@@ -1106,10 +1123,18 @@ VKAPI_ATTR void VKAPI_CALL lvp_GetDescriptorEXT(
    case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: {
       if (pCreateInfo->data.pStorageImage && pCreateInfo->data.pStorageImage->imageView) {
          LVP_FROM_HANDLE(lvp_image_view, iview, pCreateInfo->data.pStorageImage->imageView);
-         lp_jit_image_from_pipe(&desc->image, &iview->planes[0].iv);
-         desc->functions = iview->planes[0].image_handle->functions;
+
+         unsigned plane_count = iview->plane_count;
+
+         for (unsigned p = 0; p < plane_count; p++) {
+            lp_jit_image_from_pipe(&desc[p].image, &iview->planes[p].iv);
+            desc[p].functions = iview->planes[p].image_handle->functions;
+         }
       } else {
-         desc->functions = device->null_image_handle->functions;
+         unsigned plane_count = size / sizeof(struct lp_descriptor);
+
+         for (unsigned p = 0; p < plane_count; p++)
+            desc[p].functions = device->null_image_handle->functions;
       }
       break;
    }
diff --git a/src/gallium/frontends/lavapipe/lvp_execute.c b/src/gallium/frontends/lavapipe/lvp_execute.c
index a0c978f858f..85dd46d04b8 100644
--- a/src/gallium/frontends/lavapipe/lvp_execute.c
+++ b/src/gallium/frontends/lavapipe/lvp_execute.c
@@ -88,6 +88,7 @@ struct rendering_state {
    bool blend_dirty;
    bool rs_dirty;
    bool dsa_dirty;
+   bool dsa_no_stencil;
    bool stencil_ref_dirty;
    bool clip_state_dirty;
    bool blend_color_dirty;
@@ -470,8 +471,16 @@ static void emit_state(struct rendering_state *state)
    }
 
    if (state->dsa_dirty) {
+      bool s0_enabled = state->dsa_state.stencil[0].enabled;
+      bool s1_enabled = state->dsa_state.stencil[1].enabled;
+      if (state->dsa_no_stencil) {
+         state->dsa_state.stencil[0].enabled = false;
+         state->dsa_state.stencil[1].enabled = false;
+      }
       cso_set_depth_stencil_alpha(state->cso, &state->dsa_state);
       state->dsa_dirty = false;
+      state->dsa_state.stencil[0].enabled = s0_enabled;
+      state->dsa_state.stencil[1].enabled = s1_enabled;
    }
 
    if (state->sample_mask_dirty) {
@@ -1784,6 +1793,8 @@ handle_begin_rendering(struct vk_cmd_queue_entry *cmd,
 
    render_att_init(&state->depth_att, info->pDepthAttachment, state->poison_mem, false);
    render_att_init(&state->stencil_att, info->pStencilAttachment, state->poison_mem, true);
+   state->dsa_no_stencil = !state->stencil_att.imgv;
+   state->dsa_dirty = true;
    if (state->depth_att.imgv || state->stencil_att.imgv) {
       assert(state->depth_att.imgv == NULL ||
              state->stencil_att.imgv == NULL ||
@@ -2647,7 +2658,7 @@ static void handle_index_buffer2(struct vk_cmd_queue_entry *cmd,
       state->index_buffer = lvp_buffer_from_handle(ib->buffer)->bo;
    } else {
       state->index_size = 4;
-      state->index_buffer_size = sizeof(uint32_t);
+      state->index_buffer_size = UINT32_MAX;
       state->index_offset = 0;
       state->index_buffer = state->device->zero_buffer;
    }
diff --git a/src/gallium/frontends/lavapipe/lvp_query.c b/src/gallium/frontends/lavapipe/lvp_query.c
index bc0a3680c52..6511d4699d9 100644
--- a/src/gallium/frontends/lavapipe/lvp_query.c
+++ b/src/gallium/frontends/lavapipe/lvp_query.c
@@ -168,7 +168,7 @@ VKAPI_ATTR VkResult VKAPI_CALL lvp_GetQueryPoolResults(
                *dest32++ = (uint32_t)
                   MIN2(result.so_statistics.primitives_storage_needed, UINT32_MAX);
             } else {
-               *dest32++ = (uint32_t) MIN2(result.u64, UINT32_MAX);
+               *dest32++ = (uint32_t) (result.u64 & UINT32_MAX);
             }
          } else {
             if (pool->type == VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT) {
diff --git a/src/gallium/frontends/nine/device9.c b/src/gallium/frontends/nine/device9.c
index 16c9a8bc234..9255f8d4f56 100644
--- a/src/gallium/frontends/nine/device9.c
+++ b/src/gallium/frontends/nine/device9.c
@@ -1062,6 +1062,7 @@ NineDevice9_Reset( struct NineDevice9 *This,
     /* XXX: better use GetBackBuffer here ? */
 
     This->device_needs_reset = (hr != D3D_OK);
+    This->in_scene = FALSE; /* Not sure if should be done also for ResetEx */
     return hr;
 }
 
diff --git a/src/gallium/frontends/nine/iunknown.c b/src/gallium/frontends/nine/iunknown.c
index 18f477787fd..92ec9686034 100644
--- a/src/gallium/frontends/nine/iunknown.c
+++ b/src/gallium/frontends/nine/iunknown.c
@@ -48,6 +48,7 @@ NineUnknown_ctor( struct NineUnknown *This,
         This->forward = false;
         This->bind = 0;
     }
+    This->has_bind_or_refs = This->bind + This->refs;
 
     This->container = pParams->container;
     This->device = pParams->device;
@@ -119,6 +120,7 @@ NineUnknown_AddRef( struct NineUnknown *This )
         r = p_atomic_inc_return(&This->refs);
 
     if (r == 1) {
+        p_atomic_inc(&This->has_bind_or_refs);
         if (This->device)
             NineUnknown_AddRef(NineUnknown(This->device));
     }
@@ -142,9 +144,11 @@ NineUnknown_Release( struct NineUnknown *This )
 
     if (r == 0) {
         struct NineDevice9 *device = This->device;
+        UINT b_or_ref = p_atomic_dec_return(&This->has_bind_or_refs);
         /* Containers (here with !forward) take care of item destruction */
 
-        if (!This->container && This->bind == 0) {
+        if (!This->container && b_or_ref == 0) {
+            assert(p_atomic_read(&This->bind) == 0);
             This->dtor(This);
         }
         if (device) {
@@ -166,8 +170,10 @@ NineUnknown_ReleaseWithDtorLock( struct NineUnknown *This )
 
     if (r == 0) {
         struct NineDevice9 *device = This->device;
+        UINT b_or_ref = p_atomic_dec_return(&This->has_bind_or_refs);
         /* Containers (here with !forward) take care of item destruction */
-        if (!This->container && This->bind == 0) {
+        if (!This->container && b_or_ref == 0) {
+            assert(p_atomic_read(&This->bind) == 0);
             NineLockGlobalMutex();
             This->dtor(This);
             NineUnlockGlobalMutex();
diff --git a/src/gallium/frontends/nine/iunknown.h b/src/gallium/frontends/nine/iunknown.h
index cdf27fa9551..822f8040fc8 100644
--- a/src/gallium/frontends/nine/iunknown.h
+++ b/src/gallium/frontends/nine/iunknown.h
@@ -47,6 +47,7 @@ struct NineUnknown
 
     int32_t refs; /* external reference count */
     int32_t bind; /* internal bind count */
+    int32_t has_bind_or_refs; /* 0 if no ref, 1 if bind or ref, 2 if both */
     bool forward; /* whether to forward references to the container */
 
     /* container: for surfaces and volumes only.
@@ -130,7 +131,7 @@ NineUnknown_FreePrivateData( struct NineUnknown *This,
 static inline void
 NineUnknown_Destroy( struct NineUnknown *This )
 {
-    assert(!(This->refs | This->bind));
+    assert(!(This->refs | This->bind) && !This->has_bind_or_refs);
     This->dtor(This);
 }
 
@@ -140,6 +141,8 @@ NineUnknown_Bind( struct NineUnknown *This )
     UINT b = p_atomic_inc_return(&This->bind);
     assert(b);
 
+    if (b == 1)
+        p_atomic_inc(&This->has_bind_or_refs);
     if (b == 1 && This->forward)
         NineUnknown_Bind(This->container);
 
@@ -150,10 +153,13 @@ static inline UINT
 NineUnknown_Unbind( struct NineUnknown *This )
 {
     UINT b = p_atomic_dec_return(&This->bind);
+    UINT b_or_ref = 1;
 
+    if (b == 0)
+        b_or_ref = p_atomic_dec_return(&This->has_bind_or_refs);
     if (b == 0 && This->forward)
         NineUnknown_Unbind(This->container);
-    else if (b == 0 && This->refs == 0 && !This->container)
+    else if (b_or_ref == 0 && !This->container)
         This->dtor(This);
 
     return b;
@@ -173,7 +179,7 @@ NineUnknown_Detach( struct NineUnknown *This )
     assert(This->container && !This->forward);
 
     This->container = NULL;
-    if (!(This->refs | This->bind))
+    if (!(This->has_bind_or_refs))
         This->dtor(This);
 }
 
diff --git a/src/gallium/frontends/nine/nine_ff.c b/src/gallium/frontends/nine/nine_ff.c
index a5182fbd0a8..e32f7c70342 100644
--- a/src/gallium/frontends/nine/nine_ff.c
+++ b/src/gallium/frontends/nine/nine_ff.c
@@ -1953,7 +1953,7 @@ nine_ff_load_lights(struct NineDevice9 *device)
         dst[19].z = dst[25].z * mtl->Ambient.b + mtl->Emissive.b;
     }
 
-    if (!(context->changed.group & NINE_STATE_FF_LIGHTING))
+    if (!(context->changed.group & NINE_STATE_FF_LIGHTING) && !IS_D3DTS_DIRTY(context, VIEW))
         return;
 
     for (l = 0; l < context->ff.num_lights_active; ++l) {
diff --git a/src/gallium/frontends/nine/nine_ff.h b/src/gallium/frontends/nine/nine_ff.h
index 6143896b021..cd4fe94f676 100644
--- a/src/gallium/frontends/nine/nine_ff.h
+++ b/src/gallium/frontends/nine/nine_ff.h
@@ -83,20 +83,21 @@ nine_ff_get_projected_key(struct nine_context *context, unsigned num_stages)
     for (s = 0; s < num_stages; ++s) {
         unsigned gen = (context->ff.tex_stage[s][D3DTSS_TEXCOORDINDEX] >> 16) + 1;
         unsigned dim = context->ff.tex_stage[s][D3DTSS_TEXTURETRANSFORMFLAGS] & 0x7;
+        unsigned idx = context->ff.tex_stage[s][D3DTSS_TEXCOORDINDEX] & 7;
         unsigned proj = !!(context->ff.tex_stage[s][D3DTSS_TEXTURETRANSFORMFLAGS] & D3DTTFF_PROJECTED);
 
-        if (!context->vs) {
+        if (!context->programmable_vs) {
             if (dim > 4)
-                dim = input_texture_coord[s];
+                dim = input_texture_coord[idx];
 
             if (!dim && gen == NINED3DTSS_TCI_PASSTHRU)
-                dim = input_texture_coord[s];
+                dim = input_texture_coord[idx];
             else if (!dim)
                 dim = 4;
 
             if (dim == 1) /* NV behaviour */
                 proj = 0;
-            if (dim > input_texture_coord[s] && gen == NINED3DTSS_TCI_PASSTHRU)
+            if (dim > input_texture_coord[idx] && gen == NINED3DTSS_TCI_PASSTHRU)
                 proj = 0;
         } else {
             dim = 4;
diff --git a/src/gallium/frontends/rusticl/core/event.rs b/src/gallium/frontends/rusticl/core/event.rs
index 6f45bb59140..29b43fe30c7 100644
--- a/src/gallium/frontends/rusticl/core/event.rs
+++ b/src/gallium/frontends/rusticl/core/event.rs
@@ -10,6 +10,7 @@ use mesa_rust_util::static_assert;
 use rusticl_opencl_gen::*;
 
 use std::collections::HashSet;
+use std::mem;
 use std::slice;
 use std::sync::Arc;
 use std::sync::Condvar;
@@ -109,7 +110,7 @@ impl Event {
         self.state().status
     }
 
-    fn set_status(&self, lock: &mut MutexGuard<EventMutState>, new: cl_int) {
+    fn set_status(&self, mut lock: MutexGuard<EventMutState>, new: cl_int) {
         lock.status = new;
 
         // signal on completion or an error
@@ -117,16 +118,22 @@ impl Event {
             self.cv.notify_all();
         }
 
-        if [CL_COMPLETE, CL_RUNNING, CL_SUBMITTED].contains(&(new as u32)) {
-            if let Some(cbs) = lock.cbs.get_mut(new as usize) {
-                cbs.drain(..).for_each(|cb| cb.call(self, new));
+        // on error we need to call the CL_COMPLETE callbacks
+        let cb_idx = if new < 0 { CL_COMPLETE } else { new as u32 };
+
+        if [CL_COMPLETE, CL_RUNNING, CL_SUBMITTED].contains(&cb_idx) {
+            if let Some(cbs) = lock.cbs.get_mut(cb_idx as usize) {
+                let cbs = mem::take(cbs);
+                // applications might want to access the event in the callback, so drop the lock
+                // before calling into the callbacks.
+                drop(lock);
+                cbs.into_iter().for_each(|cb| cb.call(self, new));
             }
         }
     }
 
     pub fn set_user_status(&self, status: cl_int) {
-        let mut lock = self.state();
-        self.set_status(&mut lock, status);
+        self.set_status(self.state(), status);
     }
 
     pub fn is_error(&self) -> bool {
@@ -172,10 +179,8 @@ impl Event {
     }
 
     pub(super) fn signal(&self) {
-        let mut lock = self.state();
-
-        self.set_status(&mut lock, CL_RUNNING as cl_int);
-        self.set_status(&mut lock, CL_COMPLETE as cl_int);
+        self.set_status(self.state(), CL_RUNNING as cl_int);
+        self.set_status(self.state(), CL_COMPLETE as cl_int);
     }
 
     pub fn wait(&self) -> cl_int {
@@ -231,7 +236,7 @@ impl Event {
                 lock.time_start = query_start.unwrap().read_blocked();
                 lock.time_end = query_end.unwrap().read_blocked();
             }
-            self.set_status(&mut lock, new);
+            self.set_status(lock, new);
         }
     }
 
@@ -269,6 +274,27 @@ impl Event {
     }
 }
 
+impl Drop for Event {
+    // implement drop in order to prevent stack overflows of long dependency chains.
+    //
+    // This abuses the fact that `Arc::into_inner` only succeeds when there is one strong reference
+    // so we turn a recursive drop chain into a drop list for events having no other references.
+    fn drop(&mut self) {
+        if self.deps.is_empty() {
+            return;
+        }
+
+        let mut deps_list = vec![mem::take(&mut self.deps)];
+        while let Some(deps) = deps_list.pop() {
+            for dep in deps {
+                if let Some(mut dep) = Arc::into_inner(dep) {
+                    deps_list.push(mem::take(&mut dep.deps));
+                }
+            }
+        }
+    }
+}
+
 // TODO worker thread per device
 // Condvar to wait on new events to work on
 // notify condvar when flushing queue events to worker
diff --git a/src/gallium/frontends/rusticl/core/kernel.rs b/src/gallium/frontends/rusticl/core/kernel.rs
index 05296c0cd0e..63e9f7e864c 100644
--- a/src/gallium/frontends/rusticl/core/kernel.rs
+++ b/src/gallium/frontends/rusticl/core/kernel.rs
@@ -458,22 +458,8 @@ fn lower_and_optimize_nir(
     let mut args = KernelArg::from_spirv_nir(args, nir);
     let mut internal_args = Vec::new();
 
-    let dv_opts = nir_remove_dead_variables_options {
-        can_remove_var: Some(can_remove_var),
-        can_remove_var_data: ptr::null_mut(),
-    };
-    nir_pass!(
-        nir,
-        nir_remove_dead_variables,
-        nir_variable_mode::nir_var_uniform
-            | nir_variable_mode::nir_var_image
-            | nir_variable_mode::nir_var_mem_constant
-            | nir_variable_mode::nir_var_mem_shared
-            | nir_variable_mode::nir_var_function_temp,
-        &dv_opts,
-    );
-
-    // asign locations for inline samplers
+    // asign locations for inline samplers.
+    // IMPORTANT: this needs to happen before nir_remove_dead_variables.
     let mut last_loc = -1;
     for v in nir
         .variables_with_mode(nir_variable_mode::nir_var_uniform | nir_variable_mode::nir_var_image)
@@ -501,6 +487,21 @@ fn lower_and_optimize_nir(
         }
     }
 
+    let dv_opts = nir_remove_dead_variables_options {
+        can_remove_var: Some(can_remove_var),
+        can_remove_var_data: ptr::null_mut(),
+    };
+    nir_pass!(
+        nir,
+        nir_remove_dead_variables,
+        nir_variable_mode::nir_var_uniform
+            | nir_variable_mode::nir_var_image
+            | nir_variable_mode::nir_var_mem_constant
+            | nir_variable_mode::nir_var_mem_shared
+            | nir_variable_mode::nir_var_function_temp,
+        &dv_opts,
+    );
+
     nir_pass!(nir, nir_lower_readonly_images_to_tex, true);
     nir_pass!(
         nir,
diff --git a/src/gallium/frontends/rusticl/core/platform.rs b/src/gallium/frontends/rusticl/core/platform.rs
index 6e948e358c5..74a0f15b842 100644
--- a/src/gallium/frontends/rusticl/core/platform.rs
+++ b/src/gallium/frontends/rusticl/core/platform.rs
@@ -7,6 +7,8 @@ use mesa_rust_gen::*;
 use rusticl_opencl_gen::*;
 
 use std::env;
+use std::ptr::addr_of;
+use std::ptr::addr_of_mut;
 use std::sync::Arc;
 use std::sync::Once;
 
@@ -71,7 +73,8 @@ static mut PLATFORM_FEATURES: PlatformFeatures = PlatformFeatures {
 };
 
 fn load_env() {
-    let debug = unsafe { &mut PLATFORM_DBG };
+    // SAFETY: no other references exist at this point
+    let debug = unsafe { &mut *addr_of_mut!(PLATFORM_DBG) };
     if let Ok(debug_flags) = env::var("RUSTICL_DEBUG") {
         for flag in debug_flags.split(',') {
             match flag {
@@ -85,7 +88,8 @@ fn load_env() {
         }
     }
 
-    let features = unsafe { &mut PLATFORM_FEATURES };
+    // SAFETY: no other references exist at this point
+    let features = unsafe { &mut *addr_of_mut!(PLATFORM_FEATURES) };
     if let Ok(feature_flags) = env::var("RUSTICL_FEATURES") {
         for flag in feature_flags.split(',') {
             match flag {
@@ -106,17 +110,17 @@ impl Platform {
     pub fn get() -> &'static Self {
         debug_assert!(PLATFORM_ONCE.is_completed());
         // SAFETY: no mut references exist at this point
-        unsafe { &PLATFORM }
+        unsafe { &*addr_of!(PLATFORM) }
     }
 
     pub fn dbg() -> &'static PlatformDebug {
         debug_assert!(PLATFORM_ENV_ONCE.is_completed());
-        unsafe { &PLATFORM_DBG }
+        unsafe { &*addr_of!(PLATFORM_DBG) }
     }
 
     pub fn features() -> &'static PlatformFeatures {
         debug_assert!(PLATFORM_ENV_ONCE.is_completed());
-        unsafe { &PLATFORM_FEATURES }
+        unsafe { &*addr_of!(PLATFORM_FEATURES) }
     }
 
     fn init(&mut self) {
diff --git a/src/gallium/frontends/rusticl/core/program.rs b/src/gallium/frontends/rusticl/core/program.rs
index eeb9c113538..93465c71c72 100644
--- a/src/gallium/frontends/rusticl/core/program.rs
+++ b/src/gallium/frontends/rusticl/core/program.rs
@@ -20,6 +20,7 @@ use std::collections::HashSet;
 use std::ffi::CString;
 use std::mem::size_of;
 use std::ptr;
+use std::ptr::addr_of;
 use std::slice;
 use std::sync::Arc;
 use std::sync::Mutex;
@@ -55,7 +56,7 @@ fn get_disk_cache() -> &'static Option<DiskCache> {
         DISK_CACHE_ONCE.call_once(|| {
             DISK_CACHE = DiskCache::new("rusticl", &func_ptrs, 0);
         });
-        &DISK_CACHE
+        &*addr_of!(DISK_CACHE)
     }
 }
 
@@ -313,9 +314,11 @@ fn prepare_options(options: &str, dev: &Device) -> Vec<CString> {
     res.push(&options[old..]);
 
     res.iter()
-        .map(|&a| match a {
-            "-cl-denorms-are-zero" => "-fdenormal-fp-math=positive-zero",
-            _ => a,
+        .filter_map(|&a| match a {
+            "-cl-denorms-are-zero" => Some("-fdenormal-fp-math=positive-zero"),
+            // We can ignore it as long as we don't support ifp
+            "-cl-no-subgroup-ifp" => None,
+            _ => Some(a),
         })
         .map(CString::new)
         .map(Result::unwrap)
@@ -505,7 +508,12 @@ impl Program {
         for (i, d) in self.devs.iter().enumerate() {
             let mut ptr = ptrs[i];
             let info = lock.dev_build(d);
-            let spirv = info.spirv.as_ref().unwrap().to_bin();
+
+            // no spirv means nothing to write
+            let Some(spirv) = info.spirv.as_ref() else {
+                continue;
+            };
+            let spirv = spirv.to_bin();
 
             unsafe {
                 // 1. binary format version
diff --git a/src/gallium/frontends/rusticl/core/queue.rs b/src/gallium/frontends/rusticl/core/queue.rs
index 85cb6f39552..b1c37c1767a 100644
--- a/src/gallium/frontends/rusticl/core/queue.rs
+++ b/src/gallium/frontends/rusticl/core/queue.rs
@@ -6,8 +6,6 @@ use crate::core::platform::*;
 use crate::impl_cl_type_trait;
 
 use mesa_rust::pipe::context::PipeContext;
-use mesa_rust::pipe::resource::PipeResource;
-use mesa_rust::pipe::screen::ResourceType;
 use mesa_rust_util::properties::*;
 use rusticl_opencl_gen::*;
 
@@ -25,7 +23,7 @@ use std::thread::JoinHandle;
 /// Used for tracking bound GPU state to lower CPU overhead and centralize state tracking
 pub struct QueueContext {
     ctx: PipeContext,
-    cb0: Option<PipeResource>,
+    use_stream: bool,
 }
 
 impl QueueContext {
@@ -34,30 +32,18 @@ impl QueueContext {
             .screen()
             .create_context()
             .ok_or(CL_OUT_OF_HOST_MEMORY)?;
-        let size = device.param_max_size() as u32;
-        let cb0 = if device.prefers_real_buffer_in_cb0() {
-            device
-                .screen()
-                .resource_create_buffer(size, ResourceType::Cb0, 0)
-        } else {
-            None
-        };
-
-        if let Some(cb0) = &cb0 {
-            ctx.bind_constant_buffer(0, cb0);
-        }
 
-        Ok(Self { ctx: ctx, cb0: cb0 })
+        Ok(Self {
+            ctx: ctx,
+            use_stream: device.prefers_real_buffer_in_cb0(),
+        })
     }
 
     pub fn update_cb0(&self, data: &[u8]) {
         // only update if we actually bind data
         if !data.is_empty() {
-            // if we have a real buffer, update that, otherwise just set the data directly
-            if let Some(cb) = &self.cb0 {
-                debug_assert!(data.len() <= cb.width() as usize);
-                self.ctx
-                    .buffer_subdata(cb, 0, data.as_ptr().cast(), data.len() as u32);
+            if self.use_stream {
+                self.ctx.set_constant_buffer_stream(0, data);
             } else {
                 self.ctx.set_constant_buffer(0, data);
             }
diff --git a/src/gallium/frontends/rusticl/mesa/pipe/context.rs b/src/gallium/frontends/rusticl/mesa/pipe/context.rs
index 0d0faeda33a..b2ff2cfeb2f 100644
--- a/src/gallium/frontends/rusticl/mesa/pipe/context.rs
+++ b/src/gallium/frontends/rusticl/mesa/pipe/context.rs
@@ -8,6 +8,7 @@ use mesa_rust_gen::pipe_fd_type::*;
 use mesa_rust_gen::*;
 use mesa_rust_util::has_required_feature;
 
+use std::mem::size_of;
 use std::os::raw::*;
 use std::ptr;
 use std::ptr::*;
@@ -417,6 +418,37 @@ impl PipeContext {
         }
     }
 
+    pub fn set_constant_buffer_stream(&self, idx: u32, data: &[u8]) {
+        let mut cb = pipe_constant_buffer {
+            buffer: ptr::null_mut(),
+            buffer_offset: 0,
+            buffer_size: data.len() as u32,
+            user_buffer: ptr::null_mut(),
+        };
+
+        unsafe {
+            let stream = self.pipe.as_ref().stream_uploader;
+            u_upload_data(
+                stream,
+                0,
+                data.len() as u32,
+                size_of::<[u64; 16]>() as u32,
+                data.as_ptr().cast(),
+                &mut cb.buffer_offset,
+                &mut cb.buffer,
+            );
+            u_upload_unmap(stream);
+
+            self.pipe.as_ref().set_constant_buffer.unwrap()(
+                self.pipe.as_ptr(),
+                pipe_shader_type::PIPE_SHADER_COMPUTE,
+                idx,
+                false,
+                &cb,
+            );
+        }
+    }
+
     pub fn launch_grid(
         &self,
         work_dim: u32,
@@ -626,6 +658,7 @@ impl PipeContext {
 
 impl Drop for PipeContext {
     fn drop(&mut self) {
+        self.flush().wait();
         unsafe {
             self.pipe.as_ref().destroy.unwrap()(self.pipe.as_ptr());
         }
diff --git a/src/gallium/frontends/rusticl/rusticl_mesa_bindings.h b/src/gallium/frontends/rusticl/rusticl_mesa_bindings.h
index 291088e2843..5d0c23d7641 100644
--- a/src/gallium/frontends/rusticl/rusticl_mesa_bindings.h
+++ b/src/gallium/frontends/rusticl/rusticl_mesa_bindings.h
@@ -19,6 +19,7 @@
 #include "util/disk_cache.h"
 #include "util/os_time.h"
 #include "util/sha1/sha1.h"
+#include "util/u_upload_mgr.h"
 #include "util/u_printf.h"
 #include "util/u_sampler.h"
 #include "util/u_surface.h"
diff --git a/src/gallium/frontends/va/buffer.c b/src/gallium/frontends/va/buffer.c
index bbe0c75f23e..c11cead3802 100644
--- a/src/gallium/frontends/va/buffer.c
+++ b/src/gallium/frontends/va/buffer.c
@@ -316,7 +316,7 @@ vlVaDestroyBuffer(VADriverContextP ctx, VABufferID buf_id)
 
    if (buf->type == VAEncCodedBufferType) {
       VACodedBufferSegment* node = buf->data;
-      while(!node) {
+      while (node) {
          VACodedBufferSegment* next = (VACodedBufferSegment*) node->next;
          FREE(node);
          node = next;
diff --git a/src/gallium/frontends/va/picture.c b/src/gallium/frontends/va/picture.c
index 9172980bc77..1a3cf42ff83 100644
--- a/src/gallium/frontends/va/picture.c
+++ b/src/gallium/frontends/va/picture.c
@@ -299,7 +299,7 @@ handleIQMatrixBuffer(vlVaContext *context, vlVaBuffer *buf)
 }
 
 static void
-handleSliceParameterBuffer(vlVaContext *context, vlVaBuffer *buf, unsigned num_slices)
+handleSliceParameterBuffer(vlVaContext *context, vlVaBuffer *buf, unsigned num_slices, unsigned slice_offset)
 {
    switch (u_reduce_video_profile(context->templat.profile)) {
    case PIPE_VIDEO_FORMAT_MPEG12:
@@ -331,7 +331,7 @@ handleSliceParameterBuffer(vlVaContext *context, vlVaBuffer *buf, unsigned num_s
       break;
 
    case PIPE_VIDEO_FORMAT_AV1:
-      vlVaHandleSliceParameterBufferAV1(context, buf, num_slices);
+      vlVaHandleSliceParameterBufferAV1(context, buf, num_slices, slice_offset);
       break;
 
    default:
@@ -968,6 +968,7 @@ vlVaRenderPicture(VADriverContextP ctx, VAContextID context_id, VABufferID *buff
 
    unsigned i;
    unsigned slice_idx = 0;
+   unsigned slice_offset = 0;
    vlVaBuffer *seq_param_buf = NULL;
 
    if (!ctx)
@@ -1023,13 +1024,17 @@ vlVaRenderPicture(VADriverContextP ctx, VAContextID context_id, VABufferID *buff
 
             slice_idx is the zero based number of total slices received
                before this call to handleSliceParameterBuffer
+
+            slice_offset is the slice offset in bitstream buffer
          */
-         handleSliceParameterBuffer(context, buf, slice_idx);
+         handleSliceParameterBuffer(context, buf, slice_idx, slice_offset);
          slice_idx += buf->num_elements;
       } break;
 
       case VASliceDataBufferType:
          vaStatus = handleVASliceDataBufferType(context, buf);
+         if (slice_idx)
+            slice_offset += buf->size;
          break;
 
       case VAProcPipelineParameterBufferType:
diff --git a/src/gallium/frontends/va/picture_av1.c b/src/gallium/frontends/va/picture_av1.c
index e6f2652e362..c014b0b1168 100644
--- a/src/gallium/frontends/va/picture_av1.c
+++ b/src/gallium/frontends/va/picture_av1.c
@@ -396,7 +396,7 @@ void vlVaHandlePictureParameterBufferAV1(vlVaDriver *drv, vlVaContext *context,
   context->desc.av1.slice_parameter.slice_count = 0;
 }
 
-void vlVaHandleSliceParameterBufferAV1(vlVaContext *context, vlVaBuffer *buf, unsigned num_slices)
+void vlVaHandleSliceParameterBufferAV1(vlVaContext *context, vlVaBuffer *buf, unsigned num_slices, unsigned slice_offset)
 {
    for (uint32_t buffer_idx = 0; buffer_idx < buf->num_elements; buffer_idx++) {
       uint32_t slice_index =
@@ -407,7 +407,7 @@ void vlVaHandleSliceParameterBufferAV1(vlVaContext *context, vlVaBuffer *buf, un
 
       VASliceParameterBufferAV1 *av1 = &(((VASliceParameterBufferAV1*)buf->data)[buffer_idx]);
       context->desc.av1.slice_parameter.slice_data_size[slice_index] = av1->slice_data_size;
-      context->desc.av1.slice_parameter.slice_data_offset[slice_index] = av1->slice_data_offset;
+      context->desc.av1.slice_parameter.slice_data_offset[slice_index] = slice_offset + av1->slice_data_offset;
       context->desc.av1.slice_parameter.slice_data_row[slice_index] = av1->tile_row;
       context->desc.av1.slice_parameter.slice_data_col[slice_index] = av1->tile_column;
       context->desc.av1.slice_parameter.slice_data_anchor_frame_idx[slice_index] = av1->anchor_frame_idx;
diff --git a/src/gallium/frontends/va/picture_h264.c b/src/gallium/frontends/va/picture_h264.c
index 62d94b51db5..f5e99fd795c 100644
--- a/src/gallium/frontends/va/picture_h264.c
+++ b/src/gallium/frontends/va/picture_h264.c
@@ -186,6 +186,7 @@ void vlVaHandleSliceParameterBufferH264(vlVaContext *context, vlVaBuffer *buf)
    assert(context->desc.h264.slice_count < max_pipe_h264_slices);
 
    context->desc.h264.slice_parameter.slice_info_present = true;
+   context->desc.h264.slice_parameter.slice_type[context->desc.h264.slice_count] = h264->slice_type;
    context->desc.h264.slice_parameter.slice_data_size[context->desc.h264.slice_count] = h264->slice_data_size;
    context->desc.h264.slice_parameter.slice_data_offset[context->desc.h264.slice_count] = h264->slice_data_offset;
 
diff --git a/src/gallium/frontends/va/picture_vp9.c b/src/gallium/frontends/va/picture_vp9.c
index ff3da929f0b..f08b019fac1 100644
--- a/src/gallium/frontends/va/picture_vp9.c
+++ b/src/gallium/frontends/va/picture_vp9.c
@@ -56,8 +56,10 @@ void vlVaHandlePictureParameterBufferVP9(vlVaDriver *drv, vlVaContext *context,
    context->desc.vp9.picture_parameter.pic_fields.refresh_frame_context = vp9->pic_fields.bits.refresh_frame_context;
    context->desc.vp9.picture_parameter.pic_fields.frame_context_idx = vp9->pic_fields.bits.frame_context_idx;
    context->desc.vp9.picture_parameter.pic_fields.segmentation_enabled = vp9->pic_fields.bits.segmentation_enabled;
-   context->desc.vp9.picture_parameter.pic_fields.segmentation_temporal_update = vp9->pic_fields.bits.segmentation_temporal_update;
-   context->desc.vp9.picture_parameter.pic_fields.segmentation_update_map = vp9->pic_fields.bits.segmentation_update_map;
+   context->desc.vp9.picture_parameter.pic_fields.segmentation_temporal_update =
+      vp9->pic_fields.bits.segmentation_enabled && vp9->pic_fields.bits.segmentation_temporal_update;
+   context->desc.vp9.picture_parameter.pic_fields.segmentation_update_map =
+      vp9->pic_fields.bits.segmentation_enabled && vp9->pic_fields.bits.segmentation_update_map;
    context->desc.vp9.picture_parameter.pic_fields.last_ref_frame = vp9->pic_fields.bits.last_ref_frame;
    context->desc.vp9.picture_parameter.pic_fields.last_ref_frame_sign_bias = vp9->pic_fields.bits.last_ref_frame_sign_bias;
    context->desc.vp9.picture_parameter.pic_fields.golden_ref_frame = vp9->pic_fields.bits.golden_ref_frame;
diff --git a/src/gallium/frontends/va/surface.c b/src/gallium/frontends/va/surface.c
index 2f153abde64..e79f4f78846 100644
--- a/src/gallium/frontends/va/surface.c
+++ b/src/gallium/frontends/va/surface.c
@@ -713,6 +713,16 @@ vlVaQuerySurfaceAttributes(VADriverContextP ctx, VAConfigID config_id,
                                   config->profile, config->entrypoint,
                                   PIPE_VIDEO_CAP_MAX_HEIGHT);
       i++;
+#if VA_CHECK_VERSION(1, 21, 0)
+      attribs[i].type = VASurfaceAttribAlignmentSize;
+      attribs[i].value.type = VAGenericValueTypeInteger;
+      attribs[i].flags = VA_SURFACE_ATTRIB_GETTABLE;
+      attribs[i].value.value.i =
+         pscreen->get_video_param(pscreen,
+                                  config->profile, config->entrypoint,
+                                  PIPE_VIDEO_CAP_ENC_SURFACE_ALIGNMENT);
+      i++;
+#endif
    } else {
       attribs[i].type = VASurfaceAttribMaxWidth;
       attribs[i].value.type = VAGenericValueTypeInteger;
diff --git a/src/gallium/frontends/va/va_private.h b/src/gallium/frontends/va/va_private.h
index bd4c1e4a698..47a3fd8c666 100644
--- a/src/gallium/frontends/va/va_private.h
+++ b/src/gallium/frontends/va/va_private.h
@@ -537,7 +537,7 @@ void vlVaHandlePictureParameterBufferVP9(vlVaDriver *drv, vlVaContext *context,
 void vlVaHandleSliceParameterBufferVP9(vlVaContext *context, vlVaBuffer *buf);
 void vlVaDecoderVP9BitstreamHeader(vlVaContext *context, vlVaBuffer *buf);
 void vlVaHandlePictureParameterBufferAV1(vlVaDriver *drv, vlVaContext *context, vlVaBuffer *buf);
-void vlVaHandleSliceParameterBufferAV1(vlVaContext *context, vlVaBuffer *buf, unsigned num_slices);
+void vlVaHandleSliceParameterBufferAV1(vlVaContext *context, vlVaBuffer *buf, unsigned num_slices, unsigned slice_offset);
 void getEncParamPresetH264(vlVaContext *context);
 void getEncParamPresetH265(vlVaContext *context);
 void getEncParamPresetAV1(vlVaContext *context);
diff --git a/src/gallium/frontends/vdpau/query.c b/src/gallium/frontends/vdpau/query.c
index 158256b961b..6c48e9e8c12 100644
--- a/src/gallium/frontends/vdpau/query.c
+++ b/src/gallium/frontends/vdpau/query.c
@@ -108,6 +108,8 @@ vlVdpVideoSurfaceQueryGetPutBitsYCbCrCapabilities(VdpDevice device, VdpChromaTyp
 {
    vlVdpDevice *dev;
    struct pipe_screen *pscreen;
+   VdpYCbCrFormat ycbcrFormat;
+   bool supported;
 
    if (!is_supported)
       return VDP_STATUS_INVALID_POINTER;
@@ -122,47 +124,50 @@ vlVdpVideoSurfaceQueryGetPutBitsYCbCrCapabilities(VdpDevice device, VdpChromaTyp
 
    mtx_lock(&dev->mutex);
 
+   ycbcrFormat = bits_ycbcr_format;
    switch(bits_ycbcr_format) {
    case VDP_YCBCR_FORMAT_NV12:
-      *is_supported = surface_chroma_type == VDP_CHROMA_TYPE_420;
+      supported = surface_chroma_type == VDP_CHROMA_TYPE_420;
       break;
 
    case VDP_YCBCR_FORMAT_YV12:
-      *is_supported = surface_chroma_type == VDP_CHROMA_TYPE_420;
+      supported = surface_chroma_type == VDP_CHROMA_TYPE_420;
 
       /* We can convert YV12 to NV12 on the fly! */
-      if (*is_supported &&
-          pscreen->is_video_format_supported(pscreen,
-                                             PIPE_FORMAT_NV12,
-                                             PIPE_VIDEO_PROFILE_UNKNOWN,
-                                             PIPE_VIDEO_ENTRYPOINT_BITSTREAM)) {
-         mtx_unlock(&dev->mutex);
-         return VDP_STATUS_OK;
-      }
+      ycbcrFormat = VDP_YCBCR_FORMAT_NV12;
       break;
 
    case VDP_YCBCR_FORMAT_UYVY:
    case VDP_YCBCR_FORMAT_YUYV:
-      *is_supported = surface_chroma_type == VDP_CHROMA_TYPE_422;
+      supported = surface_chroma_type == VDP_CHROMA_TYPE_422;
       break;
 
    case VDP_YCBCR_FORMAT_Y8U8V8A8:
    case VDP_YCBCR_FORMAT_V8U8Y8A8:
-      *is_supported = surface_chroma_type == VDP_CHROMA_TYPE_444;
+      supported = surface_chroma_type == VDP_CHROMA_TYPE_444;
+      break;
+
+   case VDP_YCBCR_FORMAT_P010:
+   case VDP_YCBCR_FORMAT_P016:
+      /* Do any other profiles imply support for this chroma type? */
+      supported = (surface_chroma_type == VDP_CHROMA_TYPE_420_16)
+                  && vl_codec_supported(pscreen, PIPE_VIDEO_PROFILE_HEVC_MAIN_10, false);
       break;
 
    default:
-      *is_supported = false;
+      supported = false;
       break;
    }
 
-   if (*is_supported &&
+   if (supported &&
        !pscreen->is_video_format_supported(pscreen,
-                                           FormatYCBCRToPipe(bits_ycbcr_format),
+                                           FormatYCBCRToPipe(ycbcrFormat),
                                            PIPE_VIDEO_PROFILE_UNKNOWN,
                                            PIPE_VIDEO_ENTRYPOINT_BITSTREAM)) {
-      *is_supported = false;
+      supported = false;
    }
+   *is_supported = supported;
+
    mtx_unlock(&dev->mutex);
 
    return VDP_STATUS_OK;
diff --git a/src/gallium/frontends/wgl/stw_device.c b/src/gallium/frontends/wgl/stw_device.c
index 2f852aca0aa..5261028d73d 100644
--- a/src/gallium/frontends/wgl/stw_device.c
+++ b/src/gallium/frontends/wgl/stw_device.c
@@ -74,7 +74,7 @@ static int
 get_refresh_rate(void)
 {
 #ifndef _GAMING_XBOX
-   DEVMODE devModes;
+   DEVMODE devModes = { .dmSize = sizeof(DEVMODE) };
 
    if (EnumDisplaySettings(NULL, ENUM_CURRENT_SETTINGS, &devModes)) {
       /* clamp the value, just in case we get garbage */
@@ -258,7 +258,8 @@ stw_cleanup(void)
    st_screen_destroy(stw_dev->fscreen);
    FREE(stw_dev->fscreen);
 
-   stw_dev->screen->destroy(stw_dev->screen);
+   if (stw_dev->screen)
+      stw_dev->screen->destroy(stw_dev->screen);
 
    stw_tls_cleanup();
 
diff --git a/src/gallium/include/pipe/p_video_enums.h b/src/gallium/include/pipe/p_video_enums.h
index 8c03fe74755..08852351cda 100644
--- a/src/gallium/include/pipe/p_video_enums.h
+++ b/src/gallium/include/pipe/p_video_enums.h
@@ -161,6 +161,10 @@ enum pipe_video_cap
     * Encoding Region Of Interest feature
     */
    PIPE_VIDEO_CAP_ENC_ROI = 49,
+   /*
+    * Encoding surface width/height alignment
+    */
+   PIPE_VIDEO_CAP_ENC_SURFACE_ALIGNMENT = 50,
 };
 
 enum pipe_video_h264_enc_dbk_filter_mode_flags
diff --git a/src/gallium/include/pipe/p_video_state.h b/src/gallium/include/pipe/p_video_state.h
index 1afa57dadf4..671823b37ae 100644
--- a/src/gallium/include/pipe/p_video_state.h
+++ b/src/gallium/include/pipe/p_video_state.h
@@ -411,6 +411,7 @@ struct pipe_h264_picture_desc
    {
       bool slice_info_present;
       uint32_t slice_count;
+      uint8_t slice_type[128];
       uint32_t slice_data_size[128];
       uint32_t slice_data_offset[128];
       enum pipe_slice_buffer_placement_type slice_data_flag[128];
@@ -2008,6 +2009,21 @@ union pipe_enc_cap_roi {
    uint32_t value;
 };
 
+union pipe_enc_cap_surface_alignment {
+   struct {
+      /**
+       * log2_width_alignment
+       */
+      uint32_t log2_width_alignment                 : 4;
+      /**
+       * log2_height_alignment
+       */
+      uint32_t log2_height_alignment                : 4;
+      uint32_t reserved                             : 24;
+   } bits;
+   uint32_t value;
+};
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/gallium/targets/d3dadapter9/meson.build b/src/gallium/targets/d3dadapter9/meson.build
index 282859fd932..d5c75a7fb96 100644
--- a/src/gallium/targets/d3dadapter9/meson.build
+++ b/src/gallium/targets/d3dadapter9/meson.build
@@ -29,7 +29,7 @@ gallium_nine_link_depends = []
 gallium_nine_link_with = [
     libgallium, libnine_st,
     libpipe_loader_static, libws_null, libwsw, libswdri,
-    libswkmsdri,
+    libswkmsdri, libgalliumvl_stub,
 ]
 
 if with_ld_version_script
@@ -37,13 +37,6 @@ if with_ld_version_script
   gallium_nine_link_depends += files('d3dadapter9.sym')
 endif
 
-if (with_gallium_va or with_gallium_vdpau or with_gallium_omx != 'disabled' or
-    with_dri)
-  gallium_nine_link_with += libgalliumvl
-else
-  gallium_nine_link_with += libgalliumvl_stub
-endif
-
 libgallium_nine = shared_library(
   'd3dadapter9',
   files('description.c', 'getproc.c', 'drm.c'),
diff --git a/src/gallium/targets/pipe-loader/meson.build b/src/gallium/targets/pipe-loader/meson.build
index 943faec469d..48497fa9feb 100644
--- a/src/gallium/targets/pipe-loader/meson.build
+++ b/src/gallium/targets/pipe-loader/meson.build
@@ -20,19 +20,13 @@
 
 pipe_loader_link_args = [ld_args_gc_sections, ld_args_build_id]
 pipe_loader_link_deps = []
-pipe_loader_link_with = [libgallium]
+pipe_loader_link_with = [libgallium, libgalliumvl_stub]
 pipe_loader_comp_args = []
 pipe_loader_incs = [
   inc_include, inc_src, inc_util, inc_gallium, inc_gallium_drivers,
   inc_gallium_winsys, inc_gallium_aux,
 ]
 
-if (with_gallium_va or with_gallium_vdpau or with_gallium_omx != 'disabled' or
-    with_dri or with_gallium_radeonsi)
-  pipe_loader_link_with += libgalliumvl
-else
-  pipe_loader_link_with += libgalliumvl_stub
-endif
 if (with_gallium_va or with_gallium_vdpau or with_gallium_omx != 'disabled')
   pipe_loader_link_with += libgalliumvlwinsys
 endif
diff --git a/src/gallium/targets/rusticl/meson.build b/src/gallium/targets/rusticl/meson.build
index b2963fe6dfa..e1acaca7e68 100644
--- a/src/gallium/targets/rusticl/meson.build
+++ b/src/gallium/targets/rusticl/meson.build
@@ -42,6 +42,7 @@ librusticl = shared_library(
   ],
   link_whole : librusticl,
   link_with : [
+    libgalliumvl_stub,
     libpipe_loader_static,
     libswdri,
     libswkmsdri,
diff --git a/src/gallium/winsys/i915/drm/meson.build b/src/gallium/winsys/i915/drm/meson.build
index 57597972417..d68f74327ea 100644
--- a/src/gallium/winsys/i915/drm/meson.build
+++ b/src/gallium/winsys/i915/drm/meson.build
@@ -28,5 +28,5 @@ libi915drm = static_library(
     inc_include, inc_src, inc_gallium, inc_gallium_aux, inc_gallium_drivers
   ],
   link_with : [libintel_common],
-  dependencies : [dep_libdrm, dep_libdrm_intel],
+  dependencies : [dep_libdrm, dep_libdrm_intel, idep_intel_dev_wa],
 )
diff --git a/src/gallium/winsys/radeon/drm/radeon_drm_bo.c b/src/gallium/winsys/radeon/drm/radeon_drm_bo.c
index 2e1d9c488e2..7979cad75fa 100644
--- a/src/gallium/winsys/radeon/drm/radeon_drm_bo.c
+++ b/src/gallium/winsys/radeon/drm/radeon_drm_bo.c
@@ -729,7 +729,7 @@ bool radeon_bo_can_reclaim_slab(void *priv, struct pb_slab_entry *entry)
 {
    struct radeon_bo *bo = container_of(entry, struct radeon_bo, u.slab.entry);
 
-   return radeon_bo_can_reclaim(NULL, &bo->base);
+   return radeon_bo_can_reclaim(priv, &bo->base);
 }
 
 static void radeon_bo_slab_destroy(void *winsys, struct pb_buffer_lean *_buf)
diff --git a/src/glx/drisw_glx.c b/src/glx/drisw_glx.c
index 3d3f75259bc..f9465c4a512 100644
--- a/src/glx/drisw_glx.c
+++ b/src/glx/drisw_glx.c
@@ -32,7 +32,9 @@
 #include <dlfcn.h>
 #include "dri_common.h"
 #include "drisw_priv.h"
+#ifdef HAVE_DRI3
 #include "dri3_priv.h"
+#endif
 #include <X11/extensions/shmproto.h>
 #include <assert.h>
 #include <vulkan/vulkan_core.h>
@@ -1001,7 +1003,9 @@ driswCreateScreenDriver(int screen, struct glx_display *priv,
       if (!psc->has_multibuffer &&
           !debug_get_bool_option("LIBGL_ALWAYS_SOFTWARE", false) &&
           !debug_get_bool_option("LIBGL_KOPPER_DRI2", false)) {
-         CriticalErrorMessageF("DRI3 not available\n");
+         /* only print error if zink was explicitly requested */
+         if (pdpyp->zink == TRY_ZINK_YES)
+            CriticalErrorMessageF("DRI3 not available\n");
          goto handle_error;
       }
    }
@@ -1049,7 +1053,8 @@ driswCreateScreenDriver(int screen, struct glx_display *priv,
    glx_screen_cleanup(&psc->base);
    free(psc);
 
-   CriticalErrorMessageF("failed to load driver: %s\n", driver);
+   if (pdpyp->zink == TRY_ZINK_YES)
+      CriticalErrorMessageF("failed to load driver: %s\n", driver);
 
    return NULL;
 }
@@ -1079,7 +1084,7 @@ driswDestroyDisplay(__GLXDRIdisplay * dpy)
  * display pointer.
  */
 _X_HIDDEN __GLXDRIdisplay *
-driswCreateDisplay(Display * dpy, bool zink)
+driswCreateDisplay(Display * dpy, enum try_zink zink)
 {
    struct drisw_display *pdpyp;
 
diff --git a/src/glx/drisw_priv.h b/src/glx/drisw_priv.h
index 53674f81a24..c7687ebcb63 100644
--- a/src/glx/drisw_priv.h
+++ b/src/glx/drisw_priv.h
@@ -33,7 +33,7 @@
 struct drisw_display
 {
    __GLXDRIdisplay base;
-   bool zink;
+   enum try_zink zink;
 };
 
 struct drisw_screen
diff --git a/src/glx/glxclient.h b/src/glx/glxclient.h
index 38980d76ddf..057d4a4b89f 100644
--- a/src/glx/glxclient.h
+++ b/src/glx/glxclient.h
@@ -131,11 +131,17 @@ struct __GLXDRIdrawableRec
    int refcount;
 };
 
+enum try_zink {
+   TRY_ZINK_NO,
+   TRY_ZINK_INFER,
+   TRY_ZINK_YES,
+};
+
 /*
 ** Function to create and DRI display data and initialize the display
 ** dependent methods.
 */
-extern __GLXDRIdisplay *driswCreateDisplay(Display * dpy, bool zink);
+extern __GLXDRIdisplay *driswCreateDisplay(Display * dpy, enum try_zink zink);
 extern __GLXDRIdisplay *dri2CreateDisplay(Display * dpy);
 extern __GLXDRIdisplay *dri3_create_display(Display * dpy);
 extern __GLXDRIdisplay *driwindowsCreateDisplay(Display * dpy);
diff --git a/src/glx/glxext.c b/src/glx/glxext.c
index 05c825a2b07..31e85113abf 100644
--- a/src/glx/glxext.c
+++ b/src/glx/glxext.c
@@ -908,13 +908,16 @@ __glXInitialize(Display * dpy)
 #endif /* HAVE_DRI3 */
       if (!debug_get_bool_option("LIBGL_DRI2_DISABLE", false))
          dpyPriv->dri2Display = dri2CreateDisplay(dpy);
+#if defined(HAVE_ZINK)
       if (!dpyPriv->dri3Display && !dpyPriv->dri2Display)
          try_zink = !debug_get_bool_option("LIBGL_KOPPER_DISABLE", false) &&
                     !getenv("GALLIUM_DRIVER");
+#endif /* HAVE_ZINK */
    }
 #endif /* GLX_USE_DRM */
    if (glx_direct)
-      dpyPriv->driswDisplay = driswCreateDisplay(dpy, zink | try_zink);
+      dpyPriv->driswDisplay = driswCreateDisplay(dpy, zink ? TRY_ZINK_YES :
+                                                             try_zink ? TRY_ZINK_INFER : TRY_ZINK_NO);
 
 #ifdef GLX_USE_WINDOWSGL
    if (glx_direct && glx_accel)
@@ -935,7 +938,7 @@ __glXInitialize(Display * dpy)
       if (try_zink) {
          free(dpyPriv->screens);
          dpyPriv->driswDisplay->destroyDisplay(dpyPriv->driswDisplay);
-         dpyPriv->driswDisplay = driswCreateDisplay(dpy, false);
+         dpyPriv->driswDisplay = driswCreateDisplay(dpy, TRY_ZINK_NO);
          fail = !AllocAndFetchScreenConfigs(dpy, dpyPriv, False);
       }
 #endif
diff --git a/src/intel/blorp/blorp.h b/src/intel/blorp/blorp.h
index a9aa72afef9..da6fb4bf76a 100644
--- a/src/intel/blorp/blorp.h
+++ b/src/intel/blorp/blorp.h
@@ -124,6 +124,17 @@ void blorp_batch_init(struct blorp_context *blorp, struct blorp_batch *batch,
                       void *driver_batch, enum blorp_batch_flags flags);
 void blorp_batch_finish(struct blorp_batch *batch);
 
+static inline isl_surf_usage_flags_t
+blorp_batch_isl_copy_usage(const struct blorp_batch *batch, bool is_dest)
+{
+   if (batch->flags & BLORP_BATCH_USE_COMPUTE)
+      return is_dest ? ISL_SURF_USAGE_STORAGE_BIT : ISL_SURF_USAGE_TEXTURE_BIT;
+   else if (batch->flags & BLORP_BATCH_USE_BLITTER)
+      return is_dest ? ISL_SURF_USAGE_BLITTER_DST_BIT : ISL_SURF_USAGE_BLITTER_SRC_BIT;
+   else
+      return is_dest ? ISL_SURF_USAGE_RENDER_TARGET_BIT : ISL_SURF_USAGE_TEXTURE_BIT;
+}
+
 struct blorp_address {
    void *buffer;
    int64_t offset;
diff --git a/src/intel/blorp/blorp_clear.c b/src/intel/blorp/blorp_clear.c
index 19d3949a4d9..c385baf5c02 100644
--- a/src/intel/blorp/blorp_clear.c
+++ b/src/intel/blorp/blorp_clear.c
@@ -605,15 +605,17 @@ blorp_clear(struct blorp_batch *batch,
    if (batch->blorp->isl_dev->info->ver < 6)
       use_simd16_replicated_data = false;
 
-   /* From the BSpec: 47719 Replicate Data:
+   /* From the BSpec: 47719 (TGL/DG2/MTL) Replicate Data:
     *
     * "Replicate Data Render Target Write message should not be used
     *  on all projects TGL+."
     *
+    * Xe2 spec (57350) does not mention this restriction.
+    *
     *  See 14017879046, 14017880152 for additional information.
     */
    if (batch->blorp->isl_dev->info->ver >= 12 &&
-       format == ISL_FORMAT_R10G10B10_FLOAT_A2_UNORM)
+       batch->blorp->isl_dev->info->ver < 20)
       use_simd16_replicated_data = false;
 
    if (compute)
diff --git a/src/intel/blorp/blorp_genX_exec.h b/src/intel/blorp/blorp_genX_exec.h
index 09c184abcd0..ed72739caf3 100644
--- a/src/intel/blorp/blorp_genX_exec.h
+++ b/src/intel/blorp/blorp_genX_exec.h
@@ -308,6 +308,8 @@ blorp_emit_vertex_data(struct blorp_batch *batch,
    };
 
    void *data = blorp_alloc_vertex_buffer(batch, sizeof(vertices), addr);
+   if (data == NULL)
+      return;
    memcpy(data, vertices, sizeof(vertices));
    *size = sizeof(vertices);
    blorp_flush_range(batch, data, *size);
@@ -329,6 +331,8 @@ blorp_emit_input_varying_data(struct blorp_batch *batch,
 
    const uint32_t *const inputs_src = (const uint32_t *)&params->wm_inputs;
    void *data = blorp_alloc_vertex_buffer(batch, *size, addr);
+   if (data == NULL)
+      return;
    uint32_t *inputs = data;
 
    /* Copy in the VS inputs */
@@ -424,8 +428,10 @@ blorp_emit_vertex_buffers(struct blorp_batch *batch,
    const uint32_t num_vbs = ARRAY_SIZE(vb);
 
    struct blorp_address addrs[2] = {};
-   uint32_t sizes[2];
+   uint32_t sizes[2] = {};
    blorp_emit_vertex_data(batch, params, &addrs[0], &sizes[0]);
+   if (sizes[0] == 0)
+      return;
    blorp_fill_vertex_buffer_state(vb, 0, addrs[0], sizes[0],
                                   3 * sizeof(float));
 
@@ -1147,6 +1153,8 @@ blorp_emit_blend_state(struct blorp_batch *batch,
    int size = GENX(BLEND_STATE_length) * 4;
    size += GENX(BLEND_STATE_ENTRY_length) * 4 * params->num_draw_buffers;
    uint32_t *state = blorp_alloc_dynamic_state(batch, size, 64, &offset);
+   if (state == NULL)
+      return 0;
    uint32_t *pos = state;
 
    GENX(BLEND_STATE_pack)(NULL, pos, &blend);
@@ -2103,6 +2111,11 @@ blorp_get_compute_push_const(struct blorp_batch *batch,
                                 &push_const_offset) :
       blorp_alloc_dynamic_state(batch, push_const_size, 64,
                                 &push_const_offset);
+   if (push_const == NULL) {
+      *state_offset = 0;
+      *state_size = 0;
+      return;
+   }
    memset(push_const, 0x0, push_const_size);
 
    void *dst = push_const;
@@ -2167,6 +2180,7 @@ blorp_exec_compute(struct blorp_batch *batch, const struct blorp_params *params)
    assert(cs_prog_data->push.per_thread.regs == 0);
    blorp_emit(batch, GENX(COMPUTE_WALKER), cw) {
       cw.SIMDSize                       = dispatch.simd_size / 16;
+      cw.MessageSIMD                    = dispatch.simd_size / 16,
       cw.LocalXMaximum                  = cs_prog_data->local_size[0] - 1;
       cw.LocalYMaximum                  = cs_prog_data->local_size[1] - 1;
       cw.LocalZMaximum                  = cs_prog_data->local_size[2] - 1;
@@ -2280,6 +2294,8 @@ blorp_exec_compute(struct blorp_batch *batch, const struct blorp_params *params)
    uint32_t idd_offset;
    uint32_t size = GENX(INTERFACE_DESCRIPTOR_DATA_length) * sizeof(uint32_t);
    void *state = blorp_alloc_dynamic_state(batch, size, 64, &idd_offset);
+   if (state == NULL)
+      return;
    GENX(INTERFACE_DESCRIPTOR_DATA_pack)(NULL, state, &idd);
 
    blorp_emit(batch, GENX(MEDIA_INTERFACE_DESCRIPTOR_LOAD), mid) {
@@ -2538,10 +2554,6 @@ blorp_xy_block_copy_blt(struct blorp_batch *batch,
          blt.SourceClearValueEnable = !!params->src.clear_color_addr.buffer;
          blt.SourceClearAddress = params->src.clear_color_addr;
       }
-
-      /* XeHP needs special MOCS values for the blitter */
-      blt.DestinationMOCS = isl_dev->mocs.blitter_dst;
-      blt.SourceMOCS = isl_dev->mocs.blitter_src;
 #endif
    }
 #endif
@@ -2624,8 +2636,7 @@ blorp_xy_fast_color_blit(struct blorp_batch *batch,
          blt.DestinationClearAddress = params->dst.clear_color_addr;
       }
 
-      /* XeHP needs special MOCS values for the blitter */
-      blt.DestinationMOCS = isl_dev->mocs.blitter_dst;
+      blt.DestinationMOCS = params->dst.addr.mocs;
 #endif
    }
 #endif
diff --git a/src/intel/ci/gitlab-ci-inc.yml b/src/intel/ci/gitlab-ci-inc.yml
index 16a9e19408a..af6a6cdcd38 100644
--- a/src/intel/ci/gitlab-ci-inc.yml
+++ b/src/intel/ci/gitlab-ci-inc.yml
@@ -206,14 +206,23 @@
     GPU_VERSION: iris-glk
     RUNNER_TAG: mesa-ci-x86-64-lava-hp-x360-12b-ca0010nr-n4020-octopus
 
-# Status: https://lava.collabora.dev/scheduler/device_type/asus-cx9400-volteer
-.lava-asus-cx9400-volteer:x86_64:
+# Status: https://lava.collabora.dev/scheduler/device_type/acer-cp514-2h-1130g7-volteer
+.lava-acer-cp514-2h-1130g7-volteer:x86_64:
   variables:
     BOOT_METHOD: depthcharge
-    DEVICE_TYPE: asus-cx9400-volteer
+    DEVICE_TYPE: acer-cp514-2h-1130g7-volteer
     FDO_CI_CONCURRENT: 9
     GPU_VERSION: anv-tgl
-    RUNNER_TAG: mesa-ci-x86-64-lava-asus-cx9400-volteer
+    RUNNER_TAG: mesa-ci-x86-64-lava-acer-cp514-2h-1130g7-volteer
+
+# Status: https://lava.collabora.dev/scheduler/device_type/acer-cp514-2h-1160g7-volteer
+.lava-acer-cp514-2h-1160g7-volteer:x86_64:
+  variables:
+    BOOT_METHOD: depthcharge
+    DEVICE_TYPE: acer-cp514-2h-1160g7-volteer
+    FDO_CI_CONCURRENT: 9
+    GPU_VERSION: anv-tgl
+    RUNNER_TAG: mesa-ci-x86-64-lava-acer-cp514-2h-1160g7-volteer
 
 # Status: https://lava.collabora.dev/scheduler/device_type/asus-C433TA-AJ0005-rammus
 .lava-asus-C433TA-AJ0005-rammus:x86_64:
@@ -278,11 +287,6 @@
     - .intel-rules
 
 ## ANV only
-.anv-tgl-test:
-  extends:
-    - .anv-test
-    - .lava-asus-cx9400-volteer:x86_64
-
 .anv-angle-test:
   extends:
     - .anv-test
@@ -387,7 +391,7 @@
 ## Intel (anv + iris)
 .intel-tgl-test:
   extends:
-    - .anv-tgl-test
+    - .anv-test
     - .intel-test
   variables:
     GPU_VERSION: intel-tgl
diff --git a/src/intel/ci/gitlab-ci.yml b/src/intel/ci/gitlab-ci.yml
index 57e40992ff6..59372415f3d 100644
--- a/src/intel/ci/gitlab-ci.yml
+++ b/src/intel/ci/gitlab-ci.yml
@@ -24,12 +24,13 @@ anv-jsl:
 
 anv-tgl:
   extends:
-    - .anv-tgl-test
+    - .lava-acer-cp514-2h-1160g7-volteer:x86_64
+    - .anv-test
   variables:
     DEQP_SUITE: anv-tgl
     DEQP_FRACTION: 5 # temporarily drop network load
     VK_DRIVER: intel
-  parallel: 6 # 15 - 3 zink - 3 post-merge perf + headroom
+  parallel: 5  # 5 - 5 # -1 for zink, but it's disabled now
 
 anv-tgl-full:
   extends:
@@ -80,7 +81,8 @@ anv-jsl-angle-full:
 
 anv-tgl-angle:
   extends:
-    - .anv-tgl-test
+    - .lava-acer-cp514-2h-1130g7-volteer:x86_64
+    - .anv-test
     - .anv-angle-test
   variables:
     DEQP_SUITE: anv-tgl-angle
@@ -242,6 +244,7 @@ iris-kbl-traces-performance:
 
 intel-tgl-skqp:
   extends:
+    - .lava-acer-cp514-2h-1130g7-volteer:x86_64
     - .intel-tgl-test
   variables:
     DEQP_SUITE: intel-tgl-skqp
diff --git a/src/intel/compiler/brw_compiler.h b/src/intel/compiler/brw_compiler.h
index 55deba7e2f8..b4a3d927ef1 100644
--- a/src/intel/compiler/brw_compiler.h
+++ b/src/intel/compiler/brw_compiler.h
@@ -1290,8 +1290,34 @@ wm_prog_data_barycentric_modes(const struct brw_wm_prog_data *prog_data,
        *    "MSDISPMODE_PERSAMPLE is required in order to select Perspective
        *     Sample or Non-perspective Sample barycentric coordinates."
        */
-      modes &= ~(BITFIELD_BIT(BRW_BARYCENTRIC_PERSPECTIVE_SAMPLE) |
-                 BITFIELD_BIT(BRW_BARYCENTRIC_NONPERSPECTIVE_SAMPLE));
+      uint32_t sample_bits = (BITFIELD_BIT(BRW_BARYCENTRIC_PERSPECTIVE_SAMPLE) |
+                              BITFIELD_BIT(BRW_BARYCENTRIC_NONPERSPECTIVE_SAMPLE));
+      uint32_t requested_sample = modes & sample_bits;
+      modes &= ~sample_bits;
+      /*
+       * If the shader requested some sample modes and we have to disable
+       * them, make sure we add back the pixel variant back to not mess up the
+       * thread payload.
+       *
+       * Why does this works out? Because of the ordering in the thread payload :
+       *
+       *   R7:10  Perspective Centroid Barycentric
+       *   R11:14 Perspective Sample Barycentric
+       *   R15:18 Linear Pixel Location Barycentric
+       *
+       * In the backend when persample dispatch is dynamic, we always select
+       * the sample barycentric and turn off the pixel location (even if
+       * requested through intrinsics). That way when we dynamically select
+       * pixel or sample dispatch, the barycentric always match, since the
+       * pixel location barycentric register offset will align with the sample
+       * barycentric.
+       */
+      if (requested_sample) {
+         if (requested_sample & BITFIELD_BIT(BRW_BARYCENTRIC_PERSPECTIVE_SAMPLE))
+            modes |= BITFIELD_BIT(BRW_BARYCENTRIC_PERSPECTIVE_PIXEL);
+         if (requested_sample & BITFIELD_BIT(BRW_BARYCENTRIC_NONPERSPECTIVE_SAMPLE))
+            modes |= BITFIELD_BIT(BRW_BARYCENTRIC_NONPERSPECTIVE_PIXEL);
+      }
    }
 
    return modes;
diff --git a/src/intel/compiler/brw_disasm.c b/src/intel/compiler/brw_disasm.c
index 3ef20f24675..c06f35d0827 100644
--- a/src/intel/compiler/brw_disasm.c
+++ b/src/intel/compiler/brw_disasm.c
@@ -1560,7 +1560,10 @@ src0_dpas_3src(FILE *file, const struct intel_device_info *devinfo,
 
    if (subreg_nr)
       format(file, ".%d", subreg_nr);
-   src_align1_region(file, 1, 1, 0);
+   src_align1_region(file,
+                     BRW_VERTICAL_STRIDE_1,
+                     BRW_WIDTH_1,
+                     BRW_ALIGN1_3SRC_SRC_HORIZONTAL_STRIDE_0);
 
    string(file, brw_reg_type_to_letters(type));
 
@@ -1581,7 +1584,10 @@ src1_dpas_3src(FILE *file, const struct intel_device_info *devinfo,
 
    if (subreg_nr)
       format(file, ".%d", subreg_nr);
-   src_align1_region(file, 1, 1, 0);
+   src_align1_region(file,
+                     BRW_VERTICAL_STRIDE_1,
+                     BRW_WIDTH_1,
+                     BRW_ALIGN1_3SRC_SRC_HORIZONTAL_STRIDE_0);
 
    string(file, brw_reg_type_to_letters(type));
 
@@ -1602,7 +1608,10 @@ src2_dpas_3src(FILE *file, const struct intel_device_info *devinfo,
 
    if (subreg_nr)
       format(file, ".%d", subreg_nr);
-   src_align1_region(file, 1, 1, 0);
+   src_align1_region(file,
+                     BRW_VERTICAL_STRIDE_1,
+                     BRW_WIDTH_1,
+                     BRW_ALIGN1_3SRC_SRC_HORIZONTAL_STRIDE_0);
 
    string(file, brw_reg_type_to_letters(type));
 
diff --git a/src/intel/compiler/brw_eu_defines.h b/src/intel/compiler/brw_eu_defines.h
index 820ac0f4ef5..1a1ca11202d 100644
--- a/src/intel/compiler/brw_eu_defines.h
+++ b/src/intel/compiler/brw_eu_defines.h
@@ -779,6 +779,7 @@ enum opcode {
    SHADER_OPCODE_BTD_SPAWN_LOGICAL,
    SHADER_OPCODE_BTD_RETIRE_LOGICAL,
 
+   SHADER_OPCODE_READ_MASK_REG,
    SHADER_OPCODE_READ_SR_REG,
 
    RT_OPCODE_TRACE_RAY_LOGICAL,
diff --git a/src/intel/compiler/brw_eu_emit.c b/src/intel/compiler/brw_eu_emit.c
index 9d312a6400f..409066da630 100644
--- a/src/intel/compiler/brw_eu_emit.c
+++ b/src/intel/compiler/brw_eu_emit.c
@@ -121,7 +121,7 @@ brw_set_dest(struct brw_codegen *p, brw_inst *inst, struct brw_reg dest)
               dest.vstride == dest.width + 1));
       assert(!dest.negate && !dest.abs);
       brw_inst_set_dst_reg_file(devinfo, inst, dest.file);
-      brw_inst_set_dst_da_reg_nr(devinfo, inst, dest.nr);
+      brw_inst_set_dst_da_reg_nr(devinfo, inst, phys_nr(devinfo, dest));
 
    } else if (brw_inst_opcode(p->isa, inst) == BRW_OPCODE_SENDS ||
               brw_inst_opcode(p->isa, inst) == BRW_OPCODE_SENDSC) {
@@ -141,10 +141,10 @@ brw_set_dest(struct brw_codegen *p, brw_inst *inst, struct brw_reg dest)
       brw_inst_set_dst_address_mode(devinfo, inst, dest.address_mode);
 
       if (dest.address_mode == BRW_ADDRESS_DIRECT) {
-         brw_inst_set_dst_da_reg_nr(devinfo, inst, dest.nr);
+         brw_inst_set_dst_da_reg_nr(devinfo, inst, phys_nr(devinfo, dest));
 
          if (brw_inst_access_mode(devinfo, inst) == BRW_ALIGN_1) {
-            brw_inst_set_dst_da1_subreg_nr(devinfo, inst, dest.subnr);
+            brw_inst_set_dst_da1_subreg_nr(devinfo, inst, phys_subnr(devinfo, dest));
             if (dest.hstride == BRW_HORIZONTAL_STRIDE_0)
                dest.hstride = BRW_HORIZONTAL_STRIDE_1;
             brw_inst_set_dst_hstride(devinfo, inst, dest.hstride);
@@ -162,7 +162,7 @@ brw_set_dest(struct brw_codegen *p, brw_inst *inst, struct brw_reg dest)
             brw_inst_set_dst_hstride(devinfo, inst, 1);
          }
       } else {
-         brw_inst_set_dst_ia_subreg_nr(devinfo, inst, dest.subnr);
+         brw_inst_set_dst_ia_subreg_nr(devinfo, inst, phys_subnr(devinfo, dest));
 
          /* These are different sizes in align1 vs align16:
           */
@@ -242,7 +242,7 @@ brw_set_src0(struct brw_codegen *p, brw_inst *inst, struct brw_reg reg)
               reg.vstride == reg.width + 1));
       assert(!reg.negate && !reg.abs);
       brw_inst_set_send_src0_reg_file(devinfo, inst, reg.file);
-      brw_inst_set_src0_da_reg_nr(devinfo, inst, reg.nr);
+      brw_inst_set_src0_da_reg_nr(devinfo, inst, phys_nr(devinfo, reg));
 
    } else if (brw_inst_opcode(p->isa, inst) == BRW_OPCODE_SENDS ||
               brw_inst_opcode(p->isa, inst) == BRW_OPCODE_SENDSC) {
@@ -279,14 +279,14 @@ brw_set_src0(struct brw_codegen *p, brw_inst *inst, struct brw_reg reg)
          }
       } else {
          if (reg.address_mode == BRW_ADDRESS_DIRECT) {
-            brw_inst_set_src0_da_reg_nr(devinfo, inst, reg.nr);
+            brw_inst_set_src0_da_reg_nr(devinfo, inst, phys_nr(devinfo, reg));
             if (brw_inst_access_mode(devinfo, inst) == BRW_ALIGN_1) {
-                brw_inst_set_src0_da1_subreg_nr(devinfo, inst, reg.subnr);
+               brw_inst_set_src0_da1_subreg_nr(devinfo, inst, phys_subnr(devinfo, reg));
             } else {
                brw_inst_set_src0_da16_subreg_nr(devinfo, inst, reg.subnr / 16);
             }
          } else {
-            brw_inst_set_src0_ia_subreg_nr(devinfo, inst, reg.subnr);
+            brw_inst_set_src0_ia_subreg_nr(devinfo, inst, phys_subnr(devinfo, reg));
 
             if (brw_inst_access_mode(devinfo, inst) == BRW_ALIGN_1) {
                brw_inst_set_src0_ia1_addr_imm(devinfo, inst, reg.indirect_offset);
@@ -362,7 +362,7 @@ brw_set_src1(struct brw_codegen *p, brw_inst *inst, struct brw_reg reg)
              (reg.hstride == BRW_HORIZONTAL_STRIDE_1 &&
               reg.vstride == reg.width + 1));
       assert(!reg.negate && !reg.abs);
-      brw_inst_set_send_src1_reg_nr(devinfo, inst, reg.nr);
+      brw_inst_set_send_src1_reg_nr(devinfo, inst, phys_nr(devinfo, reg));
       brw_inst_set_send_src1_reg_file(devinfo, inst, reg.file);
    } else {
       /* From the IVB PRM Vol. 4, Pt. 3, Section 3.3.3.5:
@@ -395,9 +395,9 @@ brw_set_src1(struct brw_codegen *p, brw_inst *inst, struct brw_reg reg)
          assert (reg.address_mode == BRW_ADDRESS_DIRECT);
          /* assert (reg.file == BRW_GENERAL_REGISTER_FILE); */
 
-         brw_inst_set_src1_da_reg_nr(devinfo, inst, reg.nr);
+         brw_inst_set_src1_da_reg_nr(devinfo, inst, phys_nr(devinfo, reg));
          if (brw_inst_access_mode(devinfo, inst) == BRW_ALIGN_1) {
-            brw_inst_set_src1_da1_subreg_nr(devinfo, inst, reg.subnr);
+            brw_inst_set_src1_da1_subreg_nr(devinfo, inst, phys_subnr(devinfo, reg));
          } else {
             brw_inst_set_src1_da16_subreg_nr(devinfo, inst, reg.subnr / 16);
          }
@@ -832,7 +832,7 @@ brw_alu3(struct brw_codegen *p, unsigned opcode, struct brw_reg dest,
 
       if (devinfo->ver >= 12) {
          brw_inst_set_3src_a1_dst_reg_file(devinfo, inst, dest.file);
-         brw_inst_set_3src_dst_reg_nr(devinfo, inst, dest.nr);
+         brw_inst_set_3src_dst_reg_nr(devinfo, inst, phys_nr(devinfo, dest));
       } else {
          if (dest.file == BRW_ARCHITECTURE_REGISTER_FILE) {
             brw_inst_set_3src_a1_dst_reg_file(devinfo, inst,
@@ -844,7 +844,7 @@ brw_alu3(struct brw_codegen *p, unsigned opcode, struct brw_reg dest,
             brw_inst_set_3src_dst_reg_nr(devinfo, inst, dest.nr);
          }
       }
-      brw_inst_set_3src_a1_dst_subreg_nr(devinfo, inst, dest.subnr / 8);
+      brw_inst_set_3src_a1_dst_subreg_nr(devinfo, inst, phys_subnr(devinfo, dest) / 8);
 
       brw_inst_set_3src_a1_dst_hstride(devinfo, inst, BRW_ALIGN1_3SRC_DST_HORIZONTAL_STRIDE_1);
 
@@ -868,11 +868,11 @@ brw_alu3(struct brw_codegen *p, unsigned opcode, struct brw_reg dest,
             devinfo, inst, to_3src_align1_vstride(devinfo, src0.vstride));
          brw_inst_set_3src_a1_src0_hstride(devinfo, inst,
                                            to_3src_align1_hstride(src0.hstride));
-         brw_inst_set_3src_a1_src0_subreg_nr(devinfo, inst, src0.subnr);
+         brw_inst_set_3src_a1_src0_subreg_nr(devinfo, inst, phys_subnr(devinfo, src0));
          if (src0.type == BRW_REGISTER_TYPE_NF) {
             brw_inst_set_3src_src0_reg_nr(devinfo, inst, BRW_ARF_ACCUMULATOR);
          } else {
-            brw_inst_set_3src_src0_reg_nr(devinfo, inst, src0.nr);
+            brw_inst_set_3src_src0_reg_nr(devinfo, inst, phys_nr(devinfo, src0));
          }
          brw_inst_set_3src_src0_abs(devinfo, inst, src0.abs);
          brw_inst_set_3src_src0_negate(devinfo, inst, src0.negate);
@@ -882,11 +882,11 @@ brw_alu3(struct brw_codegen *p, unsigned opcode, struct brw_reg dest,
       brw_inst_set_3src_a1_src1_hstride(devinfo, inst,
                                         to_3src_align1_hstride(src1.hstride));
 
-      brw_inst_set_3src_a1_src1_subreg_nr(devinfo, inst, src1.subnr);
+      brw_inst_set_3src_a1_src1_subreg_nr(devinfo, inst, phys_subnr(devinfo, src1));
       if (src1.file == BRW_ARCHITECTURE_REGISTER_FILE) {
          brw_inst_set_3src_src1_reg_nr(devinfo, inst, BRW_ARF_ACCUMULATOR);
       } else {
-         brw_inst_set_3src_src1_reg_nr(devinfo, inst, src1.nr);
+         brw_inst_set_3src_src1_reg_nr(devinfo, inst, phys_nr(devinfo, src1));
       }
       brw_inst_set_3src_src1_abs(devinfo, inst, src1.abs);
       brw_inst_set_3src_src1_negate(devinfo, inst, src1.negate);
@@ -897,8 +897,8 @@ brw_alu3(struct brw_codegen *p, unsigned opcode, struct brw_reg dest,
          brw_inst_set_3src_a1_src2_hstride(devinfo, inst,
                                            to_3src_align1_hstride(src2.hstride));
          /* no vstride on src2 */
-         brw_inst_set_3src_a1_src2_subreg_nr(devinfo, inst, src2.subnr);
-         brw_inst_set_3src_src2_reg_nr(devinfo, inst, src2.nr);
+         brw_inst_set_3src_a1_src2_subreg_nr(devinfo, inst, phys_subnr(devinfo, src2));
+         brw_inst_set_3src_src2_reg_nr(devinfo, inst, phys_nr(devinfo, src2));
          brw_inst_set_3src_src2_abs(devinfo, inst, src2.abs);
          brw_inst_set_3src_src2_negate(devinfo, inst, src2.negate);
       }
@@ -2923,7 +2923,7 @@ brw_send_indirect_split_message(struct brw_codegen *p,
       assert(ex_desc.nr == BRW_ARF_ADDRESS);
       assert((ex_desc.subnr & 0x3) == 0);
       brw_inst_set_send_sel_reg32_ex_desc(devinfo, send, 1);
-      brw_inst_set_send_ex_desc_ia_subreg_nr(devinfo, send, ex_desc.subnr >> 2);
+      brw_inst_set_send_ex_desc_ia_subreg_nr(devinfo, send, phys_subnr(devinfo, ex_desc) >> 2);
    }
 
    if (ex_bso) {
diff --git a/src/intel/compiler/brw_fs.cpp b/src/intel/compiler/brw_fs.cpp
index cdf4db7a67f..75339fb07fd 100644
--- a/src/intel/compiler/brw_fs.cpp
+++ b/src/intel/compiler/brw_fs.cpp
@@ -1195,7 +1195,8 @@ fs_visitor::import_uniforms(fs_visitor *v)
 }
 
 enum brw_barycentric_mode
-brw_barycentric_mode(nir_intrinsic_instr *intr)
+brw_barycentric_mode(const struct brw_wm_prog_key *key,
+                     nir_intrinsic_instr *intr)
 {
    const glsl_interp_mode mode =
       (enum glsl_interp_mode) nir_intrinsic_interp_mode(intr);
@@ -1207,7 +1208,13 @@ brw_barycentric_mode(nir_intrinsic_instr *intr)
    switch (intr->intrinsic) {
    case nir_intrinsic_load_barycentric_pixel:
    case nir_intrinsic_load_barycentric_at_offset:
-      bary = BRW_BARYCENTRIC_PERSPECTIVE_PIXEL;
+      /* When per sample interpolation is dynamic, assume sample
+       * interpolation. We'll dynamically remap things so that the FS thread
+       * payload is not affected.
+       */
+      bary = key->persample_interp == BRW_SOMETIMES ?
+             BRW_BARYCENTRIC_PERSPECTIVE_SAMPLE :
+             BRW_BARYCENTRIC_PERSPECTIVE_PIXEL;
       break;
    case nir_intrinsic_load_barycentric_centroid:
       bary = BRW_BARYCENTRIC_PERSPECTIVE_CENTROID;
@@ -3049,11 +3056,10 @@ fs_visitor::opt_split_sends()
 
    foreach_block_and_inst(block, fs_inst, send, cfg) {
       if (send->opcode != SHADER_OPCODE_SEND ||
-          send->mlen <= reg_unit(devinfo) || send->ex_mlen > 0)
+          send->mlen <= reg_unit(devinfo) || send->ex_mlen > 0 ||
+          send->src[2].file != VGRF)
          continue;
 
-      assert(send->src[2].file == VGRF);
-
       /* Currently don't split sends that reuse a previously used payload. */
       fs_inst *lp = (fs_inst *) send->prev;
 
@@ -4473,7 +4479,8 @@ fs_visitor::lower_sub_sat()
           */
          if (inst->exec_size == 8 && inst->src[0].type != BRW_REGISTER_TYPE_Q &&
              inst->src[0].type != BRW_REGISTER_TYPE_UQ) {
-            fs_reg acc(ARF, BRW_ARF_ACCUMULATOR, inst->src[1].type);
+            fs_reg acc = retype(brw_acc_reg(inst->exec_size),
+                                inst->src[1].type);
 
             ibld.MOV(acc, inst->src[1]);
             fs_inst *add = ibld.ADD(inst->dst, acc, inst->src[0]);
@@ -5473,7 +5480,8 @@ fs_visitor::lower_simd_width()
           */
          const unsigned max_width = MAX2(inst->exec_size, lower_width);
 
-         const fs_builder bld = fs_builder(this).at_end();
+         const fs_builder bld =
+            fs_builder(this, MAX2(max_width, this->dispatch_width)).at_end();
          const fs_builder ibld = bld.at(block, inst)
                                     .exec_all(inst->force_writemask_all)
                                     .group(max_width, inst->group / max_width);
@@ -5744,7 +5752,6 @@ fs_visitor::lower_find_live_channel()
        * instruction has execution masking disabled, so it's kind of
        * useless there.
        */
-      fs_reg exec_mask(retype(brw_mask_reg(0), BRW_REGISTER_TYPE_UD));
 
       const fs_builder ibld(this, block, inst);
       if (!inst->is_partial_write())
@@ -5752,6 +5759,10 @@ fs_visitor::lower_find_live_channel()
 
       const fs_builder ubld = fs_builder(this, block, inst).exec_all().group(1, 0);
 
+      fs_reg exec_mask = ubld.vgrf(BRW_REGISTER_TYPE_UD);
+      ubld.UNDEF(exec_mask);
+      ubld.emit(SHADER_OPCODE_READ_MASK_REG, exec_mask, brw_imm_ud(0));
+
       /* ce0 doesn't consider the thread dispatch mask (DMask or VMask),
        * so combine the execution and dispatch masks to obtain the true mask.
        *
@@ -7100,6 +7111,9 @@ fs_visitor::run_fs(bool allow_spilling, bool do_rep_send)
    payload_ = new fs_thread_payload(*this, source_depth_to_render_target,
                                     runtime_check_aads_emit);
 
+   if (nir->info.ray_queries > 0)
+      limit_dispatch_width(16, "SIMD32 not supported with ray queries.\n");
+
    if (do_rep_send) {
       assert(dispatch_width == 16);
       emit_repclear_shader();
@@ -7336,6 +7350,7 @@ is_used_in_not_interp_frag_coord(nir_def *def)
  */
 static unsigned
 brw_compute_barycentric_interp_modes(const struct intel_device_info *devinfo,
+                                     const struct brw_wm_prog_key *key,
                                      const nir_shader *shader)
 {
    unsigned barycentric_interp_modes = 0;
@@ -7364,7 +7379,7 @@ brw_compute_barycentric_interp_modes(const struct intel_device_info *devinfo,
 
             nir_intrinsic_op bary_op = intrin->intrinsic;
             enum brw_barycentric_mode bary =
-               brw_barycentric_mode(intrin);
+               brw_barycentric_mode(key, intrin);
 
             barycentric_interp_modes |= 1 << bary;
 
@@ -7573,7 +7588,7 @@ brw_nir_populate_wm_prog_data(nir_shader *shader,
    prog_data->inner_coverage = shader->info.fs.inner_coverage;
 
    prog_data->barycentric_interp_modes =
-      brw_compute_barycentric_interp_modes(devinfo, shader);
+      brw_compute_barycentric_interp_modes(devinfo, key, shader);
 
    /* From the BDW PRM documentation for 3DSTATE_WM:
     *
@@ -7767,9 +7782,6 @@ brw_compile_fs(const struct brw_compiler *compiler,
                                " pixel shading.\n");
    }
 
-   if (nir->info.ray_queries > 0 && v8)
-      v8->limit_dispatch_width(16, "SIMD32 with ray queries.\n");
-
    if (!has_spilled &&
        (!v8 || v8->max_dispatch_width >= 16) &&
        (INTEL_SIMD(FS, 16) || params->use_rep_send)) {
diff --git a/src/intel/compiler/brw_fs.h b/src/intel/compiler/brw_fs.h
index a57274250b9..8ca8b18e5a5 100644
--- a/src/intel/compiler/brw_fs.h
+++ b/src/intel/compiler/brw_fs.h
@@ -611,7 +611,8 @@ fs_reg setup_imm_b(const brw::fs_builder &bld,
 fs_reg setup_imm_ub(const brw::fs_builder &bld,
                    uint8_t v);
 
-enum brw_barycentric_mode brw_barycentric_mode(nir_intrinsic_instr *intr);
+enum brw_barycentric_mode brw_barycentric_mode(const struct brw_wm_prog_key *key,
+                                               nir_intrinsic_instr *intr);
 
 uint32_t brw_fb_write_msg_control(const fs_inst *inst,
                                   const struct brw_wm_prog_data *prog_data);
diff --git a/src/intel/compiler/brw_fs_cse.cpp b/src/intel/compiler/brw_fs_cse.cpp
index 8fa1d281b06..a84564b3f6c 100644
--- a/src/intel/compiler/brw_fs_cse.cpp
+++ b/src/intel/compiler/brw_fs_cse.cpp
@@ -89,6 +89,7 @@ is_expression(const fs_visitor *v, const fs_inst *const inst)
    case FS_OPCODE_TXB_LOGICAL:
    case SHADER_OPCODE_TXF_CMS_LOGICAL:
    case SHADER_OPCODE_TXF_CMS_W_LOGICAL:
+   case SHADER_OPCODE_TXF_CMS_W_GFX12_LOGICAL:
    case SHADER_OPCODE_TXF_UMS_LOGICAL:
    case SHADER_OPCODE_TXF_MCS_LOGICAL:
    case SHADER_OPCODE_LOD_LOGICAL:
diff --git a/src/intel/compiler/brw_fs_generator.cpp b/src/intel/compiler/brw_fs_generator.cpp
index c6a315a4486..9f193728fbf 100644
--- a/src/intel/compiler/brw_fs_generator.cpp
+++ b/src/intel/compiler/brw_fs_generator.cpp
@@ -485,7 +485,7 @@ fs_generator::generate_mov_indirect(fs_inst *inst,
 
       reg.nr = imm_byte_offset / REG_SIZE;
       reg.subnr = imm_byte_offset % REG_SIZE;
-      if (type_sz(reg.type) > 4 && !devinfo->has_64bit_float) {
+      if (type_sz(reg.type) > 4 && !devinfo->has_64bit_int) {
          brw_MOV(p, subscript(dst, BRW_REGISTER_TYPE_D, 0),
                     subscript(reg, BRW_REGISTER_TYPE_D, 0));
          brw_set_default_swsb(p, tgl_swsb_null());
@@ -567,7 +567,7 @@ fs_generator::generate_mov_indirect(fs_inst *inst,
       if (type_sz(reg.type) > 4 &&
           ((devinfo->verx10 == 70) ||
            devinfo->platform == INTEL_PLATFORM_CHV || intel_device_info_is_9lp(devinfo) ||
-           !devinfo->has_64bit_float || devinfo->verx10 >= 125)) {
+           !devinfo->has_64bit_int)) {
          /* IVB has an issue (which we found empirically) where it reads two
           * address register components per channel for indirectly addressed
           * 64-bit sources.
@@ -2324,6 +2324,26 @@ fs_generator::generate_code(const cfg_t *cfg, int dispatch_width,
          brw_float_controls_mode(p, src[0].d, src[1].d);
          break;
 
+      case SHADER_OPCODE_READ_MASK_REG:
+         if (devinfo->ver >= 12) {
+            /* There is a SWSB restriction that requires that any time sr0 is
+             * accessed both the instruction doing the access and the next one
+             * have SWSB set to RegDist(1).
+             */
+            if (brw_get_default_swsb(p).mode != TGL_SBID_NULL)
+               brw_SYNC(p, TGL_SYNC_NOP);
+            assert(src[0].file == BRW_IMMEDIATE_VALUE);
+            brw_set_default_swsb(p, tgl_swsb_regdist(1));
+            brw_MOV(p, dst, retype(brw_mask_reg(src[0].ud),
+                                   BRW_REGISTER_TYPE_UD));
+            brw_set_default_swsb(p, tgl_swsb_regdist(1));
+            brw_AND(p, dst, dst, brw_imm_ud(0xffffffff));
+         } else {
+            brw_MOV(p, dst, retype(brw_mask_reg(src[0].ud),
+                                   BRW_REGISTER_TYPE_UD));
+         }
+         break;
+
       case SHADER_OPCODE_READ_SR_REG:
          if (devinfo->ver >= 12) {
             /* There is a SWSB restriction that requires that any time sr0 is
diff --git a/src/intel/compiler/brw_fs_lower_regioning.cpp b/src/intel/compiler/brw_fs_lower_regioning.cpp
index 3bff7770cd0..873e255f0a3 100644
--- a/src/intel/compiler/brw_fs_lower_regioning.cpp
+++ b/src/intel/compiler/brw_fs_lower_regioning.cpp
@@ -190,18 +190,6 @@ namespace {
          else
             return brw_int_type(type_sz(t), false);
 
-      case SHADER_OPCODE_BROADCAST:
-      case SHADER_OPCODE_MOV_INDIRECT:
-         if (((devinfo->verx10 == 70 ||
-               devinfo->platform == INTEL_PLATFORM_CHV ||
-               intel_device_info_is_9lp(devinfo) ||
-               devinfo->verx10 >= 125) && type_sz(inst->src[0].type) > 4) ||
-             (devinfo->verx10 >= 125 &&
-              brw_reg_type_is_floating_point(inst->src[0].type)))
-            return brw_int_type(type_sz(t), false);
-         else
-            return t;
-
       default:
          return t;
       }
@@ -572,6 +560,12 @@ namespace {
          ibld.at(block, inst->next).MOV(subscript(inst->dst, raw_type, j),
                                         subscript(tmp, raw_type, j));
 
+      /* If the destination was an accumulator, after lowering it will be a
+       * GRF. Clear writes_accumulator for the instruction.
+       */
+      if (inst->dst.is_accumulator())
+         inst->writes_accumulator = false;
+
       /* Point the original instruction at the temporary, making sure to keep
        * any destination modifiers in the instruction.
        */
diff --git a/src/intel/compiler/brw_fs_nir.cpp b/src/intel/compiler/brw_fs_nir.cpp
index ccdd0fe7db8..0e5f6bba4b8 100644
--- a/src/intel/compiler/brw_fs_nir.cpp
+++ b/src/intel/compiler/brw_fs_nir.cpp
@@ -500,6 +500,9 @@ optimize_extract_to_float(nir_to_brw_state &ntb, nir_alu_instr *instr,
    const intel_device_info *devinfo = ntb.devinfo;
    const fs_builder &bld = ntb.bld;
 
+   /* No fast path for f16 (yet) or f64. */
+   assert(instr->op == nir_op_i2f32 || instr->op == nir_op_u2f32);
+
    if (!instr->src[0].src.ssa->parent_instr)
       return false;
 
@@ -509,16 +512,46 @@ optimize_extract_to_float(nir_to_brw_state &ntb, nir_alu_instr *instr,
    nir_alu_instr *src0 =
       nir_instr_as_alu(instr->src[0].src.ssa->parent_instr);
 
-   if (src0->op != nir_op_extract_u8 && src0->op != nir_op_extract_u16 &&
-       src0->op != nir_op_extract_i8 && src0->op != nir_op_extract_i16)
+   unsigned bytes;
+   bool is_signed;
+
+   switch (src0->op) {
+   case nir_op_extract_u8:
+   case nir_op_extract_u16:
+      bytes = src0->op == nir_op_extract_u8 ? 1 : 2;
+
+      /* i2f(extract_u8(a, b)) and u2f(extract_u8(a, b)) produce the same
+       * result. Ditto for extract_u16.
+       */
+      is_signed = false;
+      break;
+
+   case nir_op_extract_i8:
+   case nir_op_extract_i16:
+      bytes = src0->op == nir_op_extract_i8 ? 1 : 2;
+
+      /* The fast path can't handle u2f(extract_i8(a, b)) because the implicit
+       * sign extension of the extract_i8 is lost. For example,
+       * u2f(extract_i8(0x0000ff00, 1)) should produce 4294967295.0, but a
+       * fast path could either give 255.0 (by implementing the fast path as
+       * u2f(extract_u8(x))) or -1.0 (by implementing the fast path as
+       * i2f(extract_i8(x))). At one point in time, we incorrectly implemented
+       * the former.
+       */
+      if (instr->op != nir_op_i2f32)
+         return false;
+
+      is_signed = true;
+      break;
+
+   default:
       return false;
+   }
 
    unsigned element = nir_src_as_uint(src0->src[1].src);
 
    /* Element type to extract.*/
-   const brw_reg_type type = brw_int_type(
-      src0->op == nir_op_extract_u16 || src0->op == nir_op_extract_i16 ? 2 : 1,
-      src0->op == nir_op_extract_i16 || src0->op == nir_op_extract_i8);
+   const brw_reg_type type = brw_int_type(bytes, is_signed);
 
    fs_reg op0 = get_nir_src(ntb, src0->src[0].src);
    op0.type = brw_type_for_nir_type(devinfo,
@@ -4289,7 +4322,8 @@ fs_nir_emit_fs_intrinsic(nir_to_brw_state &ntb,
    case nir_intrinsic_load_barycentric_centroid:
    case nir_intrinsic_load_barycentric_sample: {
       /* Use the delta_xy values computed from the payload */
-      enum brw_barycentric_mode bary = brw_barycentric_mode(instr);
+      enum brw_barycentric_mode bary = brw_barycentric_mode(
+         reinterpret_cast<const brw_wm_prog_key *>(s.key), instr);
       const fs_reg srcs[] = { offset(s.delta_xy[bary], bld, 0),
                               offset(s.delta_xy[bary], bld, 1) };
       bld.LOAD_PAYLOAD(dest, srcs, ARRAY_SIZE(srcs), 0);
@@ -4384,7 +4418,8 @@ fs_nir_emit_fs_intrinsic(nir_to_brw_state &ntb,
          dst_xy = retype(get_nir_src(ntb, instr->src[0]), BRW_REGISTER_TYPE_F);
       } else {
          /* Use the delta_xy values computed from the payload */
-         enum brw_barycentric_mode bary = brw_barycentric_mode(bary_intrinsic);
+         enum brw_barycentric_mode bary = brw_barycentric_mode(
+            reinterpret_cast<const brw_wm_prog_key *>(s.key), bary_intrinsic);
          dst_xy = s.delta_xy[bary];
       }
 
@@ -4608,7 +4643,7 @@ fs_nir_emit_cs_intrinsic(nir_to_brw_state &ntb,
          brw_type_for_nir_type(devinfo, nir_intrinsic_src_type(instr));
 
       dest = retype(dest, dest_type);
-      fs_reg src2 = retype(get_nir_src(ntb, instr->src[2]), dest_type);
+      fs_reg src0 = retype(get_nir_src(ntb, instr->src[0]), dest_type);
       const fs_reg dest_hf = dest;
 
       fs_builder bld8 = bld.exec_all().group(8, 0);
@@ -4624,24 +4659,24 @@ fs_nir_emit_cs_intrinsic(nir_to_brw_state &ntb,
           !s.compiler->lower_dpas) {
          dest = bld8.vgrf(BRW_REGISTER_TYPE_F, rcount);
 
-         if (src2.file != ARF) {
-            const fs_reg src2_hf = src2;
+         if (src0.file != ARF) {
+            const fs_reg src0_hf = src0;
 
-            src2 = bld8.vgrf(BRW_REGISTER_TYPE_F, rcount);
+            src0 = bld8.vgrf(BRW_REGISTER_TYPE_F, rcount);
 
             for (unsigned i = 0; i < 4; i++) {
-               bld16.MOV(byte_offset(src2, REG_SIZE * i * 2),
-                         byte_offset(src2_hf, REG_SIZE * i));
+               bld16.MOV(byte_offset(src0, REG_SIZE * i * 2),
+                         byte_offset(src0_hf, REG_SIZE * i));
             }
          } else {
-            src2 = retype(src2, BRW_REGISTER_TYPE_F);
+            src0 = retype(src0, BRW_REGISTER_TYPE_F);
          }
       }
 
       bld8.DPAS(dest,
-                src2,
+                src0,
+                retype(get_nir_src(ntb, instr->src[2]), src_type),
                 retype(get_nir_src(ntb, instr->src[1]), src_type),
-                retype(get_nir_src(ntb, instr->src[0]), src_type),
                 sdepth,
                 rcount)
          ->saturate = nir_intrinsic_saturate(instr);
diff --git a/src/intel/compiler/brw_fs_validate.cpp b/src/intel/compiler/brw_fs_validate.cpp
index 499bc8181c3..7ef2be70146 100644
--- a/src/intel/compiler/brw_fs_validate.cpp
+++ b/src/intel/compiler/brw_fs_validate.cpp
@@ -191,8 +191,8 @@ fs_visitor::validate()
        */
       if (intel_needs_workaround(devinfo, 14014617373) &&
           inst->dst.is_accumulator() &&
-          inst->dst.offset == 0) {
-         fsv_assert_eq(inst->dst.stride, 1);
+          phys_subnr(devinfo, inst->dst.as_brw_reg()) == 0) {
+         fsv_assert_eq(inst->dst.hstride, 1);
       }
    }
 }
diff --git a/src/intel/compiler/brw_ir_performance.cpp b/src/intel/compiler/brw_ir_performance.cpp
index 9ab7ef563b0..f14a3cc9716 100644
--- a/src/intel/compiler/brw_ir_performance.cpp
+++ b/src/intel/compiler/brw_ir_performance.cpp
@@ -363,6 +363,7 @@ namespace {
       case TCS_OPCODE_SRC0_010_IS_ZERO:
       case TCS_OPCODE_GET_PRIMITIVE_ID:
       case TES_OPCODE_GET_PRIMITIVE_ID:
+      case SHADER_OPCODE_READ_MASK_REG:
       case SHADER_OPCODE_READ_SR_REG:
          if (devinfo->ver >= 11) {
             return calculate_desc(info, EU_UNIT_FPU, 0, 2, 0, 0, 2,
diff --git a/src/intel/compiler/brw_lower_logical_sends.cpp b/src/intel/compiler/brw_lower_logical_sends.cpp
index 1a784010bf8..472b15387f6 100644
--- a/src/intel/compiler/brw_lower_logical_sends.cpp
+++ b/src/intel/compiler/brw_lower_logical_sends.cpp
@@ -1009,10 +1009,14 @@ lower_sampler_logical_send_gfx7(const fs_builder &bld, fs_inst *inst, opcode op,
       /* Build the actual header */
       const fs_builder ubld = bld.exec_all().group(8 * reg_unit(devinfo), 0);
       const fs_builder ubld1 = ubld.group(1, 0);
-      ubld.MOV(header, retype(brw_vec8_grf(0, 0), BRW_REGISTER_TYPE_UD));
+      if (devinfo->ver >= 11)
+         ubld.MOV(header, brw_imm_ud(0));
+      else
+         ubld.MOV(header, retype(brw_vec8_grf(0, 0), BRW_REGISTER_TYPE_UD));
       if (inst->offset) {
          ubld1.MOV(component(header, 2), brw_imm_ud(inst->offset));
-      } else if (bld.shader->stage != MESA_SHADER_VERTEX &&
+      } else if (devinfo->ver < 11 &&
+                 bld.shader->stage != MESA_SHADER_VERTEX &&
                  bld.shader->stage != MESA_SHADER_FRAGMENT) {
          /* The vertex and fragment stages have g0.2 set to 0, so
           * header0.2 is 0 when g0 is copied. Other stages may not, so we
diff --git a/src/intel/compiler/brw_nir.h b/src/intel/compiler/brw_nir.h
index 119de1c6086..7d8870732ad 100644
--- a/src/intel/compiler/brw_nir.h
+++ b/src/intel/compiler/brw_nir.h
@@ -122,8 +122,7 @@ brw_nir_ubo_surface_index_is_pushable(nir_src src)
 
    if (intrin && intrin->intrinsic == nir_intrinsic_resource_intel) {
       return (nir_intrinsic_resource_access_intel(intrin) &
-              nir_resource_intel_pushable) &&
-             nir_src_is_const(intrin->src[1]);
+              nir_resource_intel_pushable);
    }
 
    return nir_src_is_const(src);
@@ -146,6 +145,14 @@ brw_nir_ubo_surface_index_get_push_block(nir_src src)
    return nir_intrinsic_resource_block_intel(intrin);
 }
 
+/* This helper return the binding table index of a surface access (any
+ * buffer/image/etc...). It works off the source of one of the intrinsics
+ * (load_ubo, load_ssbo, store_ssbo, load_image, store_image, etc...).
+ *
+ * If the source is constant, then this is the binding table index. If we're
+ * going through a resource_intel intel intrinsic, then we need to check
+ * src[1] of that intrinsic.
+ */
 static inline unsigned
 brw_nir_ubo_surface_index_get_bti(nir_src src)
 {
@@ -155,8 +162,19 @@ brw_nir_ubo_surface_index_get_bti(nir_src src)
    assert(src.ssa->parent_instr->type == nir_instr_type_intrinsic);
 
    nir_intrinsic_instr *intrin = nir_instr_as_intrinsic(src.ssa->parent_instr);
-   assert(intrin->intrinsic == nir_intrinsic_resource_intel);
-   assert(nir_src_is_const(intrin->src[1]));
+   if (!intrin || intrin->intrinsic != nir_intrinsic_resource_intel)
+      return UINT32_MAX;
+
+   /* In practice we could even drop this intrinsic because the bindless
+    * access always operate from a base offset coming from a push constant, so
+    * they can never be constant.
+    */
+   if (nir_intrinsic_resource_access_intel(intrin) &
+       nir_resource_intel_bindless)
+      return UINT32_MAX;
+
+   if (!nir_src_is_const(intrin->src[1]))
+      return UINT32_MAX;
 
    return nir_src_as_uint(intrin->src[1]);
 }
diff --git a/src/intel/compiler/brw_nir_lower_alpha_to_coverage.c b/src/intel/compiler/brw_nir_lower_alpha_to_coverage.c
index eb13698b536..99c8855d43c 100644
--- a/src/intel/compiler/brw_nir_lower_alpha_to_coverage.c
+++ b/src/intel/compiler/brw_nir_lower_alpha_to_coverage.c
@@ -58,8 +58,7 @@
 static nir_def *
 build_dither_mask(nir_builder *b, nir_def *color)
 {
-   assert(color->num_components == 4);
-   nir_def *alpha = nir_channel(b, color, 3);
+   nir_def *alpha = nir_channel(b, color, color->num_components - 1);
 
    nir_def *m =
       nir_f2i32(b, nir_fmul_imm(b, nir_fsat(b, alpha), 16.0));
@@ -130,6 +129,11 @@ brw_nir_lower_alpha_to_coverage(nir_shader *shader,
 
          if (location == FRAG_RESULT_COLOR ||
              location == FRAG_RESULT_DATA0) {
+            uint32_t mask = nir_intrinsic_write_mask(intrin) <<
+                            nir_intrinsic_component(intrin);
+            /* need the w component */
+            if (!(mask & BITFIELD_BIT(3)))
+               continue;
             assert(color0_write == NULL);
             color0_write = intrin;
          }
@@ -137,22 +141,19 @@ brw_nir_lower_alpha_to_coverage(nir_shader *shader,
    }
 
    /* It's possible that shader_info may be out-of-date and the writes to
-    * either gl_SampleMask or the first color value may have been removed.
+    * either gl_SampleMask, or the first color value may have been removed,
+    * or that the w component is not written.
     * This can happen if, for instance a nir_undef is written to the
     * color value.  In that case, just bail and don't do anything rather
     * than crashing.
-    */
-   if (color0_write == NULL || sample_mask_write == NULL)
-      goto skip;
-
-   /* It's possible that the color value isn't actually a vec4.  In this case,
+    * It's also possible that the color value isn't actually a vec4.  In this case,
     * assuming an alpha of 1.0 and letting the sample mask pass through
     * unaltered seems like the kindest thing to do to apps.
     */
-   nir_def *color0 = color0_write->src[0].ssa;
-   if (color0->num_components < 4)
+   if (color0_write == NULL || sample_mask_write == NULL)
       goto skip;
 
+   nir_def *color0 = color0_write->src[0].ssa;
    nir_def *sample_mask = sample_mask_write->src[0].ssa;
 
    if (sample_mask_write_first) {
diff --git a/src/intel/compiler/brw_nir_lower_cooperative_matrix.c b/src/intel/compiler/brw_nir_lower_cooperative_matrix.c
index 8ed937baaed..8f1ff3ed0e3 100644
--- a/src/intel/compiler/brw_nir_lower_cooperative_matrix.c
+++ b/src/intel/compiler/brw_nir_lower_cooperative_matrix.c
@@ -251,10 +251,22 @@ lower_cmat_load_store(nir_builder *b, nir_intrinsic_instr *intrin,
    const unsigned packing_factor = get_packing_factor(*desc, slice->type);
 
    nir_deref_instr *pointer = nir_src_as_deref(intrin->src[ptr_src]);
+   const unsigned ptr_comp_width = glsl_get_bit_size(pointer->type);
+   const unsigned ptr_num_comps = glsl_get_vector_elements(pointer->type);
+
+   /* The stride is given in number of elements of the pointed type, which
+    * doesn't necessarily match the matrix element type, so we need to adjust
+    * it considering it may be a vector and have a different bit-width.
+    */
+   nir_def *stride = nir_udiv_imm(b,
+                                  nir_imul_imm(b,
+                                               intrin->src[2].ssa,
+                                               ptr_comp_width * ptr_num_comps),
+                                  glsl_base_type_get_bit_size(desc->element_type));
 
    if ((nir_intrinsic_matrix_layout(intrin) == GLSL_MATRIX_LAYOUT_ROW_MAJOR) ==
        (desc->use != GLSL_CMAT_USE_B)) {
-      nir_def *stride = nir_udiv_imm(b, intrin->src[2].ssa, packing_factor);
+      stride = nir_udiv_imm(b, stride, packing_factor);
 
       const struct glsl_type *element_type =
          glsl_scalar_type(glsl_get_base_type(slice->type));
@@ -304,8 +316,6 @@ lower_cmat_load_store(nir_builder *b, nir_intrinsic_instr *intrin,
          }
       }
    } else {
-      nir_def *stride = intrin->src[2].ssa;
-
       const struct glsl_type *element_type = glsl_scalar_type(desc->element_type);
       const unsigned element_bits = glsl_base_type_get_bit_size(desc->element_type);
       const unsigned element_stride = element_bits / 8;
@@ -636,14 +646,44 @@ lower_cmat_instr(nir_builder *b, nir_instr *instr, void *_state)
       const unsigned packing_factor = get_packing_factor(dst_desc, dst_slice->type);
       const unsigned num_components = glsl_get_vector_elements(dst_slice->type);
 
+      const nir_cmat_signed cmat_signed_mask =
+         nir_intrinsic_cmat_signed_mask(intrin);
+
+      assert(((cmat_signed_mask & NIR_CMAT_A_SIGNED) == 0) ==
+             ((cmat_signed_mask & NIR_CMAT_B_SIGNED) == 0));
+      assert(((cmat_signed_mask & NIR_CMAT_A_SIGNED) == 0) ==
+             ((cmat_signed_mask & NIR_CMAT_C_SIGNED) == 0));
+      assert(((cmat_signed_mask & NIR_CMAT_A_SIGNED) == 0) ==
+             ((cmat_signed_mask & NIR_CMAT_RESULT_SIGNED) == 0));
+
+      nir_alu_type src_type =
+         nir_get_nir_type_for_glsl_base_type(src_desc.element_type);
+      nir_alu_type dest_type =
+         nir_get_nir_type_for_glsl_base_type(dst_desc.element_type);
+
+      /* For integer types, the signedness is determined by flags on the
+       * muladd instruction. The types of the sources play no role. Adjust the
+       * types passed to the dpas_intel intrinsic to match.
+       */
+      if (nir_alu_type_get_base_type(src_type) == nir_type_uint ||
+          nir_alu_type_get_base_type(src_type) == nir_type_int) {
+         if ((cmat_signed_mask & NIR_CMAT_A_SIGNED) == 0) {
+            src_type = nir_alu_type_get_type_size(src_type) | nir_type_uint;
+            dest_type = nir_alu_type_get_type_size(dest_type) | nir_type_uint;
+         } else {
+            src_type = nir_alu_type_get_type_size(src_type) | nir_type_int;
+            dest_type = nir_alu_type_get_type_size(dest_type) | nir_type_int;
+         }
+      }
+
       nir_def *result =
          nir_dpas_intel(b,
                         packing_factor * glsl_base_type_get_bit_size(dst_desc.element_type),
+                        nir_load_deref(b, accum_slice),
                         nir_load_deref(b, A_slice),
                         nir_load_deref(b, B_slice),
-                        nir_load_deref(b, accum_slice),
-                        .dest_type = nir_get_nir_type_for_glsl_base_type(dst_desc.element_type),
-                        .src_type = nir_get_nir_type_for_glsl_base_type(src_desc.element_type),
+                        .dest_type = dest_type,
+                        .src_type = src_type,
                         .saturate = nir_intrinsic_saturate(intrin),
                         .cmat_signed_mask = nir_intrinsic_cmat_signed_mask(intrin),
                         .systolic_depth = 8,
diff --git a/src/intel/compiler/brw_nir_lower_ray_queries.c b/src/intel/compiler/brw_nir_lower_ray_queries.c
index bcade17e803..844b90da47b 100644
--- a/src/intel/compiler/brw_nir_lower_ray_queries.c
+++ b/src/intel/compiler/brw_nir_lower_ray_queries.c
@@ -543,8 +543,11 @@ brw_nir_lower_ray_queries(nir_shader *shader,
    };
 
    /* Map all query variable to internal type variables */
-   nir_foreach_function_temp_variable(var, state.impl)
+   nir_foreach_function_temp_variable(var, state.impl) {
+      if (!var->data.ray_query)
+         continue;
       register_opaque_var(var, &state);
+   }
    hash_table_foreach(state.queries, entry)
       create_internal_var(entry->data, &state);
 
diff --git a/src/intel/compiler/brw_reg.h b/src/intel/compiler/brw_reg.h
index 3bee5dde058..7e2243c4625 100644
--- a/src/intel/compiler/brw_reg.h
+++ b/src/intel/compiler/brw_reg.h
@@ -260,6 +260,39 @@ struct brw_reg {
    };
 };
 
+static inline unsigned
+phys_nr(const struct intel_device_info *devinfo, const struct brw_reg reg)
+{
+   if (devinfo->ver >= 20) {
+      if (reg.file == BRW_GENERAL_REGISTER_FILE)
+         return reg.nr / 2;
+      else if (reg.file == BRW_ARCHITECTURE_REGISTER_FILE &&
+               reg.nr >= BRW_ARF_ACCUMULATOR &&
+               reg.nr < BRW_ARF_FLAG)
+         return BRW_ARF_ACCUMULATOR + (reg.nr - BRW_ARF_ACCUMULATOR) / 2;
+      else
+         return reg.nr;
+   } else {
+      return reg.nr;
+   }
+}
+
+static inline unsigned
+phys_subnr(const struct intel_device_info *devinfo, const struct brw_reg reg)
+{
+   if (devinfo->ver >= 20) {
+      if (reg.file == BRW_GENERAL_REGISTER_FILE ||
+          (reg.file == BRW_ARCHITECTURE_REGISTER_FILE &&
+           reg.nr >= BRW_ARF_ACCUMULATOR &&
+           reg.nr < BRW_ARF_FLAG))
+         return (reg.nr & 1) * REG_SIZE + reg.subnr;
+      else
+         return reg.subnr;
+   } else {
+      return reg.subnr;
+   }
+}
+
 static inline bool
 brw_regs_equal(const struct brw_reg *a, const struct brw_reg *b)
 {
diff --git a/src/intel/compiler/brw_shader.cpp b/src/intel/compiler/brw_shader.cpp
index c500f5e2b4f..e36389f724d 100644
--- a/src/intel/compiler/brw_shader.cpp
+++ b/src/intel/compiler/brw_shader.cpp
@@ -531,6 +531,8 @@ brw_instruction_name(const struct brw_isa_info *isa, enum opcode op)
       return "btd_spawn_logical";
    case SHADER_OPCODE_BTD_RETIRE_LOGICAL:
       return "btd_retire_logical";
+   case SHADER_OPCODE_READ_MASK_REG:
+      return "read_mask_reg";
    case SHADER_OPCODE_READ_SR_REG:
       return "read_sr_reg";
    }
diff --git a/src/intel/dev/intel_device_info.c b/src/intel/dev/intel_device_info.c
index 1ed313d71a2..c94982a3666 100644
--- a/src/intel/dev/intel_device_info.c
+++ b/src/intel/dev/intel_device_info.c
@@ -1667,6 +1667,8 @@ intel_get_device_info_from_fd(int fd, struct intel_device_info *devinfo)
       break;
    case INTEL_KMD_TYPE_XE:
       ret = intel_device_info_xe_get_info_from_fd(fd, devinfo);
+      if (devinfo->verx10 < 200)
+         mesa_logw("Support for this platform is experimental with Xe KMD, bug reports may be ignored.");
       break;
    default:
       ret = false;
diff --git a/src/intel/dev/intel_kmd.c b/src/intel/dev/intel_kmd.c
index cca27ce67ed..63bb443424a 100644
--- a/src/intel/dev/intel_kmd.c
+++ b/src/intel/dev/intel_kmd.c
@@ -37,10 +37,8 @@ intel_get_kmd_type(int fd)
 
    if (strcmp(version->name, "i915") == 0)
       type = INTEL_KMD_TYPE_I915;
-#ifdef INTEL_XE_KMD_SUPPORTED
    else if (strcmp(version->name, "xe") == 0)
       type = INTEL_KMD_TYPE_XE;
-#endif
 
    drmFreeVersion(version);
    return type;
diff --git a/src/intel/isl/isl.c b/src/intel/isl/isl.c
index 3b06af225cd..3793ea5d929 100644
--- a/src/intel/isl/isl.c
+++ b/src/intel/isl/isl.c
@@ -175,6 +175,8 @@ isl_device_setup_mocs(struct isl_device *dev)
          dev->mocs.external = 5 << 1;
          /* UC */
          dev->mocs.uncached = 1 << 1;
+         dev->mocs.blitter_dst = 1 << 1;
+         dev->mocs.blitter_src = 1 << 1;
       } else {
          /* TC=1/LLC Only, LeCC=1/UC, LRUM=0, L3CC=3/WB */
          dev->mocs.external = 61 << 1;
@@ -185,6 +187,10 @@ isl_device_setup_mocs(struct isl_device *dev)
 
          /* L1 - HDC:L1 + L3 + LLC */
          dev->mocs.l1_hdc_l3_llc = 48 << 1;
+
+         /* Uncached */
+         dev->mocs.blitter_dst = 3 << 1;
+         dev->mocs.blitter_src = 3 << 1;
       }
       /* Protected is just an additional flag. */
       dev->mocs.protected_mask = 1 << 0;
@@ -267,6 +273,12 @@ isl_mocs(const struct isl_device *dev, isl_surf_usage_flags_t usage,
    uint32_t mask = (usage & ISL_SURF_USAGE_PROTECTED_BIT) ?
       dev->mocs.protected_mask : 0;
 
+   if (usage & ISL_SURF_USAGE_BLITTER_SRC_BIT)
+      return dev->mocs.blitter_src | mask;
+
+   if (usage & ISL_SURF_USAGE_BLITTER_DST_BIT)
+      return dev->mocs.blitter_dst | mask;
+
    if (external)
       return dev->mocs.external | mask;
 
@@ -279,7 +291,7 @@ isl_mocs(const struct isl_device *dev, isl_surf_usage_flags_t usage,
          return dev->mocs.internal | mask;
 
       if (usage & ISL_SURF_USAGE_CPB_BIT)
-         return dev->mocs.internal;
+         return dev->mocs.internal | mask;
 
       /* Using L1:HDC for storage buffers breaks Vulkan memory model
        * tests that use shader atomics.  This isn't likely to work out,
@@ -4058,6 +4070,13 @@ isl_swizzle_supports_rendering(const struct intel_device_info *devinfo,
        *
        *    "For Render Target, this field MUST be programmed to
        *    value = SCS_ALPHA."
+       *
+       * Bspec 57023: RENDER_SURFACE_STATE:: Shader Channel Select Red
+       *
+       *    "Render Target messages do not support swapping of colors with
+       *    alpha. The Red, Green, or Blue Shader Channel Selects do not
+       *    support SCS_ALPHA. The Shader Channel Select Alpha does not support
+       *    SCS_RED, SCS_GREEN, or SCS_BLUE."
        */
       return (swizzle.r == ISL_CHANNEL_SELECT_RED ||
               swizzle.r == ISL_CHANNEL_SELECT_GREEN ||
diff --git a/src/intel/isl/isl.h b/src/intel/isl/isl.h
index 0870aa590e5..1a6424528a6 100644
--- a/src/intel/isl/isl.h
+++ b/src/intel/isl/isl.h
@@ -1142,6 +1142,8 @@ typedef uint64_t isl_surf_usage_flags_t;
 #define ISL_SURF_USAGE_STREAM_OUT_BIT          (1u << 18)
 #define ISL_SURF_USAGE_2D_3D_COMPATIBLE_BIT    (1u << 19)
 #define ISL_SURF_USAGE_SPARSE_BIT              (1u << 20)
+#define ISL_SURF_USAGE_BLITTER_DST_BIT         (1u << 22)
+#define ISL_SURF_USAGE_BLITTER_SRC_BIT         (1u << 23)
 /** @} */
 
 /**
diff --git a/src/intel/isl/isl_emit_depth_stencil.c b/src/intel/isl/isl_emit_depth_stencil.c
index a914b8796a3..48e5343b9b0 100644
--- a/src/intel/isl/isl_emit_depth_stencil.c
+++ b/src/intel/isl/isl_emit_depth_stencil.c
@@ -199,6 +199,9 @@ isl_genX(emit_depth_stencil_hiz_s)(const struct isl_device *dev, void *batch,
 #if GFX_VER == 12
       db.ControlSurfaceEnable = db.DepthBufferCompressionEnable =
          isl_aux_usage_has_ccs(info->hiz_usage);
+#endif
+#if GFX_VER >= 12
+      db.NullPageCoherencyEnable = info->depth_surf->usage & ISL_SURF_USAGE_SPARSE_BIT;
 #endif
    }
 
@@ -270,6 +273,9 @@ isl_genX(emit_depth_stencil_hiz_s)(const struct isl_device *dev, void *batch,
 #if GFX_VER >= 8
       sb.SurfaceQPitch =
          isl_surf_get_array_pitch_el_rows(info->stencil_surf) >> 2;
+#endif
+#if GFX_VER >= 12
+      sb.NullPageCoherencyEnable = info->stencil_surf->usage & ISL_SURF_USAGE_SPARSE_BIT;
 #endif
    } else {
 #if GFX_VER >= 12
diff --git a/src/intel/tools/intel_sanitize_gpu.c b/src/intel/tools/intel_sanitize_gpu.c
index a3332507090..dc99e1b7960 100644
--- a/src/intel/tools/intel_sanitize_gpu.c
+++ b/src/intel/tools/intel_sanitize_gpu.c
@@ -22,6 +22,7 @@
  */
 
 #undef _FILE_OFFSET_BITS /* prevent #define open open64 */
+#undef _TIME_BITS
 
 #include <string.h>
 #include <stdlib.h>
diff --git a/src/intel/vulkan/anv_allocator.c b/src/intel/vulkan/anv_allocator.c
index 769bbd848a7..14b30b114ea 100644
--- a/src/intel/vulkan/anv_allocator.c
+++ b/src/intel/vulkan/anv_allocator.c
@@ -1029,6 +1029,9 @@ anv_state_stream_alloc(struct anv_state_stream *stream,
 
       stream->block = anv_state_pool_alloc_no_vg(stream->state_pool,
                                                  block_size, PAGE_SIZE);
+      if (stream->block.alloc_size == 0)
+         return ANV_STATE_NULL;
+
       util_dynarray_append(&stream->all_blocks,
                            struct anv_state, stream->block);
       VG(VALGRIND_MAKE_MEM_NOACCESS(stream->block.map, block_size));
diff --git a/src/intel/vulkan/anv_batch_chain.c b/src/intel/vulkan/anv_batch_chain.c
index 0dfdd582a4b..75f696cb1e7 100644
--- a/src/intel/vulkan/anv_batch_chain.c
+++ b/src/intel/vulkan/anv_batch_chain.c
@@ -1389,8 +1389,6 @@ anv_queue_submit_sparse_bind_locked(struct anv_queue *queue,
       return vk_queue_set_lost(&queue->vk, "Sparse binding not supported");
    }
 
-   device->using_sparse = true;
-
    assert(submit->command_buffer_count == 0);
 
    if (INTEL_DEBUG(DEBUG_SPARSE)) {
diff --git a/src/intel/vulkan/anv_blorp.c b/src/intel/vulkan/anv_blorp.c
index ce5c63e7c31..da786b8b265 100644
--- a/src/intel/vulkan/anv_blorp.c
+++ b/src/intel/vulkan/anv_blorp.c
@@ -136,8 +136,34 @@ anv_blorp_batch_finish(struct blorp_batch *batch)
    blorp_batch_finish(batch);
 }
 
+static isl_surf_usage_flags_t
+get_usage_flag_for_cmd_buffer(const struct anv_cmd_buffer *cmd_buffer,
+                              bool is_dest)
+{
+   isl_surf_usage_flags_t usage;
+
+   switch (cmd_buffer->queue_family->engine_class) {
+   case INTEL_ENGINE_CLASS_RENDER:
+      usage = is_dest ? ISL_SURF_USAGE_RENDER_TARGET_BIT :
+                        ISL_SURF_USAGE_TEXTURE_BIT;
+      break;
+   case INTEL_ENGINE_CLASS_COMPUTE:
+      usage = is_dest ? ISL_SURF_USAGE_STORAGE_BIT :
+                        ISL_SURF_USAGE_TEXTURE_BIT;
+      break;
+   case INTEL_ENGINE_CLASS_COPY:
+      usage = is_dest ? ISL_SURF_USAGE_BLITTER_DST_BIT :
+                        ISL_SURF_USAGE_BLITTER_SRC_BIT;
+      break;
+   default:
+      unreachable("Unhandled engine class");
+   }
+
+   return usage;
+}
+
 static void
-get_blorp_surf_for_anv_address(struct anv_device *device,
+get_blorp_surf_for_anv_address(struct anv_cmd_buffer *cmd_buffer,
                                struct anv_address address,
                                uint32_t width, uint32_t height,
                                uint32_t row_pitch, enum isl_format format,
@@ -146,19 +172,19 @@ get_blorp_surf_for_anv_address(struct anv_device *device,
                                struct isl_surf *isl_surf)
 {
    bool ok UNUSED;
+   isl_surf_usage_flags_t usage =
+      get_usage_flag_for_cmd_buffer(cmd_buffer, is_dest);
 
    *blorp_surf = (struct blorp_surf) {
       .surf = isl_surf,
       .addr = {
          .buffer = address.bo,
          .offset = address.offset,
-         .mocs = anv_mocs(device, address.bo,
-                          is_dest ? ISL_SURF_USAGE_RENDER_TARGET_BIT
-                                  : ISL_SURF_USAGE_TEXTURE_BIT),
+         .mocs = anv_mocs(cmd_buffer->device, address.bo, usage),
       },
    };
 
-   ok = isl_surf_init(&device->isl_dev, isl_surf,
+   ok = isl_surf_init(&cmd_buffer->device->isl_dev, isl_surf,
                      .dim = ISL_SURF_DIM_2D,
                      .format = format,
                      .width = width,
@@ -168,14 +194,13 @@ get_blorp_surf_for_anv_address(struct anv_device *device,
                      .array_len = 1,
                      .samples = 1,
                      .row_pitch_B = row_pitch,
-                     .usage = is_dest ? ISL_SURF_USAGE_RENDER_TARGET_BIT
-                                      : ISL_SURF_USAGE_TEXTURE_BIT,
+                     .usage = usage,
                      .tiling_flags = ISL_TILING_LINEAR_BIT);
    assert(ok);
 }
 
 static void
-get_blorp_surf_for_anv_buffer(struct anv_device *device,
+get_blorp_surf_for_anv_buffer(struct anv_cmd_buffer *cmd_buffer,
                               struct anv_buffer *buffer, uint64_t offset,
                               uint32_t width, uint32_t height,
                               uint32_t row_pitch, enum isl_format format,
@@ -183,7 +208,7 @@ get_blorp_surf_for_anv_buffer(struct anv_device *device,
                               struct blorp_surf *blorp_surf,
                               struct isl_surf *isl_surf)
 {
-   get_blorp_surf_for_anv_address(device,
+   get_blorp_surf_for_anv_address(cmd_buffer,
                                   anv_address_add(buffer->address, offset),
                                   width, height, row_pitch, format,
                                   is_dest, blorp_surf, isl_surf);
@@ -222,10 +247,9 @@ get_blorp_surf_for_anv_image(const struct anv_cmd_buffer *cmd_buffer,
                                           cmd_buffer->queue_family->queueFlags);
    }
 
-   isl_surf_usage_flags_t mocs_usage =
-      (usage & VK_IMAGE_USAGE_TRANSFER_DST_BIT) ?
-      ISL_SURF_USAGE_RENDER_TARGET_BIT : ISL_SURF_USAGE_TEXTURE_BIT;
-
+   isl_surf_usage_flags_t isl_usage =
+      get_usage_flag_for_cmd_buffer(cmd_buffer,
+                                    usage & VK_IMAGE_USAGE_TRANSFER_DST_BIT);
    const struct anv_surface *surface = &image->planes[plane].primary_surface;
    const struct anv_address address =
       anv_image_address(image, &surface->memory_range);
@@ -235,7 +259,7 @@ get_blorp_surf_for_anv_image(const struct anv_cmd_buffer *cmd_buffer,
       .addr = {
          .buffer = address.bo,
          .offset = address.offset,
-         .mocs = anv_mocs(device, address.bo, mocs_usage),
+         .mocs = anv_mocs(device, address.bo, isl_usage),
       },
    };
 
@@ -251,7 +275,7 @@ get_blorp_surf_for_anv_image(const struct anv_cmd_buffer *cmd_buffer,
          blorp_surf->aux_addr = (struct blorp_address) {
             .buffer = aux_address.bo,
             .offset = aux_address.offset,
-            .mocs = anv_mocs(device, aux_address.bo, 0),
+            .mocs = anv_mocs(device, aux_address.bo, isl_usage),
          };
       }
 
@@ -622,7 +646,7 @@ copy_buffer_to_image(struct anv_cmd_buffer *cmd_buffer,
       isl_format_for_size(linear_fmtl->bpb / 8);
 
    struct isl_surf buffer_isl_surf;
-   get_blorp_surf_for_anv_buffer(cmd_buffer->device,
+   get_blorp_surf_for_anv_buffer(cmd_buffer,
                                  anv_buffer, region->bufferOffset,
                                  buffer_extent.width, buffer_extent.height,
                                  buffer_layout.row_stride_B, buffer_format,
@@ -982,13 +1006,13 @@ copy_buffer(struct anv_device *device,
       .buffer = src_buffer->address.bo,
       .offset = src_buffer->address.offset + region->srcOffset,
       .mocs = anv_mocs(device, src_buffer->address.bo,
-                       ISL_SURF_USAGE_TEXTURE_BIT),
+                       blorp_batch_isl_copy_usage(batch, false /* is_dest */)),
    };
    struct blorp_address dst = {
       .buffer = dst_buffer->address.bo,
       .offset = dst_buffer->address.offset + region->dstOffset,
       .mocs = anv_mocs(device, dst_buffer->address.bo,
-                       ISL_SURF_USAGE_RENDER_TARGET_BIT),
+                       blorp_batch_isl_copy_usage(batch, true /* is_dest */)),
    };
 
    blorp_buffer_copy(batch, src, dst, region->size);
@@ -1055,14 +1079,16 @@ void anv_CmdUpdateBuffer(
       struct blorp_address src = {
          .buffer = cmd_buffer->device->dynamic_state_pool.block_pool.bo,
          .offset = tmp_data.offset,
-         .mocs = isl_mocs(&cmd_buffer->device->isl_dev,
-                          ISL_SURF_USAGE_TEXTURE_BIT, false)
+         .mocs = anv_mocs(cmd_buffer->device, NULL,
+                          get_usage_flag_for_cmd_buffer(cmd_buffer,
+                                                        false /* is_dest */))
       };
       struct blorp_address dst = {
          .buffer = dst_buffer->address.bo,
          .offset = dst_buffer->address.offset + dstOffset,
          .mocs = anv_mocs(cmd_buffer->device, dst_buffer->address.bo,
-                          ISL_SURF_USAGE_RENDER_TARGET_BIT),
+                          get_usage_flag_for_cmd_buffer(cmd_buffer,
+                                                        true /* is_dest */)),
       };
 
       blorp_buffer_copy(&batch, src, dst, copy_size);
@@ -1104,12 +1130,13 @@ anv_cmd_buffer_fill_area(struct anv_cmd_buffer *cmd_buffer,
 
    const uint64_t max_fill_size = MAX_SURFACE_DIM * MAX_SURFACE_DIM * bs;
    while (size >= max_fill_size) {
-      get_blorp_surf_for_anv_address(cmd_buffer->device,
+      get_blorp_surf_for_anv_address(cmd_buffer,
                                      (struct anv_address) {
                                         .bo = address.bo, .offset = offset,
                                      },
                                      MAX_SURFACE_DIM, MAX_SURFACE_DIM,
-                                     MAX_SURFACE_DIM * bs, isl_format, true,
+                                     MAX_SURFACE_DIM * bs, isl_format,
+                                     true /* is_dest */,
                                      &surf, &isl_surf);
 
       blorp_clear(&batch, &surf, isl_format, ISL_SWIZZLE_IDENTITY,
@@ -1123,12 +1150,13 @@ anv_cmd_buffer_fill_area(struct anv_cmd_buffer *cmd_buffer,
    assert(height < MAX_SURFACE_DIM);
    if (height != 0) {
       const uint64_t rect_fill_size = height * MAX_SURFACE_DIM * bs;
-      get_blorp_surf_for_anv_address(cmd_buffer->device,
+      get_blorp_surf_for_anv_address(cmd_buffer,
                                      (struct anv_address) {
                                         .bo = address.bo, .offset = offset,
                                      },
                                      MAX_SURFACE_DIM, height,
-                                     MAX_SURFACE_DIM * bs, isl_format, true,
+                                     MAX_SURFACE_DIM * bs, isl_format,
+                                     true /* is_dest */,
                                      &surf, &isl_surf);
 
       blorp_clear(&batch, &surf, isl_format, ISL_SWIZZLE_IDENTITY,
@@ -1140,12 +1168,13 @@ anv_cmd_buffer_fill_area(struct anv_cmd_buffer *cmd_buffer,
 
    if (size != 0) {
       const uint32_t width = size / bs;
-      get_blorp_surf_for_anv_address(cmd_buffer->device,
+      get_blorp_surf_for_anv_address(cmd_buffer,
                                      (struct anv_address) {
                                         .bo = address.bo, .offset = offset,
                                      },
                                      width, 1,
-                                     width * bs, isl_format, true,
+                                     width * bs, isl_format,
+                                     true /* is_dest */,
                                      &surf, &isl_surf);
 
       blorp_clear(&batch, &surf, isl_format, ISL_SWIZZLE_IDENTITY,
@@ -2106,12 +2135,14 @@ void anv_CmdClearAttachments(
    anv_blorp_batch_finish(&batch);
 }
 
-void
+static void
 anv_image_msaa_resolve(struct anv_cmd_buffer *cmd_buffer,
                        const struct anv_image *src_image,
+                       enum isl_format src_format_override,
                        enum isl_aux_usage src_aux_usage,
                        uint32_t src_level, uint32_t src_base_layer,
                        const struct anv_image *dst_image,
+                       enum isl_format dst_format_override,
                        enum isl_aux_usage dst_aux_usage,
                        uint32_t dst_level, uint32_t dst_base_layer,
                        VkImageAspectFlagBits aspect,
@@ -2164,9 +2195,9 @@ anv_image_msaa_resolve(struct anv_cmd_buffer *cmd_buffer,
    for (uint32_t l = 0; l < layer_count; l++) {
       blorp_blit(&batch,
                  &src_surf, src_level, src_base_layer + l,
-                 ISL_FORMAT_UNSUPPORTED, ISL_SWIZZLE_IDENTITY,
+                 src_format_override, ISL_SWIZZLE_IDENTITY,
                  &dst_surf, dst_level, dst_base_layer + l,
-                 ISL_FORMAT_UNSUPPORTED, ISL_SWIZZLE_IDENTITY,
+                 dst_format_override, ISL_SWIZZLE_IDENTITY,
                  src_x, src_y, src_x + width, src_y + height,
                  dst_x, dst_y, dst_x + width, dst_y + height,
                  filter, false, false);
@@ -2175,6 +2206,96 @@ anv_image_msaa_resolve(struct anv_cmd_buffer *cmd_buffer,
    anv_blorp_batch_finish(&batch);
 }
 
+static enum blorp_filter
+vk_to_blorp_resolve_mode(VkResolveModeFlagBits vk_mode)
+{
+   switch (vk_mode) {
+   case VK_RESOLVE_MODE_SAMPLE_ZERO_BIT:
+      return BLORP_FILTER_SAMPLE_0;
+   case VK_RESOLVE_MODE_AVERAGE_BIT:
+      return BLORP_FILTER_AVERAGE;
+   case VK_RESOLVE_MODE_MIN_BIT:
+      return BLORP_FILTER_MIN_SAMPLE;
+   case VK_RESOLVE_MODE_MAX_BIT:
+      return BLORP_FILTER_MAX_SAMPLE;
+   default:
+      return BLORP_FILTER_NONE;
+   }
+}
+
+void
+anv_attachment_msaa_resolve(struct anv_cmd_buffer *cmd_buffer,
+                            const struct anv_attachment *att,
+                            VkImageLayout layout,
+                            VkImageAspectFlagBits aspect)
+{
+   struct anv_cmd_graphics_state *gfx = &cmd_buffer->state.gfx;
+   const struct anv_image_view *src_iview = att->iview;
+   const struct anv_image_view *dst_iview = att->resolve_iview;
+
+   enum isl_aux_usage src_aux_usage =
+      anv_layout_to_aux_usage(cmd_buffer->device->info,
+                              src_iview->image, aspect,
+                              VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
+                              layout,
+                              cmd_buffer->queue_family->queueFlags);
+
+   enum isl_aux_usage dst_aux_usage =
+      anv_layout_to_aux_usage(cmd_buffer->device->info,
+                              dst_iview->image, aspect,
+                              VK_IMAGE_USAGE_TRANSFER_DST_BIT,
+                              att->resolve_layout,
+                              cmd_buffer->queue_family->queueFlags);
+
+   enum blorp_filter filter = vk_to_blorp_resolve_mode(att->resolve_mode);
+
+   /* Depth/stencil should not use their view format for resolve because they
+    * go in pairs.
+    */
+   enum isl_format src_format = ISL_FORMAT_UNSUPPORTED;
+   enum isl_format dst_format = ISL_FORMAT_UNSUPPORTED;
+   if (!(aspect & (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT))) {
+      src_format = src_iview->planes[0].isl.format;
+      dst_format = dst_iview->planes[0].isl.format;
+   }
+
+   const VkRect2D render_area = gfx->render_area;
+   if (gfx->view_mask == 0) {
+      anv_image_msaa_resolve(cmd_buffer,
+                             src_iview->image, src_format, src_aux_usage,
+                             src_iview->planes[0].isl.base_level,
+                             src_iview->planes[0].isl.base_array_layer,
+                             dst_iview->image, dst_format, dst_aux_usage,
+                             dst_iview->planes[0].isl.base_level,
+                             dst_iview->planes[0].isl.base_array_layer,
+                             aspect,
+                             render_area.offset.x, render_area.offset.y,
+                             render_area.offset.x, render_area.offset.y,
+                             render_area.extent.width,
+                             render_area.extent.height,
+                             gfx->layer_count, filter);
+   } else {
+      uint32_t res_view_mask = gfx->view_mask;
+      while (res_view_mask) {
+         int i = u_bit_scan(&res_view_mask);
+
+         anv_image_msaa_resolve(cmd_buffer,
+                                src_iview->image, src_format, src_aux_usage,
+                                src_iview->planes[0].isl.base_level,
+                                src_iview->planes[0].isl.base_array_layer + i,
+                                dst_iview->image, dst_format, dst_aux_usage,
+                                dst_iview->planes[0].isl.base_level,
+                                dst_iview->planes[0].isl.base_array_layer + i,
+                                aspect,
+                                render_area.offset.x, render_area.offset.y,
+                                render_area.offset.x, render_area.offset.y,
+                                render_area.extent.width,
+                                render_area.extent.height,
+                                1, filter);
+      }
+   }
+}
+
 static void
 resolve_image(struct anv_cmd_buffer *cmd_buffer,
               struct anv_image *src_image,
@@ -2206,10 +2327,10 @@ resolve_image(struct anv_cmd_buffer *cmd_buffer,
                                  cmd_buffer->queue_family->queueFlags);
 
       anv_image_msaa_resolve(cmd_buffer,
-                             src_image, src_aux_usage,
+                             src_image, ISL_FORMAT_UNSUPPORTED, src_aux_usage,
                              region->srcSubresource.mipLevel,
                              region->srcSubresource.baseArrayLayer,
-                             dst_image, dst_aux_usage,
+                             dst_image, ISL_FORMAT_UNSUPPORTED, dst_aux_usage,
                              region->dstSubresource.mipLevel,
                              region->dstSubresource.baseArrayLayer,
                              (1 << aspect_bit),
diff --git a/src/intel/vulkan/anv_cmd_buffer.c b/src/intel/vulkan/anv_cmd_buffer.c
index 2ef884e5382..c6420ff4c8a 100644
--- a/src/intel/vulkan/anv_cmd_buffer.c
+++ b/src/intel/vulkan/anv_cmd_buffer.c
@@ -821,7 +821,7 @@ anv_cmd_buffer_bind_descriptor_set(struct anv_cmd_buffer *cmd_buffer,
          assert((offset & ~ANV_DESCRIPTOR_SET_OFFSET_MASK) == 0);
          push->desc_surface_offsets[set_index] &= ~ANV_DESCRIPTOR_SET_OFFSET_MASK;
          push->desc_surface_offsets[set_index] |= offset;
-         push->desc_sampler_offsets[set_index] |=
+         push->desc_sampler_offsets[set_index] =
             anv_address_physical(set->desc_sampler_addr) -
             cmd_buffer->device->physical->va.dynamic_state_pool.addr;
 
diff --git a/src/intel/vulkan/anv_device.c b/src/intel/vulkan/anv_device.c
index 56473427dbe..86b5f1ebcc1 100644
--- a/src/intel/vulkan/anv_device.c
+++ b/src/intel/vulkan/anv_device.c
@@ -944,9 +944,10 @@ get_properties_1_1(const struct anv_physical_device *pdevice,
    p->maxMultiviewViewCount      = 16;
    p->maxMultiviewInstanceIndex  = UINT32_MAX / 16;
    /* Our protected implementation is a memory encryption mechanism, it
-    * doesn't page fault.
+    * shouldn't page fault, but it hangs the HW so in terms of user visibility
+    * it's similar to a fault.
     */
-   p->protectedNoFault           = true;
+   p->protectedNoFault           = false;
    /* This value doesn't matter for us today as our per-stage descriptors are
     * the real limit.
     */
@@ -2165,6 +2166,14 @@ anv_physical_device_try_create(struct vk_instance *vk_instance,
       goto fail_fd;
    }
 
+   /* Disable Wa_16013994831 on Gfx12.0 because we found other cases where we
+    * need to always disable preemption :
+    *    - https://gitlab.freedesktop.org/mesa/mesa/-/issues/5963
+    *    - https://gitlab.freedesktop.org/mesa/mesa/-/issues/5662
+    */
+   if (devinfo.verx10 == 120)
+      BITSET_CLEAR(devinfo.workarounds, INTEL_WA_16013994831);
+
    if (!devinfo.has_context_isolation) {
       result = vk_errorf(instance, VK_ERROR_INCOMPATIBLE_DRIVER,
                          "Vulkan requires context isolation for %s", devinfo.name);
@@ -2231,7 +2240,7 @@ anv_physical_device_try_create(struct vk_instance *vk_instance,
       device->flush_astc_ldr_void_extent_denorms =
          device->has_astc_ldr && !device->emu_astc_ldr;
    }
-   device->disable_fcv = intel_device_info_is_mtl(&device->info) ||
+   device->disable_fcv = device->info.verx10 >= 125 ||
                          instance->disable_fcv;
 
    result = anv_physical_device_init_heaps(device, fd);
@@ -3541,7 +3550,7 @@ VkResult anv_CreateDevice(
    if (result != VK_SUCCESS)
       goto fail_trtt;
 
-   struct vk_pipeline_cache_create_info pcc_info = { };
+   struct vk_pipeline_cache_create_info pcc_info = { .weak_ref = true, };
    device->default_pipeline_cache =
       vk_pipeline_cache_create(&device->vk, &pcc_info, NULL);
    if (!device->default_pipeline_cache) {
@@ -3554,9 +3563,12 @@ VkResult anv_CreateDevice(
     * shaders to remain resident while it runs. Therefore, we need a special
     * cache just for BLORP/RT that's forced to always be enabled.
     */
-   pcc_info.force_enable = true;
+   struct vk_pipeline_cache_create_info internal_pcc_info = {
+      .force_enable = true,
+      .weak_ref = false,
+   };
    device->internal_cache =
-      vk_pipeline_cache_create(&device->vk, &pcc_info, NULL);
+      vk_pipeline_cache_create(&device->vk, &internal_pcc_info, NULL);
    if (device->internal_cache == NULL) {
       result = vk_error(device, VK_ERROR_OUT_OF_HOST_MEMORY);
       goto fail_default_pipeline_cache;
@@ -3699,8 +3711,7 @@ VkResult anv_CreateDevice(
    pthread_mutex_destroy(&device->mutex);
  fail_vmas:
    util_vma_heap_finish(&device->vma_trtt);
-   if (!device->physical->indirect_descriptors)
-      util_vma_heap_finish(&device->vma_samplers);
+   util_vma_heap_finish(&device->vma_samplers);
    util_vma_heap_finish(&device->vma_desc);
    util_vma_heap_finish(&device->vma_hi);
    util_vma_heap_finish(&device->vma_lo);
@@ -3815,8 +3826,7 @@ void anv_DestroyDevice(
    anv_bo_cache_finish(&device->bo_cache);
 
    util_vma_heap_finish(&device->vma_trtt);
-   if (!device->physical->indirect_descriptors)
-      util_vma_heap_finish(&device->vma_samplers);
+   util_vma_heap_finish(&device->vma_samplers);
    util_vma_heap_finish(&device->vma_desc);
    util_vma_heap_finish(&device->vma_hi);
    util_vma_heap_finish(&device->vma_lo);
@@ -4057,7 +4067,7 @@ VkResult anv_AllocateMemory(
    if (mem->vk.alloc_flags & VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)
       alloc_flags |= ANV_BO_ALLOC_CLIENT_VISIBLE_ADDRESS;
 
-   if (mem->vk.alloc_flags & VK_MEMORY_PROPERTY_PROTECTED_BIT)
+   if (mem_type->propertyFlags & VK_MEMORY_PROPERTY_PROTECTED_BIT)
       alloc_flags |= ANV_BO_ALLOC_PROTECTED;
 
    /* For now, always allocated AUX-TT aligned memory, regardless of dedicated
diff --git a/src/intel/vulkan/anv_formats.c b/src/intel/vulkan/anv_formats.c
index 8d652e0c8f8..65c000398b7 100644
--- a/src/intel/vulkan/anv_formats.c
+++ b/src/intel/vulkan/anv_formats.c
@@ -1077,6 +1077,12 @@ anv_format_supports_usage(
        */
    }
 
+   if (usage_flags & VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) {
+      if (!(format_feature_flags & VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR)) {
+         return false;
+      }
+   }
+
    return true;
 }
 
@@ -1464,6 +1470,10 @@ anv_get_image_format_properties(
       }
    }
 
+   if ((info->usage & VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) &&
+       !devinfo->has_coarse_pixel_primitive_and_cb)
+      goto unsupported;
+
    /* From the bspec section entitled "Surface Layout and Tiling",
     * Gfx9 has a 256 GB limitation and Gfx11+ has a 16 TB limitation.
     */
diff --git a/src/intel/vulkan/anv_image.c b/src/intel/vulkan/anv_image.c
index 6ead10079b2..dcb4fbcc940 100644
--- a/src/intel/vulkan/anv_image.c
+++ b/src/intel/vulkan/anv_image.c
@@ -1312,11 +1312,6 @@ add_all_surfaces_implicit_layout(
       if (result != VK_SUCCESS)
          return result;
 
-      /* Disable aux if image supports export without modifiers. */
-      if (image->vk.external_handle_types != 0 &&
-          image->vk.tiling != VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT)
-         continue;
-
       result = add_aux_surface_if_supported(device, image, plane, plane_format,
                                             format_list_info,
                                             ANV_OFFSET_IMPLICIT, plane_stride,
@@ -1673,6 +1668,11 @@ anv_image_init(struct anv_device *device, struct anv_image *image,
       isl_extra_usage_flags |= ISL_SURF_USAGE_DISABLE_AUX_BIT;
    }
 
+   /* Disable aux if image supports export without modifiers. */
+   if (image->vk.external_handle_types != 0 &&
+       image->vk.tiling != VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT)
+      isl_extra_usage_flags |= ISL_SURF_USAGE_DISABLE_AUX_BIT;
+
    const isl_tiling_flags_t isl_tiling_flags =
       choose_isl_tiling_flags(device->info, create_info, isl_mod_info,
                               image->vk.wsi_legacy_scanout);
@@ -3607,8 +3607,7 @@ anv_fill_buffer_view_surface_state(struct anv_device *device,
 {
    anv_fill_buffer_surface_state(device,
                                  state->state_data.data,
-                                 format, swizzle,
-                                 ISL_SURF_USAGE_TEXTURE_BIT,
+                                 format, swizzle, usage,
                                  address, range, stride);
 
    if (state->state.map)
diff --git a/src/intel/vulkan/anv_nir_apply_pipeline_layout.c b/src/intel/vulkan/anv_nir_apply_pipeline_layout.c
index e55e4e51391..44e0b7cb247 100644
--- a/src/intel/vulkan/anv_nir_apply_pipeline_layout.c
+++ b/src/intel/vulkan/anv_nir_apply_pipeline_layout.c
@@ -594,8 +594,16 @@ build_res_index(nir_builder *b,
       }
 
    const uint32_t desc_bti = state->set[set].binding[binding].surface_offset;
-   assert(bind_layout->descriptor_surface_stride % 8 == 0);
-   const uint32_t desc_stride = bind_layout->descriptor_surface_stride / 8;
+   /* We don't care about the stride field for inline uniforms (see
+    * build_desc_addr_for_res_index), but for anything else we should be
+    * aligned to 8 bytes because we store a multiple of 8 in the packed info
+    * to be able to encode a stride up to 2040 (8 * 255).
+    */
+   assert(bind_layout->type == VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK ||
+          bind_layout->descriptor_surface_stride % 8 == 0);
+   const uint32_t desc_stride =
+      bind_layout->type == VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK ? 0 :
+      bind_layout->descriptor_surface_stride / 8;
 
       nir_def *packed =
          nir_ior_imm(b,
@@ -735,7 +743,7 @@ build_desc_addr_for_res_index(nir_builder *b,
 static nir_def *
 build_desc_addr_for_binding(nir_builder *b,
                             unsigned set, unsigned binding,
-                            nir_def *array_index,
+                            nir_def *array_index, unsigned plane,
                             const struct apply_pipeline_layout_state *state)
 {
    const struct anv_descriptor_set_binding_layout *bind_layout =
@@ -751,6 +759,10 @@ build_desc_addr_for_binding(nir_builder *b,
                                    array_index,
                                    bind_layout->descriptor_surface_stride),
                       bind_layout->descriptor_surface_offset);
+      if (plane != 0) {
+         desc_offset = nir_iadd_imm(
+            b, desc_offset, plane * bind_layout->descriptor_data_surface_size);
+      }
 
       return nir_vec4(b, nir_unpack_64_2x32_split_x(b, set_addr),
                          nir_unpack_64_2x32_split_y(b, set_addr),
@@ -758,14 +770,21 @@ build_desc_addr_for_binding(nir_builder *b,
                          desc_offset);
    }
 
-   case nir_address_format_32bit_index_offset:
+   case nir_address_format_32bit_index_offset: {
+      nir_def *desc_offset =
+         nir_iadd_imm(b,
+                      nir_imul_imm(b,
+                                   array_index,
+                                   bind_layout->descriptor_surface_stride),
+                      bind_layout->descriptor_surface_offset);
+      if (plane != 0) {
+         desc_offset = nir_iadd_imm(
+            b, desc_offset, plane * bind_layout->descriptor_data_surface_size);
+      }
       return nir_vec2(b,
                       nir_imm_int(b, state->set[set].desc_offset),
-                      nir_iadd_imm(b,
-                                   nir_imul_imm(b,
-                                                array_index,
-                                                bind_layout->descriptor_surface_stride),
-                                   bind_layout->descriptor_surface_offset));
+                      desc_offset);
+   }
 
    default:
       unreachable("Unhandled address format");
@@ -819,7 +838,8 @@ build_surface_index_for_binding(nir_builder *b,
          set_offset = nir_imm_int(b, 0xdeaddead);
 
          nir_def *desc_addr =
-            build_desc_addr_for_binding(b, set, binding, array_index, state);
+            build_desc_addr_for_binding(b, set, binding, array_index,
+                                        plane, state);
 
          surface_index =
             build_load_descriptor_mem(b, desc_addr, 0, 1, 32, state);
@@ -900,7 +920,8 @@ build_sampler_handle_for_binding(nir_builder *b,
          set_offset = nir_imm_int(b, 0xdeaddead);
 
          nir_def *desc_addr =
-            build_desc_addr_for_binding(b, set, binding, array_index, state);
+            build_desc_addr_for_binding(b, set, binding, array_index,
+                                        plane, state);
 
          /* This is anv_sampled_image_descriptor, the sampler handle is always
           * in component 1.
@@ -1376,7 +1397,8 @@ lower_load_accel_struct_desc(nir_builder *b,
 
    struct res_index_defs res = unpack_res_index(b, res_index);
    nir_def *desc_addr =
-      build_desc_addr_for_binding(b, set, binding, res.array_index, state);
+      build_desc_addr_for_binding(b, set, binding, res.array_index,
+                                  0 /* plane */, state);
 
    /* Acceleration structure descriptors are always uint64_t */
    nir_def *desc = build_load_descriptor_mem(b, desc_addr, 0, 1, 64, state);
@@ -1605,7 +1627,7 @@ lower_image_size_intrinsic(nir_builder *b, nir_intrinsic_instr *intrin,
    }
 
    nir_def *desc_addr = build_desc_addr_for_binding(
-      b, set, binding, array_index, state);
+      b, set, binding, array_index, 0 /* plane */, state);
 
    b->cursor = nir_after_instr(&intrin->instr);
 
@@ -1975,6 +1997,34 @@ add_push_entry(struct anv_pipeline_push_map *push_map,
    };
 }
 
+static bool
+binding_should_use_surface_binding_table(const struct apply_pipeline_layout_state *state,
+                                         const struct anv_descriptor_set_binding_layout *binding)
+{
+   if ((binding->data & ANV_DESCRIPTOR_BTI_SURFACE_STATE) == 0)
+      return false;
+
+   if (state->pdevice->always_use_bindless &&
+       (binding->data & ANV_DESCRIPTOR_SURFACE))
+      return false;
+
+   return true;
+}
+
+static bool
+binding_should_use_sampler_binding_table(const struct apply_pipeline_layout_state *state,
+                                         const struct anv_descriptor_set_binding_layout *binding)
+{
+   if ((binding->data & ANV_DESCRIPTOR_BTI_SAMPLER_STATE) == 0)
+      return false;
+
+   if (state->pdevice->always_use_bindless &&
+       (binding->data & ANV_DESCRIPTOR_SAMPLER))
+      return false;
+
+   return true;
+}
+
 void
 anv_nir_apply_pipeline_layout(nir_shader *shader,
                               const struct anv_physical_device *pdevice,
@@ -2146,7 +2196,7 @@ anv_nir_apply_pipeline_layout(nir_shader *shader,
       state.set[set].binding[b].surface_offset = BINDLESS_OFFSET;
       state.set[set].binding[b].sampler_offset = BINDLESS_OFFSET;
 
-      if (binding->data & ANV_DESCRIPTOR_BTI_SURFACE_STATE) {
+      if (binding_should_use_surface_binding_table(&state, binding)) {
          if (map->surface_count + array_size * array_multiplier > MAX_BINDING_TABLE_SIZE ||
              anv_descriptor_requires_bindless(pdevice, binding, false) ||
              brw_shader_stage_requires_bindless_resources(shader->info.stage)) {
@@ -2177,7 +2227,7 @@ anv_nir_apply_pipeline_layout(nir_shader *shader,
          assert(map->surface_count <= MAX_BINDING_TABLE_SIZE);
       }
 
-      if (binding->data & ANV_DESCRIPTOR_BTI_SAMPLER_STATE) {
+      if (binding_should_use_sampler_binding_table(&state, binding)) {
          if (map->sampler_count + array_size * array_multiplier > MAX_SAMPLER_TABLE_SIZE ||
              anv_descriptor_requires_bindless(pdevice, binding, true) ||
              brw_shader_stage_requires_bindless_resources(shader->info.stage)) {
diff --git a/src/intel/vulkan/anv_nir_push_descriptor_analysis.c b/src/intel/vulkan/anv_nir_push_descriptor_analysis.c
index 2e1c75dbd75..62eb6088381 100644
--- a/src/intel/vulkan/anv_nir_push_descriptor_analysis.c
+++ b/src/intel/vulkan/anv_nir_push_descriptor_analysis.c
@@ -126,18 +126,17 @@ anv_nir_loads_push_desc_buffer(nir_shader *nir,
             if (intrin->intrinsic != nir_intrinsic_load_ubo)
                continue;
 
-            const nir_const_value *const_bt_idx =
-               nir_src_as_const_value(intrin->src[0]);
-            if (const_bt_idx == NULL)
+            const unsigned bt_idx =
+               brw_nir_ubo_surface_index_get_bti(intrin->src[0]);
+            if (bt_idx == UINT32_MAX)
                continue;
 
-            const unsigned bt_idx = const_bt_idx[0].u32;
-
             const struct anv_pipeline_binding *binding =
                &bind_map->surface_to_descriptor[bt_idx];
             if (binding->set == ANV_DESCRIPTOR_SET_DESCRIPTORS &&
-                binding->index == push_set)
+                binding->index == push_set) {
                return true;
+            }
          }
       }
    }
@@ -162,6 +161,7 @@ anv_nir_push_desc_ubo_fully_promoted(nir_shader *nir,
    if (push_set_layout == NULL)
       return 0;
 
+   /* Assume every UBO can be promoted first. */
    uint32_t ubos_fully_promoted = 0;
    for (uint32_t b = 0; b < push_set_layout->binding_count; b++) {
       const struct anv_descriptor_set_binding_layout *bind_layout =
@@ -174,6 +174,10 @@ anv_nir_push_desc_ubo_fully_promoted(nir_shader *nir,
          ubos_fully_promoted |= BITFIELD_BIT(bind_layout->descriptor_index);
    }
 
+   /* For each load_ubo intrinsic, if the descriptor index or the offset is
+    * not a constant, we could not promote to push constant. Then check the
+    * offset + size against the push ranges.
+    */
    nir_foreach_function_impl(impl, nir) {
       nir_foreach_block(block, impl) {
          nir_foreach_instr(instr, block) {
@@ -184,45 +188,65 @@ anv_nir_push_desc_ubo_fully_promoted(nir_shader *nir,
             if (intrin->intrinsic != nir_intrinsic_load_ubo)
                continue;
 
-            if (!brw_nir_ubo_surface_index_is_pushable(intrin->src[0]))
+            /* Don't check the load_ubo from descriptor buffers */
+            nir_intrinsic_instr *resource =
+               intrin->src[0].ssa->parent_instr->type == nir_instr_type_intrinsic ?
+               nir_instr_as_intrinsic(intrin->src[0].ssa->parent_instr) : NULL;
+            if (resource == NULL || resource->intrinsic != nir_intrinsic_resource_intel)
                continue;
 
-            const unsigned bt_idx =
-               brw_nir_ubo_surface_index_get_bti(intrin->src[0]);
+            /* Skip load_ubo not loading from the push descriptor */
+            if (nir_intrinsic_desc_set(resource) != push_set)
+               continue;
 
-            /* Skip if this isn't a load from push descriptor buffer. */
-            const struct anv_pipeline_binding *binding =
-               &bind_map->surface_to_descriptor[bt_idx];
-            if (binding->set != push_set)
+            uint32_t binding = nir_intrinsic_binding(resource);
+
+            /* If we have indirect indexing in the binding, no push promotion
+             * in possible for the entire binding.
+             */
+            if (!nir_src_is_const(resource->src[1])) {
+               for (uint32_t i = 0; i < push_set_layout->binding[binding].array_size; i++) {
+                  ubos_fully_promoted &=
+                     ~BITFIELD_BIT(push_set_layout->binding[binding].descriptor_index + i);
+               }
                continue;
+            }
 
-            const uint32_t desc_idx =
-               push_set_layout->binding[binding->binding].descriptor_index;
-            assert(desc_idx < MAX_PUSH_DESCRIPTORS);
+            const nir_const_value *const_bt_id =
+               nir_src_as_const_value(resource->src[1]);
+            uint32_t bt_id = const_bt_id[0].u32;
 
-            bool promoted = false;
+            const struct anv_pipeline_binding *pipe_bind =
+               &bind_map->surface_to_descriptor[bt_id];
+
+            const uint32_t desc_idx =
+               push_set_layout->binding[binding].descriptor_index;
 
             /* If the offset in the entry is dynamic, we can't tell if
              * promoted or not.
              */
             const nir_const_value *const_load_offset =
                nir_src_as_const_value(intrin->src[1]);
-            if (const_load_offset != NULL) {
-               /* Check if the load was promoted to a push constant. */
-               const unsigned load_offset = const_load_offset[0].u32;
-               const int load_bytes = nir_intrinsic_dest_components(intrin) *
-                  (intrin->def.bit_size / 8);
-
-               for (unsigned i = 0; i < ARRAY_SIZE(bind_map->push_ranges); i++) {
-                  if (bind_map->push_ranges[i].set == binding->set &&
-                      bind_map->push_ranges[i].index == desc_idx &&
-                      bind_map->push_ranges[i].start * 32 <= load_offset &&
-                      (bind_map->push_ranges[i].start +
-                       bind_map->push_ranges[i].length) * 32 >=
-                      (load_offset + load_bytes)) {
-                     promoted = true;
-                     break;
-                  }
+            if (const_load_offset == NULL) {
+               ubos_fully_promoted &= ~BITFIELD_BIT(desc_idx);
+               continue;
+            }
+
+            /* Check if the load was promoted to a push constant. */
+            const unsigned load_offset = const_load_offset[0].u32;
+            const int load_bytes = nir_intrinsic_dest_components(intrin) *
+               (intrin->def.bit_size / 8);
+
+            bool promoted = false;
+            for (unsigned i = 0; i < ARRAY_SIZE(bind_map->push_ranges); i++) {
+               if (bind_map->push_ranges[i].set == pipe_bind->set &&
+                   bind_map->push_ranges[i].index == desc_idx &&
+                   bind_map->push_ranges[i].start * 32 <= load_offset &&
+                   (bind_map->push_ranges[i].start +
+                    bind_map->push_ranges[i].length) * 32 >=
+                   (load_offset + load_bytes)) {
+                  promoted = true;
+                  break;
                }
             }
 
diff --git a/src/intel/vulkan/anv_pipeline.c b/src/intel/vulkan/anv_pipeline.c
index fe08cf44b71..4fcbe1e1604 100644
--- a/src/intel/vulkan/anv_pipeline.c
+++ b/src/intel/vulkan/anv_pipeline.c
@@ -839,7 +839,7 @@ anv_pipeline_hash_ray_tracing_combined_shader(struct anv_ray_tracing_pipeline *p
    _mesa_sha1_final(&ctx, sha1_out);
 }
 
-static nir_shader *
+static VkResult
 anv_pipeline_stage_get_nir(struct anv_pipeline *pipeline,
                            struct vk_pipeline_cache *cache,
                            void *mem_ctx,
@@ -849,25 +849,35 @@ anv_pipeline_stage_get_nir(struct anv_pipeline *pipeline,
       pipeline->device->physical->compiler;
    const nir_shader_compiler_options *nir_options =
       compiler->nir_options[stage->stage];
-   nir_shader *nir;
 
-   nir = anv_device_search_for_nir(pipeline->device, cache,
-                                   nir_options,
-                                   stage->shader_sha1,
-                                   mem_ctx);
-   if (nir) {
-      assert(nir->info.stage == stage->stage);
-      return nir;
+   stage->nir = anv_device_search_for_nir(pipeline->device, cache,
+                                          nir_options,
+                                          stage->shader_sha1,
+                                          mem_ctx);
+   if (stage->nir) {
+      assert(stage->nir->info.stage == stage->stage);
+      return VK_SUCCESS;
    }
 
-   nir = anv_shader_stage_to_nir(pipeline->device, stage->info,
-                                 stage->key.base.robust_flags, mem_ctx);
-   if (nir) {
-      anv_device_upload_nir(pipeline->device, cache, nir, stage->shader_sha1);
-      return nir;
+   /* VkPipelineShaderStageCreateInfo:
+    *
+    *    "If a pipeline is not found, pipeline compilation is not possible and
+    *     the implementation must fail as specified by
+    *     VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT."
+    */
+   if (vk_pipeline_shader_stage_has_identifier(stage->info))
+      return VK_PIPELINE_COMPILE_REQUIRED;
+
+   stage->nir = anv_shader_stage_to_nir(pipeline->device, stage->info,
+                                        stage->key.base.robust_flags, mem_ctx);
+   if (stage->nir) {
+      anv_device_upload_nir(pipeline->device, cache,
+                            stage->nir, stage->shader_sha1);
+      return VK_SUCCESS;
    }
 
-   return NULL;
+   return vk_errorf(&pipeline->device->vk, VK_ERROR_UNKNOWN,
+                    "Unable to load NIR");
 }
 
 static const struct vk_ycbcr_conversion_state *
@@ -1728,7 +1738,7 @@ anv_pipeline_account_shader(struct anv_pipeline *pipeline,
 
    if (shader->push_desc_info.used_set_buffer) {
       pipeline->use_push_descriptor_buffer |=
-         BITFIELD_BIT(mesa_to_vk_shader_stage(shader->stage));
+         mesa_to_vk_shader_stage(shader->stage);
    }
    if (shader->push_desc_info.used_descriptors &
        ~shader->push_desc_info.fully_promoted_ubo_descriptors)
@@ -2014,10 +2024,10 @@ anv_graphics_pipeline_load_nir(struct anv_graphics_base_pipeline *pipeline,
        * an imported library for the same stage.
        */
       if (stages[s].imported.bin == NULL) {
-         stages[s].nir = anv_pipeline_stage_get_nir(&pipeline->base, cache,
-                                                    mem_ctx, &stages[s]);
-         if (stages[s].nir == NULL)
-            return vk_error(pipeline, VK_ERROR_UNKNOWN);
+         VkResult result = anv_pipeline_stage_get_nir(&pipeline->base, cache,
+                                                      mem_ctx, &stages[s]);
+         if (result != VK_SUCCESS)
+            return result;
       } else {
          stages[s].nir = need_clone ?
                          nir_shader_clone(mem_ctx, stages[s].imported.nir) :
@@ -2220,9 +2230,9 @@ anv_graphics_pipeline_compile(struct anv_graphics_base_pipeline *pipeline,
                vk_perf(VK_LOG_OBJS(cache ? &cache->base :
                                    &pipeline->base.device->vk.base),
                        "Found all ISA shaders in the cache but not all NIR shaders.");
+            } else {
+               anv_graphics_lib_retain_shaders(pipeline, stages, false /* will_compile */);
             }
-
-            anv_graphics_lib_retain_shaders(pipeline, stages, false /* will_compile */);
          }
 
          if (result == VK_SUCCESS)
@@ -2621,10 +2631,11 @@ anv_pipeline_compile_cs(struct anv_compute_pipeline *pipeline,
          .binding = UINT32_MAX,
       };
 
-      stage.nir = anv_pipeline_stage_get_nir(&pipeline->base, cache, mem_ctx, &stage);
-      if (stage.nir == NULL) {
+      VkResult result = anv_pipeline_stage_get_nir(&pipeline->base, cache,
+                                                   mem_ctx, &stage);
+      if (result != VK_SUCCESS) {
          ralloc_free(mem_ctx);
-         return vk_error(pipeline, VK_ERROR_UNKNOWN);
+         return result;
       }
 
       anv_pipeline_nir_preprocess(&pipeline->base, &stage);
@@ -2781,20 +2792,12 @@ VkResult anv_CreateComputePipelines(
                                                  &pCreateInfos[i],
                                                  pAllocator, &pPipelines[i]);
 
-      if (res == VK_SUCCESS)
-         continue;
-
-      /* Bail out on the first error != VK_PIPELINE_COMPILE_REQUIRED as it
-       * is not obvious what error should be report upon 2 different failures.
-       * */
-      result = res;
-      if (res != VK_PIPELINE_COMPILE_REQUIRED)
-         break;
-
-      pPipelines[i] = VK_NULL_HANDLE;
-
-      if (flags & VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR)
-         break;
+      if (res != VK_SUCCESS) {
+         result = res;
+         if (flags & VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR)
+            break;
+         pPipelines[i] = VK_NULL_HANDLE;
+      }
    }
 
    for (; i < count; i++)
@@ -3317,20 +3320,12 @@ VkResult anv_CreateGraphicsPipelines(
                                             pAllocator, &pPipelines[i]);
       }
 
-      if (res == VK_SUCCESS)
-         continue;
-
-      /* Bail out on the first error != VK_PIPELINE_COMPILE_REQUIRED as it
-       * is not obvious what error should be report upon 2 different failures.
-       * */
-      result = res;
-      if (res != VK_PIPELINE_COMPILE_REQUIRED)
-         break;
-
-      pPipelines[i] = VK_NULL_HANDLE;
-
-      if (flags & VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR)
-         break;
+      if (res != VK_SUCCESS) {
+         result = res;
+         if (flags & VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR)
+            break;
+         pPipelines[i] = VK_NULL_HANDLE;
+      }
    }
 
    for (; i < count; i++)
@@ -3649,10 +3644,11 @@ anv_pipeline_compile_ray_tracing(struct anv_ray_tracing_pipeline *pipeline,
 
       int64_t stage_start = os_time_get_nano();
 
-      stages[i].nir = anv_pipeline_stage_get_nir(&pipeline->base, cache,
-                                                 tmp_pipeline_ctx, &stages[i]);
-      if (stages[i].nir == NULL)
-         return vk_error(pipeline, VK_ERROR_OUT_OF_HOST_MEMORY);
+      VkResult result = anv_pipeline_stage_get_nir(&pipeline->base, cache,
+                                                   tmp_pipeline_ctx,
+                                                   &stages[i]);
+      if (result != VK_SUCCESS)
+         return result;
 
       anv_pipeline_nir_preprocess(&pipeline->base, &stages[i]);
 
@@ -4154,19 +4150,12 @@ anv_CreateRayTracingPipelinesKHR(
                                                      &pCreateInfos[i],
                                                      pAllocator, &pPipelines[i]);
 
-      if (res == VK_SUCCESS)
-         continue;
-
-      /* Bail out on the first error as it is not obvious what error should be
-       * report upon 2 different failures. */
-      result = res;
-      if (result != VK_PIPELINE_COMPILE_REQUIRED)
-         break;
-
-      pPipelines[i] = VK_NULL_HANDLE;
-
-      if (flags & VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR)
-         break;
+      if (res != VK_SUCCESS) {
+         result = res;
+         if (flags & VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR)
+            break;
+         pPipelines[i] = VK_NULL_HANDLE;
+      }
    }
 
    for (; i < createInfoCount; i++)
@@ -4252,7 +4241,7 @@ VkResult anv_GetPipelineExecutableStatisticsKHR(
    switch (pipeline->type) {
    case ANV_PIPELINE_GRAPHICS:
    case ANV_PIPELINE_GRAPHICS_LIB: {
-      prog_data = anv_pipeline_to_graphics(pipeline)->base.shaders[exe->stage]->prog_data;
+      prog_data = anv_pipeline_to_graphics_base(pipeline)->shaders[exe->stage]->prog_data;
       break;
    }
    case ANV_PIPELINE_COMPUTE: {
diff --git a/src/intel/vulkan/anv_private.h b/src/intel/vulkan/anv_private.h
index 74442f212c4..251919c2efd 100644
--- a/src/intel/vulkan/anv_private.h
+++ b/src/intel/vulkan/anv_private.h
@@ -1667,6 +1667,10 @@ struct anv_device {
     struct anv_bo_pool                          batch_bo_pool;
     /** Memory pool for utrace timestamp buffers */
     struct anv_bo_pool                          utrace_bo_pool;
+    /**
+     * Size of the timestamp captured for utrace.
+     */
+    uint32_t                                     utrace_timestamp_size;
     /** Memory pool for BVH build buffers */
     struct anv_bo_pool                          bvh_bo_pool;
 
@@ -1856,13 +1860,13 @@ struct anv_device {
        struct list_head in_flight_batches;
     } trtt;
 
-    /* This is true if the user ever bound a sparse resource to memory. This
-     * is used for a workaround that makes every memoryBarrier flush more
-     * things than it should. Many applications request for the sparse
-     * featuers to be enabled but don't use them, and some create sparse
-     * resources but never use them.
+    /* Number of sparse resources that currently exist. This is used for a
+     * workaround that makes every memoryBarrier flush more things than it
+     * should. Some workloads create and then immediately destroy sparse
+     * resources when they start, so just counting if a sparse resource was
+     * ever created is not enough.
      */
-    bool                                         using_sparse;
+    uint32_t num_sparse_resources;
 
     struct anv_device_astc_emu                   astc_emu;
 };
@@ -3180,6 +3184,12 @@ struct anv_push_constants {
    /** Dynamic offsets for dynamic UBOs and SSBOs */
    uint32_t dynamic_offsets[MAX_DYNAMIC_BUFFERS];
 
+   /* Robust access pushed registers. */
+   uint64_t push_reg_mask[MESA_SHADER_STAGES];
+
+   /** Ray query globals (RT_DISPATCH_GLOBALS) */
+   uint64_t ray_query_globals;
+
    union {
       struct {
          /** Dynamic MSAA value */
@@ -3200,16 +3210,12 @@ struct anv_push_constants {
           *
           * This is never set by software but is implicitly filled out when
           * uploading the push constants for compute shaders.
+          *
+          * This *MUST* be the last field of the anv_push_constants structure.
           */
          uint32_t subgroup_id;
       } cs;
    };
-
-   /* Robust access pushed registers. */
-   uint64_t push_reg_mask[MESA_SHADER_STAGES];
-
-   /** Ray query globals (RT_DISPATCH_GLOBALS) */
-   uint64_t ray_query_globals;
 };
 
 struct anv_surface_state {
@@ -4372,11 +4378,19 @@ struct anv_ray_tracing_pipeline {
    }
 
 ANV_DECL_PIPELINE_DOWNCAST(graphics, ANV_PIPELINE_GRAPHICS)
-ANV_DECL_PIPELINE_DOWNCAST(graphics_base, ANV_PIPELINE_GRAPHICS)
 ANV_DECL_PIPELINE_DOWNCAST(graphics_lib, ANV_PIPELINE_GRAPHICS_LIB)
 ANV_DECL_PIPELINE_DOWNCAST(compute, ANV_PIPELINE_COMPUTE)
 ANV_DECL_PIPELINE_DOWNCAST(ray_tracing, ANV_PIPELINE_RAY_TRACING)
 
+/* Can't use the macro because we need to handle both types. */
+static inline struct anv_graphics_base_pipeline *
+anv_pipeline_to_graphics_base(struct anv_pipeline *pipeline)
+{
+   assert(pipeline->type == ANV_PIPELINE_GRAPHICS ||
+          pipeline->type == ANV_PIPELINE_GRAPHICS_LIB);
+   return (struct anv_graphics_base_pipeline *) pipeline;
+}
+
 static inline bool
 anv_pipeline_has_stage(const struct anv_graphics_pipeline *pipeline,
                        gl_shader_stage stage)
@@ -5142,19 +5156,10 @@ anv_image_clear_depth_stencil(struct anv_cmd_buffer *cmd_buffer,
                               VkRect2D area,
                               float depth_value, uint8_t stencil_value);
 void
-anv_image_msaa_resolve(struct anv_cmd_buffer *cmd_buffer,
-                       const struct anv_image *src_image,
-                       enum isl_aux_usage src_aux_usage,
-                       uint32_t src_level, uint32_t src_base_layer,
-                       const struct anv_image *dst_image,
-                       enum isl_aux_usage dst_aux_usage,
-                       uint32_t dst_level, uint32_t dst_base_layer,
-                       VkImageAspectFlagBits aspect,
-                       uint32_t src_x, uint32_t src_y,
-                       uint32_t dst_x, uint32_t dst_y,
-                       uint32_t width, uint32_t height,
-                       uint32_t layer_count,
-                       enum blorp_filter filter);
+anv_attachment_msaa_resolve(struct anv_cmd_buffer *cmd_buffer,
+                            const struct anv_attachment *att,
+                            VkImageLayout layout,
+                            VkImageAspectFlagBits aspect);
 void
 anv_image_hiz_op(struct anv_cmd_buffer *cmd_buffer,
                  const struct anv_image *image,
diff --git a/src/intel/vulkan/anv_sparse.c b/src/intel/vulkan/anv_sparse.c
index 180cf7e2c5d..1357b8e5824 100644
--- a/src/intel/vulkan/anv_sparse.c
+++ b/src/intel/vulkan/anv_sparse.c
@@ -707,6 +707,7 @@ anv_init_sparse_bindings(struct anv_device *device,
       return res;
    }
 
+   p_atomic_inc(&device->num_sparse_resources);
    return VK_SUCCESS;
 }
 
@@ -720,6 +721,8 @@ anv_free_sparse_bindings(struct anv_device *device,
    sparse_debug("%s: address:0x%016"PRIx64" size:0x%08"PRIx64"\n",
                 __func__, sparse->address, sparse->size);
 
+   p_atomic_dec(&device->num_sparse_resources);
+
    struct anv_vm_bind unbind = {
       .bo = 0,
       .address = sparse->address,
diff --git a/src/intel/vulkan/anv_util.c b/src/intel/vulkan/anv_util.c
index 9a87e91b39d..fabadf5d1ae 100644
--- a/src/intel/vulkan/anv_util.c
+++ b/src/intel/vulkan/anv_util.c
@@ -89,7 +89,7 @@ anv_dump_pipe_bits(enum anv_pipe_bits bits, FILE *f)
        bits & ANV_PIPE_END_OF_PIPE_SYNC_BIT)
       fputs("+cs_stall ", f);
    if (bits & ANV_PIPE_UNTYPED_DATAPORT_CACHE_FLUSH_BIT)
-      fputs("+utdp_flush", f);
+      fputs("+utdp_flush ", f);
    if (bits & ANV_PIPE_CCS_CACHE_FLUSH_BIT)
       fputs("+ccs_flush ", f);
 }
diff --git a/src/intel/vulkan/anv_utrace.c b/src/intel/vulkan/anv_utrace.c
index 56d445958a8..b5b20182a12 100644
--- a/src/intel/vulkan/anv_utrace.c
+++ b/src/intel/vulkan/anv_utrace.c
@@ -49,7 +49,7 @@ union anv_utrace_timestamp {
     *        [2] = 32b Context Timestamp End
     *        [3] = 32b Global Timestamp End"
     */
-   uint32_t compute_walker[4];
+   uint32_t compute_walker[8];
 };
 
 static uint32_t
@@ -499,6 +499,8 @@ anv_device_utrace_init(struct anv_device *device)
                                  intel_engines_class_to_string(queue->family->engine_class),
                                  queue->vk.index_in_family);
    }
+
+   device->utrace_timestamp_size = sizeof(union anv_utrace_timestamp);
 }
 
 void
diff --git a/src/intel/vulkan/genX_blorp_exec.c b/src/intel/vulkan/genX_blorp_exec.c
index 1cdd16cdf1a..c099a8dedfe 100644
--- a/src/intel/vulkan/genX_blorp_exec.c
+++ b/src/intel/vulkan/genX_blorp_exec.c
@@ -417,7 +417,9 @@ blorp_exec_on_compute(struct blorp_batch *batch,
 
    blorp_exec(batch, params);
 
+   cmd_buffer->state.descriptors_dirty |= VK_SHADER_STAGE_COMPUTE_BIT;
    cmd_buffer->state.push_constants_dirty |= VK_SHADER_STAGE_COMPUTE_BIT;
+   cmd_buffer->state.compute.pipeline_dirty = true;
 }
 
 static void
@@ -427,7 +429,7 @@ blorp_exec_on_blitter(struct blorp_batch *batch,
    assert(batch->flags & BLORP_BATCH_USE_BLITTER);
 
    struct anv_cmd_buffer *cmd_buffer = batch->driver_batch;
-   assert(cmd_buffer->queue_family->queueFlags == VK_QUEUE_TRANSFER_BIT);
+   assert(anv_cmd_buffer_is_blitter_queue(cmd_buffer));
 
    blorp_exec(batch, params);
 }
diff --git a/src/intel/vulkan/genX_cmd_buffer.c b/src/intel/vulkan/genX_cmd_buffer.c
index eb3be7de5ad..e799b6df39b 100644
--- a/src/intel/vulkan/genX_cmd_buffer.c
+++ b/src/intel/vulkan/genX_cmd_buffer.c
@@ -2928,6 +2928,16 @@ genX(batch_emit_pipe_control_write)(struct anv_batch *batch,
       };
    }
 
+   /* SKL PRMs, Volume 7: 3D-Media-GPGPU, Programming Restrictions for
+    * PIPE_CONTROL, Flush Types:
+    *   "Requires stall bit ([20] of DW) set for all GPGPU Workloads."
+    * For newer platforms this is documented in the PIPE_CONTROL instruction
+    * page.
+    */
+   if (current_pipeline == GPGPU &&
+       (bits & ANV_PIPE_TEXTURE_CACHE_INVALIDATE_BIT))
+      bits |= ANV_PIPE_CS_STALL_BIT;
+
 #if INTEL_NEEDS_WA_1409600907
    /* Wa_1409600907: "PIPE_CONTROL with Depth Stall Enable bit must
     * be set with any PIPE_CONTROL with Depth Flush Enable bit set.
@@ -3333,6 +3343,10 @@ anv_use_generated_draws(const struct anv_cmd_buffer *cmd_buffer, uint32_t count)
    const struct anv_graphics_pipeline *pipeline =
       anv_pipeline_to_graphics(cmd_buffer->state.gfx.base.pipeline);
 
+   /* We cannot generate readable commands in protected mode. */
+   if (cmd_buffer->vk.pool->flags & VK_COMMAND_POOL_CREATE_PROTECTED_BIT)
+      return false;
+
    /* Limit generated draws to pipelines without HS stage. This makes things
     * simpler for implementing Wa_1306463417, Wa_16011107343.
     */
@@ -3343,6 +3357,33 @@ anv_use_generated_draws(const struct anv_cmd_buffer *cmd_buffer, uint32_t count)
    return count >= device->physical->instance->generated_indirect_threshold;
 }
 
+static void
+genX(cmd_buffer_set_protected_memory)(struct anv_cmd_buffer *cmd_buffer,
+                                      bool enabled)
+{
+#if GFX_VER >= 12
+   if (enabled) {
+      anv_batch_emit(&cmd_buffer->batch, GENX(MI_SET_APPID), appid) {
+         /* Default value for single session. */
+         appid.ProtectedMemoryApplicationID = cmd_buffer->device->protected_session_id;
+         appid.ProtectedMemoryApplicationIDType = DISPLAY_APP;
+      }
+   }
+   anv_batch_emit(&cmd_buffer->batch, GENX(PIPE_CONTROL), pc) {
+      pc.PipeControlFlushEnable = true;
+      pc.DCFlushEnable = true;
+      pc.RenderTargetCacheFlushEnable = true;
+      pc.CommandStreamerStallEnable = true;
+      if (enabled)
+         pc.ProtectedMemoryEnable = true;
+      else
+         pc.ProtectedMemoryDisable = true;
+   }
+#else
+   unreachable("Protected content not supported");
+#endif
+}
+
 VkResult
 genX(BeginCommandBuffer)(
     VkCommandBuffer                             commandBuffer,
@@ -3417,19 +3458,8 @@ genX(BeginCommandBuffer)(
 
 #if GFX_VER >= 12
    if (cmd_buffer->vk.level == VK_COMMAND_BUFFER_LEVEL_PRIMARY &&
-       cmd_buffer->vk.pool->flags & VK_COMMAND_POOL_CREATE_PROTECTED_BIT) {
-      anv_batch_emit(&cmd_buffer->batch, GENX(MI_SET_APPID), appid) {
-         /* Default value for single session. */
-         appid.ProtectedMemoryApplicationID = cmd_buffer->device->protected_session_id;
-         appid.ProtectedMemoryApplicationIDType = DISPLAY_APP;
-      }
-      anv_batch_emit(&cmd_buffer->batch, GENX(PIPE_CONTROL), pc) {
-         pc.CommandStreamerStallEnable = true;
-         pc.DCFlushEnable = true;
-         pc.RenderTargetCacheFlushEnable = true;
-         pc.ProtectedMemoryEnable = true;
-      }
-   }
+       cmd_buffer->vk.pool->flags & VK_COMMAND_POOL_CREATE_PROTECTED_BIT)
+      genX(cmd_buffer_set_protected_memory)(cmd_buffer, true);
 #endif
 
    genX(cmd_buffer_emit_state_base_address)(cmd_buffer);
@@ -3643,14 +3673,8 @@ end_command_buffer(struct anv_cmd_buffer *cmd_buffer)
 
 #if GFX_VER >= 12
    if (cmd_buffer->vk.level == VK_COMMAND_BUFFER_LEVEL_PRIMARY &&
-       cmd_buffer->vk.pool->flags & VK_COMMAND_POOL_CREATE_PROTECTED_BIT) {
-      anv_batch_emit(&cmd_buffer->batch, GENX(PIPE_CONTROL), pc) {
-         pc.CommandStreamerStallEnable = true;
-         pc.DCFlushEnable = true;
-         pc.RenderTargetCacheFlushEnable = true;
-         pc.ProtectedMemoryDisable = true;
-      }
-   }
+       cmd_buffer->vk.pool->flags & VK_COMMAND_POOL_CREATE_PROTECTED_BIT)
+      genX(cmd_buffer_set_protected_memory)(cmd_buffer, false);
 #endif
 
    trace_intel_end_cmd_buffer(&cmd_buffer->trace, cmd_buffer->vk.level);
@@ -3689,14 +3713,16 @@ cmd_buffer_emit_copy_ts_buffer(struct u_trace_context *utctx,
                                void *ts_to, uint32_t to_offset,
                                uint32_t count)
 {
+   struct anv_device *device =
+      container_of(utctx, struct anv_device, ds.trace_context);
    struct anv_memcpy_state *memcpy_state = cmdstream;
    struct anv_address from_addr = (struct anv_address) {
-      .bo = ts_from, .offset = from_offset * sizeof(uint64_t) };
+      .bo = ts_from, .offset = from_offset * device->utrace_timestamp_size };
    struct anv_address to_addr = (struct anv_address) {
-      .bo = ts_to, .offset = to_offset * sizeof(uint64_t) };
+      .bo = ts_to, .offset = to_offset * device->utrace_timestamp_size };
 
    genX(emit_so_memcpy)(memcpy_state, to_addr, from_addr,
-                        count * sizeof(uint64_t));
+                        count * device->utrace_timestamp_size);
 }
 
 void
@@ -4072,6 +4098,7 @@ anv_pipe_invalidate_bits_for_access_flags(struct anv_cmd_buffer *cmd_buffer,
           * tile cache flush to make sure any previous write is not going to
           * create WaW hazards.
           */
+         pipe_bits |= ANV_PIPE_DATA_CACHE_FLUSH_BIT;
          pipe_bits |= ANV_PIPE_TILE_CACHE_FLUSH_BIT;
          break;
       case VK_ACCESS_2_SHADER_STORAGE_READ_BIT:
@@ -4393,7 +4420,8 @@ cmd_buffer_barrier(struct anv_cmd_buffer *cmd_buffer,
       /* There's no way of knowing if this memory barrier is related to sparse
        * buffers! This is pretty horrible.
        */
-      if (device->using_sparse && mask_is_write(src_flags))
+      if (mask_is_write(src_flags) &&
+          p_atomic_read(&device->num_sparse_resources) > 0)
          apply_sparse_flushes = true;
    }
 
@@ -5240,7 +5268,8 @@ emit_indirect_draws(struct anv_cmd_buffer *cmd_buffer,
    UNUSED const struct intel_device_info *devinfo = cmd_buffer->device->info;
    UNUSED const bool aligned_stride =
       (indirect_data_stride == 0 ||
-       indirect_data_stride == sizeof(VkDrawIndirectCommand));
+       (!indexed && indirect_data_stride == sizeof(VkDrawIndirectCommand)) ||
+       (indexed && indirect_data_stride == sizeof(VkDrawIndexedIndirectCommand)));
    UNUSED const bool execute_indirect_supported =
       execute_indirect_draw_supported(cmd_buffer);
 
@@ -5289,7 +5318,7 @@ emit_indirect_draws(struct anv_cmd_buffer *cmd_buffer,
 #if GFX_VERx10 >= 125
          genX(emit_breakpoint)(&cmd_buffer->batch, cmd_buffer->device, true);
          anv_batch_emit(&cmd_buffer->batch, GENX(EXECUTE_INDIRECT_DRAW), ind) {
-            ind.ArgumentFormat             = DRAW;
+            ind.ArgumentFormat             = indexed ? DRAWINDEXED : DRAW;
             ind.TBIMREnabled               = cmd_buffer->state.gfx.dyn_state.use_tbimr;
             ind.PredicateEnable            =
                cmd_buffer->state.conditional_render_enabled;
@@ -8249,86 +8278,6 @@ cmd_buffer_mark_attachment_written(struct anv_cmd_buffer *cmd_buffer,
    }
 }
 
-static enum blorp_filter
-vk_to_blorp_resolve_mode(VkResolveModeFlagBits vk_mode)
-{
-   switch (vk_mode) {
-   case VK_RESOLVE_MODE_SAMPLE_ZERO_BIT:
-      return BLORP_FILTER_SAMPLE_0;
-   case VK_RESOLVE_MODE_AVERAGE_BIT:
-      return BLORP_FILTER_AVERAGE;
-   case VK_RESOLVE_MODE_MIN_BIT:
-      return BLORP_FILTER_MIN_SAMPLE;
-   case VK_RESOLVE_MODE_MAX_BIT:
-      return BLORP_FILTER_MAX_SAMPLE;
-   default:
-      return BLORP_FILTER_NONE;
-   }
-}
-
-static void
-cmd_buffer_resolve_msaa_attachment(struct anv_cmd_buffer *cmd_buffer,
-                                   const struct anv_attachment *att,
-                                   VkImageLayout layout,
-                                   VkImageAspectFlagBits aspect)
-{
-   struct anv_cmd_graphics_state *gfx = &cmd_buffer->state.gfx;
-   const struct anv_image_view *src_iview = att->iview;
-   const struct anv_image_view *dst_iview = att->resolve_iview;
-
-   enum isl_aux_usage src_aux_usage =
-      anv_layout_to_aux_usage(cmd_buffer->device->info,
-                              src_iview->image, aspect,
-                              VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
-                              layout,
-                              cmd_buffer->queue_family->queueFlags);
-
-   enum isl_aux_usage dst_aux_usage =
-      anv_layout_to_aux_usage(cmd_buffer->device->info,
-                              dst_iview->image, aspect,
-                              VK_IMAGE_USAGE_TRANSFER_DST_BIT,
-                              att->resolve_layout,
-                              cmd_buffer->queue_family->queueFlags);
-
-   enum blorp_filter filter = vk_to_blorp_resolve_mode(att->resolve_mode);
-
-   const VkRect2D render_area = gfx->render_area;
-   if (gfx->view_mask == 0) {
-      anv_image_msaa_resolve(cmd_buffer,
-                             src_iview->image, src_aux_usage,
-                             src_iview->planes[0].isl.base_level,
-                             src_iview->planes[0].isl.base_array_layer,
-                             dst_iview->image, dst_aux_usage,
-                             dst_iview->planes[0].isl.base_level,
-                             dst_iview->planes[0].isl.base_array_layer,
-                             aspect,
-                             render_area.offset.x, render_area.offset.y,
-                             render_area.offset.x, render_area.offset.y,
-                             render_area.extent.width,
-                             render_area.extent.height,
-                             gfx->layer_count, filter);
-   } else {
-      uint32_t res_view_mask = gfx->view_mask;
-      while (res_view_mask) {
-         int i = u_bit_scan(&res_view_mask);
-
-         anv_image_msaa_resolve(cmd_buffer,
-                                src_iview->image, src_aux_usage,
-                                src_iview->planes[0].isl.base_level,
-                                src_iview->planes[0].isl.base_array_layer + i,
-                                dst_iview->image, dst_aux_usage,
-                                dst_iview->planes[0].isl.base_level,
-                                dst_iview->planes[0].isl.base_array_layer + i,
-                                aspect,
-                                render_area.offset.x, render_area.offset.y,
-                                render_area.offset.x, render_area.offset.y,
-                                render_area.extent.width,
-                                render_area.extent.height,
-                                1, filter);
-      }
-   }
-}
-
 void genX(CmdEndRendering)(
     VkCommandBuffer                             commandBuffer)
 {
@@ -8370,8 +8319,9 @@ void genX(CmdEndRendering)(
                                 "MSAA resolve");
    }
 
-   if (gfx->depth_att.resolve_mode != VK_RESOLVE_MODE_NONE ||
-       gfx->stencil_att.resolve_mode != VK_RESOLVE_MODE_NONE) {
+   if (!(gfx->rendering_flags & VK_RENDERING_SUSPENDING_BIT) &&
+       (gfx->depth_att.resolve_mode != VK_RESOLVE_MODE_NONE ||
+        gfx->stencil_att.resolve_mode != VK_RESOLVE_MODE_NONE)) {
       /* We are about to do some MSAA resolves.  We need to flush so that the
        * result of writes to the MSAA depth attachments show up in the sampler
        * when we blit to the single-sampled resolve target.
@@ -8388,8 +8338,8 @@ void genX(CmdEndRendering)(
           (gfx->rendering_flags & VK_RENDERING_SUSPENDING_BIT))
          continue;
 
-      cmd_buffer_resolve_msaa_attachment(cmd_buffer, att, att->layout,
-                                         VK_IMAGE_ASPECT_COLOR_BIT);
+      anv_attachment_msaa_resolve(cmd_buffer, att, att->layout,
+                                  VK_IMAGE_ASPECT_COLOR_BIT);
    }
 
    if (gfx->depth_att.resolve_mode != VK_RESOLVE_MODE_NONE &&
@@ -8407,9 +8357,9 @@ void genX(CmdEndRendering)(
                               VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
                               false /* will_full_fast_clear */);
 
-      cmd_buffer_resolve_msaa_attachment(cmd_buffer, &gfx->depth_att,
-                                         VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
-                                         VK_IMAGE_ASPECT_DEPTH_BIT);
+      anv_attachment_msaa_resolve(cmd_buffer, &gfx->depth_att,
+                                  VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
+                                  VK_IMAGE_ASPECT_DEPTH_BIT);
 
       /* Transition the source back to the original layout.  This seems a bit
        * inefficient but, since HiZ resolves aren't destructive, going from
@@ -8425,9 +8375,9 @@ void genX(CmdEndRendering)(
 
    if (gfx->stencil_att.resolve_mode != VK_RESOLVE_MODE_NONE &&
        !(gfx->rendering_flags & VK_RENDERING_SUSPENDING_BIT)) {
-      cmd_buffer_resolve_msaa_attachment(cmd_buffer, &gfx->stencil_att,
-                                         gfx->stencil_att.layout,
-                                         VK_IMAGE_ASPECT_STENCIL_BIT);
+      anv_attachment_msaa_resolve(cmd_buffer, &gfx->stencil_att,
+                                  gfx->stencil_att.layout,
+                                  VK_IMAGE_ASPECT_STENCIL_BIT);
    }
 
 
diff --git a/src/intel/vulkan/genX_gfx_state.c b/src/intel/vulkan/genX_gfx_state.c
index 66af91f8f62..aebf85b2c24 100644
--- a/src/intel/vulkan/genX_gfx_state.c
+++ b/src/intel/vulkan/genX_gfx_state.c
@@ -68,7 +68,7 @@ static const uint32_t genX(vk_to_intel_blend_op)[] = {
 static void
 genX(streamout_prologue)(struct anv_cmd_buffer *cmd_buffer)
 {
-#if GFX_VERx10 >= 120
+#if INTEL_WA_16013994831_GFX_VER
    /* Wa_16013994831 - Disable preemption during streamout, enable back
     * again if XFB not used by the current pipeline.
     *
@@ -292,6 +292,15 @@ genX(rasterization_mode)(VkPolygonMode raster_mode,
    }
 }
 
+static bool
+is_src1_blend_factor(enum GENX(3D_Color_Buffer_Blend_Factor) factor)
+{
+   return factor == BLENDFACTOR_SRC1_COLOR ||
+          factor == BLENDFACTOR_SRC1_ALPHA ||
+          factor == BLENDFACTOR_INV_SRC1_COLOR ||
+          factor == BLENDFACTOR_INV_SRC1_ALPHA;
+}
+
 #if GFX_VERx10 == 125
 /**
  * Return the dimensions of the current rendering area, defined as the
@@ -998,6 +1007,16 @@ genX(cmd_buffer_flush_gfx_runtime_state)(struct anv_cmd_buffer *cmd_buffer)
                dyn->cb.attachments[i].dst_alpha_blend_factor];
          }
 
+         /* Replace and Src1 value by 1.0 if dual source blending is not
+          * enabled.
+          */
+         if (wm_prog_data && !wm_prog_data->dual_src_blend) {
+            if (is_src1_blend_factor(SourceBlendFactor))
+               SourceBlendFactor = BLENDFACTOR_ONE;
+            if (is_src1_blend_factor(DestinationBlendFactor))
+               DestinationBlendFactor = BLENDFACTOR_ONE;
+         }
+
          if (instance->intel_enable_wa_14018912822 &&
              intel_needs_workaround(cmd_buffer->device->info, 14018912822) &&
              pipeline->rasterization_samples > 1) {
@@ -1028,7 +1047,7 @@ genX(cmd_buffer_flush_gfx_runtime_state)(struct anv_cmd_buffer *cmd_buffer)
       SET(PS_BLEND, ps_blend.ColorBufferBlendEnable, GET(blend.rts[0].ColorBufferBlendEnable));
       SET(PS_BLEND, ps_blend.SourceAlphaBlendFactor, GET(blend.rts[0].SourceAlphaBlendFactor));
       SET(PS_BLEND, ps_blend.DestinationAlphaBlendFactor, gfx->alpha_blend_zero ?
-                                                          BLENDFACTOR_CONST_COLOR :
+                                                          BLENDFACTOR_CONST_ALPHA :
                                                           GET(blend.rts[0].DestinationAlphaBlendFactor));
       SET(PS_BLEND, ps_blend.SourceBlendFactor, GET(blend.rts[0].SourceBlendFactor));
       SET(PS_BLEND, ps_blend.DestinationBlendFactor, gfx->color_blend_zero ?
@@ -1189,12 +1208,12 @@ genX(cmd_buffer_flush_gfx_runtime_state)(struct anv_cmd_buffer *cmd_buffer)
        * number of viewport programmed previously was larger than what we need
        * now, no need to reemit we can just keep the old programmed values.
        */
-      if (BITSET_SET(hw_state->dirty, ANV_GFX_STATE_VIEWPORT_SF_CLIP) ||
+      if (BITSET_TEST(hw_state->dirty, ANV_GFX_STATE_VIEWPORT_SF_CLIP) ||
           hw_state->vp_sf_clip.count < dyn->vp.viewport_count) {
          hw_state->vp_sf_clip.count = dyn->vp.viewport_count;
          BITSET_SET(hw_state->dirty, ANV_GFX_STATE_VIEWPORT_SF_CLIP);
       }
-      if (BITSET_SET(hw_state->dirty, ANV_GFX_STATE_VIEWPORT_CC) ||
+      if (BITSET_TEST(hw_state->dirty, ANV_GFX_STATE_VIEWPORT_CC) ||
           hw_state->vp_cc.count < dyn->vp.viewport_count) {
          hw_state->vp_cc.count = dyn->vp.viewport_count;
          BITSET_SET(hw_state->dirty, ANV_GFX_STATE_VIEWPORT_CC);
@@ -1260,7 +1279,7 @@ genX(cmd_buffer_flush_gfx_runtime_state)(struct anv_cmd_buffer *cmd_buffer)
        * number of viewport programmed previously was larger than what we need
        * now, no need to reemit we can just keep the old programmed values.
        */
-      if (BITSET_SET(hw_state->dirty, ANV_GFX_STATE_SCISSOR) ||
+      if (BITSET_TEST(hw_state->dirty, ANV_GFX_STATE_SCISSOR) ||
           hw_state->scissor.count < dyn->vp.scissor_count) {
          hw_state->scissor.count = dyn->vp.scissor_count;
          BITSET_SET(hw_state->dirty, ANV_GFX_STATE_SCISSOR);
diff --git a/src/intel/vulkan/genX_gpu_memcpy.c b/src/intel/vulkan/genX_gpu_memcpy.c
index 70b0851850f..92ed6f13ac2 100644
--- a/src/intel/vulkan/genX_gpu_memcpy.c
+++ b/src/intel/vulkan/genX_gpu_memcpy.c
@@ -80,7 +80,9 @@ emit_common_so_memcpy(struct anv_batch *batch, struct anv_device *device,
       anv_batch_emit(batch, GENX(3DSTATE_MESH_CONTROL), mesh);
       anv_batch_emit(batch, GENX(3DSTATE_TASK_CONTROL), task);
    }
+#endif
 
+#if INTEL_WA_16013994831_GFX_VER
    /* Wa_16013994831 - Disable preemption during streamout. */
    if (intel_needs_workaround(device->info, 16013994831))
       genX(batch_set_preemption)(batch, device->info, _3D, false);
diff --git a/src/intel/vulkan/genX_init_state.c b/src/intel/vulkan/genX_init_state.c
index da994697c7e..df8aaa44bce 100644
--- a/src/intel/vulkan/genX_init_state.c
+++ b/src/intel/vulkan/genX_init_state.c
@@ -158,12 +158,15 @@ genX(emit_slice_hashing_state)(struct anv_device *device,
    }
 
    /* TODO: Figure out FCV support for other platforms
-    * Testing indicates that FCV is broken on MTL, but works fine on DG2.
-    * Let's disable FCV on MTL for now till we figure out what's wrong.
+    * Testing indicates that FCV is broken gfx125.
+    * Let's disable FCV for now till we figure out what's wrong.
     *
     * Alternatively, it can be toggled off via drirc option 'anv_disable_fcv'.
     *
     * Ref: https://gitlab.freedesktop.org/mesa/mesa/-/issues/9987
+    * Ref: https://gitlab.freedesktop.org/mesa/mesa/-/issues/10318
+    * Ref: https://gitlab.freedesktop.org/mesa/mesa/-/issues/10795
+    * Ref: Internal issue 1480 about Unreal Engine 5.1
     */
    anv_batch_emit(batch, GENX(3DSTATE_3D_MODE), mode) {
       mode.SliceHashingTableEnable = true;
diff --git a/src/intel/vulkan/genX_query.c b/src/intel/vulkan/genX_query.c
index e4f10721d28..b6bc348b5e2 100644
--- a/src/intel/vulkan/genX_query.c
+++ b/src/intel/vulkan/genX_query.c
@@ -554,7 +554,8 @@ VkResult genX(GetQueryPoolResults)(
          while (statistics) {
             UNUSED uint32_t stat = u_bit_scan(&statistics);
             if (write_results) {
-               uint64_t result = slot[idx * 2 + 2] - slot[idx * 2 + 1];
+               /* If a query is not available but VK_QUERY_RESULT_PARTIAL_BIT is set, write 0. */
+               uint64_t result = available ? slot[idx * 2 + 2] - slot[idx * 2 + 1] : 0;
                cpu_write_query_result(pData, flags, idx, result);
             }
             idx++;
@@ -565,11 +566,17 @@ VkResult genX(GetQueryPoolResults)(
 
       case VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: {
          uint64_t *slot = query_slot(pool, firstQuery + i);
-         if (write_results)
-            cpu_write_query_result(pData, flags, idx, slot[2] - slot[1]);
+         if (write_results) {
+            /* If a query is not available but VK_QUERY_RESULT_PARTIAL_BIT is set, write 0. */
+            uint64_t result = available ? slot[2] - slot[1] : 0;
+            cpu_write_query_result(pData, flags, idx, result);
+         }
          idx++;
-         if (write_results)
-            cpu_write_query_result(pData, flags, idx, slot[4] - slot[3]);
+         if (write_results) {
+            /* If a query is not available but VK_QUERY_RESULT_PARTIAL_BIT is set, write 0. */
+            uint64_t result = available ? slot[4] - slot[3] : 0;
+            cpu_write_query_result(pData, flags, idx, result);
+         }
          idx++;
          break;
       }
diff --git a/src/intel/vulkan/genX_simple_shader.c b/src/intel/vulkan/genX_simple_shader.c
index 9adbf8cac36..2fc1a548d9b 100644
--- a/src/intel/vulkan/genX_simple_shader.c
+++ b/src/intel/vulkan/genX_simple_shader.c
@@ -545,6 +545,7 @@ genX(emit_simple_shader_dispatch)(struct anv_simple_shader *state,
 #if GFX_VERx10 >= 125
       anv_batch_emit(batch, GENX(COMPUTE_WALKER), cw) {
          cw.SIMDSize                       = dispatch.simd_size / 16;
+         cw.MessageSIMD                    = dispatch.simd_size / 16,
          cw.IndirectDataStartAddress       = push_state.offset;
          cw.IndirectDataLength             = push_state.alloc_size;
          cw.LocalXMaximum                  = prog_data->local_size[0] - 1;
diff --git a/src/intel/vulkan/genX_video.c b/src/intel/vulkan/genX_video.c
index 8eacbf12eef..5156e93a601 100644
--- a/src/intel/vulkan/genX_video.c
+++ b/src/intel/vulkan/genX_video.c
@@ -63,10 +63,46 @@ genX(CmdEndVideoCodingKHR)(VkCommandBuffer commandBuffer,
    cmd_buffer->video.params = NULL;
 }
 
+/*
+ * The default scan order of scaling lists is up-right-diagonal
+ * according to the spec. But the device requires raster order,
+ * so we need to convert from the passed scaling lists.
+ */
+static void
+anv_h265_matrix_from_uprightdiagonal(StdVideoH265ScalingLists *out_sl,
+                                     const StdVideoH265ScalingLists *sl)
+{
+  uint8_t i, j;
+
+  for (i = 0; i < 6; i++) {
+     for (j = 0; j < STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS; j++)
+        out_sl->ScalingList4x4[i][vl_zscan_h265_up_right_diagonal_16[j]] =
+           sl->ScalingList4x4[i][j];
+
+     for (j = 0; j < STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS; j++)
+        out_sl->ScalingList8x8[i][vl_zscan_h265_up_right_diagonal[j]] =
+           sl->ScalingList8x8[i][j];
+
+     for (j = 0; j < STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS; j++)
+        out_sl->ScalingList16x16[i][vl_zscan_h265_up_right_diagonal[j]] =
+           sl->ScalingList16x16[i][j];
+  }
+
+  for (i = 0; i < STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS; i++) {
+     for (j = 0; j < STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS; j++)
+        out_sl->ScalingList32x32[i][vl_zscan_h265_up_right_diagonal[j]] =
+           sl->ScalingList32x32[i][j];
+  }
+}
+
 static void
 scaling_list(struct anv_cmd_buffer *cmd_buffer,
              const StdVideoH265ScalingLists *scaling_list)
 {
+   StdVideoH265ScalingLists out_sl = {0, };
+
+   anv_h265_matrix_from_uprightdiagonal(&out_sl, scaling_list);
+
    /* 4x4, 8x8, 16x16, 32x32 */
    for (uint8_t size = 0; size < 4; size++) {
       /* Intra, Inter */
@@ -89,22 +125,22 @@ scaling_list(struct anv_cmd_buffer *cmd_buffer,
                   for (uint8_t i = 0; i < 4; i++)
                      for (uint8_t j = 0; j < 4; j++)
                         qm.QuantizerMatrix8x8[4 * i + j] =
-                           scaling_list->ScalingList4x4[3 * pred + color][4 * i + j];
+                           out_sl.ScalingList4x4[3 * pred + color][4 * i + j];
                } else if (size == 1) {
                   for (uint8_t i = 0; i < 8; i++)
                      for (uint8_t j = 0; j < 8; j++)
                         qm.QuantizerMatrix8x8[8 * i + j] =
-                           scaling_list->ScalingList8x8[3 * pred + color][8 * i + j];
+                           out_sl.ScalingList8x8[3 * pred + color][8 * i + j];
                } else if (size == 2) {
                   for (uint8_t i = 0; i < 8; i++)
                      for (uint8_t j = 0; j < 8; j++)
                         qm.QuantizerMatrix8x8[8 * i + j] =
-                           scaling_list->ScalingList16x16[3 * pred + color][8 * i + j];
+                           out_sl.ScalingList16x16[3 * pred + color][8 * i + j];
                } else if (size == 3) {
                   for (uint8_t i = 0; i < 8; i++)
                      for (uint8_t j = 0; j < 8; j++)
                         qm.QuantizerMatrix8x8[8 * i + j] =
-                           scaling_list->ScalingList32x32[pred][8 * i + j];
+                           out_sl.ScalingList32x32[pred][8 * i + j];
                }
             }
          }
diff --git a/src/intel/vulkan/grl/meson.build b/src/intel/vulkan/grl/meson.build
index 1bf4c3b4e9f..d611a871b30 100644
--- a/src/intel/vulkan/grl/meson.build
+++ b/src/intel/vulkan/grl/meson.build
@@ -201,6 +201,6 @@ libgrl = static_library(
 idep_grl = declare_dependency(
   link_with : libgrl,
   dependencies : libgrl_deps,
-  sources : grl_metakernel_h,
+  sources : [grl_metakernel_h, grl_cl_kernel_h],
   include_directories : include_directories('include', 'gpu'),
 )
diff --git a/src/intel/vulkan/i915/anv_queue.c b/src/intel/vulkan/i915/anv_queue.c
index f2b8f848b8d..173cf7b2a3a 100644
--- a/src/intel/vulkan/i915/anv_queue.c
+++ b/src/intel/vulkan/i915/anv_queue.c
@@ -58,8 +58,13 @@ anv_i915_create_engine(struct anv_device *device,
    } else if (device->physical->has_vm_control) {
       assert(pCreateInfo->queueFamilyIndex < physical->queue.family_count);
       enum intel_engine_class engine_classes[1];
+      enum intel_gem_create_context_flags flags = 0;
+
       engine_classes[0] = queue_family->engine_class;
-      if (!intel_gem_create_context_engines(device->fd, 0 /* flags */,
+      if (pCreateInfo->flags & VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT)
+         flags |= INTEL_GEM_CREATE_CONTEXT_EXT_PROTECTED_FLAG;
+
+      if (!intel_gem_create_context_engines(device->fd, flags,
                                             physical->engine_info,
                                             1, engine_classes,
                                             device->vm_id,
@@ -74,7 +79,7 @@ anv_i915_create_engine(struct anv_device *device,
           queue_family->engine_class == INTEL_ENGINE_CLASS_COMPUTE) {
          uint32_t *context_id = (uint32_t *)&queue->companion_rcs_id;
          engine_classes[0] = INTEL_ENGINE_CLASS_RENDER;
-         if (!intel_gem_create_context_engines(device->fd, 0 /* flags */,
+         if (!intel_gem_create_context_engines(device->fd, flags,
                                                physical->engine_info,
                                                1, engine_classes,
                                                device->vm_id,
diff --git a/src/intel/vulkan/layers/anv_android_layer.c b/src/intel/vulkan/layers/anv_android_layer.c
index e36eb820ab6..4a7d0dd7170 100644
--- a/src/intel/vulkan/layers/anv_android_layer.c
+++ b/src/intel/vulkan/layers/anv_android_layer.c
@@ -38,7 +38,8 @@ android_CreateImageView(VkDevice _device,
     * format.
     */
    if (fmt && fmt->layout == UTIL_FORMAT_LAYOUT_ASTC &&
-       device->info->verx10 >= 125) {
+       device->info->verx10 >= 125 &&
+       !(device->physical->has_astc_ldr || device->physical->emu_astc_ldr)) {
       return vk_errorf(device, VK_ERROR_OUT_OF_HOST_MEMORY,
                        "ASTC format not supported (%s).", __func__);
    }
diff --git a/src/intel/vulkan/xe/anv_batch_chain.c b/src/intel/vulkan/xe/anv_batch_chain.c
index 22ccaa4763a..c0d931c4c02 100644
--- a/src/intel/vulkan/xe/anv_batch_chain.c
+++ b/src/intel/vulkan/xe/anv_batch_chain.c
@@ -114,9 +114,15 @@ xe_exec_process_syncs(struct anv_queue *queue,
                       struct drm_xe_sync **ret, uint32_t *ret_count)
 {
    struct anv_device *device = queue->device;
-   uint32_t num_syncs = wait_count + signal_count + extra_sync_count +
-                        (utrace_submit ? 1 : 0) +
-                        ((queue->sync && !is_companion_rcs_queue) ? 1 : 0);
+   /* Signal the utrace sync only if it doesn't have a batch. Otherwise the
+    * it's the utrace batch that should signal its own sync.
+    */
+   const bool has_utrace_sync = utrace_submit &&
+                                util_dynarray_num_elements(&utrace_submit->batch_bos, struct anv_bo *) == 0;
+   const uint32_t num_syncs = wait_count + signal_count + extra_sync_count +
+                              (has_utrace_sync ? 1 : 0) +
+                              ((queue->sync && !is_companion_rcs_queue) ? 1 : 0);
+
    if (!num_syncs)
       return VK_SUCCESS;
 
@@ -128,12 +134,7 @@ xe_exec_process_syncs(struct anv_queue *queue,
 
    uint32_t count = 0;
 
-   /* Signal the utrace sync only if it doesn't have a batch. Otherwise the
-    * it's the utrace batch that should signal its own sync.
-    */
-   if (utrace_submit &&
-       util_dynarray_num_elements(&utrace_submit->batch_bos,
-                                  struct anv_bo *) == 0) {
+   if (has_utrace_sync) {
       struct drm_xe_sync *xe_sync = &xe_syncs[count++];
 
       xe_exec_fill_sync(xe_sync, utrace_submit->sync, 0, TYPE_SIGNAL);
@@ -191,7 +192,7 @@ xe_execute_trtt_batch(struct anv_sparse_submission *submit,
    struct anv_queue *queue = submit->queue;
    struct anv_device *device = queue->device;
    struct anv_trtt *trtt = &device->trtt;
-   VkResult result;
+   VkResult result = VK_SUCCESS;
 
    struct drm_xe_sync extra_sync = {
       .type = DRM_XE_SYNC_TYPE_TIMELINE_SYNCOBJ,
@@ -220,18 +221,22 @@ xe_execute_trtt_batch(struct anv_sparse_submission *submit,
    };
 
    if (!device->info->no_hw) {
-      if (intel_ioctl(device->fd, DRM_IOCTL_XE_EXEC, &exec))
-         return vk_device_set_lost(&device->vk, "XE_EXEC failed: %m");
+      if (intel_ioctl(device->fd, DRM_IOCTL_XE_EXEC, &exec)) {
+         result = vk_device_set_lost(&device->vk, "XE_EXEC failed: %m");
+         goto out;
+      }
    }
 
    if (queue->sync) {
       result = vk_sync_wait(&device->vk, queue->sync, 0,
                             VK_SYNC_WAIT_COMPLETE, UINT64_MAX);
       if (result != VK_SUCCESS)
-         return vk_queue_set_lost(&queue->vk, "trtt sync wait failed");
+         result = vk_queue_set_lost(&queue->vk, "trtt sync wait failed");
    }
 
-   return VK_SUCCESS;
+out:
+   vk_free(&device->vk.alloc, xe_syncs);
+   return result;
 }
 
 VkResult
diff --git a/src/intel/vulkan_hasvk/anv_image.c b/src/intel/vulkan_hasvk/anv_image.c
index 7112eca4624..29a01f1a40f 100644
--- a/src/intel/vulkan_hasvk/anv_image.c
+++ b/src/intel/vulkan_hasvk/anv_image.c
@@ -1031,11 +1031,6 @@ add_all_surfaces_implicit_layout(
             return result;
       }
 
-      /* Disable aux if image supports export without modifiers. */
-      if (image->vk.external_handle_types != 0 &&
-          image->vk.tiling != VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT)
-         continue;
-
       result = add_aux_surface_if_supported(device, image, plane, plane_format,
                                             format_list_info,
                                             ANV_OFFSET_IMPLICIT, stride,
@@ -1214,7 +1209,7 @@ alloc_private_binding(struct anv_device *device,
 
 VkResult
 anv_image_init(struct anv_device *device, struct anv_image *image,
-               const struct anv_image_create_info *create_info)
+               struct anv_image_create_info *create_info)
 {
    const VkImageCreateInfo *pCreateInfo = create_info->vk_info;
    const struct VkImageDrmFormatModifierExplicitCreateInfoEXT *mod_explicit_info = NULL;
@@ -1276,6 +1271,11 @@ anv_image_init(struct anv_device *device, struct anv_image *image,
    image->disjoint = image->n_planes > 1 &&
                      (pCreateInfo->flags & VK_IMAGE_CREATE_DISJOINT_BIT);
 
+   /* Disable aux if image supports export without modifiers. */
+   if (image->vk.external_handle_types != 0 &&
+       image->vk.tiling != VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT)
+      create_info->isl_extra_usage_flags |= ISL_SURF_USAGE_DISABLE_AUX_BIT;
+
    const isl_tiling_flags_t isl_tiling_flags =
       choose_isl_tiling_flags(device->info, create_info, isl_mod_info,
                               image->vk.wsi_legacy_scanout);
diff --git a/src/intel/vulkan_hasvk/anv_private.h b/src/intel/vulkan_hasvk/anv_private.h
index c163c58abc3..dff8955fd42 100644
--- a/src/intel/vulkan_hasvk/anv_private.h
+++ b/src/intel/vulkan_hasvk/anv_private.h
@@ -3639,7 +3639,7 @@ struct anv_image_create_info {
 };
 
 VkResult anv_image_init(struct anv_device *device, struct anv_image *image,
-                        const struct anv_image_create_info *create_info);
+                        struct anv_image_create_info *create_info);
 
 void anv_image_finish(struct anv_image *image);
 
diff --git a/src/mesa/main/dlist.c b/src/mesa/main/dlist.c
index 63feef2b097..8c32ed80d79 100644
--- a/src/mesa/main/dlist.c
+++ b/src/mesa/main/dlist.c
@@ -1220,7 +1220,7 @@ dlist_alloc(struct gl_context *ctx, OpCode opcode, GLuint bytes, bool align8)
       ctx->ListState.CurrentPos++;
    }
 
-   if (ctx->ListState.CurrentPos + numNodes + contNodes > BLOCK_SIZE) {
+   if (ctx->ListState.CurrentPos + numNodes + contNodes >= BLOCK_SIZE) {
       /* This block is full.  Allocate a new block and chain to it */
       Node *newblock;
       Node *n = ctx->ListState.CurrentBlock + ctx->ListState.CurrentPos;
diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 1c94a5e94ac..63aefb1c45e 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -2664,6 +2664,16 @@ _mesa_base_fbo_format(const struct gl_context *ctx, GLenum internalFormat)
    case GL_RGB565:
       return _mesa_is_gles(ctx) || ctx->Extensions.ARB_ES2_compatibility
          ? GL_RGB : 0;
+
+   case GL_BGRA:
+      /* EXT_texture_format_BGRA8888 only adds this as color-renderable for
+       * GLES 2 and later
+       */
+      if (_mesa_has_EXT_texture_format_BGRA8888(ctx) && _mesa_is_gles2(ctx))
+         return GL_RGBA;
+      else
+         return 0;
+
    default:
       return 0;
    }
diff --git a/src/mesa/main/formatquery.c b/src/mesa/main/formatquery.c
index ae59413d345..396fa0a4014 100644
--- a/src/mesa/main/formatquery.c
+++ b/src/mesa/main/formatquery.c
@@ -1112,6 +1112,12 @@ _mesa_GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname,
       if (get_pname == 0)
          goto end;
 
+      /* if the resource is unsupported, zero is returned */
+      if (!st_QueryTextureFormatSupport(ctx, target, internalformat)) {
+         buffer[0] = 0;
+         break;
+      }
+
       _mesa_GetIntegerv(get_pname, buffer);
       break;
    }
@@ -1123,6 +1129,12 @@ _mesa_GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname,
       if (!_mesa_is_array_texture(target))
          goto end;
 
+      /* if the resource is unsupported, zero is returned */
+      if (!st_QueryTextureFormatSupport(ctx, target, internalformat)) {
+         buffer[0] = 0;
+         break;
+      }
+
       _mesa_GetIntegerv(GL_MAX_ARRAY_TEXTURE_LAYERS, buffer);
       break;
 
@@ -1137,6 +1149,12 @@ _mesa_GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname,
       unsigned i;
       GLint current_value;
 
+      /* if the resource is unsupported, zero is returned */
+      if (!st_QueryTextureFormatSupport(ctx, target, internalformat)) {
+         buffer[0] = 0;
+         break;
+      }
+
       /* Combining the dimensions. Note that for array targets, this would
        * automatically include the value of MAX_LAYERS, as that value is
        * returned as MAX_HEIGHT or MAX_DEPTH */
@@ -1515,6 +1533,14 @@ _mesa_GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname,
       if (targetIndex < 0 || targetIndex == TEXTURE_BUFFER_INDEX)
          goto end;
 
+      /* If the resource is not supported for image textures,
+       * or if image textures are not supported, NONE is returned.
+       */
+      if (!st_QueryTextureFormatSupport(ctx, target, internalformat)) {
+         buffer[0] = GL_NONE;
+         break;
+      }
+
       /* From spec: "Equivalent to calling GetTexParameter with <value> set
        * to IMAGE_FORMAT_COMPATIBILITY_TYPE."
        *
diff --git a/src/mesa/main/framebuffer.c b/src/mesa/main/framebuffer.c
index 962cd7c5334..281c3ee2bd5 100644
--- a/src/mesa/main/framebuffer.c
+++ b/src/mesa/main/framebuffer.c
@@ -972,13 +972,36 @@ _mesa_get_color_read_type(struct gl_context *ctx,
       GLenum data_type;
       GLuint comps;
 
-      _mesa_uncompressed_format_to_type_and_comps(format, &data_type, &comps);
-
+      _mesa_uncompressed_format_to_type_and_comps(format, &data_type,
+                                                  &comps);
+      if (_mesa_is_gles(ctx)) {
+         /* GLES allows only a limited set of format/type combinations for
+            reading, namely the ones specified in table 8.2 of the GLES 3.2
+            spec. In particular *_REV types are not allowed.  The
+            EXT_read_format_bgra extension does add some *_REV types, but
+            only in conjunction with BGRA formats, and we return BGRA 
+            from _mesa_get_color_read_format for very few cases. Work
+            around that here.
+            Note that EXT_texture_type_2_10_10_10_REV does add support
+            for that texture type and RGBA, so exclude that from our test.
+         */
+         GLenum data_format = _mesa_get_color_read_format(ctx, fb, caller);
+         if (data_format == GL_RGBA) {
+            switch (data_type) {
+            case GL_UNSIGNED_SHORT_4_4_4_4_REV:
+               data_type = GL_UNSIGNED_SHORT_4_4_4_4;
+               break;
+            case GL_UNSIGNED_SHORT_1_5_5_5_REV:
+               data_type = GL_UNSIGNED_SHORT_5_5_5_1;
+               break;
+            default:
+               break;
+            }
+         }
+      }
       return data_type;
    }
 }
-
-
 /**
  * Returns the read renderbuffer for the specified format.
  */
diff --git a/src/mesa/main/glthread_draw.c b/src/mesa/main/glthread_draw.c
index 4e55d8c25ab..b47e44fdb53 100644
--- a/src/mesa/main/glthread_draw.c
+++ b/src/mesa/main/glthread_draw.c
@@ -790,7 +790,8 @@ draw_elements(GLuint drawid, GLenum mode, GLsizei count, GLenum type,
        ctx->Dispatch.Current == ctx->Dispatch.ContextLost ||
        /* This will just generate GL_INVALID_OPERATION, as it should. */
        ctx->GLThread.inside_begin_end ||
-       ctx->GLThread.ListMode) {
+       ctx->GLThread.ListMode ||
+       mode >= 32 || !((1u << mode) & ctx->SupportedPrimMask)) {
       if (instance_count == 1 && baseinstance == 0 && drawid == 0) {
          int cmd_size = sizeof(struct marshal_cmd_DrawElementsBaseVertex);
          struct marshal_cmd_DrawElementsBaseVertex *cmd =
@@ -1059,7 +1060,8 @@ _mesa_marshal_MultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count,
     */
    if (draw_count > 0 && is_index_type_valid(type) &&
        ctx->Dispatch.Current != ctx->Dispatch.ContextLost &&
-       !ctx->GLThread.inside_begin_end) {
+       !ctx->GLThread.inside_begin_end &&
+       !(mode >= 32 || !((1u << mode) & ctx->SupportedPrimMask))) {
       user_buffer_mask = _mesa_is_desktop_gl_core(ctx) ? 0 : get_user_buffer_mask(ctx);
       has_user_indices = vao->CurrentElementBufferName == 0;
    }
diff --git a/src/mesa/main/shaderapi.c b/src/mesa/main/shaderapi.c
index faf41935cb7..4732b5d897a 100644
--- a/src/mesa/main/shaderapi.c
+++ b/src/mesa/main/shaderapi.c
@@ -2363,6 +2363,10 @@ _mesa_ShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat,
    GET_CURRENT_CONTEXT(ctx);
    struct gl_shader **sh;
 
+   /* no binary data can be loaded if length==0 */
+   if (!length)
+      binary = NULL;
+
    /* Page 68, section 7.2 'Shader Binaries" of the of the OpenGL ES 3.1, and
     * page 88 of the OpenGL 4.5 specs state:
     *
diff --git a/src/mesa/main/teximage.c b/src/mesa/main/teximage.c
index 023a975919f..8f3f51fc645 100644
--- a/src/mesa/main/teximage.c
+++ b/src/mesa/main/teximage.c
@@ -2472,6 +2472,15 @@ copytexture_error_check( struct gl_context *ctx, GLuint dimensions,
       case GL_RGB10_A2:
          break;
 
+      case GL_RED:
+      case GL_RG:
+         /* GL_EXT_texture_rg adds support for GL_RED and GL_RG as an internal
+          * format
+          */
+         if (_mesa_has_EXT_texture_rg(ctx))
+            break;
+
+      FALLTHROUGH;
       default:
          _mesa_error(ctx, GL_INVALID_ENUM,
                      "glCopyTexImage%dD(internalFormat=%s)", dimensions,
@@ -4561,22 +4570,33 @@ copyteximage(struct gl_context *ctx, GLuint dims, struct gl_texture_object *texO
                return;
          }
       }
-      /* From Page 139 of OpenGL ES 3.0 spec:
-       *    "If internalformat is sized, the internal format of the new texel
-       *    array is internalformat, and this is also the new texel array’s
-       *    effective internal format. If the component sizes of internalformat
-       *    do not exactly match the corresponding component sizes of the source
-       *    buffer’s effective internal format, described below, an
-       *    INVALID_OPERATION error is generated. If internalformat is unsized,
-       *    the internal format of the new texel array is the effective internal
-       *    format of the source buffer, and this is also the new texel array’s
-       *    effective internal format.
-       */
-      else if (formats_differ_in_component_sizes (texFormat, rb->Format)) {
+      else {
+         /* From Page 139 of OpenGL ES 3.0 spec:
+         *    "If internalformat is sized, the internal format of the new texel
+         *    array is internalformat, and this is also the new texel array’s
+         *    effective internal format. If the component sizes of internalformat
+         *    do not exactly match the corresponding component sizes of the source
+         *    buffer’s effective internal format, described below, an
+         *    INVALID_OPERATION error is generated. If internalformat is unsized,
+         *    the internal format of the new texel array is the effective internal
+         *    format of the source buffer, and this is also the new texel array’s
+         *    effective internal format.
+         */
+         enum pipe_format rb_format = st_choose_format(ctx->st, rb->InternalFormat,
+                                                       GL_NONE, GL_NONE,
+                                                       PIPE_TEXTURE_2D, 0, 0, 0,
+                                                       false, false);
+         enum pipe_format new_format = st_choose_format(ctx->st, internalFormat,
+                                                        GL_NONE, GL_NONE,
+                                                        PIPE_TEXTURE_2D, 0, 0, 0,
+                                                        false, false);
+         /* this comparison must be done on the API format, not the driver format */
+         if (formats_differ_in_component_sizes (new_format, rb_format)) {
             _mesa_error(ctx, GL_INVALID_OPERATION,
                         "glCopyTexImage%uD(component size changed in"
                         " internal format)", dims);
             return;
+         }
       }
    }
 
diff --git a/src/mesa/main/vdpau.c b/src/mesa/main/vdpau.c
index b648dfbdac2..a9d1e97fd31 100644
--- a/src/mesa/main/vdpau.c
+++ b/src/mesa/main/vdpau.c
@@ -39,6 +39,7 @@
 #include "glformats.h"
 #include "texobj.h"
 #include "teximage.h"
+#include "textureview.h"
 #include "api_exec_decl.h"
 
 #include "state_tracker/st_cb_texture.h"
@@ -179,7 +180,7 @@ register_surface(struct gl_context *ctx, GLboolean isOutput,
       }
 
       /* This will disallow respecifying the storage. */
-      tex->Immutable = GL_TRUE;
+      _mesa_set_texture_view_state(ctx, tex, target, 1);
       _mesa_unlock_texture(ctx, tex);
 
       _mesa_reference_texobj(&surf->textures[i], tex);
diff --git a/src/mesa/state_tracker/st_cb_copyimage.c b/src/mesa/state_tracker/st_cb_copyimage.c
index 2bf95a66358..f3ab37fcbdc 100644
--- a/src/mesa/state_tracker/st_cb_copyimage.c
+++ b/src/mesa/state_tracker/st_cb_copyimage.c
@@ -282,7 +282,10 @@ blit(struct pipe_context *pipe,
    blit.src.box = *src_box;
    u_box_3d(dstx, dsty, dstz, src_box->width, src_box->height,
             src_box->depth, &blit.dst.box);
-   blit.mask = PIPE_MASK_RGBA;
+   if (util_format_is_depth_or_stencil(dst_format))
+      blit.mask = PIPE_MASK_ZS;
+   else
+      blit.mask = PIPE_MASK_RGBA;
    blit.filter = PIPE_TEX_FILTER_NEAREST;
 
    pipe->blit(pipe, &blit);
diff --git a/src/mesa/state_tracker/st_context.c b/src/mesa/state_tracker/st_context.c
index ad0608c2d6f..2843715e210 100644
--- a/src/mesa/state_tracker/st_context.c
+++ b/src/mesa/state_tracker/st_context.c
@@ -987,17 +987,17 @@ st_destroy_context(struct st_context *st)
 
    st_destroy_program_variants(st);
 
-   st_context_free_zombie_objects(st);
-
-   simple_mtx_destroy(&st->zombie_sampler_views.mutex);
-   simple_mtx_destroy(&st->zombie_shaders.mutex);
-
    /* Do not release debug_output yet because it might be in use by other threads.
     * These threads will be terminated by _mesa_free_context_data and
     * st_destroy_context_priv.
     */
    _mesa_free_context_data(ctx, false);
 
+   st_context_free_zombie_objects(st);
+
+   simple_mtx_destroy(&st->zombie_sampler_views.mutex);
+   simple_mtx_destroy(&st->zombie_shaders.mutex);
+
    /* This will free the st_context too, so 'st' must not be accessed
     * afterwards. */
    st_destroy_context_priv(st, true);
diff --git a/src/mesa/state_tracker/st_format.c b/src/mesa/state_tracker/st_format.c
index 6dcd5db202f..4a92723d303 100644
--- a/src/mesa/state_tracker/st_format.c
+++ b/src/mesa/state_tracker/st_format.c
@@ -1333,6 +1333,21 @@ st_ChooseTextureFormat(struct gl_context *ctx, GLenum target,
       is_renderbuffer = true;
    } else {
       pTarget = gl_target_to_pipe(target);
+      if (internalFormat == format) {
+         if (internalFormat == GL_RGBA) {
+            /* with GL_RGBA, these are effectively aliases to required formats */
+            switch (type) {
+            case GL_UNSIGNED_SHORT_5_5_5_1:
+            case GL_UNSIGNED_SHORT_4_4_4_4:
+            case GL_UNSIGNED_INT_8_8_8_8:
+               is_renderbuffer = true;
+               break;
+            default: break;
+            }
+         } else if (internalFormat == GL_RGB && type == GL_UNSIGNED_SHORT_5_6_5) {
+            is_renderbuffer = true;
+         }
+      }
    }
 
    if (target == GL_TEXTURE_1D || target == GL_TEXTURE_1D_ARRAY) {
@@ -1351,7 +1366,9 @@ st_ChooseTextureFormat(struct gl_context *ctx, GLenum target,
    bindings = PIPE_BIND_SAMPLER_VIEW;
    if (_mesa_is_depth_or_stencil_format(internalFormat))
       bindings |= PIPE_BIND_DEPTH_STENCIL;
-   else if (is_renderbuffer || internalFormat == 3 || internalFormat == 4 ||
+   else if (is_renderbuffer)
+      bindings |= PIPE_BIND_RENDER_TARGET;
+   else if (internalFormat == 3 || internalFormat == 4 ||
             internalFormat == GL_RGB || internalFormat == GL_RGBA ||
             internalFormat == GL_RGBA2 ||
             internalFormat == GL_RGB4 || internalFormat == GL_RGBA4 ||
@@ -1507,6 +1524,49 @@ st_QuerySamplesForFormat(struct gl_context *ctx, GLenum target,
    return num_sample_counts;
 }
 
+/* check whether any texture can be allocated for a given format */
+bool
+st_QueryTextureFormatSupport(struct gl_context *ctx, GLenum target, GLenum internalFormat)
+{
+   struct st_context *st = st_context(ctx);
+
+   /* If an sRGB framebuffer is unsupported, sRGB formats behave like linear
+    * formats.
+    */
+   if (!ctx->Extensions.EXT_sRGB) {
+      internalFormat = _mesa_get_linear_internalformat(internalFormat);
+   }
+
+   /* multisample textures need >= 2 samples */
+   unsigned min_samples = target == GL_TEXTURE_2D_MULTISAMPLE ||
+                          target == GL_TEXTURE_2D_MULTISAMPLE_ARRAY ? 1 : 0;
+   unsigned max_samples = min_samples ? 16 : 1;
+
+   /* compressed textures will be allocated as e.g., RGBA8, so check that instead */
+   enum pipe_format pf = st_choose_format(st, internalFormat, GL_NONE, GL_NONE,
+                                          PIPE_TEXTURE_2D, 0, 0, 0,
+                                          false, false);
+   if (util_format_is_compressed(pf)) {
+      enum pipe_format fmts[2] = {0};
+      pf = st_mesa_format_to_pipe_format(st, st_pipe_format_to_mesa_format(pf));
+      fmts[0] = pf;
+      for (unsigned i = max_samples; i > min_samples; i >>= 1) {
+         if (find_supported_format(st->screen, fmts, PIPE_TEXTURE_2D,
+                                   i, i, PIPE_BIND_SAMPLER_VIEW, false))
+            return true;
+      }
+      return false;
+   }
+   for (unsigned i = max_samples; i > min_samples; i >>= 1) {
+      if (st_choose_format(st, internalFormat, GL_NONE, GL_NONE,
+                           PIPE_TEXTURE_2D, i, i, PIPE_BIND_SAMPLER_VIEW,
+                           false, false))
+         return true;
+   }
+
+   return false;
+}
+
 
 /**
  * ARB_internalformat_query2 driver hook.
diff --git a/src/mesa/state_tracker/st_format.h b/src/mesa/state_tracker/st_format.h
index 9692a0bc583..21b1a7bb4bf 100644
--- a/src/mesa/state_tracker/st_format.h
+++ b/src/mesa/state_tracker/st_format.h
@@ -70,7 +70,8 @@ extern mesa_format
 st_ChooseTextureFormat(struct gl_context * ctx, GLenum target,
                        GLint internalFormat,
                        GLenum format, GLenum type);
-
+bool
+st_QueryTextureFormatSupport(struct gl_context *ctx, GLenum target, GLenum internalFormat);
 void
 st_QueryInternalFormat(struct gl_context *ctx, GLenum target,
                        GLenum internalFormat, GLenum pname, GLint *params);
diff --git a/src/mesa/state_tracker/st_pbo_compute.c b/src/mesa/state_tracker/st_pbo_compute.c
index e1bb5fee321..b114a546d6a 100644
--- a/src/mesa/state_tracker/st_pbo_compute.c
+++ b/src/mesa/state_tracker/st_pbo_compute.c
@@ -844,7 +844,7 @@ add_spec_data(struct pbo_async_data *async, struct pbo_data *pd)
    struct pbo_spec_async_data *spec;
    struct set_entry *entry = _mesa_set_search_or_add(&async->specialized, pd, &found);
    if (!found) {
-      spec = calloc(1, sizeof(struct pbo_async_data));
+      spec = calloc(1, sizeof(struct pbo_spec_async_data));
       util_queue_fence_init(&spec->fence);
       memcpy(spec->data, pd, sizeof(struct pbo_data));
       entry->key = spec;
diff --git a/src/microsoft/vulkan/dzn_cmd_buffer.c b/src/microsoft/vulkan/dzn_cmd_buffer.c
index 8f3b114064f..d251d3fe653 100644
--- a/src/microsoft/vulkan/dzn_cmd_buffer.c
+++ b/src/microsoft/vulkan/dzn_cmd_buffer.c
@@ -3100,6 +3100,7 @@ dzn_cmd_buffer_update_pipeline(struct dzn_cmd_buffer *cmdbuf, uint32_t bindpoint
    ID3D12PipelineState *old_pipeline_state =
       cmdbuf->state.pipeline ? cmdbuf->state.pipeline->state : NULL;
 
+   uint32_t view_instance_mask = 0;
    if (cmdbuf->state.bindpoint[bindpoint].dirty & DZN_CMD_BINDPOINT_DIRTY_PIPELINE) {
       if (cmdbuf->state.bindpoint[bindpoint].root_sig != pipeline->root.sig) {
          cmdbuf->state.bindpoint[bindpoint].root_sig = pipeline->root.sig;
@@ -3135,9 +3136,9 @@ dzn_cmd_buffer_update_pipeline(struct dzn_cmd_buffer *cmdbuf, uint32_t bindpoint
          ID3D12GraphicsCommandList1_IASetPrimitiveTopology(cmdbuf->cmdlist, gfx->ia.topology);
          dzn_graphics_pipeline_get_state(gfx, &cmdbuf->state.pipeline_variant);
          if (gfx->multiview.native_view_instancing)
-            ID3D12GraphicsCommandList1_SetViewInstanceMask(cmdbuf->cmdlist, gfx->multiview.view_mask);
+            view_instance_mask = gfx->multiview.view_mask;
          else
-            ID3D12GraphicsCommandList1_SetViewInstanceMask(cmdbuf->cmdlist, 1);
+            view_instance_mask = 1;
 
          if (gfx->zsa.dynamic_depth_bias && gfx->use_gs_for_polygon_mode_point)
             cmdbuf->state.bindpoint[bindpoint].dirty |= DZN_CMD_BINDPOINT_DIRTY_SYSVALS;
@@ -3150,6 +3151,11 @@ dzn_cmd_buffer_update_pipeline(struct dzn_cmd_buffer *cmdbuf, uint32_t bindpoint
       ID3D12GraphicsCommandList1_SetPipelineState(cmdbuf->cmdlist, pipeline->state);
       cmdbuf->state.pipeline = pipeline;
    }
+
+   /* Deferring this until after the pipeline has been set due to an NVIDIA driver bug
+    * when view instancing mask is set with no pipeline bound. */
+   if (view_instance_mask)
+      ID3D12GraphicsCommandList1_SetViewInstanceMask(cmdbuf->cmdlist, view_instance_mask);
 }
 
 static void
diff --git a/src/nouveau/compiler/nak.h b/src/nouveau/compiler/nak.h
index 5a3cf249401..3ace1e5cfed 100644
--- a/src/nouveau/compiler/nak.h
+++ b/src/nouveau/compiler/nak.h
@@ -32,6 +32,8 @@ nak_nir_options(const struct nak_compiler *nak);
 void nak_optimize_nir(nir_shader *nir, const struct nak_compiler *nak);
 void nak_preprocess_nir(nir_shader *nir, const struct nak_compiler *nak);
 
+PRAGMA_DIAGNOSTIC_PUSH
+PRAGMA_DIAGNOSTIC_ERROR(-Wpadded)
 struct nak_fs_key {
    bool zs_self_dep;
 
@@ -40,6 +42,8 @@ struct nak_fs_key {
     */
    bool force_sample_shading;
 
+   uint8_t _pad;
+
    /**
     * The constant buffer index and offset at which the sample locations table lives.
     * Each sample location is two 4-bit unorm values packed into an 8-bit value
@@ -48,6 +52,9 @@ struct nak_fs_key {
    uint8_t sample_locations_cb;
    uint32_t sample_locations_offset;
 };
+PRAGMA_DIAGNOSTIC_POP
+static_assert(sizeof(struct nak_fs_key) == 8, "This struct has no holes");
+
 
 void nak_postprocess_nir(nir_shader *nir, const struct nak_compiler *nak,
                          nir_variable_mode robust2_modes,
diff --git a/src/nouveau/vulkan/nvk_cmd_buffer.c b/src/nouveau/vulkan/nvk_cmd_buffer.c
index b8828b7d350..0230bfccb44 100644
--- a/src/nouveau/vulkan/nvk_cmd_buffer.c
+++ b/src/nouveau/vulkan/nvk_cmd_buffer.c
@@ -580,8 +580,13 @@ nvk_CmdBindDescriptorSets(VkCommandBuffer commandBuffer,
          vk_to_nvk_descriptor_set_layout(pipeline_layout->set_layouts[set_idx]);
 
       if (desc->sets[set_idx] != set) {
-         desc->root.sets[set_idx] = nvk_descriptor_set_addr(set);
-         desc->set_sizes[set_idx] = set->size;
+         if (set != NULL) {
+            desc->root.sets[set_idx] = nvk_descriptor_set_addr(set);
+            desc->set_sizes[set_idx] = set->size;
+         } else {
+            desc->root.sets[set_idx] = 0;
+            desc->set_sizes[set_idx] = 0;
+         }
          desc->sets[set_idx] = set;
          desc->sets_dirty |= BITFIELD_BIT(set_idx);
 
diff --git a/src/nouveau/vulkan/nvk_cmd_draw.c b/src/nouveau/vulkan/nvk_cmd_draw.c
index 56b16b2e898..d8e4e625f7e 100644
--- a/src/nouveau/vulkan/nvk_cmd_draw.c
+++ b/src/nouveau/vulkan/nvk_cmd_draw.c
@@ -62,27 +62,19 @@ nvk_mme_set_priv_reg(struct mme_builder *b)
    mme_mthd(b, NV9097_SET_FALCON04);
    mme_emit(b, mme_load(b));
 
-   mme_if(b, ieq, s26, mme_imm(2)) {
-      struct mme_value loop_cond = mme_mov(b, mme_zero());
-      mme_while(b, ine, loop_cond, mme_imm(1)) {
-         mme_state_to(b, loop_cond, NV9097_SET_MME_SHADOW_SCRATCH(0));
-         mme_mthd(b, NV9097_NO_OPERATION);
-         mme_emit(b, mme_zero());
-      };
-   }
-
-   mme_if(b, ine, s26, mme_imm(2)) {
-      mme_loop(b, mme_imm(10)) {
-         mme_mthd(b, NV9097_NO_OPERATION);
-         mme_emit(b, mme_zero());
-      }
-   }
+   struct mme_value loop_cond = mme_mov(b, mme_zero());
+   mme_while(b, ine, loop_cond, mme_imm(1)) {
+      mme_state_to(b, loop_cond, NV9097_SET_MME_SHADOW_SCRATCH(0));
+      mme_mthd(b, NV9097_NO_OPERATION);
+      mme_emit(b, mme_zero());
+   };
 }
 
 VkResult
 nvk_queue_init_context_draw_state(struct nvk_queue *queue)
 {
    struct nvk_device *dev = nvk_queue_device(queue);
+   struct nvk_physical_device *pdev = nvk_device_physical(dev);
 
    uint32_t push_data[2048];
    struct nv_push push;
@@ -138,15 +130,71 @@ nvk_queue_init_context_draw_state(struct nvk_queue *queue)
     * For generations with firmware support for our `SET_PRIV_REG` mme method
     * we simply use that. On older generations we'll let the kernel do it.
     * Starting with GSP we have to do it via the firmware anyway.
+    *
+    * This clears bit 3 of gr_gpcs_tpcs_sm_disp_ctrl
     */
    if (dev->pdev->info.cls_eng3d >= MAXWELL_B) {
-      unsigned reg = dev->pdev->info.cls_eng3d >= VOLTA_A ? 0x419ba4 : 0x419f78;
+      unsigned reg = pdev->info.cls_eng3d >= VOLTA_A ? 0x419ba4 : 0x419f78;
       P_1INC(p, NV9097, CALL_MME_MACRO(NVK_MME_SET_PRIV_REG));
       P_INLINE_DATA(p, 0);
       P_INLINE_DATA(p, BITFIELD_BIT(3));
       P_INLINE_DATA(p, reg);
    }
 
+   /* Disable Out Of Range Address exceptions
+    *
+    * From the SPH documentation:
+    *
+    *    "The SPH fields StoreReqStart and StoreReqEnd set a range of
+    *    attributes whose corresponding Odmap values of ST or ST_LAST are
+    *    treated as ST_REQ. Normally, for an attribute whose Omap bit is TRUE
+    *    and Odmap value is ST, when the shader writes data to this output, it
+    *    can not count on being able to read it back, since the next
+    *    downstream shader might have its Imap bit FALSE, thereby causing the
+    *    Bmap bit to be FALSE. By including a ST type of attribute in the
+    *    range of StoreReqStart and StoreReqEnd, the attribute’s Odmap value
+    *    is treated as ST_REQ, so an Omap bit being TRUE causes the Bmap bit
+    *    to be TRUE. This guarantees the shader program can output the value
+    *    and then read it back later. This will save register space."
+    *
+    * It's unclear exactly what's going on but this seems to imply that the
+    * hardware actually ANDs the output mask of one shader stage together with
+    * the input mask of the subsequent shader stage to determine which values
+    * are actually used.
+    *
+    * In the case when we have an empty fragment shader, it seems the hardware
+    * doesn't allocate any output memory for final geometry stage at all and
+    * so any writes to outputs from the final shader stage generates an Out Of
+    * Range Address exception.  We could fix this by eliminating unused
+    * outputs via cross-stage linking but that won't work in the case of
+    * VK_EXT_shader_object and VK_EXT_graphics_pipeline_library fast-link.
+    * Instead, the easiest solution is to just disable the exception.
+    *
+    * NOTE (Faith):
+    *
+    *    This above analysis is 100% conjecture on my part based on a creative
+    *    reading of the SPH docs and what I saw when trying to run certain
+    *    OpenGL CTS tests on NVK + Zink.  Without access to NVIDIA HW
+    *    engineers, have no way of verifying this analysis.
+    *
+    *    The CTS test in question is:
+    *
+    *    KHR-GL46.tessellation_shader.tessellation_control_to_tessellation_evaluation.gl_tessLevel
+    *
+    * This should also prevent any issues with array overruns on I/O arrays.
+    * Before, they would get an exception and kill the context whereas now
+    * they should gently get ignored.
+    *
+    * This clears bit 14 of gr_gpcs_tpcs_sms_hww_warp_esr_report_mask
+    */
+   if (dev->pdev->info.cls_eng3d >= MAXWELL_B) {
+      unsigned reg = pdev->info.cls_eng3d >= VOLTA_A ? 0x419ea8 : 0x419e44;
+      P_1INC(p, NV9097, CALL_MME_MACRO(NVK_MME_SET_PRIV_REG));
+      P_INLINE_DATA(p, 0);
+      P_INLINE_DATA(p, BITFIELD_BIT(14));
+      P_INLINE_DATA(p, reg);
+   }
+
    P_IMMD(p, NV9097, SET_RENDER_ENABLE_C, MODE_TRUE);
 
    P_IMMD(p, NV9097, SET_Z_COMPRESSION, ENABLE_TRUE);
@@ -917,7 +965,9 @@ nvk_CmdEndRendering(VkCommandBuffer commandBuffer)
 
    if (need_resolve) {
       struct nv_push *p = nvk_cmd_buffer_push(cmd, 2);
-      P_IMMD(p, NV9097, WAIT_FOR_IDLE, 0);
+      P_IMMD(p, NVA097, INVALIDATE_TEXTURE_DATA_CACHE, {
+         .lines = LINES_ALL,
+      });
 
       nvk_meta_resolve_rendering(cmd, &vk_render);
    }
@@ -1388,13 +1438,15 @@ nvk_flush_ms_state(struct nvk_cmd_buffer *cmd)
       });
    }
 
-   if (BITSET_TEST(dyn->dirty, MESA_VK_DYNAMIC_MS_SAMPLE_LOCATIONS) ||
+   if (BITSET_TEST(dyn->dirty, MESA_VK_DYNAMIC_MS_RASTERIZATION_SAMPLES) ||
+       BITSET_TEST(dyn->dirty, MESA_VK_DYNAMIC_MS_SAMPLE_LOCATIONS) ||
        BITSET_TEST(dyn->dirty, MESA_VK_DYNAMIC_MS_SAMPLE_LOCATIONS_ENABLE)) {
       const struct vk_sample_locations_state *sl;
       if (dyn->ms.sample_locations_enable) {
          sl = dyn->ms.sample_locations;
       } else {
-         sl = vk_standard_sample_locations_state(dyn->ms.rasterization_samples);
+         const uint32_t samples = MAX2(1, dyn->ms.rasterization_samples);
+         sl = vk_standard_sample_locations_state(samples);
       }
 
       for (uint32_t i = 0; i < sl->per_pixel; i++) {
@@ -3170,44 +3222,60 @@ nvk_CmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer,
    bool inverted = pConditionalRenderingBegin->flags &
       VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT;
 
-   if (addr & 0x3f || buffer->is_local) {
-      uint64_t tmp_addr;
-      VkResult result = nvk_cmd_buffer_cond_render_alloc(cmd, &tmp_addr);
-      if (result != VK_SUCCESS) {
-         vk_command_buffer_set_error(&cmd->vk, result);
-         return;
-      }
-
-      struct nv_push *p = nvk_cmd_buffer_push(cmd, 12);
-      P_MTHD(p, NV90B5, OFFSET_IN_UPPER);
-      P_NV90B5_OFFSET_IN_UPPER(p, addr >> 32);
-      P_NV90B5_OFFSET_IN_LOWER(p, addr & 0xffffffff);
-      P_NV90B5_OFFSET_OUT_UPPER(p, tmp_addr >> 32);
-      P_NV90B5_OFFSET_OUT_LOWER(p, tmp_addr & 0xffffffff);
-      P_NV90B5_PITCH_IN(p, 4);
-      P_NV90B5_PITCH_OUT(p, 4);
-      P_NV90B5_LINE_LENGTH_IN(p, 4);
-      P_NV90B5_LINE_COUNT(p, 1);
-
-      P_IMMD(p, NV90B5, LAUNCH_DMA, {
-            .data_transfer_type = DATA_TRANSFER_TYPE_PIPELINED,
-            .multi_line_enable = MULTI_LINE_ENABLE_TRUE,
-            .flush_enable = FLUSH_ENABLE_TRUE,
-            .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
-            .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
-         });
-      addr = tmp_addr;
+   /* From the Vulkan 1.3.280 spec:
+    *
+    *    "If the 32-bit value at offset in buffer memory is zero,
+    *     then the rendering commands are discarded,
+    *     otherwise they are executed as normal."
+    *
+    * The hardware compare a 64-bit value, as such we are required to copy it.
+    */
+   uint64_t tmp_addr;
+   VkResult result = nvk_cmd_buffer_cond_render_alloc(cmd, &tmp_addr);
+   if (result != VK_SUCCESS) {
+      vk_command_buffer_set_error(&cmd->vk, result);
+      return;
    }
 
-   struct nv_push *p = nvk_cmd_buffer_push(cmd, 12);
+   struct nv_push *p = nvk_cmd_buffer_push(cmd, 26);
+
+   P_MTHD(p, NV90B5, OFFSET_IN_UPPER);
+   P_NV90B5_OFFSET_IN_UPPER(p, addr >> 32);
+   P_NV90B5_OFFSET_IN_LOWER(p, addr & 0xffffffff);
+   P_NV90B5_OFFSET_OUT_UPPER(p, tmp_addr >> 32);
+   P_NV90B5_OFFSET_OUT_LOWER(p, tmp_addr & 0xffffffff);
+   P_NV90B5_PITCH_IN(p, 4);
+   P_NV90B5_PITCH_OUT(p, 4);
+   P_NV90B5_LINE_LENGTH_IN(p, 4);
+   P_NV90B5_LINE_COUNT(p, 1);
+
+   P_IMMD(p, NV90B5, SET_REMAP_COMPONENTS, {
+      .dst_x = DST_X_SRC_X,
+      .dst_y = DST_Y_SRC_X,
+      .dst_z = DST_Z_NO_WRITE,
+      .dst_w = DST_W_NO_WRITE,
+      .component_size = COMPONENT_SIZE_ONE,
+      .num_src_components = NUM_SRC_COMPONENTS_ONE,
+      .num_dst_components = NUM_DST_COMPONENTS_TWO,
+   });
+
+   P_IMMD(p, NV90B5, LAUNCH_DMA, {
+      .data_transfer_type = DATA_TRANSFER_TYPE_PIPELINED,
+      .multi_line_enable = MULTI_LINE_ENABLE_TRUE,
+      .flush_enable = FLUSH_ENABLE_TRUE,
+      .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
+      .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
+      .remap_enable = REMAP_ENABLE_TRUE,
+   });
+
    P_MTHD(p, NV9097, SET_RENDER_ENABLE_A);
-   P_NV9097_SET_RENDER_ENABLE_A(p, addr >> 32);
-   P_NV9097_SET_RENDER_ENABLE_B(p, addr & 0xfffffff0);
+   P_NV9097_SET_RENDER_ENABLE_A(p, tmp_addr >> 32);
+   P_NV9097_SET_RENDER_ENABLE_B(p, tmp_addr & 0xfffffff0);
    P_NV9097_SET_RENDER_ENABLE_C(p, inverted ? MODE_RENDER_IF_EQUAL : MODE_RENDER_IF_NOT_EQUAL);
 
    P_MTHD(p, NV90C0, SET_RENDER_ENABLE_A);
-   P_NV90C0_SET_RENDER_ENABLE_A(p, addr >> 32);
-   P_NV90C0_SET_RENDER_ENABLE_B(p, addr & 0xfffffff0);
+   P_NV90C0_SET_RENDER_ENABLE_A(p, tmp_addr >> 32);
+   P_NV90C0_SET_RENDER_ENABLE_B(p, tmp_addr & 0xfffffff0);
    P_NV90C0_SET_RENDER_ENABLE_C(p, inverted ? MODE_RENDER_IF_EQUAL : MODE_RENDER_IF_NOT_EQUAL);
 }
 
diff --git a/src/nouveau/vulkan/nvk_cmd_meta.c b/src/nouveau/vulkan/nvk_cmd_meta.c
index 39135ae5967..bb354901222 100644
--- a/src/nouveau/vulkan/nvk_cmd_meta.c
+++ b/src/nouveau/vulkan/nvk_cmd_meta.c
@@ -130,6 +130,7 @@ nvk_meta_end(struct nvk_cmd_buffer *cmd,
 {
    if (save->desc0) {
       cmd->state.gfx.descriptors.sets[0] = save->desc0;
+      cmd->state.gfx.descriptors.set_sizes[0] = save->desc0->size;
       cmd->state.gfx.descriptors.root.sets[0] = nvk_descriptor_set_addr(save->desc0);
       cmd->state.gfx.descriptors.sets_dirty |= BITFIELD_BIT(0);
       cmd->state.gfx.descriptors.push_dirty &= ~BITFIELD_BIT(0);
diff --git a/src/nouveau/vulkan/nvk_instance.c b/src/nouveau/vulkan/nvk_instance.c
index 5340b1b6837..2fcea916fe5 100644
--- a/src/nouveau/vulkan/nvk_instance.c
+++ b/src/nouveau/vulkan/nvk_instance.c
@@ -155,6 +155,9 @@ nvk_DestroyInstance(VkInstance _instance,
    if (!instance)
       return;
 
+   driDestroyOptionCache(&instance->dri_options);
+   driDestroyOptionInfo(&instance->available_dri_options);
+
    vk_instance_finish(&instance->vk);
    vk_free(&instance->vk.alloc, instance);
 }
diff --git a/src/nouveau/vulkan/nvk_nir_lower_descriptors.c b/src/nouveau/vulkan/nvk_nir_lower_descriptors.c
index 98324ccf2e3..1f8b847cf2b 100644
--- a/src/nouveau/vulkan/nvk_nir_lower_descriptors.c
+++ b/src/nouveau/vulkan/nvk_nir_lower_descriptors.c
@@ -581,6 +581,9 @@ load_descriptor(nir_builder *b, unsigned num_components, unsigned bit_size,
          nir_iadd_imm(b, nir_imul_imm(b, index, binding_layout->stride),
                          binding_layout->offset + offset_B);
 
+      uint64_t max_desc_ubo_offset = binding_layout->offset +
+         binding_layout->array_size * binding_layout->stride;
+
       unsigned desc_align_mul = (1 << (ffs(binding_layout->stride) - 1));
       desc_align_mul = MIN2(desc_align_mul, 16);
       unsigned desc_align_offset = binding_layout->offset + offset_B;
@@ -593,7 +596,7 @@ load_descriptor(nir_builder *b, unsigned num_components, unsigned bit_size,
       int cbuf_idx = get_mapped_cbuf_idx(&cbuf_key, ctx);
 
       nir_def *desc;
-      if (cbuf_idx >= 0) {
+      if (cbuf_idx >= 0 && max_desc_ubo_offset <= NVK_MAX_CBUF_SIZE) {
          desc = nir_load_ubo(b, num_components, bit_size,
                              nir_imm_int(b, cbuf_idx),
                              desc_ubo_offset,
diff --git a/src/nouveau/vulkan/nvk_physical_device.c b/src/nouveau/vulkan/nvk_physical_device.c
index a9ef92e3106..e071a14168b 100644
--- a/src/nouveau/vulkan/nvk_physical_device.c
+++ b/src/nouveau/vulkan/nvk_physical_device.c
@@ -538,6 +538,9 @@ nvk_get_device_properties(const struct nvk_instance *instance,
                                                VK_SAMPLE_COUNT_4_BIT |
                                                VK_SAMPLE_COUNT_8_BIT;
 
+   uint64_t os_page_size = 4096;
+   os_get_page_size(&os_page_size);
+
    *properties = (struct vk_properties) {
       .apiVersion = nvk_get_vk_version(info),
       .driverVersion = vk_get_driver_version(),
@@ -614,7 +617,7 @@ nvk_get_device_properties(const struct nvk_instance *instance,
       .maxViewportDimensions = { 32768, 32768 },
       .viewportBoundsRange = { -65536, 65536 },
       .viewportSubPixelBits = 8,
-      .minMemoryMapAlignment = 64,
+      .minMemoryMapAlignment = os_page_size,
       .minTexelBufferOffsetAlignment = NVK_MIN_TEXEL_BUFFER_ALIGNMENT,
       .minUniformBufferOffsetAlignment = nvk_min_cbuf_alignment(info),
       .minStorageBufferOffsetAlignment = NVK_MIN_SSBO_ALIGNMENT,
diff --git a/src/nouveau/vulkan/nvk_queue_drm_nouveau.c b/src/nouveau/vulkan/nvk_queue_drm_nouveau.c
index 3c7653a48c0..86252bf2c7e 100644
--- a/src/nouveau/vulkan/nvk_queue_drm_nouveau.c
+++ b/src/nouveau/vulkan/nvk_queue_drm_nouveau.c
@@ -20,7 +20,7 @@
 
 #include <xf86drm.h>
 
-#define NVK_PUSH_MAX_SYNCS 16
+#define NVK_PUSH_MAX_SYNCS 256
 #define NVK_PUSH_MAX_BINDS 4096
 #define NVK_PUSH_MAX_PUSH 1024
 
diff --git a/src/nouveau/vulkan/nvk_shader.h b/src/nouveau/vulkan/nvk_shader.h
index dae7e6fef1b..970db3f5f82 100644
--- a/src/nouveau/vulkan/nvk_shader.h
+++ b/src/nouveau/vulkan/nvk_shader.h
@@ -39,8 +39,10 @@ struct nvk_cbuf {
    enum nvk_cbuf_type type;
    uint8_t desc_set;
    uint8_t dynamic_idx;
+   uint8_t _pad;
    uint32_t desc_offset;
 };
+static_assert(sizeof(struct nvk_cbuf) == 8, "This struct has no holes");
 
 struct nvk_cbuf_map {
    uint32_t cbuf_count;
diff --git a/src/nouveau/winsys/nouveau_bo.c b/src/nouveau/winsys/nouveau_bo.c
index 6ee022b14a3..591070de20d 100644
--- a/src/nouveau/winsys/nouveau_bo.c
+++ b/src/nouveau/winsys/nouveau_bo.c
@@ -10,6 +10,9 @@
 #include <sys/mman.h>
 #include <xf86drm.h>
 
+#include "nvidia/classes/cl9097.h"
+#include "nvidia/classes/clc597.h"
+
 static void
 bo_bind(struct nouveau_ws_device *dev,
         uint32_t handle, uint64_t addr,
@@ -170,9 +173,10 @@ nouveau_ws_bo_new_mapped(struct nouveau_ws_device *dev,
 }
 
 static struct nouveau_ws_bo *
-nouveau_ws_bo_new_locked(struct nouveau_ws_device *dev,
-                         uint64_t size, uint64_t align,
-                         enum nouveau_ws_bo_flags flags)
+nouveau_ws_bo_new_tiled_locked(struct nouveau_ws_device *dev,
+                               uint64_t size, uint64_t align,
+                               uint8_t pte_kind, uint16_t tile_mode,
+                               enum nouveau_ws_bo_flags flags)
 {
    struct drm_nouveau_gem_new req = {};
 
@@ -205,6 +209,9 @@ nouveau_ws_bo_new_locked(struct nouveau_ws_device *dev,
    if (flags & NOUVEAU_WS_BO_NO_SHARE)
       req.info.domain |= NOUVEAU_GEM_DOMAIN_NO_SHARE;
 
+   req.info.tile_flags = (uint32_t)pte_kind << 8;
+   req.info.tile_mode = tile_mode;
+
    req.info.size = size;
    req.align = align;
 
@@ -242,19 +249,29 @@ fail_gem_new:
 }
 
 struct nouveau_ws_bo *
-nouveau_ws_bo_new(struct nouveau_ws_device *dev,
-                  uint64_t size, uint64_t align,
-                  enum nouveau_ws_bo_flags flags)
+nouveau_ws_bo_new_tiled(struct nouveau_ws_device *dev,
+                        uint64_t size, uint64_t align,
+                        uint8_t pte_kind, uint16_t tile_mode,
+                        enum nouveau_ws_bo_flags flags)
 {
    struct nouveau_ws_bo *bo;
 
    simple_mtx_lock(&dev->bos_lock);
-   bo = nouveau_ws_bo_new_locked(dev, size, align, flags);
+   bo = nouveau_ws_bo_new_tiled_locked(dev, size, align,
+                                       pte_kind, tile_mode, flags);
    simple_mtx_unlock(&dev->bos_lock);
 
    return bo;
 }
 
+struct nouveau_ws_bo *
+nouveau_ws_bo_new(struct nouveau_ws_device *dev,
+                  uint64_t size, uint64_t align,
+                  enum nouveau_ws_bo_flags flags)
+{
+   return nouveau_ws_bo_new_tiled(dev, size, align, 0, 0, flags);
+}
+
 static struct nouveau_ws_bo *
 nouveau_ws_bo_from_dma_buf_locked(struct nouveau_ws_device *dev, int fd)
 {
@@ -265,8 +282,11 @@ nouveau_ws_bo_from_dma_buf_locked(struct nouveau_ws_device *dev, int fd)
 
    struct hash_entry *entry =
       _mesa_hash_table_search(dev->bos, (void *)(uintptr_t)handle);
-   if (entry != NULL)
-      return entry->data;
+   if (entry != NULL) {
+      struct nouveau_ws_bo *bo = entry->data;
+      nouveau_ws_bo_ref(bo);
+      return bo;
+   }
 
    /*
     * If we got here, no BO exists for the retrieved handle. If we error
diff --git a/src/nouveau/winsys/nouveau_bo.h b/src/nouveau/winsys/nouveau_bo.h
index d931bea44f9..14bd87a10cc 100644
--- a/src/nouveau/winsys/nouveau_bo.h
+++ b/src/nouveau/winsys/nouveau_bo.h
@@ -68,6 +68,11 @@ struct nouveau_ws_bo *nouveau_ws_bo_new_mapped(struct nouveau_ws_device *,
                                                enum nouveau_ws_bo_flags,
                                                enum nouveau_ws_bo_map_flags map_flags,
                                                void **map_out);
+struct nouveau_ws_bo *nouveau_ws_bo_new_tiled(struct nouveau_ws_device *,
+                                              uint64_t size, uint64_t align,
+                                              uint8_t pte_kind,
+                                              uint16_t tile_mode,
+                                              enum nouveau_ws_bo_flags);
 struct nouveau_ws_bo *nouveau_ws_bo_from_dma_buf(struct nouveau_ws_device *,
                                                  int fd);
 void nouveau_ws_bo_destroy(struct nouveau_ws_bo *);
diff --git a/src/nouveau/winsys/nouveau_device.c b/src/nouveau/winsys/nouveau_device.c
index 904a7ad6241..f1e0a3494c0 100644
--- a/src/nouveau/winsys/nouveau_device.c
+++ b/src/nouveau/winsys/nouveau_device.c
@@ -351,6 +351,7 @@ nouveau_ws_device_new(drmDevicePtr drm_device)
 out_err:
    if (device->has_vm_bind) {
       util_vma_heap_finish(&device->vma_heap);
+      util_vma_heap_finish(&device->bda_heap);
       simple_mtx_destroy(&device->vma_mutex);
    }
    if (ver)
@@ -372,9 +373,20 @@ nouveau_ws_device_destroy(struct nouveau_ws_device *device)
 
    if (device->has_vm_bind) {
       util_vma_heap_finish(&device->vma_heap);
+      util_vma_heap_finish(&device->bda_heap);
       simple_mtx_destroy(&device->vma_mutex);
    }
 
    close(device->fd);
    FREE(device);
 }
+
+bool
+nouveau_ws_device_has_tiled_bo(struct nouveau_ws_device *device)
+{
+   uint64_t has = 0;
+   if (nouveau_ws_param(device->fd, NOUVEAU_GETPARAM_HAS_VMA_TILEMODE, &has))
+      return false;
+
+   return has != 0;
+}
diff --git a/src/nouveau/winsys/nouveau_device.h b/src/nouveau/winsys/nouveau_device.h
index 413a2e827e1..0f4eb0cc71a 100644
--- a/src/nouveau/winsys/nouveau_device.h
+++ b/src/nouveau/winsys/nouveau_device.h
@@ -64,6 +64,8 @@ struct nouveau_ws_device {
 struct nouveau_ws_device *nouveau_ws_device_new(struct _drmDevice *drm_device);
 void nouveau_ws_device_destroy(struct nouveau_ws_device *);
 
+bool nouveau_ws_device_has_tiled_bo(struct nouveau_ws_device *device);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/panfrost/ci/gitlab-ci.yml b/src/panfrost/ci/gitlab-ci.yml
index a2f15d22552..4faf3f2fe26 100644
--- a/src/panfrost/ci/gitlab-ci.yml
+++ b/src/panfrost/ci/gitlab-ci.yml
@@ -17,6 +17,7 @@
         - src/panfrost/ci/$PIGLIT_TRACES_FILE
         - src/panfrost/include/*
         - src/panfrost/lib/*
+        - src/panfrost/lib/genxml/*
         - src/panfrost/lib/kmod/*
         - src/panfrost/shared/*
         - src/panfrost/util/*
diff --git a/src/panfrost/ci/panfrost-g52-fails.txt b/src/panfrost/ci/panfrost-g52-fails.txt
index c52e7453f52..1081f02dbec 100644
--- a/src/panfrost/ci/panfrost-g52-fails.txt
+++ b/src/panfrost/ci/panfrost-g52-fails.txt
@@ -15,44 +15,11 @@ shaders@point-vertex-id gl_vertexid,Fail
 shaders@point-vertex-id gl_vertexid gl_instanceid divisor,Fail
 shaders@point-vertex-id gl_vertexid gl_instanceid,Fail
 spec@arb_base_instance@arb_base_instance-drawarrays,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 1024 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 1024 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 1024 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 146 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 146 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 146 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 273 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 273 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 273 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 292 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 292 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 292 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 585 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 585 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 585 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-blit,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-copypixels,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-drawpixels-24_8,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-drawpixels-32f_24_8_rev,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-drawpixels-float-and-ushort,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-readpixels-24_8,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-readpixels-32f_24_8_rev,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-readpixels-float-and-ushort,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-blit,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-copypixels,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-drawpixels,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-readpixels,Fail
 spec@arb_depth_clamp@depth-clamp-range,Fail
 spec@arb_direct_state_access@gettextureimage-formats,Fail
 spec@arb_direct_state_access@gettextureimage-formats init-by-rendering,Fail
-spec@arb_framebuffer_object@arb_framebuffer_object-depth-stencil-blit depth gl_depth32f_stencil8,Fail
-spec@arb_framebuffer_object@arb_framebuffer_object-depth-stencil-blit depth_stencil gl_depth32f_stencil8,Fail
-spec@arb_framebuffer_object@arb_framebuffer_object-depth-stencil-blit stencil gl_depth32f_stencil8,Fail
 spec@arb_framebuffer_object@fbo-luminance-alpha,Fail
 spec@arb_framebuffer_srgb@fbo-fast-clear,Fail
-spec@arb_pixel_buffer_object@fbo-pbo-readpixels-small,Fail
-spec@arb_pixel_buffer_object@fbo-pbo-readpixels-small@GL_DEPTH32F_STENCIL8-GL_DEPTH_STENCIL,Fail
-spec@arb_pixel_buffer_object@fbo-pbo-readpixels-small@GL_DEPTH32F_STENCIL8-GL_STENCIL_INDEX,Fail
 spec@arb_point_sprite@arb_point_sprite-mipmap,Fail
 spec@arb_sample_shading@samplemask 2@0.250000 mask_in_one,Fail
 spec@arb_sample_shading@samplemask 2@0.500000 mask_in_one,Fail
@@ -134,7 +101,6 @@ spec@arb_texture_multisample@arb_texture_multisample-dsa-texelfetch@Texture type
 spec@arb_texture_multisample@arb_texture_multisample-dsa-texelfetch@Texture type: GL_RGBA8,Fail
 spec@arb_texture_multisample@arb_texture_multisample-dsa-texelfetch@Texture type: GL_RGBA8I,Fail
 spec@arb_texture_multisample@arb_texture_multisample-dsa-texelfetch@Texture type: GL_SRGB8_ALPHA8,Fail
-spec@arb_texture_rectangle@1-1-linear-texture,Fail
 spec@arb_texture_rectangle@tex-miplevel-selection gl2:texture() 2drect,Crash
 spec@arb_texture_rectangle@tex-miplevel-selection gl2:texture() 2drectshadow,Crash
 spec@arb_texture_rectangle@tex-miplevel-selection gl2:textureproj 2drect,Crash
@@ -435,7 +401,6 @@ dEQP-VK.spirv_assembly.instruction.compute.workgroup_memory.float32,Crash
 dEQP-VK.spirv_assembly.instruction.compute.workgroup_memory.int32,Crash
 dEQP-VK.spirv_assembly.instruction.compute.workgroup_memory.uint32,Crash
 
-dEQP-VK.api.command_buffers.record_many_draws_secondary_2,Fail
 dEQP-VK.glsl.operator.sequence.no_side_effects.highp_bool_vec2_fragment,Fail
 dEQP-VK.glsl.operator.sequence.no_side_effects.highp_float_uint_fragment,Fail
 dEQP-VK.glsl.operator.sequence.no_side_effects.highp_vec4_ivec4_bvec4_fragment,Fail
diff --git a/src/panfrost/ci/panfrost-g57-fails.txt b/src/panfrost/ci/panfrost-g57-fails.txt
index 841918b7dea..1079cff9413 100644
--- a/src/panfrost/ci/panfrost-g57-fails.txt
+++ b/src/panfrost/ci/panfrost-g57-fails.txt
@@ -24,44 +24,11 @@ shaders@point-vertex-id gl_vertexid,Fail
 shaders@point-vertex-id gl_vertexid gl_instanceid divisor,Fail
 shaders@point-vertex-id gl_vertexid gl_instanceid,Fail
 spec@arb_base_instance@arb_base_instance-drawarrays,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 1024 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 1024 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 1024 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 146 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 146 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 146 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 273 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 273 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 273 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 292 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 292 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 292 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 585 d=s=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 585 ds=z32f_s8,Fail
-spec@arb_depth_buffer_float@depthstencil-render-miplevels 585 s=d=z32f_s8,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-blit,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-copypixels,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-drawpixels-24_8,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-drawpixels-32f_24_8_rev,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-drawpixels-float-and-ushort,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-readpixels-24_8,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-readpixels-32f_24_8_rev,Fail
-spec@arb_depth_buffer_float@fbo-depthstencil-gl_depth32f_stencil8-readpixels-float-and-ushort,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-blit,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-copypixels,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-drawpixels,Fail
-spec@arb_depth_buffer_float@fbo-stencil-gl_depth32f_stencil8-readpixels,Fail
 spec@arb_depth_clamp@depth-clamp-range,Fail
 spec@arb_direct_state_access@gettextureimage-formats,Fail
 spec@arb_direct_state_access@gettextureimage-formats init-by-rendering,Fail
-spec@arb_framebuffer_object@arb_framebuffer_object-depth-stencil-blit depth gl_depth32f_stencil8,Fail
-spec@arb_framebuffer_object@arb_framebuffer_object-depth-stencil-blit depth_stencil gl_depth32f_stencil8,Fail
-spec@arb_framebuffer_object@arb_framebuffer_object-depth-stencil-blit stencil gl_depth32f_stencil8,Fail
 spec@arb_framebuffer_object@fbo-luminance-alpha,Fail
 spec@arb_framebuffer_srgb@fbo-fast-clear,Fail
-spec@arb_pixel_buffer_object@fbo-pbo-readpixels-small,Fail
-spec@arb_pixel_buffer_object@fbo-pbo-readpixels-small@GL_DEPTH32F_STENCIL8-GL_DEPTH_STENCIL,Fail
-spec@arb_pixel_buffer_object@fbo-pbo-readpixels-small@GL_DEPTH32F_STENCIL8-GL_STENCIL_INDEX,Fail
 spec@arb_point_sprite@arb_point_sprite-mipmap,Fail
 spec@arb_sample_shading@samplemask 2@0.250000 mask_in_one,Fail
 spec@arb_sample_shading@samplemask 2@0.500000 mask_in_one,Fail
diff --git a/src/panfrost/compiler/bifrost_compile.c b/src/panfrost/compiler/bifrost_compile.c
index 90020640329..b4bad2f2c7f 100644
--- a/src/panfrost/compiler/bifrost_compile.c
+++ b/src/panfrost/compiler/bifrost_compile.c
@@ -837,15 +837,18 @@ bi_emit_fragment_out(bi_builder *b, nir_intrinsic_instr *instr)
       nir_alu_type T = nir_intrinsic_src_type(instr);
 
       bi_index rgba = bi_src_index(&instr->src[0]);
-      bi_index alpha = (T == nir_type_float16)
-                          ? bi_half(bi_extract(b, rgba, 1), true)
-                       : (T == nir_type_float32) ? bi_extract(b, rgba, 3)
-                                                 : bi_dontcare(b);
+      bi_index alpha;
 
-      /* Don't read out-of-bounds */
-      if (nir_src_num_components(instr->src[0]) < 4)
+      if (nir_src_num_components(instr->src[0]) < 4) {
+         /* Don't read out-of-bounds */
          alpha = bi_imm_f32(1.0);
-
+      } else if (T == nir_type_float16) {
+         alpha = bi_half(bi_extract(b, rgba, 1), true);
+      } else if (T == nir_type_float32) {
+         alpha = bi_extract(b, rgba, 3);
+      } else {
+         alpha = bi_dontcare(b);
+      }
       bi_emit_atest(b, alpha);
    }
 
@@ -3475,7 +3478,7 @@ bi_emit_tex_valhall(bi_builder *b, nir_tex_instr *instr)
             /* Copy XY (for 2D+) or XX (for 1D) */
             sregs[VALHALL_TEX_SREG_X_COORD] = index;
 
-            if (components >= 2)
+            if ((components == 2 && !instr->is_array) || components > 2)
                sregs[VALHALL_TEX_SREG_Y_COORD] = bi_extract(b, index, 1);
 
             if (components == 3 && !instr->is_array) {
diff --git a/src/panfrost/compiler/valhall/va_insert_flow.c b/src/panfrost/compiler/valhall/va_insert_flow.c
index 5cbe6a13ad6..00560c60b31 100644
--- a/src/panfrost/compiler/valhall/va_insert_flow.c
+++ b/src/panfrost/compiler/valhall/va_insert_flow.c
@@ -115,9 +115,16 @@ bi_ld_vary_writes_hidden_register(const bi_instr *I)
 static bool
 bi_is_memory_access(const bi_instr *I)
 {
-   /* On the attribute unit but functionally a general memory load */
-   if (I->op == BI_OPCODE_LD_ATTR_TEX)
+   /* Some instructions on the attribute unit are functionally
+      a general memory load */
+   switch (I->op) {
+   case BI_OPCODE_LD_ATTR_TEX:
+   case BI_OPCODE_LD_TEX:
+   case BI_OPCODE_LD_TEX_IMM:
       return true;
+   default:
+      break;
+   }
 
    /* UBOs are read-only so there are no ordering constriants */
    if (I->seg == BI_SEG_UBO)
diff --git a/src/panfrost/lib/genxml/v10.xml b/src/panfrost/lib/genxml/v10.xml
index 249aaff7850..6d5cb5e244a 100644
--- a/src/panfrost/lib/genxml/v10.xml
+++ b/src/panfrost/lib/genxml/v10.xml
@@ -969,7 +969,7 @@
     <field name="Wrap Mode R" size="4" start="0:8" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode T" size="4" start="0:12" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode S" size="4" start="0:16" type="Wrap Mode" default="Clamp to Edge"/>
-    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="false"/>
+    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="true"/>
     <!--- Disable sRGB-to-linear conversion (assume linear) -->
     <field name="sRGB override" size="1" start="0:22" type="bool" default="false"/>
     <field name="Seamless Cube Map" size="1" start="0:23" type="bool" default="true"/>
diff --git a/src/panfrost/lib/genxml/v6.xml b/src/panfrost/lib/genxml/v6.xml
index 9d042c4db93..86622677991 100644
--- a/src/panfrost/lib/genxml/v6.xml
+++ b/src/panfrost/lib/genxml/v6.xml
@@ -632,7 +632,7 @@
     <field name="Wrap Mode R" size="4" start="0:8" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode T" size="4" start="0:12" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode S" size="4" start="0:16" type="Wrap Mode" default="Clamp to Edge"/>
-    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="false"/>
+    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="true"/>
     <!--- Disable sRGB-to-linear conversion (assume linear) -->
     <field name="sRGB override" size="1" start="0:22" type="bool" default="false"/>
     <field name="Seamless Cube Map" size="1" start="0:23" type="bool" default="true"/>
diff --git a/src/panfrost/lib/genxml/v7.xml b/src/panfrost/lib/genxml/v7.xml
index 7e0b794ec85..da560d2733a 100644
--- a/src/panfrost/lib/genxml/v7.xml
+++ b/src/panfrost/lib/genxml/v7.xml
@@ -696,7 +696,7 @@
     <field name="Wrap Mode R" size="4" start="0:8" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode T" size="4" start="0:12" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode S" size="4" start="0:16" type="Wrap Mode" default="Clamp to Edge"/>
-    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="false"/>
+    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="true"/>
     <!--- Disable sRGB-to-linear conversion (assume linear) -->
     <field name="sRGB override" size="1" start="0:22" type="bool" default="false"/>
     <field name="Seamless Cube Map" size="1" start="0:23" type="bool" default="true"/>
diff --git a/src/panfrost/lib/genxml/v9.xml b/src/panfrost/lib/genxml/v9.xml
index c08d49e2025..961f38badfa 100644
--- a/src/panfrost/lib/genxml/v9.xml
+++ b/src/panfrost/lib/genxml/v9.xml
@@ -623,7 +623,7 @@
     <field name="Wrap Mode R" size="4" start="0:8" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode T" size="4" start="0:12" type="Wrap Mode" default="Clamp to Edge"/>
     <field name="Wrap Mode S" size="4" start="0:16" type="Wrap Mode" default="Clamp to Edge"/>
-    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="false"/>
+    <field name="Round to nearest even" size="1" start="0:21" type="bool" default="true"/>
     <!--- Disable sRGB-to-linear conversion (assume linear) -->
     <field name="sRGB override" size="1" start="0:22" type="bool" default="false"/>
     <field name="Seamless Cube Map" size="1" start="0:23" type="bool" default="true"/>
diff --git a/src/panfrost/lib/kmod/pan_kmod.c b/src/panfrost/lib/kmod/pan_kmod.c
index 395bc378f31..b6b43a5cf3b 100644
--- a/src/panfrost/lib/kmod/pan_kmod.c
+++ b/src/panfrost/lib/kmod/pan_kmod.c
@@ -7,6 +7,7 @@
 #include <string.h>
 #include <xf86drm.h>
 
+#include "util/u_memory.h"
 #include "util/macros.h"
 #include "pan_kmod.h"
 
@@ -26,28 +27,19 @@ static void *
 default_zalloc(const struct pan_kmod_allocator *allocator, size_t size,
                UNUSED bool transient)
 {
-   return rzalloc_size(allocator, size);
+   return os_calloc(1, size);
 }
 
 static void
 default_free(const struct pan_kmod_allocator *allocator, void *data)
 {
-   return ralloc_free(data);
+   os_free(data);
 }
 
-static const struct pan_kmod_allocator *
-create_default_allocator(void)
-{
-   struct pan_kmod_allocator *allocator =
-      rzalloc(NULL, struct pan_kmod_allocator);
-
-   if (allocator) {
-      allocator->zalloc = default_zalloc;
-      allocator->free = default_free;
-   }
-
-   return allocator;
-}
+static const struct pan_kmod_allocator default_allocator = {
+   .zalloc = default_zalloc,
+   .free = default_free,
+};
 
 struct pan_kmod_dev *
 pan_kmod_dev_create(int fd, uint32_t flags,
@@ -59,28 +51,18 @@ pan_kmod_dev_create(int fd, uint32_t flags,
    if (!version)
       return NULL;
 
-   if (!allocator) {
-      allocator = create_default_allocator();
-      if (!allocator)
-         goto out_free_version;
-   }
+   if (!allocator)
+      allocator = &default_allocator;
 
    for (unsigned i = 0; i < ARRAY_SIZE(drivers); i++) {
       if (!strcmp(drivers[i].name, version->name)) {
          const struct pan_kmod_ops *ops = drivers[i].ops;
 
          dev = ops->dev_create(fd, flags, version, allocator);
-         if (dev)
-            goto out_free_version;
-
          break;
       }
    }
 
-   if (allocator->zalloc == default_zalloc)
-      ralloc_free((void *)allocator);
-
-out_free_version:
    drmFreeVersion(version);
    return dev;
 }
@@ -88,12 +70,7 @@ out_free_version:
 void
 pan_kmod_dev_destroy(struct pan_kmod_dev *dev)
 {
-   const struct pan_kmod_allocator *allocator = dev->allocator;
-
    dev->ops->dev_destroy(dev);
-
-   if (allocator->zalloc == default_zalloc)
-      ralloc_free((void *)allocator);
 }
 
 struct pan_kmod_bo *
diff --git a/src/panfrost/lib/pan_blitter.c b/src/panfrost/lib/pan_blitter.c
index 84bcba6361f..9ffe0c16acc 100644
--- a/src/panfrost/lib/pan_blitter.c
+++ b/src/panfrost/lib/pan_blitter.c
@@ -457,10 +457,11 @@ pan_blitter_get_blit_shader(struct panfrost_device *dev,
 
       coord_comps = MAX2(coord_comps, (key->surfaces[i].dim ?: 3) +
                                          (key->surfaces[i].array ? 1 : 0));
-      first = false;
 
-      if (sig_offset >= sizeof(sig))
+      if (sig_offset >= sizeof(sig)) {
+         first = false;
          continue;
+      }
 
       sig_offset +=
          snprintf(sig + sig_offset, sizeof(sig) - sig_offset,
@@ -468,6 +469,8 @@ pan_blitter_get_blit_shader(struct panfrost_device *dev,
                   first ? "" : ",", gl_frag_result_name(key->surfaces[i].loc),
                   type_str, dim_str, key->surfaces[i].array ? "[]" : "",
                   key->surfaces[i].src_samples, key->surfaces[i].dst_samples);
+
+      first = false;
    }
 
    nir_builder b = nir_builder_init_simple_shader(
diff --git a/src/panfrost/midgard/midgard_compile.c b/src/panfrost/midgard/midgard_compile.c
index 2864b3195bc..631bc1e6cbc 100644
--- a/src/panfrost/midgard/midgard_compile.c
+++ b/src/panfrost/midgard/midgard_compile.c
@@ -1263,12 +1263,32 @@ emit_varying_read(compiler_context *ctx, unsigned dest, unsigned offset,
    ins.load_store.arg_reg = REGISTER_LDST_ZERO;
    ins.load_store.index_format = midgard_index_address_u32;
 
-   /* For flat shading, we always use .u32 and require 32-bit mode. For
-    * smooth shading, we use the appropriate floating-point type.
+   /* For flat shading, for GPUs supporting auto32, we always use .u32 and
+    * require 32-bit mode. For smooth shading, we use the appropriate
+    * floating-point type.
     *
     * This could be optimized, but it makes it easy to check correctness.
     */
-   if (flat) {
+   if (ctx->quirks & MIDGARD_NO_AUTO32) {
+      switch (type) {
+      case nir_type_uint32:
+      case nir_type_bool32:
+         ins.op = midgard_op_ld_vary_32u;
+         break;
+      case nir_type_int32:
+         ins.op = midgard_op_ld_vary_32i;
+         break;
+      case nir_type_float32:
+         ins.op = midgard_op_ld_vary_32;
+         break;
+      case nir_type_float16:
+         ins.op = midgard_op_ld_vary_16;
+         break;
+      default:
+         unreachable("Attempted to load unknown type");
+         break;
+      }
+   } else if (flat) {
       assert(nir_alu_type_get_type_size(type) == 32);
       ins.op = midgard_op_ld_vary_32u;
    } else {
@@ -2896,6 +2916,7 @@ midgard_compile_shader_nir(nir_shader *nir,
    ctx->ssa_constants = _mesa_hash_table_u64_create(ctx);
 
    /* Collect varyings after lowering I/O */
+   info->quirk_no_auto32 = (ctx->quirks & MIDGARD_NO_AUTO32);
    pan_nir_collect_varyings(nir, info);
 
    /* Optimisation passes */
diff --git a/src/panfrost/midgard/midgard_quirks.h b/src/panfrost/midgard/midgard_quirks.h
index 3003dbdf7c2..fd7f797e04b 100644
--- a/src/panfrost/midgard/midgard_quirks.h
+++ b/src/panfrost/midgard/midgard_quirks.h
@@ -66,11 +66,19 @@
 
 #define MIDGARD_NO_OOO (1 << 5)
 
+/* Disable auto32 type (apparently broken on T60x). */
+
+#define MIDGARD_NO_AUTO32 (1 << 6)
+
 static inline unsigned
 midgard_get_quirks(unsigned gpu_id)
 {
    switch (gpu_id) {
    case 0x600:
+      return MIDGARD_OLD_BLEND | MIDGARD_BROKEN_BLEND_LOADS |
+             MIDGARD_BROKEN_LOD | MIDGARD_NO_UPPER_ALU | MIDGARD_NO_OOO |
+             MIDGARD_NO_AUTO32;
+
    case 0x620:
       return MIDGARD_OLD_BLEND | MIDGARD_BROKEN_BLEND_LOADS |
              MIDGARD_BROKEN_LOD | MIDGARD_NO_UPPER_ALU | MIDGARD_NO_OOO;
diff --git a/src/panfrost/util/pan_collect_varyings.c b/src/panfrost/util/pan_collect_varyings.c
index b5cc72c51ab..b69e255290a 100644
--- a/src/panfrost/util/pan_collect_varyings.c
+++ b/src/panfrost/util/pan_collect_varyings.c
@@ -67,10 +67,17 @@ struct slot_info {
    unsigned index;
 };
 
+struct walk_varyings_data {
+   struct pan_shader_info *info;
+   struct slot_info *slots;
+};
+
 static bool
 walk_varyings(UNUSED nir_builder *b, nir_instr *instr, void *data)
 {
-   struct slot_info *slots = data;
+   struct walk_varyings_data *wv_data = data;
+   struct pan_shader_info *info = wv_data->info;
+   struct slot_info *slots = wv_data->slots;
 
    if (instr->type != nir_instr_type_intrinsic)
       return false;
@@ -113,8 +120,9 @@ walk_varyings(UNUSED nir_builder *b, nir_instr *instr, void *data)
     * only to determine the type, and the GL linker uses the type from the
     * fragment shader instead.
     */
-   bool flat = (intr->intrinsic != nir_intrinsic_load_interpolated_input);
-   nir_alu_type type = flat ? nir_type_uint : nir_type_float;
+   bool flat = intr->intrinsic != nir_intrinsic_load_interpolated_input;
+   bool auto32 = !info->quirk_no_auto32;
+   nir_alu_type type = (flat && auto32) ? nir_type_uint : nir_type_float;
 
    /* Demote interpolated float varyings to fp16 where possible. We do not
     * demote flat varyings, including integer varyings, due to various
@@ -161,7 +169,8 @@ pan_nir_collect_varyings(nir_shader *s, struct pan_shader_info *info)
       return;
 
    struct slot_info slots[64] = {0};
-   nir_shader_instructions_pass(s, walk_varyings, nir_metadata_all, slots);
+   struct walk_varyings_data wv_data = {info, slots};
+   nir_shader_instructions_pass(s, walk_varyings, nir_metadata_all, &wv_data);
 
    struct pan_shader_varying *varyings = (s->info.stage == MESA_SHADER_VERTEX)
                                             ? info->varyings.output
diff --git a/src/panfrost/util/pan_ir.h b/src/panfrost/util/pan_ir.h
index 5551fc7526a..46d1a530a3e 100644
--- a/src/panfrost/util/pan_ir.h
+++ b/src/panfrost/util/pan_ir.h
@@ -307,6 +307,9 @@ struct pan_shader_info {
 
    uint32_t ubo_mask;
 
+   /* Quirk for GPUs that does not support auto32 types. */
+   bool quirk_no_auto32;
+
    union {
       struct bifrost_shader_info bifrost;
       struct midgard_shader_info midgard;
diff --git a/src/panfrost/vulkan/panvk_formats.c b/src/panfrost/vulkan/panvk_formats.c
index 956d4691677..3186b5dedff 100644
--- a/src/panfrost/vulkan/panvk_formats.c
+++ b/src/panfrost/vulkan/panvk_formats.c
@@ -414,6 +414,13 @@ panvk_GetPhysicalDeviceImageFormatProperties2(
     *    present and VkExternalImageFormatProperties will be ignored.
     */
    if (external_info && external_info->handleType != 0) {
+      VkExternalImageFormatProperties fallback_external_props;
+
+      if (!external_props) {
+         memset(&fallback_external_props, 0, sizeof(fallback_external_props));
+         external_props = &fallback_external_props;
+      }
+
       result = panvk_get_external_image_format_properties(
          physical_device, base_info, external_info->handleType,
          &external_props->externalMemoryProperties);
diff --git a/src/panfrost/vulkan/panvk_vX_cmd_buffer.c b/src/panfrost/vulkan/panvk_vX_cmd_buffer.c
index c26790c68f8..ef07183f17d 100644
--- a/src/panfrost/vulkan/panvk_vX_cmd_buffer.c
+++ b/src/panfrost/vulkan/panvk_vX_cmd_buffer.c
@@ -532,6 +532,7 @@ panvk_fill_non_vs_attribs(struct panvk_cmd_buffer *cmdbuf,
          pan_pack(attribs + offset, ATTRIBUTE, cfg) {
             cfg.buffer_index = first_buf + (img_idx + i) * 2;
             cfg.format = desc_state->sets[s]->img_fmts[i];
+            cfg.offset_enable = false;
          }
          offset += pan_size(ATTRIBUTE);
       }
diff --git a/src/panfrost/vulkan/panvk_vX_cs.c b/src/panfrost/vulkan/panvk_vX_cs.c
index c78e4ed701c..c40bec7ca5d 100644
--- a/src/panfrost/vulkan/panvk_vX_cs.c
+++ b/src/panfrost/vulkan/panvk_vX_cs.c
@@ -116,6 +116,7 @@ panvk_emit_varying(const struct panvk_device *dev,
       cfg.buffer_index = varyings->varying[loc].buf;
       cfg.offset = varyings->varying[loc].offset;
       cfg.format = panvk_varying_hw_format(dev, varyings, stage, idx);
+      cfg.offset_enable = false;
    }
 }
 
@@ -286,6 +287,7 @@ panvk_emit_attrib(const struct panvk_device *dev,
    pan_pack(attrib, ATTRIBUTE, cfg) {
       cfg.buffer_index = buf_idx * 2;
       cfg.offset = attribs->attrib[idx].offset + (bufs[buf_idx].address & 63);
+      cfg.offset_enable = true;
 
       if (buf_info->per_instance)
          cfg.offset += draw->first_instance * buf_info->stride;
diff --git a/src/panfrost/vulkan/panvk_vX_meta_copy.c b/src/panfrost/vulkan/panvk_vX_meta_copy.c
index 6abb644e76c..434835155d0 100644
--- a/src/panfrost/vulkan/panvk_vX_meta_copy.c
+++ b/src/panfrost/vulkan/panvk_vX_meta_copy.c
@@ -82,6 +82,7 @@ panvk_meta_copy_emit_varying(struct pan_pool *pool, mali_ptr coordinates,
    pan_pack(varying.cpu, ATTRIBUTE, cfg) {
       cfg.buffer_index = 0;
       cfg.format = pool->dev->formats[PIPE_FORMAT_R32G32B32_FLOAT].hw;
+      cfg.offset_enable = false;
    }
 
    *varyings = varying.gpu;
diff --git a/src/util/00-mesa-defaults.conf b/src/util/00-mesa-defaults.conf
index ba42e550260..d88dc56f193 100644
--- a/src/util/00-mesa-defaults.conf
+++ b/src/util/00-mesa-defaults.conf
@@ -431,6 +431,13 @@ TODO: document the other workarounds.
             <option name="allow_glsl_120_subset_in_110" value="true" />
         </application>
 
+        <application name="Joe Danger (Wine)" executable="JoeDanger.exe">
+            <option name="allow_glsl_120_subset_in_110" value="true" />
+        </application>
+        <application name="Joe Danger 2 (Wine)" executable="JoeDanger2.exe">
+            <option name="allow_glsl_120_subset_in_110" value="true" />
+        </application>
+
         <application name="BETA CAE Systems - GL detect tool" executable="detect_opengl_tool">
             <option name="mesa_extension_override" value="-GL_MESA_pack_invert -GL_MESA_framebuffer_flip_y -GL_MESA_window_pos" />
         </application>
@@ -1220,6 +1227,9 @@ TODO: document the other workarounds.
         <application name="The Finals" executable="Discovery.exe">
             <option name="force_vk_vendor" value="-1" />
         </application>
+        <application name="Shadow of the Tomb Raider" executable="SOTTR.exe">
+            <option name="force_vk_vendor" value="-1" />
+        </application>
         <!--
         Disable 16-bit feature on zink and angle so that GLES mediump doesn't
         lower to our inefficent 16-bit shader support.  No need to do so for
diff --git a/src/util/00-radv-defaults.conf b/src/util/00-radv-defaults.conf
index 42fda93e1ec..648484edcc5 100644
--- a/src/util/00-radv-defaults.conf
+++ b/src/util/00-radv-defaults.conf
@@ -85,6 +85,7 @@ Application bugs worked around in this file:
         <application name="RAGE 2" executable="RAGE2.exe">
             <option name="radv_enable_mrt_output_nan_fixup" value="true" />
             <option name="radv_app_layer" value="rage2" />
+            <option name="radv_zero_vram" value="true" />
         </application>
 
         <application name="The Surge 2" application_name_match="Fledge">
@@ -135,6 +136,7 @@ Application bugs worked around in this file:
 
         <application name="RDR2" application_name_match="Red Dead Redemption 2">
             <option name="radv_enable_unified_heap_on_apu" value="true" />
+            <option name="radv_zero_vram" value="true" />
         </application>
 
         <application name="Metro Exodus (Linux native)" application_name_match="metroexodus">
@@ -163,6 +165,10 @@ Application bugs worked around in this file:
             <option name="radv_force_active_accel_struct_leaves" value="true" />
         </application>
 
+        <application name="Helldivers 2" executable="helldivers2.exe">
+            <option name="radv_force_pstate_peak_gfx11_dgpu" value="true" />
+        </application>
+
         <!-- OpenGL Game workarounds (zink) -->
         <application name="Black Geyser: Couriers of Darkness" executable="BlackGeyser.x86_64">
             <option name="radv_zero_vram" value="true" />
@@ -195,5 +201,16 @@ Application bugs worked around in this file:
         <application name="Rocket League" executable="RocketLeague">
             <option name="radv_zero_vram" value="true" />
         </application>
+        <application name="Crystal Project" executable="Crystal Project.bin.x86_64">
+            <option name="radv_zero_vram" value="true" />
+        </application>
+
+        <application name="Half-Life Alyx" application_name_match="hlvr">
+            <option name="dual_color_blend_by_location" value="true" />
+        </application>
+
+        <application name="Enshrouded" executable="enshrouded.exe">
+            <option name="radv_zero_vram" value="true"/>
+        </application>
     </device>
 </driconf>
diff --git a/src/util/bitset.h b/src/util/bitset.h
index cffbb73ecce..d5abb6c1f7c 100644
--- a/src/util/bitset.h
+++ b/src/util/bitset.h
@@ -209,7 +209,8 @@ __bitset_shl(BITSET_WORD *x, unsigned amount, unsigned n)
  */
 #define BITSET_TEST_RANGE_INSIDE_WORD(x, b, e, mask) \
    (BITSET_BITWORD(b) == BITSET_BITWORD(e) ? \
-   (((x)[BITSET_BITWORD(b)] & BITSET_RANGE(b, e)) == mask) : \
+   (((x)[BITSET_BITWORD(b)] & BITSET_RANGE(b, e)) == \
+   (((BITSET_WORD)mask) << (b % BITSET_WORDBITS))) : \
    (assert (!"BITSET_TEST_RANGE: bit range crosses word boundary"), 0))
 #define BITSET_SET_RANGE_INSIDE_WORD(x, b, e) \
    (BITSET_BITWORD(b) == BITSET_BITWORD(e) ? \
diff --git a/src/util/driconf.h b/src/util/driconf.h
index da880b27a20..fdda1015453 100644
--- a/src/util/driconf.h
+++ b/src/util/driconf.h
@@ -694,6 +694,10 @@
    DRI_CONF_OPT_B(radv_legacy_sparse_binding, def, \
                   "Enable legacy sparse binding (with implicit synchronization) on the graphics and compute queue")
 
+#define DRI_CONF_RADV_FORCE_PSTATE_PEAK_GFX11_DGPU(def) \
+   DRI_CONF_OPT_B(radv_force_pstate_peak_gfx11_dgpu, def, \
+                  "Force the performance level to profile_peak (all clocks to the highest levels) for RDNA3 dGPUs")
+
 /**
  * Overrides for forcing re-compilation of pipelines when RADV_BUILD_ID_OVERRIDE is enabled.
  * These need to be bumped every time a compiler bugfix is backported (up to 8 shader
diff --git a/src/util/futex.c b/src/util/futex.c
index fb6072e8f4c..30520a6f048 100644
--- a/src/util/futex.c
+++ b/src/util/futex.c
@@ -142,7 +142,7 @@ int futex_wait(uint32_t *addr, int32_t value, const struct timespec *timeout)
       struct timespec tsnow;
       timespec_get(&tsnow, TIME_UTC);
 
-      timeout_ms = (timeout->tv_sec - tsnow.tv_nsec) * 1000 +
+      timeout_ms = (timeout->tv_sec - tsnow.tv_sec) * 1000 +
                    (timeout->tv_nsec - tsnow.tv_nsec) / 1000000;
    }
 
diff --git a/src/util/u_debug.c b/src/util/u_debug.c
index a86b37a67e9..3a5d3a691a8 100644
--- a/src/util/u_debug.c
+++ b/src/util/u_debug.c
@@ -423,18 +423,17 @@ parse_debug_string(const char *debug,
 
    if (debug != NULL) {
       for (; control->string != NULL; control++) {
-         if (!strncmp(debug, "all", strlen("all"))) {
-            flag |= control->flag;
+         const char *s = debug;
+         unsigned n;
 
-         } else {
-            const char *s = debug;
-            unsigned n;
+         for (; n = strcspn(s, ", "), *s; s += MAX2(1, n)) {
+            if (!n)
+               continue;
 
-            for (; n = strcspn(s, ", "), *s; s += MAX2(1, n)) {
-               if (strlen(control->string) == n &&
-                   !strncmp(control->string, s, n))
-                  flag |= control->flag;
-            }
+            if (!strncmp("all", s, n) ||
+                (strlen(control->string) == n &&
+                !strncmp(control->string, s, n)))
+               flag |= control->flag;
          }
       }
    }
diff --git a/src/virtio/vulkan/vn_descriptor_set.c b/src/virtio/vulkan/vn_descriptor_set.c
index a1899c3b409..f079262421b 100644
--- a/src/virtio/vulkan/vn_descriptor_set.c
+++ b/src/virtio/vulkan/vn_descriptor_set.c
@@ -390,6 +390,8 @@ vn_CreateDescriptorPool(VkDevice device,
    vn_async_vkCreateDescriptorPool(dev->primary_ring, device, pCreateInfo,
                                    NULL, &pool_handle);
 
+   vn_tls_set_async_pipeline_create();
+
    *pDescriptorPool = pool_handle;
 
    return VK_SUCCESS;
diff --git a/src/virtio/vulkan/vn_device.c b/src/virtio/vulkan/vn_device.c
index 00ff23ebced..61e49de673e 100644
--- a/src/virtio/vulkan/vn_device.c
+++ b/src/virtio/vulkan/vn_device.c
@@ -570,6 +570,8 @@ vn_CreateDevice(VkPhysicalDevice physicalDevice,
       vn_log(instance, "%s", physical_dev->properties.vulkan_1_2.driverInfo);
    }
 
+   vn_tls_set_async_pipeline_create();
+
    *pDevice = vn_device_to_handle(dev);
 
    return VK_SUCCESS;
diff --git a/src/virtio/vulkan/vn_image.c b/src/virtio/vulkan/vn_image.c
index e7a5a791895..ccb7ca0ad26 100644
--- a/src/virtio/vulkan/vn_image.c
+++ b/src/virtio/vulkan/vn_image.c
@@ -231,8 +231,15 @@ vn_image_store_reqs_in_cache(struct vn_device *dev,
    assert(cache->ht);
 
    simple_mtx_lock(&cache->mutex);
-   uint32_t cache_entry_count = _mesa_hash_table_num_entries(cache->ht);
-   if (cache_entry_count == IMAGE_REQS_CACHE_MAX_ENTRIES) {
+
+   /* Check if entry was added before lock */
+   if (_mesa_hash_table_search(cache->ht, key)) {
+      simple_mtx_unlock(&cache->mutex);
+      return;
+   }
+
+   if (_mesa_hash_table_num_entries(cache->ht) ==
+       IMAGE_REQS_CACHE_MAX_ENTRIES) {
       /* Evict/use the last entry in the lru list for this new entry */
       cache_entry =
          list_last_entry(&cache->lru, struct vn_image_reqs_cache_entry, head);
@@ -242,11 +249,11 @@ vn_image_store_reqs_in_cache(struct vn_device *dev,
    } else {
       cache_entry = vk_zalloc(alloc, sizeof(*cache_entry), VN_DEFAULT_ALIGN,
                               VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
+      if (!cache_entry) {
+         simple_mtx_unlock(&cache->mutex);
+         return;
+      }
    }
-   simple_mtx_unlock(&cache->mutex);
-
-   if (!cache_entry)
-      return;
 
    for (uint32_t i = 0; i < plane_count; i++)
       cache_entry->requirements[i] = requirements[i];
@@ -254,12 +261,10 @@ vn_image_store_reqs_in_cache(struct vn_device *dev,
    memcpy(cache_entry->key, key, SHA1_DIGEST_LENGTH);
    cache_entry->plane_count = plane_count;
 
-   simple_mtx_lock(&cache->mutex);
-   if (!_mesa_hash_table_search(cache->ht, cache_entry->key)) {
-      _mesa_hash_table_insert(dev->image_reqs_cache.ht, cache_entry->key,
-                              cache_entry);
-      list_add(&cache_entry->head, &cache->lru);
-   }
+   _mesa_hash_table_insert(dev->image_reqs_cache.ht, cache_entry->key,
+                           cache_entry);
+   list_add(&cache_entry->head, &cache->lru);
+
    simple_mtx_unlock(&cache->mutex);
 }
 
diff --git a/src/virtio/vulkan/vn_pipeline.c b/src/virtio/vulkan/vn_pipeline.c
index 835b55852de..65b617eed3f 100644
--- a/src/virtio/vulkan/vn_pipeline.c
+++ b/src/virtio/vulkan/vn_pipeline.c
@@ -590,27 +590,48 @@ vn_create_pipeline_handles(struct vn_device *dev,
    return true;
 }
 
-/** For vkCreate*Pipelines.  */
 static void
-vn_destroy_failed_pipelines(struct vn_device *dev,
-                            uint32_t create_info_count,
-                            VkPipeline *pipelines,
-                            const VkAllocationCallbacks *alloc)
+vn_destroy_pipeline_handles_internal(struct vn_device *dev,
+                                     uint32_t pipeline_count,
+                                     VkPipeline *pipeline_handles,
+                                     const VkAllocationCallbacks *alloc,
+                                     bool failed_only)
 {
-   for (uint32_t i = 0; i < create_info_count; i++) {
-      struct vn_pipeline *pipeline = vn_pipeline_from_handle(pipelines[i]);
+   for (uint32_t i = 0; i < pipeline_count; i++) {
+      struct vn_pipeline *pipeline =
+         vn_pipeline_from_handle(pipeline_handles[i]);
 
-      if (pipeline->base.id == 0) {
+      if (!failed_only || pipeline->base.id == 0) {
          if (pipeline->layout) {
             vn_pipeline_layout_unref(dev, pipeline->layout);
          }
          vn_object_base_fini(&pipeline->base);
          vk_free(alloc, pipeline);
-         pipelines[i] = VK_NULL_HANDLE;
+         pipeline_handles[i] = VK_NULL_HANDLE;
       }
    }
 }
 
+static inline void
+vn_destroy_pipeline_handles(struct vn_device *dev,
+                            uint32_t pipeline_count,
+                            VkPipeline *pipeline_handles,
+                            const VkAllocationCallbacks *alloc)
+{
+   vn_destroy_pipeline_handles_internal(dev, pipeline_count, pipeline_handles,
+                                        alloc, false);
+}
+
+static inline void
+vn_destroy_failed_pipeline_handles(struct vn_device *dev,
+                                   uint32_t pipeline_count,
+                                   VkPipeline *pipeline_handles,
+                                   const VkAllocationCallbacks *alloc)
+{
+   vn_destroy_pipeline_handles_internal(dev, pipeline_count, pipeline_handles,
+                                        alloc, true);
+}
+
 #define VN_PIPELINE_CREATE_SYNC_MASK                                         \
    (VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT |               \
     VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT)
@@ -1544,7 +1565,7 @@ vn_CreateGraphicsPipelines(VkDevice device,
    pCreateInfos = vn_fix_graphics_pipeline_create_infos(
       dev, createInfoCount, pCreateInfos, fix_descs, &fix_tmp, alloc);
    if (!pCreateInfos) {
-      vn_destroy_failed_pipelines(dev, createInfoCount, pPipelines, alloc);
+      vn_destroy_pipeline_handles(dev, createInfoCount, pPipelines, alloc);
       STACK_ARRAY_FINISH(fix_descs);
       return vn_error(dev->instance, VK_ERROR_OUT_OF_HOST_MEMORY);
    }
@@ -1572,7 +1593,7 @@ vn_CreateGraphicsPipelines(VkDevice device,
    struct vn_ring *target_ring = vn_get_target_ring(dev);
    if (!target_ring) {
       vk_free(alloc, fix_tmp);
-      vn_destroy_failed_pipelines(dev, createInfoCount, pPipelines, alloc);
+      vn_destroy_pipeline_handles(dev, createInfoCount, pPipelines, alloc);
       STACK_ARRAY_FINISH(fix_descs);
       return vn_error(dev->instance, VK_ERROR_OUT_OF_HOST_MEMORY);
    }
@@ -1582,7 +1603,8 @@ vn_CreateGraphicsPipelines(VkDevice device,
          target_ring, device, pipelineCache, createInfoCount, pCreateInfos,
          NULL, pPipelines);
       if (result != VK_SUCCESS)
-         vn_destroy_failed_pipelines(dev, createInfoCount, pPipelines, alloc);
+         vn_destroy_failed_pipeline_handles(dev, createInfoCount, pPipelines,
+                                            alloc);
    } else {
       vn_async_vkCreateGraphicsPipelines(target_ring, device, pipelineCache,
                                          createInfoCount, pCreateInfos, NULL,
@@ -1633,7 +1655,7 @@ vn_CreateComputePipelines(VkDevice device,
 
    struct vn_ring *target_ring = vn_get_target_ring(dev);
    if (!target_ring) {
-      vn_destroy_failed_pipelines(dev, createInfoCount, pPipelines, alloc);
+      vn_destroy_pipeline_handles(dev, createInfoCount, pPipelines, alloc);
       return vn_error(dev->instance, VK_ERROR_OUT_OF_HOST_MEMORY);
    }
 
@@ -1642,7 +1664,8 @@ vn_CreateComputePipelines(VkDevice device,
          target_ring, device, pipelineCache, createInfoCount, pCreateInfos,
          NULL, pPipelines);
       if (result != VK_SUCCESS)
-         vn_destroy_failed_pipelines(dev, createInfoCount, pPipelines, alloc);
+         vn_destroy_failed_pipeline_handles(dev, createInfoCount, pPipelines,
+                                            alloc);
    } else {
       vn_async_vkCreateComputePipelines(target_ring, device, pipelineCache,
                                         createInfoCount, pCreateInfos, NULL,
diff --git a/src/virtio/vulkan/vn_queue.c b/src/virtio/vulkan/vn_queue.c
index 22d469bba2a..703958fbf66 100644
--- a/src/virtio/vulkan/vn_queue.c
+++ b/src/virtio/vulkan/vn_queue.c
@@ -600,7 +600,7 @@ vn_queue_submission_add_query_feedback(struct vn_queue_submission *submit,
    VkCommandBuffer *feedback_cmd_handle =
       vn_get_feedback_cmd_handle(submit, feedback_cmds, cmd_count);
    const uint32_t stride = submit->batch_type == VK_STRUCTURE_TYPE_SUBMIT_INFO
-                              ? sizeof(VkCommandBuffer *)
+                              ? sizeof(VkCommandBuffer)
                               : sizeof(VkCommandBufferSubmitInfo);
 
    struct vn_feedback_cmd_pool *feedback_cmd_pool = NULL;
@@ -857,7 +857,7 @@ vn_queue_submission_setup_batches(struct vn_queue_submission *submit)
     * to modify cmd buffer.
     * Only needed for non-empty submissions
     */
-   if (submit->batches) {
+   if (submit->batch_count) {
       memcpy(submit->temp.batches, submit->batches,
              batch_size * submit->batch_count);
    }
diff --git a/src/virtio/vulkan/vn_ring.c b/src/virtio/vulkan/vn_ring.c
index 085a24f1551..39c16acbeaa 100644
--- a/src/virtio/vulkan/vn_ring.c
+++ b/src/virtio/vulkan/vn_ring.c
@@ -343,7 +343,7 @@ vn_ring_destroy(struct vn_ring *ring)
 
    list_for_each_entry_safe(struct vn_ring_submit, submit,
                             &ring->free_submits, head)
-      vk_free(alloc, submit);
+      free(submit);
 
    vn_cs_encoder_fini(&ring->upload);
    vn_renderer_shmem_unref(ring->instance->renderer, ring->shmem);
@@ -362,7 +362,6 @@ vn_ring_get_id(struct vn_ring *ring)
 static struct vn_ring_submit *
 vn_ring_get_submit(struct vn_ring *ring, uint32_t shmem_count)
 {
-   const VkAllocationCallbacks *alloc = &ring->instance->base.base.alloc;
    const uint32_t min_shmem_count = 2;
    struct vn_ring_submit *submit;
 
@@ -375,8 +374,7 @@ vn_ring_get_submit(struct vn_ring *ring, uint32_t shmem_count)
    } else {
       const size_t submit_size = offsetof(
          struct vn_ring_submit, shmems[MAX2(shmem_count, min_shmem_count)]);
-      submit = vk_alloc(alloc, submit_size, VN_DEFAULT_ALIGN,
-                        VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE);
+      submit = malloc(submit_size);
    }
 
    return submit;
@@ -419,8 +417,7 @@ vn_ring_submit_internal(struct vn_ring *ring,
 }
 
 static const struct vn_cs_encoder *
-vn_ring_submission_get_cs(struct vn_ring *ring,
-                          struct vn_ring_submission *submit,
+vn_ring_submission_get_cs(struct vn_ring_submission *submit,
                           const struct vn_cs_encoder *cs,
                           bool direct)
 {
@@ -445,9 +442,7 @@ vn_ring_submission_get_cs(struct vn_ring *ring,
       desc_count, descs, NULL, 0, NULL, 0);
    void *exec_data = submit->indirect.data;
    if (exec_size > sizeof(submit->indirect.data)) {
-      const VkAllocationCallbacks *alloc = &ring->instance->base.base.alloc;
-      exec_data = vk_alloc(alloc, exec_size, VN_DEFAULT_ALIGN,
-                           VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE);
+      exec_data = malloc(exec_size);
       if (!exec_data) {
          STACK_ARRAY_FINISH(descs);
          return NULL;
@@ -495,13 +490,11 @@ vn_ring_submission_get_ring_submit(struct vn_ring *ring,
 }
 
 static inline void
-vn_ring_submission_cleanup(struct vn_ring *ring,
-                           struct vn_ring_submission *submit)
+vn_ring_submission_cleanup(struct vn_ring_submission *submit)
 {
-   const VkAllocationCallbacks *alloc = &ring->instance->base.base.alloc;
    if (submit->cs == &submit->indirect.cs &&
        submit->indirect.buffer.base != submit->indirect.data)
-      vk_free(alloc, submit->indirect.buffer.base);
+      free(submit->indirect.buffer.base);
 }
 
 static VkResult
@@ -511,14 +504,14 @@ vn_ring_submission_prepare(struct vn_ring *ring,
                            struct vn_renderer_shmem *extra_shmem,
                            bool direct)
 {
-   submit->cs = vn_ring_submission_get_cs(ring, submit, cs, direct);
+   submit->cs = vn_ring_submission_get_cs(submit, cs, direct);
    if (!submit->cs)
       return VK_ERROR_OUT_OF_HOST_MEMORY;
 
    submit->submit =
       vn_ring_submission_get_ring_submit(ring, cs, extra_shmem, direct);
    if (!submit->submit) {
-      vn_ring_submission_cleanup(ring, submit);
+      vn_ring_submission_cleanup(submit);
       return VK_ERROR_OUT_OF_HOST_MEMORY;
    }
 
@@ -586,7 +579,7 @@ vn_ring_submit_locked(struct vn_ring *ring,
                                 vn_cs_encoder_get_len(&local_enc));
    }
 
-   vn_ring_submission_cleanup(ring, &submit);
+   vn_ring_submission_cleanup(&submit);
 
    if (ring_seqno)
       *ring_seqno = seqno;
diff --git a/src/vulkan/runtime/vk_command_buffer.h b/src/vulkan/runtime/vk_command_buffer.h
index 9d2b818655c..e49b3077d34 100644
--- a/src/vulkan/runtime/vk_command_buffer.h
+++ b/src/vulkan/runtime/vk_command_buffer.h
@@ -174,6 +174,12 @@ struct vk_command_buffer {
    struct vk_framebuffer *framebuffer;
    VkRect2D render_area;
 
+   /**
+    * True if we are currently inside a CmdPipelineBarrier() is inserted by
+    * the runtime's vk_render_pass.c
+    */
+   bool runtime_rp_barrier;
+
    /* This uses the same trick as STACK_ARRAY */
    struct vk_attachment_state *attachments;
    struct vk_attachment_state _attachments[8];
diff --git a/src/vulkan/runtime/vk_graphics_state.c b/src/vulkan/runtime/vk_graphics_state.c
index d4f42c3083b..65e24157102 100644
--- a/src/vulkan/runtime/vk_graphics_state.c
+++ b/src/vulkan/runtime/vk_graphics_state.c
@@ -1283,9 +1283,11 @@ vk_graphics_pipeline_state_fill(const struct vk_device *device,
       vk_find_struct_const(info->pNext, GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT);
    const VkPipelineLibraryCreateInfoKHR *lib_info =
       vk_find_struct_const(info->pNext, PIPELINE_LIBRARY_CREATE_INFO_KHR);
+   
+   VkPipelineCreateFlags2KHR pipeline_flags = vk_graphics_pipeline_create_flags(info);
 
    VkShaderStageFlagBits allowed_stages;
-   if (!(info->flags & VK_PIPELINE_CREATE_LIBRARY_BIT_KHR)) {
+   if (!(pipeline_flags & VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR)) {
       allowed_stages = VK_SHADER_STAGE_ALL_GRAPHICS |
                        VK_SHADER_STAGE_TASK_BIT_EXT |
                        VK_SHADER_STAGE_MESH_BIT_EXT;
@@ -1330,7 +1332,7 @@ vk_graphics_pipeline_state_fill(const struct vk_device *device,
    if (gpl_info) {
       lib = gpl_info->flags;
    } else if ((lib_info && lib_info->libraryCount > 0) ||
-              (info->flags & VK_PIPELINE_CREATE_LIBRARY_BIT_KHR)) {
+              (pipeline_flags & VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR)) {
      /*
       * From the Vulkan 1.3.210 spec:
       *    "If this structure is omitted, and either VkGraphicsPipelineCreateInfo::flags
diff --git a/src/vulkan/runtime/vk_pipeline.c b/src/vulkan/runtime/vk_pipeline.c
index 50a87e13a3c..8a6bf431446 100644
--- a/src/vulkan/runtime/vk_pipeline.c
+++ b/src/vulkan/runtime/vk_pipeline.c
@@ -49,6 +49,15 @@ vk_pipeline_shader_stage_is_null(const VkPipelineShaderStageCreateInfo *info)
    return true;
 }
 
+bool
+vk_pipeline_shader_stage_has_identifier(const VkPipelineShaderStageCreateInfo *info)
+{
+   const VkPipelineShaderStageModuleIdentifierCreateInfoEXT *id_info =
+      vk_find_struct_const(info->pNext, PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT);
+
+   return id_info && id_info->identifierSize != 0;
+}
+
 static nir_shader *
 get_builtin_nir(const VkPipelineShaderStageCreateInfo *info)
 {
diff --git a/src/vulkan/runtime/vk_pipeline.h b/src/vulkan/runtime/vk_pipeline.h
index 1ca32a1428e..94d3a77b41e 100644
--- a/src/vulkan/runtime/vk_pipeline.h
+++ b/src/vulkan/runtime/vk_pipeline.h
@@ -53,6 +53,9 @@ typedef struct VkPipelineShaderStageNirCreateInfoMESA {
 bool
 vk_pipeline_shader_stage_is_null(const VkPipelineShaderStageCreateInfo *info);
 
+bool
+vk_pipeline_shader_stage_has_identifier(const VkPipelineShaderStageCreateInfo *info);
+
 VkResult
 vk_pipeline_shader_stage_to_nir(struct vk_device *device,
                                 const VkPipelineShaderStageCreateInfo *info,
diff --git a/src/vulkan/runtime/vk_render_pass.c b/src/vulkan/runtime/vk_render_pass.c
index 826fd21a9f3..9eb69987383 100644
--- a/src/vulkan/runtime/vk_render_pass.c
+++ b/src/vulkan/runtime/vk_render_pass.c
@@ -1392,13 +1392,40 @@ can_use_attachment_initial_layout(struct vk_command_buffer *cmd_buffer,
    return true;
 }
 
-static void
-set_attachment_layout(struct vk_command_buffer *cmd_buffer,
-                      uint32_t att_idx,
-                      uint32_t view_mask,
-                      VkImageLayout layout,
-                      VkImageLayout stencil_layout)
+uint32_t
+vk_command_buffer_get_attachment_layout(const struct vk_command_buffer *cmd_buffer,
+                                        const struct vk_image *image,
+                                        VkImageLayout *out_layout,
+                                        VkImageLayout *out_stencil_layout)
+{
+   const struct vk_render_pass *render_pass = cmd_buffer->render_pass;
+   assert(render_pass != NULL);
+
+   const struct vk_subpass *subpass =
+      &render_pass->subpasses[cmd_buffer->subpass_idx];
+   int first_view = ffs(subpass->view_mask) - 1;
+
+   for (uint32_t a = 0; a < render_pass->attachment_count; a++) {
+      if (cmd_buffer->attachments[a].image_view->image == image) {
+         *out_layout = cmd_buffer->attachments[a].views[first_view].layout;
+         *out_stencil_layout =
+            cmd_buffer->attachments[a].views[first_view].stencil_layout;
+         return a;
+      }
+   }
+   unreachable("Image not found in attachments");
+}
+
+void
+vk_command_buffer_set_attachment_layout(struct vk_command_buffer *cmd_buffer,
+                                        uint32_t att_idx,
+                                        VkImageLayout layout,
+                                        VkImageLayout stencil_layout)
 {
+   const struct vk_render_pass *render_pass = cmd_buffer->render_pass;
+   const struct vk_subpass *subpass =
+      &render_pass->subpasses[cmd_buffer->subpass_idx];
+   uint32_t view_mask = subpass->view_mask;
    struct vk_attachment_state *att_state = &cmd_buffer->attachments[att_idx];
 
    u_foreach_bit(view, view_mask) {
@@ -1650,9 +1677,10 @@ begin_subpass(struct vk_command_buffer *cmd_buffer,
             };
             __vk_append_struct(color_attachment, color_initial_layout);
 
-            set_attachment_layout(cmd_buffer, sp_att->attachment,
-                                  subpass->view_mask,
-                                  sp_att->layout, VK_IMAGE_LAYOUT_UNDEFINED);
+            vk_command_buffer_set_attachment_layout(cmd_buffer,
+                                                    sp_att->attachment,
+                                                    sp_att->layout,
+                                                    VK_IMAGE_LAYOUT_UNDEFINED);
          }
       } else {
          /* We've seen at least one of the views of this attachment before so
@@ -1770,9 +1798,10 @@ begin_subpass(struct vk_command_buffer *cmd_buffer,
                                   &stencil_initial_layout);
             }
 
-            set_attachment_layout(cmd_buffer, sp_att->attachment,
-                                  subpass->view_mask,
-                                  sp_att->layout, sp_att->stencil_layout);
+            vk_command_buffer_set_attachment_layout(cmd_buffer,
+                                                    sp_att->attachment,
+                                                    sp_att->layout,
+                                                    sp_att->stencil_layout);
          }
       } else {
          /* We've seen at least one of the views of this attachment before so
@@ -2048,8 +2077,10 @@ begin_subpass(struct vk_command_buffer *cmd_buffer,
          .pImageMemoryBarriers = image_barrier_count > 0 ?
                                  image_barriers : NULL,
       };
+      cmd_buffer->runtime_rp_barrier = true;
       disp->CmdPipelineBarrier2(vk_command_buffer_to_handle(cmd_buffer),
                                 &dependency_info);
+      cmd_buffer->runtime_rp_barrier = false;
    }
 
    STACK_ARRAY_FINISH(image_barriers);
@@ -2227,8 +2258,10 @@ end_subpass(struct vk_command_buffer *cmd_buffer,
          .memoryBarrierCount = 1,
          .pMemoryBarriers = &mem_barrier,
       };
+      cmd_buffer->runtime_rp_barrier = true;
       disp->CmdPipelineBarrier2(vk_command_buffer_to_handle(cmd_buffer),
                                 &dependency_info);
+      cmd_buffer->runtime_rp_barrier = false;
    }
 }
 
@@ -2455,8 +2488,10 @@ vk_common_CmdEndRenderPass2(VkCommandBuffer commandBuffer,
          .imageMemoryBarrierCount = image_barrier_count,
          .pImageMemoryBarriers = image_barriers,
       };
+      cmd_buffer->runtime_rp_barrier = true;
       disp->CmdPipelineBarrier2(vk_command_buffer_to_handle(cmd_buffer),
                                 &dependency_info);
+      cmd_buffer->runtime_rp_barrier = false;
    }
 
    STACK_ARRAY_FINISH(image_barriers);
diff --git a/src/vulkan/runtime/vk_render_pass.h b/src/vulkan/runtime/vk_render_pass.h
index 71ba81ec059..9acd65aa3ad 100644
--- a/src/vulkan/runtime/vk_render_pass.h
+++ b/src/vulkan/runtime/vk_render_pass.h
@@ -29,6 +29,9 @@
 extern "C" {
 #endif
 
+struct vk_command_buffer;
+struct vk_image;
+
 /**
  * Pseudo-extension struct that may be chained into VkRenderingAttachmentInfo
  * to indicate an initial layout for the attachment.  This is only allowed if
@@ -425,9 +428,9 @@ vk_subpass_dependency_is_fb_local(const VkSubpassDependency2 *dep,
       VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT |
       VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT;
 
-   const VkPipelineStageFlags2 src_framebuffer_space_stages = 
+   const VkPipelineStageFlags2 src_framebuffer_space_stages =
       framebuffer_space_stages | VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT;
-   const VkPipelineStageFlags2 dst_framebuffer_space_stages = 
+   const VkPipelineStageFlags2 dst_framebuffer_space_stages =
       framebuffer_space_stages | VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT;
 
    /* Check for frambuffer-space dependency. */
@@ -439,6 +442,18 @@ vk_subpass_dependency_is_fb_local(const VkSubpassDependency2 *dep,
    return dep->dependencyFlags & VK_DEPENDENCY_BY_REGION_BIT;
 }
 
+uint32_t
+vk_command_buffer_get_attachment_layout(const struct vk_command_buffer *cmd_buffer,
+                                        const struct vk_image *image,
+                                        VkImageLayout *out_layout,
+                                        VkImageLayout *out_stencil_layout);
+
+void
+vk_command_buffer_set_attachment_layout(struct vk_command_buffer *cmd_buffer,
+                                        uint32_t att_idx,
+                                        VkImageLayout layout,
+                                        VkImageLayout stencil_layout);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/vulkan/runtime/vk_video.c b/src/vulkan/runtime/vk_video.c
index f3153b4a1f6..9934e1271a9 100644
--- a/src/vulkan/runtime/vk_video.c
+++ b/src/vulkan/runtime/vk_video.c
@@ -579,7 +579,7 @@ vk_video_derive_h264_scaling_list(const StdVideoH264SequenceParameterSet *sps,
       {
          if (sps->pScalingLists->scaling_list_present_mask & (1 << i))
             memcpy(temp.ScalingList4x4[i],
-                   pps->pScalingLists->ScalingList4x4[i],
+                   sps->pScalingLists->ScalingList4x4[i],
                    STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS);
          else /* fall-back rule A */
          {
@@ -602,7 +602,7 @@ vk_video_derive_h264_scaling_list(const StdVideoH264SequenceParameterSet *sps,
       {
          int i = j + STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS;
          if (sps->pScalingLists->scaling_list_present_mask & (1 << i))
-            memcpy(temp.ScalingList8x8[j], pps->pScalingLists->ScalingList8x8[j],
+            memcpy(temp.ScalingList8x8[j], sps->pScalingLists->ScalingList8x8[j],
                    STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS);
          else /* fall-back rule A */
          {
@@ -1314,9 +1314,9 @@ enum HEVCNALUnitType {
 };
 
 unsigned
-vk_video_get_h265_nal_unit(StdVideoH265PictureType pic_type, bool irap_pic_flag)
+vk_video_get_h265_nal_unit(const StdVideoEncodeH265PictureInfo *pic_info)
 {
-   switch (pic_type) {
+   switch (pic_info->pic_type) {
    case STD_VIDEO_H265_PICTURE_TYPE_IDR:
       return HEVC_NAL_IDR_W_RADL;
    case STD_VIDEO_H265_PICTURE_TYPE_I:
@@ -1324,10 +1324,16 @@ vk_video_get_h265_nal_unit(StdVideoH265PictureType pic_type, bool irap_pic_flag)
    case STD_VIDEO_H265_PICTURE_TYPE_P:
       return HEVC_NAL_TRAIL_R;
    case STD_VIDEO_H265_PICTURE_TYPE_B:
-      if (irap_pic_flag)
-         return HEVC_NAL_RASL_R;
+      if (pic_info->flags.IrapPicFlag)
+         if (pic_info->flags.is_reference)
+            return HEVC_NAL_RASL_R;
+         else
+            return HEVC_NAL_RASL_N;
       else
-         return HEVC_NAL_TRAIL_R;
+          if (pic_info->flags.is_reference)
+            return HEVC_NAL_TRAIL_R;
+         else
+            return HEVC_NAL_TRAIL_N;
       break;
    default:
       assert(0);
diff --git a/src/vulkan/runtime/vk_video.h b/src/vulkan/runtime/vk_video.h
index 71248537e25..b02da73ce42 100644
--- a/src/vulkan/runtime/vk_video.h
+++ b/src/vulkan/runtime/vk_video.h
@@ -262,7 +262,7 @@ vk_video_encode_h264_pps(StdVideoH264PictureParameterSet *pps,
                          void *data_ptr);
 
 unsigned
-vk_video_get_h265_nal_unit(StdVideoH265PictureType pic_type, bool irap_pic_flag);
+vk_video_get_h265_nal_unit(const StdVideoEncodeH265PictureInfo *pic_info);
 
 void
 vk_video_encode_h265_vps(StdVideoH265VideoParameterSet *vps,
diff --git a/src/vulkan/util/vk_dispatch_table_gen.py b/src/vulkan/util/vk_dispatch_table_gen.py
index 2db977b25de..7a3b459b371 100644
--- a/src/vulkan/util/vk_dispatch_table_gen.py
+++ b/src/vulkan/util/vk_dispatch_table_gen.py
@@ -152,6 +152,62 @@ ${entrypoint_table('instance', instance_entrypoints)}
 ${entrypoint_table('physical_device', physical_device_entrypoints)}
 ${entrypoint_table('device', device_entrypoints)}
 
+<%def name="uncompacted_dispatch_table(entrypoints)">
+% for e in entrypoints:
+  % if e.alias:
+    <% continue %>
+  % endif
+  % if e.guard is not None:
+#ifdef ${e.guard}
+  % endif
+    PFN_vk${e.name} ${e.name};
+  % if e.aliases:
+    % for a in e.aliases:
+    PFN_vk${a.name} ${a.name};
+    % endfor
+  % endif
+  % if e.guard is not None:
+#else
+    PFN_vkVoidFunction ${e.name};
+    % if e.aliases:
+      % for a in e.aliases:
+        PFN_vkVoidFunction ${a.name};
+      % endfor
+    % endif
+#endif
+  % endif
+% endfor
+</%def>
+
+
+struct vk_instance_uncompacted_dispatch_table {
+  ${uncompacted_dispatch_table(instance_entrypoints)}
+};
+
+struct vk_physical_device_uncompacted_dispatch_table {
+  ${uncompacted_dispatch_table(physical_device_entrypoints)}
+};
+
+struct vk_device_uncompacted_dispatch_table {
+  ${uncompacted_dispatch_table(device_entrypoints)}
+};
+
+struct vk_uncompacted_dispatch_table {
+    union {
+        struct {
+            struct vk_instance_uncompacted_dispatch_table instance;
+            struct vk_physical_device_uncompacted_dispatch_table physical_device;
+            struct vk_device_uncompacted_dispatch_table device;
+        };
+
+        struct {
+            ${uncompacted_dispatch_table(instance_entrypoints)}
+            ${uncompacted_dispatch_table(physical_device_entrypoints)}
+            ${uncompacted_dispatch_table(device_entrypoints)}
+        };
+    };
+};
+
 void
 vk_instance_dispatch_table_load(struct vk_instance_dispatch_table *table,
                                 PFN_vkGetInstanceProcAddr gpa,
@@ -165,6 +221,19 @@ vk_device_dispatch_table_load(struct vk_device_dispatch_table *table,
                               PFN_vkGetDeviceProcAddr gpa,
                               VkDevice device);
 
+void
+vk_instance_uncompacted_dispatch_table_load(struct vk_instance_uncompacted_dispatch_table *table,
+                                PFN_vkGetInstanceProcAddr gpa,
+                                VkInstance instance);
+void
+vk_physical_device_uncompacted_dispatch_table_load(struct vk_physical_device_uncompacted_dispatch_table *table,
+                                       PFN_vkGetInstanceProcAddr gpa,
+                                       VkInstance instance);
+void
+vk_device_uncompacted_dispatch_table_load(struct vk_device_uncompacted_dispatch_table *table,
+                              PFN_vkGetDeviceProcAddr gpa,
+                              VkDevice device);
+
 void vk_instance_dispatch_table_from_entrypoints(
     struct vk_instance_dispatch_table *dispatch_table,
     const struct vk_instance_entrypoint_table *entrypoint_table,
@@ -267,6 +336,46 @@ ${load_dispatch_table('physical_device', 'VkInstance', 'GetInstanceProcAddr',
 ${load_dispatch_table('device', 'VkDevice', 'GetDeviceProcAddr',
                       device_entrypoints)}
 
+<%def name="load_uncompacted_dispatch_table(type, VkType, ProcAddr, entrypoints)">
+void
+vk_${type}_uncompacted_dispatch_table_load(struct vk_${type}_uncompacted_dispatch_table *table,
+                               PFN_vk${ProcAddr} gpa,
+                               ${VkType} obj)
+{
+% if type != 'physical_device':
+    table->${ProcAddr} = gpa;
+% endif
+% for e in entrypoints:
+  % if e.alias or e.name == '${ProcAddr}':
+    <% continue %>
+  % endif
+  % if e.guard is not None:
+#ifdef ${e.guard}
+  % endif
+    table->${e.name} = (PFN_vk${e.name}) gpa(obj, "vk${e.name}");
+  % for a in e.aliases:
+    table->${a.name} = (PFN_vk${a.name}) gpa(obj, "vk${a.name}");
+    if (table->${e.name} && !table->${a.name})
+       table->${a.name} = (PFN_vk${a.name}) table->${e.name};
+    if (!table->${e.name})
+       table->${e.name} = (PFN_vk${e.name}) table->${a.name};
+  % endfor
+  % if e.guard is not None:
+#endif
+  % endif
+% endfor
+}
+</%def>
+
+${load_uncompacted_dispatch_table('instance', 'VkInstance', 'GetInstanceProcAddr',
+                      instance_entrypoints)}
+
+${load_uncompacted_dispatch_table('physical_device', 'VkInstance', 'GetInstanceProcAddr',
+                      physical_device_entrypoints)}
+
+${load_uncompacted_dispatch_table('device', 'VkDevice', 'GetDeviceProcAddr',
+                      device_entrypoints)}
+
 
 struct string_map_entry {
    uint32_t name;
diff --git a/src/vulkan/wsi/wsi_common_drm.c b/src/vulkan/wsi/wsi_common_drm.c
index 9fb802cb2ed..6dfb5255644 100644
--- a/src/vulkan/wsi/wsi_common_drm.c
+++ b/src/vulkan/wsi/wsi_common_drm.c
@@ -542,7 +542,7 @@ wsi_create_native_image_mem(const struct wsi_swapchain *chain,
 
       for (uint32_t p = 0; p < image->num_planes; p++) {
          const VkImageSubresource image_subresource = {
-            .aspectMask = VK_IMAGE_ASPECT_PLANE_0_BIT << p,
+            .aspectMask = VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT << p,
             .mipLevel = 0,
             .arrayLayer = 0,
          };
diff --git a/src/vulkan/wsi/wsi_common_x11.c b/src/vulkan/wsi/wsi_common_x11.c
index 07a80458a7c..849c78cd171 100644
--- a/src/vulkan/wsi/wsi_common_x11.c
+++ b/src/vulkan/wsi/wsi_common_x11.c
@@ -1670,21 +1670,23 @@ x11_present_to_x11_dri3(struct x11_swapchain *chain, uint32_t image_index,
    image->present_queued = true;
    image->serial = (uint32_t) chain->send_sbc;
 
-   xcb_present_pixmap(chain->conn,
-                      chain->window,
-                      image->pixmap,
-                      image->serial,
-                      0,                            /* valid */
-                      image->update_area,           /* update */
-                      0,                            /* x_off */
-                      0,                            /* y_off */
-                      XCB_NONE,                     /* target_crtc */
-                      XCB_NONE,
-                      image->sync_fence,
-                      options,
-                      target_msc,
-                      divisor,
-                      remainder, 0, NULL);
+   xcb_void_cookie_t cookie =
+      xcb_present_pixmap(chain->conn,
+                         chain->window,
+                         image->pixmap,
+                         image->serial,
+                         0,                            /* valid */
+                         image->update_area,           /* update */
+                         0,                            /* x_off */
+                         0,                            /* y_off */
+                         XCB_NONE,                     /* target_crtc */
+                         XCB_NONE,
+                         image->sync_fence,
+                         options,
+                         target_msc,
+                         divisor,
+                         remainder, 0, NULL);
+   xcb_discard_reply(chain->conn, cookie.sequence);
    xcb_flush(chain->conn);
    return x11_swapchain_result(chain, VK_SUCCESS);
 }
@@ -1711,7 +1713,7 @@ x11_present_to_x11_sw(struct x11_swapchain *chain, uint32_t image_index,
                              chain->gc,
                              image->base.row_pitches[0] / 4,
                              chain->extent.height,
-                             0,0,0,24,
+                             0,0,0,chain->depth,
                              image->base.row_pitches[0] * chain->extent.height,
                              image->base.cpu_map);
       xcb_discard_reply(chain->conn, cookie.sequence);
@@ -1726,7 +1728,7 @@ x11_present_to_x11_sw(struct x11_swapchain *chain, uint32_t image_index,
                                 chain->gc,
                                 image->base.row_pitches[0] / 4,
                                 this_lines,
-                                0,y_start,0,24,
+                                0,y_start,0,chain->depth,
                                 this_lines * stride_b,
                                 (const uint8_t *)myptr + (y_start * stride_b));
          xcb_discard_reply(chain->conn, cookie.sequence);
diff --git a/subprojects/packagefiles/proc-macro2/meson.build b/subprojects/packagefiles/proc-macro2/meson.build
index b39d76e80c8..be2b272d375 100644
--- a/subprojects/packagefiles/proc-macro2/meson.build
+++ b/subprojects/packagefiles/proc-macro2/meson.build
@@ -41,6 +41,15 @@ endif
 if rc.version().version_compare('< 1.57')
   rust_args += ['--cfg', 'no_is_available']
 endif
+if rc.version().version_compare('< 1.66')
+  rust_args += ['--cfg', 'no_source_text']
+endif
+if rc.version().version_compare('< 1.79')
+  rust_args += [
+    '--cfg', 'no_literal_byte_character',
+    '--cfg', 'no_literal_c_string',
+    ]
+endif
 
 u_ind = subproject('unicode-ident').get_variable('lib')
 
diff --git a/subprojects/perfetto.wrap b/subprojects/perfetto.wrap
index 8e86d842501..e92c50b6664 100644
--- a/subprojects/perfetto.wrap
+++ b/subprojects/perfetto.wrap
@@ -2,4 +2,4 @@
 directory = perfetto
 
 url = https://android.googlesource.com/platform/external/perfetto
-revision = v29.0
+revision = v45.0
diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index 1f718ef8a74..ec7574bc0d4 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -889,7 +889,7 @@ dri2_wl_create_pbuffer_surface(_EGLDisplay *disp, _EGLConfig *conf,
       goto cleanup_surf;
    }
 
-   visual_idx = dri2_wl_visual_idx_from_config(dri2_dpy, config, false);
+   visual_idx = dri2_wl_visual_idx_from_config(dri2_dpy, config);
    assert(visual_idx != -1);
 
    if (dri2_dpy->wl_dmabuf || dri2_dpy->wl_drm) {
