From 115c5b5f6896644cccf7628a86c955ef62105979 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Thu, 16 Jan 2025 09:05:31 +0800
Subject: [PATCH 5/8] zink: Do not use demote on IMG blobs

The implementation of demote in IMG blobs seems to be a piece of hack,
and the current use of it in Zink leads to assertion failure with
information "Uniflex does not support demote and terminate in the same
shader".

Disable usage of demote for IMG blobs.

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
---
 src/gallium/drivers/zink/zink_compiler.c |  3 ++-
 src/gallium/drivers/zink/zink_screen.c   | 15 +++++++++++++--
 src/gallium/drivers/zink/zink_types.h    |  1 +
 3 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/src/gallium/drivers/zink/zink_compiler.c b/src/gallium/drivers/zink/zink_compiler.c
index 9a882d277b9..7d48a91f560 100644
--- a/src/gallium/drivers/zink/zink_compiler.c
+++ b/src/gallium/drivers/zink/zink_compiler.c
@@ -5481,7 +5481,8 @@ zink_shader_create(struct zink_screen *screen, struct nir_shader *nir)
    NIR_PASS_V(nir, split_bitfields);
    NIR_PASS_V(nir, nir_lower_frexp); /* TODO: Use the spirv instructions for this. */
 
-   if (screen->info.have_EXT_shader_demote_to_helper_invocation) {
+   if (screen->info.have_EXT_shader_demote_to_helper_invocation &&
+       !screen->driver_workarounds.broken_demote) {
       NIR_PASS_V(nir, nir_lower_discard_or_demote,
                  screen->driconf.glsl_correct_derivatives_after_discard ||
                  nir->info.use_legacy_math_rules);
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index 115aaa56b21..160f394f9ad 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -726,8 +726,9 @@ zink_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
       return false;
 
    case PIPE_CAP_DEMOTE_TO_HELPER_INVOCATION:
-      return screen->spirv_version >= SPIRV_VERSION(1, 6) ||
-             screen->info.have_EXT_shader_demote_to_helper_invocation;
+      return (screen->spirv_version >= SPIRV_VERSION(1, 6) ||
+              screen->info.have_EXT_shader_demote_to_helper_invocation) &&
+             !screen->driver_workarounds.broken_demote;
 
    case PIPE_CAP_SAMPLE_SHADING:
       return screen->info.feats.features.sampleRateShading;
@@ -2889,6 +2890,16 @@ init_driver_workarounds(struct zink_screen *screen)
       break;
    }
 
+   /* these drivers do not implement demote properly */
+   switch (screen->info.driver_props.driverID) {
+   case VK_DRIVER_ID_IMAGINATION_PROPRIETARY:
+      screen->driver_workarounds.broken_demote = true;
+      break;
+   default:
+      screen->driver_workarounds.broken_demote = false;
+      break;
+   }
+
    /* When robust contexts are advertised but robustImageAccess2 is not available */
    screen->driver_workarounds.lower_robustImageAccess2 =
       !screen->info.rb2_feats.robustImageAccess2 &&
diff --git a/src/gallium/drivers/zink/zink_types.h b/src/gallium/drivers/zink/zink_types.h
index 466691e701c..37ba56aff14 100644
--- a/src/gallium/drivers/zink/zink_types.h
+++ b/src/gallium/drivers/zink/zink_types.h
@@ -1565,6 +1565,7 @@ struct zink_screen {
       unsigned z16_unscaled_bias;
       unsigned z24_unscaled_bias;
       bool broken_const;
+      bool broken_demote;
    } driver_workarounds;
 };
 
-- 
2.49.0

